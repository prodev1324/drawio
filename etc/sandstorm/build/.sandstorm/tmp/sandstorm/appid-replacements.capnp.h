// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: appid-replacements.capnp

#ifndef CAPNP_INCLUDED_a53cae3f717a1676_
#define CAPNP_INCLUDED_a53cae3f717a1676_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(888dcc6878baa07a);
CAPNP_DECLARE_SCHEMA(e6cb9296adfd17e0);

}  // namespace schemas
}  // namespace capnp

namespace sandstorm {
namespace spk {

struct AppIdReplacement {
  AppIdReplacement() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(888dcc6878baa07a, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

extern const ::capnp::_::ConstList< ::sandstorm::spk::AppIdReplacement> APP_ID_REPLACEMENT_LIST;
// =======================================================================================

class AppIdReplacement::Reader {
public:
  typedef AppIdReplacement Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasOriginal() const;
  inline  ::capnp::Text::Reader getOriginal() const;

  inline bool hasReplacement() const;
  inline  ::capnp::Text::Reader getReplacement() const;

  inline bool hasRevokeExceptPackageIds() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getRevokeExceptPackageIds() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AppIdReplacement::Builder {
public:
  typedef AppIdReplacement Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOriginal();
  inline  ::capnp::Text::Builder getOriginal();
  inline void setOriginal( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOriginal(unsigned int size);
  inline void adoptOriginal(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOriginal();

  inline bool hasReplacement();
  inline  ::capnp::Text::Builder getReplacement();
  inline void setReplacement( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReplacement(unsigned int size);
  inline void adoptReplacement(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReplacement();

  inline bool hasRevokeExceptPackageIds();
  inline  ::capnp::List< ::capnp::Text>::Builder getRevokeExceptPackageIds();
  inline void setRevokeExceptPackageIds( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setRevokeExceptPackageIds(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initRevokeExceptPackageIds(unsigned int size);
  inline void adoptRevokeExceptPackageIds(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownRevokeExceptPackageIds();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AppIdReplacement::Pipeline {
public:
  typedef AppIdReplacement Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool AppIdReplacement::Reader::hasOriginal() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool AppIdReplacement::Builder::hasOriginal() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AppIdReplacement::Reader::getOriginal() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AppIdReplacement::Builder::getOriginal() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void AppIdReplacement::Builder::setOriginal( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AppIdReplacement::Builder::initOriginal(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void AppIdReplacement::Builder::adoptOriginal(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AppIdReplacement::Builder::disownOriginal() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool AppIdReplacement::Reader::hasReplacement() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool AppIdReplacement::Builder::hasReplacement() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AppIdReplacement::Reader::getReplacement() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AppIdReplacement::Builder::getReplacement() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void AppIdReplacement::Builder::setReplacement( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AppIdReplacement::Builder::initReplacement(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void AppIdReplacement::Builder::adoptReplacement(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AppIdReplacement::Builder::disownReplacement() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool AppIdReplacement::Reader::hasRevokeExceptPackageIds() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool AppIdReplacement::Builder::hasRevokeExceptPackageIds() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader AppIdReplacement::Reader::getRevokeExceptPackageIds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder AppIdReplacement::Builder::getRevokeExceptPackageIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void AppIdReplacement::Builder::setRevokeExceptPackageIds( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void AppIdReplacement::Builder::setRevokeExceptPackageIds(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder AppIdReplacement::Builder::initRevokeExceptPackageIds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void AppIdReplacement::Builder::adoptRevokeExceptPackageIds(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> AppIdReplacement::Builder::disownRevokeExceptPackageIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_a53cae3f717a1676_
