// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: powerbox.capnp

#ifndef CAPNP_INCLUDED_f6c200ab14cd53e4_
#define CAPNP_INCLUDED_f6c200ab14cd53e4_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "util.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(edcf0fa3bfc71c58);
CAPNP_DECLARE_SCHEMA(be3d16a8df03c418);
CAPNP_DECLARE_SCHEMA(bb1afa45d25ce8de);
enum class MatchQuality_bb1afa45d25ce8de: uint16_t {
  ACCEPTABLE,
  PREFERRED,
  UNACCEPTABLE,
};
CAPNP_DECLARE_ENUM(MatchQuality, bb1afa45d25ce8de);
CAPNP_DECLARE_SCHEMA(a553a209bee32bec);

}  // namespace schemas
}  // namespace capnp

namespace sandstorm {

struct PowerboxDescriptor {
  PowerboxDescriptor() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Tag;
  typedef ::capnp::schemas::MatchQuality_bb1afa45d25ce8de MatchQuality;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(edcf0fa3bfc71c58, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct PowerboxDescriptor::Tag {
  Tag() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(be3d16a8df03c418, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct PowerboxDisplayInfo {
  PowerboxDisplayInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a553a209bee32bec, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class PowerboxDescriptor::Reader {
public:
  typedef PowerboxDescriptor Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasTags() const;
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>::Reader getTags() const;

  inline  ::sandstorm::PowerboxDescriptor::MatchQuality getQuality() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PowerboxDescriptor::Builder {
public:
  typedef PowerboxDescriptor Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTags();
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>::Builder getTags();
  inline void setTags( ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>::Reader value);
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>::Builder initTags(unsigned int size);
  inline void adoptTags(::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>> disownTags();

  inline  ::sandstorm::PowerboxDescriptor::MatchQuality getQuality();
  inline void setQuality( ::sandstorm::PowerboxDescriptor::MatchQuality value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PowerboxDescriptor::Pipeline {
public:
  typedef PowerboxDescriptor Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PowerboxDescriptor::Tag::Reader {
public:
  typedef Tag Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool hasValue() const;
  inline ::capnp::AnyPointer::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PowerboxDescriptor::Tag::Builder {
public:
  typedef Tag Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasValue();
  inline ::capnp::AnyPointer::Builder getValue();
  inline ::capnp::AnyPointer::Builder initValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PowerboxDescriptor::Tag::Pipeline {
public:
  typedef Tag Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PowerboxDisplayInfo::Reader {
public:
  typedef PowerboxDisplayInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasTitle() const;
  inline  ::sandstorm::LocalizedText::Reader getTitle() const;

  inline bool hasVerbPhrase() const;
  inline  ::sandstorm::LocalizedText::Reader getVerbPhrase() const;

  inline bool hasDescription() const;
  inline  ::sandstorm::LocalizedText::Reader getDescription() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PowerboxDisplayInfo::Builder {
public:
  typedef PowerboxDisplayInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTitle();
  inline  ::sandstorm::LocalizedText::Builder getTitle();
  inline void setTitle( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initTitle();
  inline void adoptTitle(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownTitle();

  inline bool hasVerbPhrase();
  inline  ::sandstorm::LocalizedText::Builder getVerbPhrase();
  inline void setVerbPhrase( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initVerbPhrase();
  inline void adoptVerbPhrase(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownVerbPhrase();

  inline bool hasDescription();
  inline  ::sandstorm::LocalizedText::Builder getDescription();
  inline void setDescription( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initDescription();
  inline void adoptDescription(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownDescription();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PowerboxDisplayInfo::Pipeline {
public:
  typedef PowerboxDisplayInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::LocalizedText::Pipeline getTitle();
  inline  ::sandstorm::LocalizedText::Pipeline getVerbPhrase();
  inline  ::sandstorm::LocalizedText::Pipeline getDescription();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool PowerboxDescriptor::Reader::hasTags() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool PowerboxDescriptor::Builder::hasTags() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>::Reader PowerboxDescriptor::Reader::getTags() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>::Builder PowerboxDescriptor::Builder::getTags() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void PowerboxDescriptor::Builder::setTags( ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>::Builder PowerboxDescriptor::Builder::initTags(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void PowerboxDescriptor::Builder::adoptTags(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>> PowerboxDescriptor::Builder::disownTags() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor::Tag>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::sandstorm::PowerboxDescriptor::MatchQuality PowerboxDescriptor::Reader::getQuality() const {
  return _reader.getDataField< ::sandstorm::PowerboxDescriptor::MatchQuality>(
      0 * ::capnp::ELEMENTS);
}

inline  ::sandstorm::PowerboxDescriptor::MatchQuality PowerboxDescriptor::Builder::getQuality() {
  return _builder.getDataField< ::sandstorm::PowerboxDescriptor::MatchQuality>(
      0 * ::capnp::ELEMENTS);
}
inline void PowerboxDescriptor::Builder::setQuality( ::sandstorm::PowerboxDescriptor::MatchQuality value) {
  _builder.setDataField< ::sandstorm::PowerboxDescriptor::MatchQuality>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t PowerboxDescriptor::Tag::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t PowerboxDescriptor::Tag::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void PowerboxDescriptor::Tag::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool PowerboxDescriptor::Tag::Reader::hasValue() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool PowerboxDescriptor::Tag::Builder::hasValue() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline ::capnp::AnyPointer::Reader PowerboxDescriptor::Tag::Reader::getValue() const {
  return ::capnp::AnyPointer::Reader(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder PowerboxDescriptor::Tag::Builder::getValue() {
  return ::capnp::AnyPointer::Builder(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder PowerboxDescriptor::Tag::Builder::initValue() {
  auto result = ::capnp::AnyPointer::Builder(
      _builder.getPointerField(0 * ::capnp::POINTERS));
  result.clear();
  return result;
}

inline bool PowerboxDisplayInfo::Reader::hasTitle() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool PowerboxDisplayInfo::Builder::hasTitle() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader PowerboxDisplayInfo::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder PowerboxDisplayInfo::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline PowerboxDisplayInfo::Pipeline::getTitle() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PowerboxDisplayInfo::Builder::setTitle( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder PowerboxDisplayInfo::Builder::initTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void PowerboxDisplayInfo::Builder::adoptTitle(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> PowerboxDisplayInfo::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool PowerboxDisplayInfo::Reader::hasVerbPhrase() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool PowerboxDisplayInfo::Builder::hasVerbPhrase() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader PowerboxDisplayInfo::Reader::getVerbPhrase() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder PowerboxDisplayInfo::Builder::getVerbPhrase() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline PowerboxDisplayInfo::Pipeline::getVerbPhrase() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void PowerboxDisplayInfo::Builder::setVerbPhrase( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder PowerboxDisplayInfo::Builder::initVerbPhrase() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void PowerboxDisplayInfo::Builder::adoptVerbPhrase(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> PowerboxDisplayInfo::Builder::disownVerbPhrase() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool PowerboxDisplayInfo::Reader::hasDescription() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool PowerboxDisplayInfo::Builder::hasDescription() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader PowerboxDisplayInfo::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder PowerboxDisplayInfo::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline PowerboxDisplayInfo::Pipeline::getDescription() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void PowerboxDisplayInfo::Builder::setDescription( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder PowerboxDisplayInfo::Builder::initDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void PowerboxDisplayInfo::Builder::adoptDescription(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> PowerboxDisplayInfo::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

}  // namespace

#endif  // CAPNP_INCLUDED_f6c200ab14cd53e4_
