// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: sandstorm-http-bridge.capnp

#include "sandstorm-http-bridge.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<58> b_ad678f0d09bdd98a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    138, 217, 189,   9,  13, 143, 103, 173,
     38,   0,   0,   0,   3,   0,   0,   0,
     30, 187,  50, 104,  35, 125,  19, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 199,   0,   0,   0,
    185,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115,  97, 110, 100, 115, 116,
    111, 114, 109,  45, 104, 116, 116, 112,
     45,  98, 114, 105, 100, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83,  97,
    110, 100, 115, 116, 111, 114, 109,  72,
    116, 116, 112,  66, 114, 105, 100, 103,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 197, 100, 159, 197, 144, 212, 134,
    172,  73, 214,  59,  39, 254, 116, 193,
     81,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    250, 163,  99,  56, 250, 128, 164, 194,
    189, 141, 228,  34,  51, 250,  79, 184,
     61,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    191, 134, 124, 148,   1, 130,  13, 147,
    105, 227, 178, 154, 126, 106, 186, 194,
     45,   0,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  65, 112, 105,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  83, 101, 115, 115, 105,
    111, 110,  67, 111, 110, 116, 101, 120,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  83,  97, 118, 101, 100,
     73, 100, 101, 110, 116, 105, 116, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ad678f0d09bdd98a = b_ad678f0d09bdd98a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ad678f0d09bdd98a[] = {
  &s_86d490c59f64c564,
  &s_930d8201947c86bf,
  &s_b84ffa3322e48dbd,
  &s_c174fe273bd649ac,
  &s_c2a480fa3863a3fa,
  &s_c2ba6a7e9ab2e369,
};
static const uint16_t m_ad678f0d09bdd98a[] = {0, 2, 1};
const ::capnp::_::RawSchema s_ad678f0d09bdd98a = {
  0xad678f0d09bdd98a, b_ad678f0d09bdd98a.words, 58, d_ad678f0d09bdd98a, m_ad678f0d09bdd98a,
  6, 3, nullptr, nullptr, nullptr, { &s_ad678f0d09bdd98a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<23> b_86d490c59f64c564 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    100, 197, 100, 159, 197, 144, 212, 134,
     58,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115,  97, 110, 100, 115, 116,
    111, 114, 109,  45, 104, 116, 116, 112,
     45,  98, 114, 105, 100, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83,  97,
    110, 100, 115, 116, 111, 114, 109,  72,
    116, 116, 112,  66, 114, 105, 100, 103,
    101,  46, 103, 101, 116,  83,  97, 110,
    100, 115, 116, 111, 114, 109,  65, 112,
    105,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_86d490c59f64c564 = b_86d490c59f64c564.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_86d490c59f64c564 = {
  0x86d490c59f64c564, b_86d490c59f64c564.words, 23, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_86d490c59f64c564, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_c174fe273bd649ac = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    172,  73, 214,  59,  39, 254, 116, 193,
     58,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115,  97, 110, 100, 115, 116,
    111, 114, 109,  45, 104, 116, 116, 112,
     45,  98, 114, 105, 100, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83,  97,
    110, 100, 115, 116, 111, 114, 109,  72,
    116, 116, 112,  66, 114, 105, 100, 103,
    101,  46, 103, 101, 116,  83,  97, 110,
    100, 115, 116, 111, 114, 109,  65, 112,
    105,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97, 112, 105,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    203,   2, 112,  42, 207,  79, 101, 210,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c174fe273bd649ac = b_c174fe273bd649ac.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c174fe273bd649ac[] = {
  &s_d2654fcf2a7002cb,
};
static const uint16_t m_c174fe273bd649ac[] = {0};
static const uint16_t i_c174fe273bd649ac[] = {0};
const ::capnp::_::RawSchema s_c174fe273bd649ac = {
  0xc174fe273bd649ac, b_c174fe273bd649ac.words, 39, d_c174fe273bd649ac, m_c174fe273bd649ac,
  1, 1, i_c174fe273bd649ac, nullptr, nullptr, { &s_c174fe273bd649ac, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_c2a480fa3863a3fa = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    250, 163,  99,  56, 250, 128, 164, 194,
     58,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115,  97, 110, 100, 115, 116,
    111, 114, 109,  45, 104, 116, 116, 112,
     45,  98, 114, 105, 100, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83,  97,
    110, 100, 115, 116, 111, 114, 109,  72,
    116, 116, 112,  66, 114, 105, 100, 103,
    101,  46, 103, 101, 116,  83, 101, 115,
    115, 105, 111, 110,  67, 111, 110, 116,
    101, 120, 116,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c2a480fa3863a3fa = b_c2a480fa3863a3fa.words;
#if !CAPNP_LITE
static const uint16_t m_c2a480fa3863a3fa[] = {0};
static const uint16_t i_c2a480fa3863a3fa[] = {0};
const ::capnp::_::RawSchema s_c2a480fa3863a3fa = {
  0xc2a480fa3863a3fa, b_c2a480fa3863a3fa.words, 39, nullptr, m_c2a480fa3863a3fa,
  0, 1, i_c2a480fa3863a3fa, nullptr, nullptr, { &s_c2a480fa3863a3fa, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_b84ffa3322e48dbd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    189, 141, 228,  34,  51, 250,  79, 184,
     58,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115,  97, 110, 100, 115, 116,
    111, 114, 109,  45, 104, 116, 116, 112,
     45,  98, 114, 105, 100, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83,  97,
    110, 100, 115, 116, 111, 114, 109,  72,
    116, 116, 112,  66, 114, 105, 100, 103,
    101,  46, 103, 101, 116,  83, 101, 115,
    115, 105, 111, 110,  67, 111, 110, 116,
    101, 120, 116,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     54, 243,  99,  90,  29,  64,  62, 191,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b84ffa3322e48dbd = b_b84ffa3322e48dbd.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b84ffa3322e48dbd[] = {
  &s_bf3e401d5a63f336,
};
static const uint16_t m_b84ffa3322e48dbd[] = {0};
static const uint16_t i_b84ffa3322e48dbd[] = {0};
const ::capnp::_::RawSchema s_b84ffa3322e48dbd = {
  0xb84ffa3322e48dbd, b_b84ffa3322e48dbd.words, 39, d_b84ffa3322e48dbd, m_b84ffa3322e48dbd,
  1, 1, i_b84ffa3322e48dbd, nullptr, nullptr, { &s_b84ffa3322e48dbd, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_930d8201947c86bf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    191, 134, 124, 148,   1, 130,  13, 147,
     58,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115,  97, 110, 100, 115, 116,
    111, 114, 109,  45, 104, 116, 116, 112,
     45,  98, 114, 105, 100, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83,  97,
    110, 100, 115, 116, 111, 114, 109,  72,
    116, 116, 112,  66, 114, 105, 100, 103,
    101,  46, 103, 101, 116,  83,  97, 118,
    101, 100,  73, 100, 101, 110, 116, 105,
    116, 121,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    105, 100, 101, 110, 116, 105, 116, 121,
     73, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_930d8201947c86bf = b_930d8201947c86bf.words;
#if !CAPNP_LITE
static const uint16_t m_930d8201947c86bf[] = {0};
static const uint16_t i_930d8201947c86bf[] = {0};
const ::capnp::_::RawSchema s_930d8201947c86bf = {
  0x930d8201947c86bf, b_930d8201947c86bf.words, 40, nullptr, m_930d8201947c86bf,
  0, 1, i_930d8201947c86bf, nullptr, nullptr, { &s_930d8201947c86bf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_c2ba6a7e9ab2e369 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    105, 227, 178, 154, 126, 106, 186, 194,
     58,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115,  97, 110, 100, 115, 116,
    111, 114, 109,  45, 104, 116, 116, 112,
     45,  98, 114, 105, 100, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83,  97,
    110, 100, 115, 116, 111, 114, 109,  72,
    116, 116, 112,  66, 114, 105, 100, 103,
    101,  46, 103, 101, 116,  83,  97, 118,
    101, 100,  73, 100, 101, 110, 116, 105,
    116, 121,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    105, 100, 101, 110, 116, 105, 116, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     24, 221,  81, 169, 122, 152, 132, 192,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c2ba6a7e9ab2e369 = b_c2ba6a7e9ab2e369.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c2ba6a7e9ab2e369[] = {
  &s_c084987aa951dd18,
};
static const uint16_t m_c2ba6a7e9ab2e369[] = {0};
static const uint16_t i_c2ba6a7e9ab2e369[] = {0};
const ::capnp::_::RawSchema s_c2ba6a7e9ab2e369 = {
  0xc2ba6a7e9ab2e369, b_c2ba6a7e9ab2e369.words, 40, d_c2ba6a7e9ab2e369, m_c2ba6a7e9ab2e369,
  1, 1, i_c2ba6a7e9ab2e369, nullptr, nullptr, { &s_c2ba6a7e9ab2e369, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace sandstorm {

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::SandstormHttpBridge::GetSandstormApiParams,  ::sandstorm::SandstormHttpBridge::GetSandstormApiResults>
SandstormHttpBridge::Client::getSandstormApiRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::SandstormHttpBridge::GetSandstormApiParams,  ::sandstorm::SandstormHttpBridge::GetSandstormApiResults>(
      0xad678f0d09bdd98aull, 0, sizeHint);
}
::kj::Promise<void> SandstormHttpBridge::Server::getSandstormApi(GetSandstormApiContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/sandstorm-http-bridge.capnp:SandstormHttpBridge", "getSandstormApi",
      0xad678f0d09bdd98aull, 0);
}
::capnp::Request< ::sandstorm::SandstormHttpBridge::GetSessionContextParams,  ::sandstorm::SandstormHttpBridge::GetSessionContextResults>
SandstormHttpBridge::Client::getSessionContextRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::SandstormHttpBridge::GetSessionContextParams,  ::sandstorm::SandstormHttpBridge::GetSessionContextResults>(
      0xad678f0d09bdd98aull, 1, sizeHint);
}
::kj::Promise<void> SandstormHttpBridge::Server::getSessionContext(GetSessionContextContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/sandstorm-http-bridge.capnp:SandstormHttpBridge", "getSessionContext",
      0xad678f0d09bdd98aull, 1);
}
::capnp::Request< ::sandstorm::SandstormHttpBridge::GetSavedIdentityParams,  ::sandstorm::SandstormHttpBridge::GetSavedIdentityResults>
SandstormHttpBridge::Client::getSavedIdentityRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::SandstormHttpBridge::GetSavedIdentityParams,  ::sandstorm::SandstormHttpBridge::GetSavedIdentityResults>(
      0xad678f0d09bdd98aull, 2, sizeHint);
}
::kj::Promise<void> SandstormHttpBridge::Server::getSavedIdentity(GetSavedIdentityContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/sandstorm-http-bridge.capnp:SandstormHttpBridge", "getSavedIdentity",
      0xad678f0d09bdd98aull, 2);
}
::kj::Promise<void> SandstormHttpBridge::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xad678f0d09bdd98aull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/sandstorm-http-bridge.capnp:SandstormHttpBridge", interfaceId);
  }
}
::kj::Promise<void> SandstormHttpBridge::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return getSandstormApi(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::SandstormHttpBridge::GetSandstormApiParams,  ::sandstorm::SandstormHttpBridge::GetSandstormApiResults>(context));
    case 1:
      return getSessionContext(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::SandstormHttpBridge::GetSessionContextParams,  ::sandstorm::SandstormHttpBridge::GetSessionContextResults>(context));
    case 2:
      return getSavedIdentity(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::SandstormHttpBridge::GetSavedIdentityParams,  ::sandstorm::SandstormHttpBridge::GetSavedIdentityResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/sandstorm-http-bridge.capnp:SandstormHttpBridge",
          0xad678f0d09bdd98aull, methodId);
  }
}
#endif  // !CAPNP_LITE

// SandstormHttpBridge
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormHttpBridge::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormHttpBridge::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormHttpBridge::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormHttpBridge::GetSandstormApiParams
constexpr uint16_t SandstormHttpBridge::GetSandstormApiParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormHttpBridge::GetSandstormApiParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormHttpBridge::GetSandstormApiParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormHttpBridge::GetSandstormApiParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormHttpBridge::GetSandstormApiParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormHttpBridge::GetSandstormApiResults
constexpr uint16_t SandstormHttpBridge::GetSandstormApiResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormHttpBridge::GetSandstormApiResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormHttpBridge::GetSandstormApiResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormHttpBridge::GetSandstormApiResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormHttpBridge::GetSandstormApiResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormHttpBridge::GetSessionContextParams
constexpr uint16_t SandstormHttpBridge::GetSessionContextParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormHttpBridge::GetSessionContextParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormHttpBridge::GetSessionContextParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormHttpBridge::GetSessionContextParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormHttpBridge::GetSessionContextParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormHttpBridge::GetSessionContextResults
constexpr uint16_t SandstormHttpBridge::GetSessionContextResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormHttpBridge::GetSessionContextResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormHttpBridge::GetSessionContextResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormHttpBridge::GetSessionContextResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormHttpBridge::GetSessionContextResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormHttpBridge::GetSavedIdentityParams
constexpr uint16_t SandstormHttpBridge::GetSavedIdentityParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormHttpBridge::GetSavedIdentityParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormHttpBridge::GetSavedIdentityParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormHttpBridge::GetSavedIdentityParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormHttpBridge::GetSavedIdentityParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormHttpBridge::GetSavedIdentityResults
constexpr uint16_t SandstormHttpBridge::GetSavedIdentityResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormHttpBridge::GetSavedIdentityResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormHttpBridge::GetSavedIdentityResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormHttpBridge::GetSavedIdentityResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormHttpBridge::GetSavedIdentityResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE


}  // namespace

