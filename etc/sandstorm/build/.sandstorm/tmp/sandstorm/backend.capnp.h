// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: backend.capnp

#ifndef CAPNP_INCLUDED_dcbc0d702b1b47a5_
#define CAPNP_INCLUDED_dcbc0d702b1b47a5_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "grain.capnp.h"
#include "package.capnp.h"
#include "supervisor.capnp.h"
#include "util.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c1b0e9713ac1ad4f);
CAPNP_DECLARE_SCHEMA(835c613045824121);
CAPNP_DECLARE_SCHEMA(b481d35d0da2713c);
CAPNP_DECLARE_SCHEMA(86ca17d397d72d2b);
CAPNP_DECLARE_SCHEMA(a019dbe64a38e85d);
CAPNP_DECLARE_SCHEMA(adfbf90ef9c01c9a);
CAPNP_DECLARE_SCHEMA(ac9557813c4f78cf);
CAPNP_DECLARE_SCHEMA(e4d3afafc9fe1acf);
CAPNP_DECLARE_SCHEMA(ea0b2836fb52aee9);
CAPNP_DECLARE_SCHEMA(d0669675481ed533);
CAPNP_DECLARE_SCHEMA(9aa99e08dd1161ff);
CAPNP_DECLARE_SCHEMA(a98fd02dd93dd26b);
CAPNP_DECLARE_SCHEMA(8829b2e76d8325f1);
CAPNP_DECLARE_SCHEMA(fb4cd9916f42104c);
CAPNP_DECLARE_SCHEMA(ef241fd6058030cf);
CAPNP_DECLARE_SCHEMA(b61fc18674ca994f);
CAPNP_DECLARE_SCHEMA(ea9f82a07e11b6d7);
CAPNP_DECLARE_SCHEMA(87a6a96b0a4edd21);
CAPNP_DECLARE_SCHEMA(cd9c9fab5f637827);
CAPNP_DECLARE_SCHEMA(9d88f29f0318d4bb);
CAPNP_DECLARE_SCHEMA(8b790707193ea7ff);
CAPNP_DECLARE_SCHEMA(f2ccecff0178227b);
CAPNP_DECLARE_SCHEMA(bc51d6bc865a8fcf);
CAPNP_DECLARE_SCHEMA(916d32f140971035);
CAPNP_DECLARE_SCHEMA(9e90498484bab87d);
CAPNP_DECLARE_SCHEMA(d0d6ed6a5ed70e62);
CAPNP_DECLARE_SCHEMA(af88ad00c801b00d);
CAPNP_DECLARE_SCHEMA(aaef1f8c301b865d);
CAPNP_DECLARE_SCHEMA(a1c73384bc38ab4b);
CAPNP_DECLARE_SCHEMA(cce40aee6005d381);
CAPNP_DECLARE_SCHEMA(86362c69f5c42997);
CAPNP_DECLARE_SCHEMA(fa7238e0a9345914);
CAPNP_DECLARE_SCHEMA(9145c7ea308343d9);
CAPNP_DECLARE_SCHEMA(cb56f444d1311800);
CAPNP_DECLARE_SCHEMA(e3a9cebde9177d60);
CAPNP_DECLARE_SCHEMA(e06fe4e0d4e93178);
CAPNP_DECLARE_SCHEMA(809d3d6d45c4c37d);
CAPNP_DECLARE_SCHEMA(f0832c3f66256d2b);
CAPNP_DECLARE_SCHEMA(e8ac8c6560747234);
CAPNP_DECLARE_SCHEMA(ea75b020e3e6c12a);

}  // namespace schemas
}  // namespace capnp

namespace sandstorm {

struct Backend {
  Backend() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  static const ::capnp::_::ConstText<29> SOCKET_PATH;
  struct PackageUploadStream;
  struct StartGrainParams;
  struct StartGrainResults;
  struct GetGrainParams;
  struct GetGrainResults;
  struct DeleteGrainParams;
  struct DeleteGrainResults;
  struct InstallPackageParams;
  struct InstallPackageResults;
  struct TryGetPackageParams;
  struct TryGetPackageResults;
  struct DeletePackageParams;
  struct DeletePackageResults;
  struct BackupGrainParams;
  struct BackupGrainResults;
  struct RestoreGrainParams;
  struct RestoreGrainResults;
  struct UploadBackupParams;
  struct UploadBackupResults;
  struct DownloadBackupParams;
  struct DownloadBackupResults;
  struct DeleteBackupParams;
  struct DeleteBackupResults;
  struct GetUserStorageUsageParams;
  struct GetUserStorageUsageResults;
  struct TransferGrainParams;
  struct TransferGrainResults;
  struct DeleteUserParams;
  struct DeleteUserResults;
  struct PingParams;
  struct PingResults;
  struct GetGrainStorageUsageParams;
  struct GetGrainStorageUsageResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(c1b0e9713ac1ad4f)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct Backend::PackageUploadStream {
  PackageUploadStream() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct SaveAsParams;
  struct SaveAsResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(b481d35d0da2713c)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct Backend::PackageUploadStream::SaveAsParams {
  SaveAsParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86ca17d397d72d2b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::PackageUploadStream::SaveAsResults {
  SaveAsResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a019dbe64a38e85d, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::StartGrainParams {
  StartGrainParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(adfbf90ef9c01c9a, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::StartGrainResults {
  StartGrainResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ac9557813c4f78cf, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::GetGrainParams {
  GetGrainParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e4d3afafc9fe1acf, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::GetGrainResults {
  GetGrainResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea0b2836fb52aee9, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::DeleteGrainParams {
  DeleteGrainParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0669675481ed533, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::DeleteGrainResults {
  DeleteGrainResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9aa99e08dd1161ff, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::InstallPackageParams {
  InstallPackageParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a98fd02dd93dd26b, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::InstallPackageResults {
  InstallPackageResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8829b2e76d8325f1, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::TryGetPackageParams {
  TryGetPackageParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fb4cd9916f42104c, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::TryGetPackageResults {
  TryGetPackageResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ef241fd6058030cf, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::DeletePackageParams {
  DeletePackageParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b61fc18674ca994f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::DeletePackageResults {
  DeletePackageResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea9f82a07e11b6d7, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::BackupGrainParams {
  BackupGrainParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(87a6a96b0a4edd21, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::BackupGrainResults {
  BackupGrainResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd9c9fab5f637827, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::RestoreGrainParams {
  RestoreGrainParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9d88f29f0318d4bb, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::RestoreGrainResults {
  RestoreGrainResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8b790707193ea7ff, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::UploadBackupParams {
  UploadBackupParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f2ccecff0178227b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::UploadBackupResults {
  UploadBackupResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc51d6bc865a8fcf, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::DownloadBackupParams {
  DownloadBackupParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(916d32f140971035, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::DownloadBackupResults {
  DownloadBackupResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9e90498484bab87d, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::DeleteBackupParams {
  DeleteBackupParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0d6ed6a5ed70e62, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::DeleteBackupResults {
  DeleteBackupResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(af88ad00c801b00d, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::GetUserStorageUsageParams {
  GetUserStorageUsageParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aaef1f8c301b865d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::GetUserStorageUsageResults {
  GetUserStorageUsageResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1c73384bc38ab4b, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::TransferGrainParams {
  TransferGrainParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cce40aee6005d381, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::TransferGrainResults {
  TransferGrainResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86362c69f5c42997, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::DeleteUserParams {
  DeleteUserParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa7238e0a9345914, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::DeleteUserResults {
  DeleteUserResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9145c7ea308343d9, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::PingParams {
  PingParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb56f444d1311800, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::PingResults {
  PingResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3a9cebde9177d60, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::GetGrainStorageUsageParams {
  GetGrainStorageUsageParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e06fe4e0d4e93178, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Backend::GetGrainStorageUsageResults {
  GetGrainStorageUsageResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(809d3d6d45c4c37d, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCoreFactory {
  SandstormCoreFactory() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct GetSandstormCoreParams;
  struct GetSandstormCoreResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(f0832c3f66256d2b)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct SandstormCoreFactory::GetSandstormCoreParams {
  GetSandstormCoreParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e8ac8c6560747234, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCoreFactory::GetSandstormCoreResults {
  GetSandstormCoreResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea75b020e3e6c12a, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

#if !CAPNP_LITE
class Backend::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef Backend Calls;
  typedef Backend Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::Backend::StartGrainParams,  ::sandstorm::Backend::StartGrainResults> startGrainRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Backend::GetGrainParams,  ::sandstorm::Backend::GetGrainResults> getGrainRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Backend::DeleteGrainParams,  ::sandstorm::Backend::DeleteGrainResults> deleteGrainRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Backend::InstallPackageParams,  ::sandstorm::Backend::InstallPackageResults> installPackageRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Backend::TryGetPackageParams,  ::sandstorm::Backend::TryGetPackageResults> tryGetPackageRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Backend::DeletePackageParams,  ::sandstorm::Backend::DeletePackageResults> deletePackageRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Backend::BackupGrainParams,  ::sandstorm::Backend::BackupGrainResults> backupGrainRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Backend::RestoreGrainParams,  ::sandstorm::Backend::RestoreGrainResults> restoreGrainRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Backend::UploadBackupParams,  ::sandstorm::Backend::UploadBackupResults> uploadBackupRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Backend::DownloadBackupParams,  ::sandstorm::Backend::DownloadBackupResults> downloadBackupRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Backend::DeleteBackupParams,  ::sandstorm::Backend::DeleteBackupResults> deleteBackupRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Backend::GetUserStorageUsageParams,  ::sandstorm::Backend::GetUserStorageUsageResults> getUserStorageUsageRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Backend::TransferGrainParams,  ::sandstorm::Backend::TransferGrainResults> transferGrainRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Backend::DeleteUserParams,  ::sandstorm::Backend::DeleteUserResults> deleteUserRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Backend::PingParams,  ::sandstorm::Backend::PingResults> pingRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Backend::GetGrainStorageUsageParams,  ::sandstorm::Backend::GetGrainStorageUsageResults> getGrainStorageUsageRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class Backend::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef Backend Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::Backend::StartGrainParams StartGrainParams;
  typedef  ::sandstorm::Backend::StartGrainResults StartGrainResults;
  typedef ::capnp::CallContext<StartGrainParams, StartGrainResults> StartGrainContext;
  virtual ::kj::Promise<void> startGrain(StartGrainContext context);
  typedef  ::sandstorm::Backend::GetGrainParams GetGrainParams;
  typedef  ::sandstorm::Backend::GetGrainResults GetGrainResults;
  typedef ::capnp::CallContext<GetGrainParams, GetGrainResults> GetGrainContext;
  virtual ::kj::Promise<void> getGrain(GetGrainContext context);
  typedef  ::sandstorm::Backend::DeleteGrainParams DeleteGrainParams;
  typedef  ::sandstorm::Backend::DeleteGrainResults DeleteGrainResults;
  typedef ::capnp::CallContext<DeleteGrainParams, DeleteGrainResults> DeleteGrainContext;
  virtual ::kj::Promise<void> deleteGrain(DeleteGrainContext context);
  typedef  ::sandstorm::Backend::InstallPackageParams InstallPackageParams;
  typedef  ::sandstorm::Backend::InstallPackageResults InstallPackageResults;
  typedef ::capnp::CallContext<InstallPackageParams, InstallPackageResults> InstallPackageContext;
  virtual ::kj::Promise<void> installPackage(InstallPackageContext context);
  typedef  ::sandstorm::Backend::TryGetPackageParams TryGetPackageParams;
  typedef  ::sandstorm::Backend::TryGetPackageResults TryGetPackageResults;
  typedef ::capnp::CallContext<TryGetPackageParams, TryGetPackageResults> TryGetPackageContext;
  virtual ::kj::Promise<void> tryGetPackage(TryGetPackageContext context);
  typedef  ::sandstorm::Backend::DeletePackageParams DeletePackageParams;
  typedef  ::sandstorm::Backend::DeletePackageResults DeletePackageResults;
  typedef ::capnp::CallContext<DeletePackageParams, DeletePackageResults> DeletePackageContext;
  virtual ::kj::Promise<void> deletePackage(DeletePackageContext context);
  typedef  ::sandstorm::Backend::BackupGrainParams BackupGrainParams;
  typedef  ::sandstorm::Backend::BackupGrainResults BackupGrainResults;
  typedef ::capnp::CallContext<BackupGrainParams, BackupGrainResults> BackupGrainContext;
  virtual ::kj::Promise<void> backupGrain(BackupGrainContext context);
  typedef  ::sandstorm::Backend::RestoreGrainParams RestoreGrainParams;
  typedef  ::sandstorm::Backend::RestoreGrainResults RestoreGrainResults;
  typedef ::capnp::CallContext<RestoreGrainParams, RestoreGrainResults> RestoreGrainContext;
  virtual ::kj::Promise<void> restoreGrain(RestoreGrainContext context);
  typedef  ::sandstorm::Backend::UploadBackupParams UploadBackupParams;
  typedef  ::sandstorm::Backend::UploadBackupResults UploadBackupResults;
  typedef ::capnp::CallContext<UploadBackupParams, UploadBackupResults> UploadBackupContext;
  virtual ::kj::Promise<void> uploadBackup(UploadBackupContext context);
  typedef  ::sandstorm::Backend::DownloadBackupParams DownloadBackupParams;
  typedef  ::sandstorm::Backend::DownloadBackupResults DownloadBackupResults;
  typedef ::capnp::CallContext<DownloadBackupParams, DownloadBackupResults> DownloadBackupContext;
  virtual ::kj::Promise<void> downloadBackup(DownloadBackupContext context);
  typedef  ::sandstorm::Backend::DeleteBackupParams DeleteBackupParams;
  typedef  ::sandstorm::Backend::DeleteBackupResults DeleteBackupResults;
  typedef ::capnp::CallContext<DeleteBackupParams, DeleteBackupResults> DeleteBackupContext;
  virtual ::kj::Promise<void> deleteBackup(DeleteBackupContext context);
  typedef  ::sandstorm::Backend::GetUserStorageUsageParams GetUserStorageUsageParams;
  typedef  ::sandstorm::Backend::GetUserStorageUsageResults GetUserStorageUsageResults;
  typedef ::capnp::CallContext<GetUserStorageUsageParams, GetUserStorageUsageResults> GetUserStorageUsageContext;
  virtual ::kj::Promise<void> getUserStorageUsage(GetUserStorageUsageContext context);
  typedef  ::sandstorm::Backend::TransferGrainParams TransferGrainParams;
  typedef  ::sandstorm::Backend::TransferGrainResults TransferGrainResults;
  typedef ::capnp::CallContext<TransferGrainParams, TransferGrainResults> TransferGrainContext;
  virtual ::kj::Promise<void> transferGrain(TransferGrainContext context);
  typedef  ::sandstorm::Backend::DeleteUserParams DeleteUserParams;
  typedef  ::sandstorm::Backend::DeleteUserResults DeleteUserResults;
  typedef ::capnp::CallContext<DeleteUserParams, DeleteUserResults> DeleteUserContext;
  virtual ::kj::Promise<void> deleteUser(DeleteUserContext context);
  typedef  ::sandstorm::Backend::PingParams PingParams;
  typedef  ::sandstorm::Backend::PingResults PingResults;
  typedef ::capnp::CallContext<PingParams, PingResults> PingContext;
  virtual ::kj::Promise<void> ping(PingContext context);
  typedef  ::sandstorm::Backend::GetGrainStorageUsageParams GetGrainStorageUsageParams;
  typedef  ::sandstorm::Backend::GetGrainStorageUsageResults GetGrainStorageUsageResults;
  typedef ::capnp::CallContext<GetGrainStorageUsageParams, GetGrainStorageUsageResults> GetGrainStorageUsageContext;
  virtual ::kj::Promise<void> getGrainStorageUsage(GetGrainStorageUsageContext context);

  inline  ::sandstorm::Backend::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::Backend>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class Backend::PackageUploadStream::Client
    : public virtual ::capnp::Capability::Client,
      public virtual  ::sandstorm::ByteStream::Client {
public:
  typedef Backend::PackageUploadStream Calls;
  typedef Backend::PackageUploadStream Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::Backend::PackageUploadStream::SaveAsParams,  ::sandstorm::Backend::PackageUploadStream::SaveAsResults> saveAsRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class Backend::PackageUploadStream::Server
    : public virtual ::capnp::Capability::Server,
      public virtual  ::sandstorm::ByteStream::Server {
public:
  typedef Backend::PackageUploadStream Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::Backend::PackageUploadStream::SaveAsParams SaveAsParams;
  typedef  ::sandstorm::Backend::PackageUploadStream::SaveAsResults SaveAsResults;
  typedef ::capnp::CallContext<SaveAsParams, SaveAsResults> SaveAsContext;
  virtual ::kj::Promise<void> saveAs(SaveAsContext context);

  inline  ::sandstorm::Backend::PackageUploadStream::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::Backend::PackageUploadStream>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class Backend::PackageUploadStream::SaveAsParams::Reader {
public:
  typedef SaveAsParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPackageId() const;
  inline  ::capnp::Text::Reader getPackageId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::PackageUploadStream::SaveAsParams::Builder {
public:
  typedef SaveAsParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPackageId();
  inline  ::capnp::Text::Builder getPackageId();
  inline void setPackageId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPackageId(unsigned int size);
  inline void adoptPackageId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPackageId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::PackageUploadStream::SaveAsParams::Pipeline {
public:
  typedef SaveAsParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::PackageUploadStream::SaveAsResults::Reader {
public:
  typedef SaveAsResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAppId() const;
  inline  ::capnp::Text::Reader getAppId() const;

  inline bool hasManifest() const;
  inline  ::sandstorm::spk::Manifest::Reader getManifest() const;

  inline bool hasAuthorPgpKeyFingerprint() const;
  inline  ::capnp::Text::Reader getAuthorPgpKeyFingerprint() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::PackageUploadStream::SaveAsResults::Builder {
public:
  typedef SaveAsResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppId();
  inline  ::capnp::Text::Builder getAppId();
  inline void setAppId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppId(unsigned int size);
  inline void adoptAppId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppId();

  inline bool hasManifest();
  inline  ::sandstorm::spk::Manifest::Builder getManifest();
  inline void setManifest( ::sandstorm::spk::Manifest::Reader value);
  inline  ::sandstorm::spk::Manifest::Builder initManifest();
  inline void adoptManifest(::capnp::Orphan< ::sandstorm::spk::Manifest>&& value);
  inline ::capnp::Orphan< ::sandstorm::spk::Manifest> disownManifest();

  inline bool hasAuthorPgpKeyFingerprint();
  inline  ::capnp::Text::Builder getAuthorPgpKeyFingerprint();
  inline void setAuthorPgpKeyFingerprint( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAuthorPgpKeyFingerprint(unsigned int size);
  inline void adoptAuthorPgpKeyFingerprint(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAuthorPgpKeyFingerprint();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::PackageUploadStream::SaveAsResults::Pipeline {
public:
  typedef SaveAsResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::spk::Manifest::Pipeline getManifest();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::StartGrainParams::Reader {
public:
  typedef StartGrainParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasOwnerId() const;
  inline  ::capnp::Text::Reader getOwnerId() const;

  inline bool hasGrainId() const;
  inline  ::capnp::Text::Reader getGrainId() const;

  inline bool hasPackageId() const;
  inline  ::capnp::Text::Reader getPackageId() const;

  inline bool hasCommand() const;
  inline  ::sandstorm::spk::Manifest::Command::Reader getCommand() const;

  inline bool getIsNew() const;

  inline bool getDevMode() const;

  inline bool getMountProc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::StartGrainParams::Builder {
public:
  typedef StartGrainParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOwnerId();
  inline  ::capnp::Text::Builder getOwnerId();
  inline void setOwnerId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOwnerId(unsigned int size);
  inline void adoptOwnerId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOwnerId();

  inline bool hasGrainId();
  inline  ::capnp::Text::Builder getGrainId();
  inline void setGrainId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrainId(unsigned int size);
  inline void adoptGrainId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrainId();

  inline bool hasPackageId();
  inline  ::capnp::Text::Builder getPackageId();
  inline void setPackageId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPackageId(unsigned int size);
  inline void adoptPackageId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPackageId();

  inline bool hasCommand();
  inline  ::sandstorm::spk::Manifest::Command::Builder getCommand();
  inline void setCommand( ::sandstorm::spk::Manifest::Command::Reader value);
  inline  ::sandstorm::spk::Manifest::Command::Builder initCommand();
  inline void adoptCommand(::capnp::Orphan< ::sandstorm::spk::Manifest::Command>&& value);
  inline ::capnp::Orphan< ::sandstorm::spk::Manifest::Command> disownCommand();

  inline bool getIsNew();
  inline void setIsNew(bool value);

  inline bool getDevMode();
  inline void setDevMode(bool value);

  inline bool getMountProc();
  inline void setMountProc(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::StartGrainParams::Pipeline {
public:
  typedef StartGrainParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::spk::Manifest::Command::Pipeline getCommand();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::StartGrainResults::Reader {
public:
  typedef StartGrainResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasSupervisor() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Supervisor::Client getSupervisor() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::StartGrainResults::Builder {
public:
  typedef StartGrainResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSupervisor();
#if !CAPNP_LITE
  inline  ::sandstorm::Supervisor::Client getSupervisor();
  inline void setSupervisor( ::sandstorm::Supervisor::Client&& value);
  inline void setSupervisor( ::sandstorm::Supervisor::Client& value);
  inline void adoptSupervisor(::capnp::Orphan< ::sandstorm::Supervisor>&& value);
  inline ::capnp::Orphan< ::sandstorm::Supervisor> disownSupervisor();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::StartGrainResults::Pipeline {
public:
  typedef StartGrainResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Supervisor::Client getSupervisor();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::GetGrainParams::Reader {
public:
  typedef GetGrainParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasOwnerId() const;
  inline  ::capnp::Text::Reader getOwnerId() const;

  inline bool hasGrainId() const;
  inline  ::capnp::Text::Reader getGrainId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::GetGrainParams::Builder {
public:
  typedef GetGrainParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOwnerId();
  inline  ::capnp::Text::Builder getOwnerId();
  inline void setOwnerId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOwnerId(unsigned int size);
  inline void adoptOwnerId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOwnerId();

  inline bool hasGrainId();
  inline  ::capnp::Text::Builder getGrainId();
  inline void setGrainId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrainId(unsigned int size);
  inline void adoptGrainId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrainId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::GetGrainParams::Pipeline {
public:
  typedef GetGrainParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::GetGrainResults::Reader {
public:
  typedef GetGrainResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasSupervisor() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Supervisor::Client getSupervisor() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::GetGrainResults::Builder {
public:
  typedef GetGrainResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSupervisor();
#if !CAPNP_LITE
  inline  ::sandstorm::Supervisor::Client getSupervisor();
  inline void setSupervisor( ::sandstorm::Supervisor::Client&& value);
  inline void setSupervisor( ::sandstorm::Supervisor::Client& value);
  inline void adoptSupervisor(::capnp::Orphan< ::sandstorm::Supervisor>&& value);
  inline ::capnp::Orphan< ::sandstorm::Supervisor> disownSupervisor();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::GetGrainResults::Pipeline {
public:
  typedef GetGrainResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Supervisor::Client getSupervisor();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::DeleteGrainParams::Reader {
public:
  typedef DeleteGrainParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasOwnerId() const;
  inline  ::capnp::Text::Reader getOwnerId() const;

  inline bool hasGrainId() const;
  inline  ::capnp::Text::Reader getGrainId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::DeleteGrainParams::Builder {
public:
  typedef DeleteGrainParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOwnerId();
  inline  ::capnp::Text::Builder getOwnerId();
  inline void setOwnerId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOwnerId(unsigned int size);
  inline void adoptOwnerId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOwnerId();

  inline bool hasGrainId();
  inline  ::capnp::Text::Builder getGrainId();
  inline void setGrainId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrainId(unsigned int size);
  inline void adoptGrainId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrainId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::DeleteGrainParams::Pipeline {
public:
  typedef DeleteGrainParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::DeleteGrainResults::Reader {
public:
  typedef DeleteGrainResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::DeleteGrainResults::Builder {
public:
  typedef DeleteGrainResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::DeleteGrainResults::Pipeline {
public:
  typedef DeleteGrainResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::InstallPackageParams::Reader {
public:
  typedef InstallPackageParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::InstallPackageParams::Builder {
public:
  typedef InstallPackageParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::InstallPackageParams::Pipeline {
public:
  typedef InstallPackageParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::InstallPackageResults::Reader {
public:
  typedef InstallPackageResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasStream() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Backend::PackageUploadStream::Client getStream() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::InstallPackageResults::Builder {
public:
  typedef InstallPackageResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStream();
#if !CAPNP_LITE
  inline  ::sandstorm::Backend::PackageUploadStream::Client getStream();
  inline void setStream( ::sandstorm::Backend::PackageUploadStream::Client&& value);
  inline void setStream( ::sandstorm::Backend::PackageUploadStream::Client& value);
  inline void adoptStream(::capnp::Orphan< ::sandstorm::Backend::PackageUploadStream>&& value);
  inline ::capnp::Orphan< ::sandstorm::Backend::PackageUploadStream> disownStream();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::InstallPackageResults::Pipeline {
public:
  typedef InstallPackageResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Backend::PackageUploadStream::Client getStream();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::TryGetPackageParams::Reader {
public:
  typedef TryGetPackageParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPackageId() const;
  inline  ::capnp::Text::Reader getPackageId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::TryGetPackageParams::Builder {
public:
  typedef TryGetPackageParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPackageId();
  inline  ::capnp::Text::Builder getPackageId();
  inline void setPackageId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPackageId(unsigned int size);
  inline void adoptPackageId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPackageId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::TryGetPackageParams::Pipeline {
public:
  typedef TryGetPackageParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::TryGetPackageResults::Reader {
public:
  typedef TryGetPackageResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAppId() const;
  inline  ::capnp::Text::Reader getAppId() const;

  inline bool hasManifest() const;
  inline  ::sandstorm::spk::Manifest::Reader getManifest() const;

  inline bool hasAuthorPgpKeyFingerprint() const;
  inline  ::capnp::Text::Reader getAuthorPgpKeyFingerprint() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::TryGetPackageResults::Builder {
public:
  typedef TryGetPackageResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppId();
  inline  ::capnp::Text::Builder getAppId();
  inline void setAppId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppId(unsigned int size);
  inline void adoptAppId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppId();

  inline bool hasManifest();
  inline  ::sandstorm::spk::Manifest::Builder getManifest();
  inline void setManifest( ::sandstorm::spk::Manifest::Reader value);
  inline  ::sandstorm::spk::Manifest::Builder initManifest();
  inline void adoptManifest(::capnp::Orphan< ::sandstorm::spk::Manifest>&& value);
  inline ::capnp::Orphan< ::sandstorm::spk::Manifest> disownManifest();

  inline bool hasAuthorPgpKeyFingerprint();
  inline  ::capnp::Text::Builder getAuthorPgpKeyFingerprint();
  inline void setAuthorPgpKeyFingerprint( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAuthorPgpKeyFingerprint(unsigned int size);
  inline void adoptAuthorPgpKeyFingerprint(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAuthorPgpKeyFingerprint();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::TryGetPackageResults::Pipeline {
public:
  typedef TryGetPackageResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::spk::Manifest::Pipeline getManifest();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::DeletePackageParams::Reader {
public:
  typedef DeletePackageParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPackageId() const;
  inline  ::capnp::Text::Reader getPackageId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::DeletePackageParams::Builder {
public:
  typedef DeletePackageParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPackageId();
  inline  ::capnp::Text::Builder getPackageId();
  inline void setPackageId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPackageId(unsigned int size);
  inline void adoptPackageId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPackageId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::DeletePackageParams::Pipeline {
public:
  typedef DeletePackageParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::DeletePackageResults::Reader {
public:
  typedef DeletePackageResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::DeletePackageResults::Builder {
public:
  typedef DeletePackageResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::DeletePackageResults::Pipeline {
public:
  typedef DeletePackageResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::BackupGrainParams::Reader {
public:
  typedef BackupGrainParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasBackupId() const;
  inline  ::capnp::Text::Reader getBackupId() const;

  inline bool hasOwnerId() const;
  inline  ::capnp::Text::Reader getOwnerId() const;

  inline bool hasGrainId() const;
  inline  ::capnp::Text::Reader getGrainId() const;

  inline bool hasInfo() const;
  inline  ::sandstorm::GrainInfo::Reader getInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::BackupGrainParams::Builder {
public:
  typedef BackupGrainParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBackupId();
  inline  ::capnp::Text::Builder getBackupId();
  inline void setBackupId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBackupId(unsigned int size);
  inline void adoptBackupId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBackupId();

  inline bool hasOwnerId();
  inline  ::capnp::Text::Builder getOwnerId();
  inline void setOwnerId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOwnerId(unsigned int size);
  inline void adoptOwnerId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOwnerId();

  inline bool hasGrainId();
  inline  ::capnp::Text::Builder getGrainId();
  inline void setGrainId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrainId(unsigned int size);
  inline void adoptGrainId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrainId();

  inline bool hasInfo();
  inline  ::sandstorm::GrainInfo::Builder getInfo();
  inline void setInfo( ::sandstorm::GrainInfo::Reader value);
  inline  ::sandstorm::GrainInfo::Builder initInfo();
  inline void adoptInfo(::capnp::Orphan< ::sandstorm::GrainInfo>&& value);
  inline ::capnp::Orphan< ::sandstorm::GrainInfo> disownInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::BackupGrainParams::Pipeline {
public:
  typedef BackupGrainParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::GrainInfo::Pipeline getInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::BackupGrainResults::Reader {
public:
  typedef BackupGrainResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::BackupGrainResults::Builder {
public:
  typedef BackupGrainResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::BackupGrainResults::Pipeline {
public:
  typedef BackupGrainResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::RestoreGrainParams::Reader {
public:
  typedef RestoreGrainParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasBackupId() const;
  inline  ::capnp::Text::Reader getBackupId() const;

  inline bool hasOwnerId() const;
  inline  ::capnp::Text::Reader getOwnerId() const;

  inline bool hasGrainId() const;
  inline  ::capnp::Text::Reader getGrainId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::RestoreGrainParams::Builder {
public:
  typedef RestoreGrainParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBackupId();
  inline  ::capnp::Text::Builder getBackupId();
  inline void setBackupId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBackupId(unsigned int size);
  inline void adoptBackupId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBackupId();

  inline bool hasOwnerId();
  inline  ::capnp::Text::Builder getOwnerId();
  inline void setOwnerId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOwnerId(unsigned int size);
  inline void adoptOwnerId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOwnerId();

  inline bool hasGrainId();
  inline  ::capnp::Text::Builder getGrainId();
  inline void setGrainId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrainId(unsigned int size);
  inline void adoptGrainId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrainId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::RestoreGrainParams::Pipeline {
public:
  typedef RestoreGrainParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::RestoreGrainResults::Reader {
public:
  typedef RestoreGrainResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasInfo() const;
  inline  ::sandstorm::GrainInfo::Reader getInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::RestoreGrainResults::Builder {
public:
  typedef RestoreGrainResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasInfo();
  inline  ::sandstorm::GrainInfo::Builder getInfo();
  inline void setInfo( ::sandstorm::GrainInfo::Reader value);
  inline  ::sandstorm::GrainInfo::Builder initInfo();
  inline void adoptInfo(::capnp::Orphan< ::sandstorm::GrainInfo>&& value);
  inline ::capnp::Orphan< ::sandstorm::GrainInfo> disownInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::RestoreGrainResults::Pipeline {
public:
  typedef RestoreGrainResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::GrainInfo::Pipeline getInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::UploadBackupParams::Reader {
public:
  typedef UploadBackupParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasBackupId() const;
  inline  ::capnp::Text::Reader getBackupId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::UploadBackupParams::Builder {
public:
  typedef UploadBackupParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBackupId();
  inline  ::capnp::Text::Builder getBackupId();
  inline void setBackupId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBackupId(unsigned int size);
  inline void adoptBackupId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBackupId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::UploadBackupParams::Pipeline {
public:
  typedef UploadBackupParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::UploadBackupResults::Reader {
public:
  typedef UploadBackupResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasStream() const;
#if !CAPNP_LITE
  inline  ::sandstorm::ByteStream::Client getStream() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::UploadBackupResults::Builder {
public:
  typedef UploadBackupResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStream();
#if !CAPNP_LITE
  inline  ::sandstorm::ByteStream::Client getStream();
  inline void setStream( ::sandstorm::ByteStream::Client&& value);
  inline void setStream( ::sandstorm::ByteStream::Client& value);
  inline void adoptStream(::capnp::Orphan< ::sandstorm::ByteStream>&& value);
  inline ::capnp::Orphan< ::sandstorm::ByteStream> disownStream();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::UploadBackupResults::Pipeline {
public:
  typedef UploadBackupResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::ByteStream::Client getStream();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::DownloadBackupParams::Reader {
public:
  typedef DownloadBackupParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasBackupId() const;
  inline  ::capnp::Text::Reader getBackupId() const;

  inline bool hasStream() const;
#if !CAPNP_LITE
  inline  ::sandstorm::ByteStream::Client getStream() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::DownloadBackupParams::Builder {
public:
  typedef DownloadBackupParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBackupId();
  inline  ::capnp::Text::Builder getBackupId();
  inline void setBackupId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBackupId(unsigned int size);
  inline void adoptBackupId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBackupId();

  inline bool hasStream();
#if !CAPNP_LITE
  inline  ::sandstorm::ByteStream::Client getStream();
  inline void setStream( ::sandstorm::ByteStream::Client&& value);
  inline void setStream( ::sandstorm::ByteStream::Client& value);
  inline void adoptStream(::capnp::Orphan< ::sandstorm::ByteStream>&& value);
  inline ::capnp::Orphan< ::sandstorm::ByteStream> disownStream();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::DownloadBackupParams::Pipeline {
public:
  typedef DownloadBackupParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::ByteStream::Client getStream();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::DownloadBackupResults::Reader {
public:
  typedef DownloadBackupResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::DownloadBackupResults::Builder {
public:
  typedef DownloadBackupResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::DownloadBackupResults::Pipeline {
public:
  typedef DownloadBackupResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::DeleteBackupParams::Reader {
public:
  typedef DeleteBackupParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasBackupId() const;
  inline  ::capnp::Text::Reader getBackupId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::DeleteBackupParams::Builder {
public:
  typedef DeleteBackupParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBackupId();
  inline  ::capnp::Text::Builder getBackupId();
  inline void setBackupId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBackupId(unsigned int size);
  inline void adoptBackupId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBackupId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::DeleteBackupParams::Pipeline {
public:
  typedef DeleteBackupParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::DeleteBackupResults::Reader {
public:
  typedef DeleteBackupResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::DeleteBackupResults::Builder {
public:
  typedef DeleteBackupResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::DeleteBackupResults::Pipeline {
public:
  typedef DeleteBackupResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::GetUserStorageUsageParams::Reader {
public:
  typedef GetUserStorageUsageParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasUserId() const;
  inline  ::capnp::Text::Reader getUserId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::GetUserStorageUsageParams::Builder {
public:
  typedef GetUserStorageUsageParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUserId();
  inline  ::capnp::Text::Builder getUserId();
  inline void setUserId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUserId(unsigned int size);
  inline void adoptUserId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUserId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::GetUserStorageUsageParams::Pipeline {
public:
  typedef GetUserStorageUsageParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::GetUserStorageUsageResults::Reader {
public:
  typedef GetUserStorageUsageResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::GetUserStorageUsageResults::Builder {
public:
  typedef GetUserStorageUsageResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::GetUserStorageUsageResults::Pipeline {
public:
  typedef GetUserStorageUsageResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::TransferGrainParams::Reader {
public:
  typedef TransferGrainParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasOwnerId() const;
  inline  ::capnp::Text::Reader getOwnerId() const;

  inline bool hasGrainId() const;
  inline  ::capnp::Text::Reader getGrainId() const;

  inline bool hasNewOwnerId() const;
  inline  ::capnp::Text::Reader getNewOwnerId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::TransferGrainParams::Builder {
public:
  typedef TransferGrainParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOwnerId();
  inline  ::capnp::Text::Builder getOwnerId();
  inline void setOwnerId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOwnerId(unsigned int size);
  inline void adoptOwnerId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOwnerId();

  inline bool hasGrainId();
  inline  ::capnp::Text::Builder getGrainId();
  inline void setGrainId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrainId(unsigned int size);
  inline void adoptGrainId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrainId();

  inline bool hasNewOwnerId();
  inline  ::capnp::Text::Builder getNewOwnerId();
  inline void setNewOwnerId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNewOwnerId(unsigned int size);
  inline void adoptNewOwnerId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNewOwnerId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::TransferGrainParams::Pipeline {
public:
  typedef TransferGrainParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::TransferGrainResults::Reader {
public:
  typedef TransferGrainResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::TransferGrainResults::Builder {
public:
  typedef TransferGrainResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::TransferGrainResults::Pipeline {
public:
  typedef TransferGrainResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::DeleteUserParams::Reader {
public:
  typedef DeleteUserParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasUserId() const;
  inline  ::capnp::Text::Reader getUserId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::DeleteUserParams::Builder {
public:
  typedef DeleteUserParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUserId();
  inline  ::capnp::Text::Builder getUserId();
  inline void setUserId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUserId(unsigned int size);
  inline void adoptUserId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUserId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::DeleteUserParams::Pipeline {
public:
  typedef DeleteUserParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::DeleteUserResults::Reader {
public:
  typedef DeleteUserResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::DeleteUserResults::Builder {
public:
  typedef DeleteUserResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::DeleteUserResults::Pipeline {
public:
  typedef DeleteUserResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::PingParams::Reader {
public:
  typedef PingParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::PingParams::Builder {
public:
  typedef PingParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::PingParams::Pipeline {
public:
  typedef PingParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::PingResults::Reader {
public:
  typedef PingResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::PingResults::Builder {
public:
  typedef PingResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::PingResults::Pipeline {
public:
  typedef PingResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::GetGrainStorageUsageParams::Reader {
public:
  typedef GetGrainStorageUsageParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasOwnerId() const;
  inline  ::capnp::Text::Reader getOwnerId() const;

  inline bool hasGrainId() const;
  inline  ::capnp::Text::Reader getGrainId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::GetGrainStorageUsageParams::Builder {
public:
  typedef GetGrainStorageUsageParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOwnerId();
  inline  ::capnp::Text::Builder getOwnerId();
  inline void setOwnerId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOwnerId(unsigned int size);
  inline void adoptOwnerId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOwnerId();

  inline bool hasGrainId();
  inline  ::capnp::Text::Builder getGrainId();
  inline void setGrainId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrainId(unsigned int size);
  inline void adoptGrainId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrainId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::GetGrainStorageUsageParams::Pipeline {
public:
  typedef GetGrainStorageUsageParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Backend::GetGrainStorageUsageResults::Reader {
public:
  typedef GetGrainStorageUsageResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backend::GetGrainStorageUsageResults::Builder {
public:
  typedef GetGrainStorageUsageResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backend::GetGrainStorageUsageResults::Pipeline {
public:
  typedef GetGrainStorageUsageResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class SandstormCoreFactory::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef SandstormCoreFactory Calls;
  typedef SandstormCoreFactory Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::SandstormCoreFactory::GetSandstormCoreParams,  ::sandstorm::SandstormCoreFactory::GetSandstormCoreResults> getSandstormCoreRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class SandstormCoreFactory::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef SandstormCoreFactory Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::SandstormCoreFactory::GetSandstormCoreParams GetSandstormCoreParams;
  typedef  ::sandstorm::SandstormCoreFactory::GetSandstormCoreResults GetSandstormCoreResults;
  typedef ::capnp::CallContext<GetSandstormCoreParams, GetSandstormCoreResults> GetSandstormCoreContext;
  virtual ::kj::Promise<void> getSandstormCore(GetSandstormCoreContext context);

  inline  ::sandstorm::SandstormCoreFactory::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::SandstormCoreFactory>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class SandstormCoreFactory::GetSandstormCoreParams::Reader {
public:
  typedef GetSandstormCoreParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasGrainId() const;
  inline  ::capnp::Text::Reader getGrainId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCoreFactory::GetSandstormCoreParams::Builder {
public:
  typedef GetSandstormCoreParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasGrainId();
  inline  ::capnp::Text::Builder getGrainId();
  inline void setGrainId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrainId(unsigned int size);
  inline void adoptGrainId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrainId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCoreFactory::GetSandstormCoreParams::Pipeline {
public:
  typedef GetSandstormCoreParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCoreFactory::GetSandstormCoreResults::Reader {
public:
  typedef GetSandstormCoreResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasCore() const;
#if !CAPNP_LITE
  inline  ::sandstorm::SandstormCore::Client getCore() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCoreFactory::GetSandstormCoreResults::Builder {
public:
  typedef GetSandstormCoreResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCore();
#if !CAPNP_LITE
  inline  ::sandstorm::SandstormCore::Client getCore();
  inline void setCore( ::sandstorm::SandstormCore::Client&& value);
  inline void setCore( ::sandstorm::SandstormCore::Client& value);
  inline void adoptCore(::capnp::Orphan< ::sandstorm::SandstormCore>&& value);
  inline ::capnp::Orphan< ::sandstorm::SandstormCore> disownCore();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCoreFactory::GetSandstormCoreResults::Pipeline {
public:
  typedef GetSandstormCoreResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::SandstormCore::Client getCore();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
inline Backend::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline Backend::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline Backend::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline Backend::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline Backend::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::Backend::Client& Backend::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::Backend::Client& Backend::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
#if !CAPNP_LITE
inline Backend::PackageUploadStream::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline Backend::PackageUploadStream::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline Backend::PackageUploadStream::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline Backend::PackageUploadStream::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline Backend::PackageUploadStream::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::Backend::PackageUploadStream::Client& Backend::PackageUploadStream::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::Backend::PackageUploadStream::Client& Backend::PackageUploadStream::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool Backend::PackageUploadStream::SaveAsParams::Reader::hasPackageId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::PackageUploadStream::SaveAsParams::Builder::hasPackageId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::PackageUploadStream::SaveAsParams::Reader::getPackageId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::PackageUploadStream::SaveAsParams::Builder::getPackageId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::PackageUploadStream::SaveAsParams::Builder::setPackageId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::PackageUploadStream::SaveAsParams::Builder::initPackageId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::PackageUploadStream::SaveAsParams::Builder::adoptPackageId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::PackageUploadStream::SaveAsParams::Builder::disownPackageId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::PackageUploadStream::SaveAsResults::Reader::hasAppId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::PackageUploadStream::SaveAsResults::Builder::hasAppId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::PackageUploadStream::SaveAsResults::Reader::getAppId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::PackageUploadStream::SaveAsResults::Builder::getAppId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::PackageUploadStream::SaveAsResults::Builder::setAppId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::PackageUploadStream::SaveAsResults::Builder::initAppId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::PackageUploadStream::SaveAsResults::Builder::adoptAppId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::PackageUploadStream::SaveAsResults::Builder::disownAppId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::PackageUploadStream::SaveAsResults::Reader::hasManifest() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Backend::PackageUploadStream::SaveAsResults::Builder::hasManifest() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::spk::Manifest::Reader Backend::PackageUploadStream::SaveAsResults::Reader::getManifest() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::spk::Manifest::Builder Backend::PackageUploadStream::SaveAsResults::Builder::getManifest() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::spk::Manifest::Pipeline Backend::PackageUploadStream::SaveAsResults::Pipeline::getManifest() {
  return  ::sandstorm::spk::Manifest::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Backend::PackageUploadStream::SaveAsResults::Builder::setManifest( ::sandstorm::spk::Manifest::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::spk::Manifest::Builder Backend::PackageUploadStream::SaveAsResults::Builder::initManifest() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Backend::PackageUploadStream::SaveAsResults::Builder::adoptManifest(
    ::capnp::Orphan< ::sandstorm::spk::Manifest>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::spk::Manifest> Backend::PackageUploadStream::SaveAsResults::Builder::disownManifest() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Backend::PackageUploadStream::SaveAsResults::Reader::hasAuthorPgpKeyFingerprint() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Backend::PackageUploadStream::SaveAsResults::Builder::hasAuthorPgpKeyFingerprint() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::PackageUploadStream::SaveAsResults::Reader::getAuthorPgpKeyFingerprint() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::PackageUploadStream::SaveAsResults::Builder::getAuthorPgpKeyFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Backend::PackageUploadStream::SaveAsResults::Builder::setAuthorPgpKeyFingerprint( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::PackageUploadStream::SaveAsResults::Builder::initAuthorPgpKeyFingerprint(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Backend::PackageUploadStream::SaveAsResults::Builder::adoptAuthorPgpKeyFingerprint(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::PackageUploadStream::SaveAsResults::Builder::disownAuthorPgpKeyFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Backend::StartGrainParams::Reader::hasOwnerId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::StartGrainParams::Builder::hasOwnerId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::StartGrainParams::Reader::getOwnerId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::StartGrainParams::Builder::getOwnerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::StartGrainParams::Builder::setOwnerId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::StartGrainParams::Builder::initOwnerId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::StartGrainParams::Builder::adoptOwnerId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::StartGrainParams::Builder::disownOwnerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::StartGrainParams::Reader::hasGrainId() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Backend::StartGrainParams::Builder::hasGrainId() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::StartGrainParams::Reader::getGrainId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::StartGrainParams::Builder::getGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Backend::StartGrainParams::Builder::setGrainId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::StartGrainParams::Builder::initGrainId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Backend::StartGrainParams::Builder::adoptGrainId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::StartGrainParams::Builder::disownGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Backend::StartGrainParams::Reader::hasPackageId() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Backend::StartGrainParams::Builder::hasPackageId() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::StartGrainParams::Reader::getPackageId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::StartGrainParams::Builder::getPackageId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Backend::StartGrainParams::Builder::setPackageId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::StartGrainParams::Builder::initPackageId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Backend::StartGrainParams::Builder::adoptPackageId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::StartGrainParams::Builder::disownPackageId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Backend::StartGrainParams::Reader::hasCommand() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Backend::StartGrainParams::Builder::hasCommand() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::spk::Manifest::Command::Reader Backend::StartGrainParams::Reader::getCommand() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::sandstorm::spk::Manifest::Command::Builder Backend::StartGrainParams::Builder::getCommand() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::spk::Manifest::Command::Pipeline Backend::StartGrainParams::Pipeline::getCommand() {
  return  ::sandstorm::spk::Manifest::Command::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Backend::StartGrainParams::Builder::setCommand( ::sandstorm::spk::Manifest::Command::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::spk::Manifest::Command::Builder Backend::StartGrainParams::Builder::initCommand() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Backend::StartGrainParams::Builder::adoptCommand(
    ::capnp::Orphan< ::sandstorm::spk::Manifest::Command>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::spk::Manifest::Command> Backend::StartGrainParams::Builder::disownCommand() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Backend::StartGrainParams::Reader::getIsNew() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool Backend::StartGrainParams::Builder::getIsNew() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void Backend::StartGrainParams::Builder::setIsNew(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Backend::StartGrainParams::Reader::getDevMode() const {
  return _reader.getDataField<bool>(
      1 * ::capnp::ELEMENTS);
}

inline bool Backend::StartGrainParams::Builder::getDevMode() {
  return _builder.getDataField<bool>(
      1 * ::capnp::ELEMENTS);
}
inline void Backend::StartGrainParams::Builder::setDevMode(bool value) {
  _builder.setDataField<bool>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Backend::StartGrainParams::Reader::getMountProc() const {
  return _reader.getDataField<bool>(
      2 * ::capnp::ELEMENTS);
}

inline bool Backend::StartGrainParams::Builder::getMountProc() {
  return _builder.getDataField<bool>(
      2 * ::capnp::ELEMENTS);
}
inline void Backend::StartGrainParams::Builder::setMountProc(bool value) {
  _builder.setDataField<bool>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool Backend::StartGrainResults::Reader::hasSupervisor() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::StartGrainResults::Builder::hasSupervisor() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Supervisor::Client Backend::StartGrainResults::Reader::getSupervisor() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Supervisor>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Supervisor::Client Backend::StartGrainResults::Builder::getSupervisor() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Supervisor>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Supervisor::Client Backend::StartGrainResults::Pipeline::getSupervisor() {
  return  ::sandstorm::Supervisor::Client(_typeless.getPointerField(0).asCap());
}
inline void Backend::StartGrainResults::Builder::setSupervisor( ::sandstorm::Supervisor::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Supervisor>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void Backend::StartGrainResults::Builder::setSupervisor( ::sandstorm::Supervisor::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Supervisor>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void Backend::StartGrainResults::Builder::adoptSupervisor(
    ::capnp::Orphan< ::sandstorm::Supervisor>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Supervisor>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Supervisor> Backend::StartGrainResults::Builder::disownSupervisor() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Supervisor>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool Backend::GetGrainParams::Reader::hasOwnerId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::GetGrainParams::Builder::hasOwnerId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::GetGrainParams::Reader::getOwnerId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::GetGrainParams::Builder::getOwnerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::GetGrainParams::Builder::setOwnerId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::GetGrainParams::Builder::initOwnerId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::GetGrainParams::Builder::adoptOwnerId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::GetGrainParams::Builder::disownOwnerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::GetGrainParams::Reader::hasGrainId() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Backend::GetGrainParams::Builder::hasGrainId() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::GetGrainParams::Reader::getGrainId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::GetGrainParams::Builder::getGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Backend::GetGrainParams::Builder::setGrainId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::GetGrainParams::Builder::initGrainId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Backend::GetGrainParams::Builder::adoptGrainId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::GetGrainParams::Builder::disownGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Backend::GetGrainResults::Reader::hasSupervisor() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::GetGrainResults::Builder::hasSupervisor() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Supervisor::Client Backend::GetGrainResults::Reader::getSupervisor() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Supervisor>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Supervisor::Client Backend::GetGrainResults::Builder::getSupervisor() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Supervisor>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Supervisor::Client Backend::GetGrainResults::Pipeline::getSupervisor() {
  return  ::sandstorm::Supervisor::Client(_typeless.getPointerField(0).asCap());
}
inline void Backend::GetGrainResults::Builder::setSupervisor( ::sandstorm::Supervisor::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Supervisor>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void Backend::GetGrainResults::Builder::setSupervisor( ::sandstorm::Supervisor::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Supervisor>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void Backend::GetGrainResults::Builder::adoptSupervisor(
    ::capnp::Orphan< ::sandstorm::Supervisor>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Supervisor>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Supervisor> Backend::GetGrainResults::Builder::disownSupervisor() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Supervisor>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool Backend::DeleteGrainParams::Reader::hasOwnerId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::DeleteGrainParams::Builder::hasOwnerId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::DeleteGrainParams::Reader::getOwnerId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::DeleteGrainParams::Builder::getOwnerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::DeleteGrainParams::Builder::setOwnerId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::DeleteGrainParams::Builder::initOwnerId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::DeleteGrainParams::Builder::adoptOwnerId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::DeleteGrainParams::Builder::disownOwnerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::DeleteGrainParams::Reader::hasGrainId() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Backend::DeleteGrainParams::Builder::hasGrainId() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::DeleteGrainParams::Reader::getGrainId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::DeleteGrainParams::Builder::getGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Backend::DeleteGrainParams::Builder::setGrainId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::DeleteGrainParams::Builder::initGrainId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Backend::DeleteGrainParams::Builder::adoptGrainId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::DeleteGrainParams::Builder::disownGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Backend::InstallPackageResults::Reader::hasStream() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::InstallPackageResults::Builder::hasStream() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Backend::PackageUploadStream::Client Backend::InstallPackageResults::Reader::getStream() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Backend::PackageUploadStream>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Backend::PackageUploadStream::Client Backend::InstallPackageResults::Builder::getStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Backend::PackageUploadStream>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Backend::PackageUploadStream::Client Backend::InstallPackageResults::Pipeline::getStream() {
  return  ::sandstorm::Backend::PackageUploadStream::Client(_typeless.getPointerField(0).asCap());
}
inline void Backend::InstallPackageResults::Builder::setStream( ::sandstorm::Backend::PackageUploadStream::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Backend::PackageUploadStream>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void Backend::InstallPackageResults::Builder::setStream( ::sandstorm::Backend::PackageUploadStream::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Backend::PackageUploadStream>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void Backend::InstallPackageResults::Builder::adoptStream(
    ::capnp::Orphan< ::sandstorm::Backend::PackageUploadStream>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Backend::PackageUploadStream>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Backend::PackageUploadStream> Backend::InstallPackageResults::Builder::disownStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Backend::PackageUploadStream>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool Backend::TryGetPackageParams::Reader::hasPackageId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::TryGetPackageParams::Builder::hasPackageId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::TryGetPackageParams::Reader::getPackageId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::TryGetPackageParams::Builder::getPackageId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::TryGetPackageParams::Builder::setPackageId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::TryGetPackageParams::Builder::initPackageId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::TryGetPackageParams::Builder::adoptPackageId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::TryGetPackageParams::Builder::disownPackageId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::TryGetPackageResults::Reader::hasAppId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::TryGetPackageResults::Builder::hasAppId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::TryGetPackageResults::Reader::getAppId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::TryGetPackageResults::Builder::getAppId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::TryGetPackageResults::Builder::setAppId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::TryGetPackageResults::Builder::initAppId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::TryGetPackageResults::Builder::adoptAppId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::TryGetPackageResults::Builder::disownAppId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::TryGetPackageResults::Reader::hasManifest() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Backend::TryGetPackageResults::Builder::hasManifest() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::spk::Manifest::Reader Backend::TryGetPackageResults::Reader::getManifest() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::spk::Manifest::Builder Backend::TryGetPackageResults::Builder::getManifest() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::spk::Manifest::Pipeline Backend::TryGetPackageResults::Pipeline::getManifest() {
  return  ::sandstorm::spk::Manifest::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Backend::TryGetPackageResults::Builder::setManifest( ::sandstorm::spk::Manifest::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::spk::Manifest::Builder Backend::TryGetPackageResults::Builder::initManifest() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Backend::TryGetPackageResults::Builder::adoptManifest(
    ::capnp::Orphan< ::sandstorm::spk::Manifest>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::spk::Manifest> Backend::TryGetPackageResults::Builder::disownManifest() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Backend::TryGetPackageResults::Reader::hasAuthorPgpKeyFingerprint() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Backend::TryGetPackageResults::Builder::hasAuthorPgpKeyFingerprint() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::TryGetPackageResults::Reader::getAuthorPgpKeyFingerprint() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::TryGetPackageResults::Builder::getAuthorPgpKeyFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Backend::TryGetPackageResults::Builder::setAuthorPgpKeyFingerprint( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::TryGetPackageResults::Builder::initAuthorPgpKeyFingerprint(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Backend::TryGetPackageResults::Builder::adoptAuthorPgpKeyFingerprint(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::TryGetPackageResults::Builder::disownAuthorPgpKeyFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Backend::DeletePackageParams::Reader::hasPackageId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::DeletePackageParams::Builder::hasPackageId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::DeletePackageParams::Reader::getPackageId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::DeletePackageParams::Builder::getPackageId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::DeletePackageParams::Builder::setPackageId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::DeletePackageParams::Builder::initPackageId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::DeletePackageParams::Builder::adoptPackageId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::DeletePackageParams::Builder::disownPackageId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::BackupGrainParams::Reader::hasBackupId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::BackupGrainParams::Builder::hasBackupId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::BackupGrainParams::Reader::getBackupId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::BackupGrainParams::Builder::getBackupId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::BackupGrainParams::Builder::setBackupId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::BackupGrainParams::Builder::initBackupId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::BackupGrainParams::Builder::adoptBackupId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::BackupGrainParams::Builder::disownBackupId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::BackupGrainParams::Reader::hasOwnerId() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Backend::BackupGrainParams::Builder::hasOwnerId() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::BackupGrainParams::Reader::getOwnerId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::BackupGrainParams::Builder::getOwnerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Backend::BackupGrainParams::Builder::setOwnerId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::BackupGrainParams::Builder::initOwnerId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Backend::BackupGrainParams::Builder::adoptOwnerId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::BackupGrainParams::Builder::disownOwnerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Backend::BackupGrainParams::Reader::hasGrainId() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Backend::BackupGrainParams::Builder::hasGrainId() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::BackupGrainParams::Reader::getGrainId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::BackupGrainParams::Builder::getGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Backend::BackupGrainParams::Builder::setGrainId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::BackupGrainParams::Builder::initGrainId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Backend::BackupGrainParams::Builder::adoptGrainId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::BackupGrainParams::Builder::disownGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Backend::BackupGrainParams::Reader::hasInfo() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Backend::BackupGrainParams::Builder::hasInfo() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::GrainInfo::Reader Backend::BackupGrainParams::Reader::getInfo() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::GrainInfo>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::sandstorm::GrainInfo::Builder Backend::BackupGrainParams::Builder::getInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::GrainInfo>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::GrainInfo::Pipeline Backend::BackupGrainParams::Pipeline::getInfo() {
  return  ::sandstorm::GrainInfo::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Backend::BackupGrainParams::Builder::setInfo( ::sandstorm::GrainInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::GrainInfo>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::GrainInfo::Builder Backend::BackupGrainParams::Builder::initInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::GrainInfo>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Backend::BackupGrainParams::Builder::adoptInfo(
    ::capnp::Orphan< ::sandstorm::GrainInfo>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::GrainInfo>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::GrainInfo> Backend::BackupGrainParams::Builder::disownInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::GrainInfo>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Backend::RestoreGrainParams::Reader::hasBackupId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::RestoreGrainParams::Builder::hasBackupId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::RestoreGrainParams::Reader::getBackupId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::RestoreGrainParams::Builder::getBackupId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::RestoreGrainParams::Builder::setBackupId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::RestoreGrainParams::Builder::initBackupId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::RestoreGrainParams::Builder::adoptBackupId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::RestoreGrainParams::Builder::disownBackupId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::RestoreGrainParams::Reader::hasOwnerId() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Backend::RestoreGrainParams::Builder::hasOwnerId() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::RestoreGrainParams::Reader::getOwnerId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::RestoreGrainParams::Builder::getOwnerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Backend::RestoreGrainParams::Builder::setOwnerId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::RestoreGrainParams::Builder::initOwnerId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Backend::RestoreGrainParams::Builder::adoptOwnerId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::RestoreGrainParams::Builder::disownOwnerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Backend::RestoreGrainParams::Reader::hasGrainId() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Backend::RestoreGrainParams::Builder::hasGrainId() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::RestoreGrainParams::Reader::getGrainId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::RestoreGrainParams::Builder::getGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Backend::RestoreGrainParams::Builder::setGrainId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::RestoreGrainParams::Builder::initGrainId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Backend::RestoreGrainParams::Builder::adoptGrainId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::RestoreGrainParams::Builder::disownGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Backend::RestoreGrainResults::Reader::hasInfo() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::RestoreGrainResults::Builder::hasInfo() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::GrainInfo::Reader Backend::RestoreGrainResults::Reader::getInfo() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::GrainInfo>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::GrainInfo::Builder Backend::RestoreGrainResults::Builder::getInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::GrainInfo>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::GrainInfo::Pipeline Backend::RestoreGrainResults::Pipeline::getInfo() {
  return  ::sandstorm::GrainInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Backend::RestoreGrainResults::Builder::setInfo( ::sandstorm::GrainInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::GrainInfo>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::GrainInfo::Builder Backend::RestoreGrainResults::Builder::initInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::GrainInfo>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::RestoreGrainResults::Builder::adoptInfo(
    ::capnp::Orphan< ::sandstorm::GrainInfo>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::GrainInfo>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::GrainInfo> Backend::RestoreGrainResults::Builder::disownInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::GrainInfo>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::UploadBackupParams::Reader::hasBackupId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::UploadBackupParams::Builder::hasBackupId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::UploadBackupParams::Reader::getBackupId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::UploadBackupParams::Builder::getBackupId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::UploadBackupParams::Builder::setBackupId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::UploadBackupParams::Builder::initBackupId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::UploadBackupParams::Builder::adoptBackupId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::UploadBackupParams::Builder::disownBackupId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::UploadBackupResults::Reader::hasStream() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::UploadBackupResults::Builder::hasStream() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::ByteStream::Client Backend::UploadBackupResults::Reader::getStream() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::ByteStream::Client Backend::UploadBackupResults::Builder::getStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::ByteStream::Client Backend::UploadBackupResults::Pipeline::getStream() {
  return  ::sandstorm::ByteStream::Client(_typeless.getPointerField(0).asCap());
}
inline void Backend::UploadBackupResults::Builder::setStream( ::sandstorm::ByteStream::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void Backend::UploadBackupResults::Builder::setStream( ::sandstorm::ByteStream::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void Backend::UploadBackupResults::Builder::adoptStream(
    ::capnp::Orphan< ::sandstorm::ByteStream>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::ByteStream> Backend::UploadBackupResults::Builder::disownStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool Backend::DownloadBackupParams::Reader::hasBackupId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::DownloadBackupParams::Builder::hasBackupId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::DownloadBackupParams::Reader::getBackupId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::DownloadBackupParams::Builder::getBackupId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::DownloadBackupParams::Builder::setBackupId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::DownloadBackupParams::Builder::initBackupId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::DownloadBackupParams::Builder::adoptBackupId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::DownloadBackupParams::Builder::disownBackupId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::DownloadBackupParams::Reader::hasStream() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Backend::DownloadBackupParams::Builder::hasStream() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::ByteStream::Client Backend::DownloadBackupParams::Reader::getStream() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::ByteStream::Client Backend::DownloadBackupParams::Builder::getStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::ByteStream::Client Backend::DownloadBackupParams::Pipeline::getStream() {
  return  ::sandstorm::ByteStream::Client(_typeless.getPointerField(1).asCap());
}
inline void Backend::DownloadBackupParams::Builder::setStream( ::sandstorm::ByteStream::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(cap));
}
inline void Backend::DownloadBackupParams::Builder::setStream( ::sandstorm::ByteStream::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), cap);
}
inline void Backend::DownloadBackupParams::Builder::adoptStream(
    ::capnp::Orphan< ::sandstorm::ByteStream>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::ByteStream> Backend::DownloadBackupParams::Builder::disownStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool Backend::DeleteBackupParams::Reader::hasBackupId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::DeleteBackupParams::Builder::hasBackupId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::DeleteBackupParams::Reader::getBackupId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::DeleteBackupParams::Builder::getBackupId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::DeleteBackupParams::Builder::setBackupId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::DeleteBackupParams::Builder::initBackupId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::DeleteBackupParams::Builder::adoptBackupId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::DeleteBackupParams::Builder::disownBackupId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::GetUserStorageUsageParams::Reader::hasUserId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::GetUserStorageUsageParams::Builder::hasUserId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::GetUserStorageUsageParams::Reader::getUserId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::GetUserStorageUsageParams::Builder::getUserId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::GetUserStorageUsageParams::Builder::setUserId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::GetUserStorageUsageParams::Builder::initUserId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::GetUserStorageUsageParams::Builder::adoptUserId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::GetUserStorageUsageParams::Builder::disownUserId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t Backend::GetUserStorageUsageResults::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Backend::GetUserStorageUsageResults::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Backend::GetUserStorageUsageResults::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Backend::TransferGrainParams::Reader::hasOwnerId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::TransferGrainParams::Builder::hasOwnerId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::TransferGrainParams::Reader::getOwnerId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::TransferGrainParams::Builder::getOwnerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::TransferGrainParams::Builder::setOwnerId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::TransferGrainParams::Builder::initOwnerId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::TransferGrainParams::Builder::adoptOwnerId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::TransferGrainParams::Builder::disownOwnerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::TransferGrainParams::Reader::hasGrainId() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Backend::TransferGrainParams::Builder::hasGrainId() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::TransferGrainParams::Reader::getGrainId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::TransferGrainParams::Builder::getGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Backend::TransferGrainParams::Builder::setGrainId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::TransferGrainParams::Builder::initGrainId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Backend::TransferGrainParams::Builder::adoptGrainId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::TransferGrainParams::Builder::disownGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Backend::TransferGrainParams::Reader::hasNewOwnerId() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Backend::TransferGrainParams::Builder::hasNewOwnerId() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::TransferGrainParams::Reader::getNewOwnerId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::TransferGrainParams::Builder::getNewOwnerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Backend::TransferGrainParams::Builder::setNewOwnerId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::TransferGrainParams::Builder::initNewOwnerId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Backend::TransferGrainParams::Builder::adoptNewOwnerId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::TransferGrainParams::Builder::disownNewOwnerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Backend::DeleteUserParams::Reader::hasUserId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::DeleteUserParams::Builder::hasUserId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::DeleteUserParams::Reader::getUserId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::DeleteUserParams::Builder::getUserId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::DeleteUserParams::Builder::setUserId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::DeleteUserParams::Builder::initUserId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::DeleteUserParams::Builder::adoptUserId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::DeleteUserParams::Builder::disownUserId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::GetGrainStorageUsageParams::Reader::hasOwnerId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backend::GetGrainStorageUsageParams::Builder::hasOwnerId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::GetGrainStorageUsageParams::Reader::getOwnerId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::GetGrainStorageUsageParams::Builder::getOwnerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backend::GetGrainStorageUsageParams::Builder::setOwnerId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::GetGrainStorageUsageParams::Builder::initOwnerId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backend::GetGrainStorageUsageParams::Builder::adoptOwnerId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::GetGrainStorageUsageParams::Builder::disownOwnerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Backend::GetGrainStorageUsageParams::Reader::hasGrainId() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Backend::GetGrainStorageUsageParams::Builder::hasGrainId() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Backend::GetGrainStorageUsageParams::Reader::getGrainId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Backend::GetGrainStorageUsageParams::Builder::getGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Backend::GetGrainStorageUsageParams::Builder::setGrainId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Backend::GetGrainStorageUsageParams::Builder::initGrainId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Backend::GetGrainStorageUsageParams::Builder::adoptGrainId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Backend::GetGrainStorageUsageParams::Builder::disownGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint64_t Backend::GetGrainStorageUsageResults::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Backend::GetGrainStorageUsageResults::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Backend::GetGrainStorageUsageResults::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

#if !CAPNP_LITE
inline SandstormCoreFactory::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline SandstormCoreFactory::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline SandstormCoreFactory::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline SandstormCoreFactory::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline SandstormCoreFactory::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::SandstormCoreFactory::Client& SandstormCoreFactory::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::SandstormCoreFactory::Client& SandstormCoreFactory::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool SandstormCoreFactory::GetSandstormCoreParams::Reader::hasGrainId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCoreFactory::GetSandstormCoreParams::Builder::hasGrainId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SandstormCoreFactory::GetSandstormCoreParams::Reader::getGrainId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SandstormCoreFactory::GetSandstormCoreParams::Builder::getGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SandstormCoreFactory::GetSandstormCoreParams::Builder::setGrainId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SandstormCoreFactory::GetSandstormCoreParams::Builder::initGrainId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SandstormCoreFactory::GetSandstormCoreParams::Builder::adoptGrainId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SandstormCoreFactory::GetSandstormCoreParams::Builder::disownGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SandstormCoreFactory::GetSandstormCoreResults::Reader::hasCore() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCoreFactory::GetSandstormCoreResults::Builder::hasCore() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::SandstormCore::Client SandstormCoreFactory::GetSandstormCoreResults::Reader::getCore() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::SandstormCore::Client SandstormCoreFactory::GetSandstormCoreResults::Builder::getCore() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::SandstormCore::Client SandstormCoreFactory::GetSandstormCoreResults::Pipeline::getCore() {
  return  ::sandstorm::SandstormCore::Client(_typeless.getPointerField(0).asCap());
}
inline void SandstormCoreFactory::GetSandstormCoreResults::Builder::setCore( ::sandstorm::SandstormCore::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SandstormCoreFactory::GetSandstormCoreResults::Builder::setCore( ::sandstorm::SandstormCore::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SandstormCoreFactory::GetSandstormCoreResults::Builder::adoptCore(
    ::capnp::Orphan< ::sandstorm::SandstormCore>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::SandstormCore> SandstormCoreFactory::GetSandstormCoreResults::Builder::disownCore() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

}  // namespace

#endif  // CAPNP_INCLUDED_dcbc0d702b1b47a5_
