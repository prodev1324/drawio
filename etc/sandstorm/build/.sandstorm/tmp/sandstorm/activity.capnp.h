// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: activity.capnp

#ifndef CAPNP_INCLUDED_a4e001d4cbcf33fa_
#define CAPNP_INCLUDED_a4e001d4cbcf33fa_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "identity.capnp.h"
#include "util.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a7c0b6eaa98c6c4b);
CAPNP_DECLARE_SCHEMA(f3902b5a86ffba44);
CAPNP_DECLARE_SCHEMA(bb4d119bbcd89677);
CAPNP_DECLARE_SCHEMA(e638de0ad7c89a2b);
CAPNP_DECLARE_SCHEMA(99956e455df360cf);
CAPNP_DECLARE_SCHEMA(d3b9f2ca42d4f783);
CAPNP_DECLARE_SCHEMA(f0f87337d73020f0);
CAPNP_DECLARE_SCHEMA(daaca64376c9033a);
CAPNP_DECLARE_SCHEMA(ee4cbafe4028d3c2);
CAPNP_DECLARE_SCHEMA(fe851ddbb88940cd);
CAPNP_DECLARE_SCHEMA(f1d1cb82a830948b);
CAPNP_DECLARE_SCHEMA(f81453d4b819e209);

}  // namespace schemas
}  // namespace capnp

namespace sandstorm {

struct ActivityEvent {
  ActivityEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct ThreadInfo;
  struct User;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a7c0b6eaa98c6c4b, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ActivityEvent::ThreadInfo {
  ThreadInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f3902b5a86ffba44, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ActivityEvent::User {
  User() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb4d119bbcd89677, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ActivityTypeDef {
  ActivityTypeDef() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct RequiredPermission;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e638de0ad7c89a2b, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ActivityTypeDef::RequiredPermission {
  RequiredPermission() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    EVERYONE,
    PERMISSION_INDEX,
    EXPLICIT_LIST,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(99956e455df360cf, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct NotificationDisplayInfo {
  NotificationDisplayInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d3b9f2ca42d4f783, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct NotificationTarget {
  NotificationTarget() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct AddOngoingParams;
  struct AddOngoingResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(f0f87337d73020f0)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct NotificationTarget::AddOngoingParams {
  AddOngoingParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(daaca64376c9033a, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct NotificationTarget::AddOngoingResults {
  AddOngoingResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee4cbafe4028d3c2, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct OngoingNotification {
  OngoingNotification() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct CancelParams;
  struct CancelResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(fe851ddbb88940cd)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct OngoingNotification::CancelParams {
  CancelParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f1d1cb82a830948b, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct OngoingNotification::CancelResults {
  CancelResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f81453d4b819e209, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ActivityEvent::Reader {
public:
  typedef ActivityEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasNotification() const;
  inline  ::sandstorm::NotificationDisplayInfo::Reader getNotification() const;

  inline  ::uint16_t getType() const;

  inline bool hasUsers() const;
  inline  ::capnp::List< ::sandstorm::ActivityEvent::User>::Reader getUsers() const;

  inline bool hasThread() const;
  inline  ::sandstorm::ActivityEvent::ThreadInfo::Reader getThread() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActivityEvent::Builder {
public:
  typedef ActivityEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasNotification();
  inline  ::sandstorm::NotificationDisplayInfo::Builder getNotification();
  inline void setNotification( ::sandstorm::NotificationDisplayInfo::Reader value);
  inline  ::sandstorm::NotificationDisplayInfo::Builder initNotification();
  inline void adoptNotification(::capnp::Orphan< ::sandstorm::NotificationDisplayInfo>&& value);
  inline ::capnp::Orphan< ::sandstorm::NotificationDisplayInfo> disownNotification();

  inline  ::uint16_t getType();
  inline void setType( ::uint16_t value);

  inline bool hasUsers();
  inline  ::capnp::List< ::sandstorm::ActivityEvent::User>::Builder getUsers();
  inline void setUsers( ::capnp::List< ::sandstorm::ActivityEvent::User>::Reader value);
  inline  ::capnp::List< ::sandstorm::ActivityEvent::User>::Builder initUsers(unsigned int size);
  inline void adoptUsers(::capnp::Orphan< ::capnp::List< ::sandstorm::ActivityEvent::User>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::ActivityEvent::User>> disownUsers();

  inline bool hasThread();
  inline  ::sandstorm::ActivityEvent::ThreadInfo::Builder getThread();
  inline void setThread( ::sandstorm::ActivityEvent::ThreadInfo::Reader value);
  inline  ::sandstorm::ActivityEvent::ThreadInfo::Builder initThread();
  inline void adoptThread(::capnp::Orphan< ::sandstorm::ActivityEvent::ThreadInfo>&& value);
  inline ::capnp::Orphan< ::sandstorm::ActivityEvent::ThreadInfo> disownThread();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActivityEvent::Pipeline {
public:
  typedef ActivityEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::NotificationDisplayInfo::Pipeline getNotification();
  inline  ::sandstorm::ActivityEvent::ThreadInfo::Pipeline getThread();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ActivityEvent::ThreadInfo::Reader {
public:
  typedef ThreadInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasTitle() const;
  inline  ::sandstorm::LocalizedText::Reader getTitle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActivityEvent::ThreadInfo::Builder {
public:
  typedef ThreadInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasTitle();
  inline  ::sandstorm::LocalizedText::Builder getTitle();
  inline void setTitle( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initTitle();
  inline void adoptTitle(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownTitle();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActivityEvent::ThreadInfo::Pipeline {
public:
  typedef ThreadInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::LocalizedText::Pipeline getTitle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ActivityEvent::User::Reader {
public:
  typedef User Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasIdentity() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Identity::Client getIdentity() const;
#endif  // !CAPNP_LITE

  inline bool getMentioned() const;

  inline bool getCanView() const;

  inline bool getSubscribed() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActivityEvent::User::Builder {
public:
  typedef User Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasIdentity();
#if !CAPNP_LITE
  inline  ::sandstorm::Identity::Client getIdentity();
  inline void setIdentity( ::sandstorm::Identity::Client&& value);
  inline void setIdentity( ::sandstorm::Identity::Client& value);
  inline void adoptIdentity(::capnp::Orphan< ::sandstorm::Identity>&& value);
  inline ::capnp::Orphan< ::sandstorm::Identity> disownIdentity();
#endif  // !CAPNP_LITE

  inline bool getMentioned();
  inline void setMentioned(bool value);

  inline bool getCanView();
  inline void setCanView(bool value);

  inline bool getSubscribed();
  inline void setSubscribed(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActivityEvent::User::Pipeline {
public:
  typedef User Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Identity::Client getIdentity();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ActivityTypeDef::Reader {
public:
  typedef ActivityTypeDef Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasVerbPhrase() const;
  inline  ::sandstorm::LocalizedText::Reader getVerbPhrase() const;

  inline bool hasDescription() const;
  inline  ::sandstorm::LocalizedText::Reader getDescription() const;

  inline typename RequiredPermission::Reader getRequiredPermission() const;

  inline bool getObsolete() const;

  inline bool getNotifySubscribers() const;

  inline bool getAutoSubscribeToThread() const;

  inline bool getAutoSubscribeToGrain() const;

  inline bool getSuppressUnread() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActivityTypeDef::Builder {
public:
  typedef ActivityTypeDef Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasVerbPhrase();
  inline  ::sandstorm::LocalizedText::Builder getVerbPhrase();
  inline void setVerbPhrase( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initVerbPhrase();
  inline void adoptVerbPhrase(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownVerbPhrase();

  inline bool hasDescription();
  inline  ::sandstorm::LocalizedText::Builder getDescription();
  inline void setDescription( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initDescription();
  inline void adoptDescription(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownDescription();

  inline typename RequiredPermission::Builder getRequiredPermission();
  inline typename RequiredPermission::Builder initRequiredPermission();

  inline bool getObsolete();
  inline void setObsolete(bool value);

  inline bool getNotifySubscribers();
  inline void setNotifySubscribers(bool value);

  inline bool getAutoSubscribeToThread();
  inline void setAutoSubscribeToThread(bool value);

  inline bool getAutoSubscribeToGrain();
  inline void setAutoSubscribeToGrain(bool value);

  inline bool getSuppressUnread();
  inline void setSuppressUnread(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActivityTypeDef::Pipeline {
public:
  typedef ActivityTypeDef Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::LocalizedText::Pipeline getVerbPhrase();
  inline  ::sandstorm::LocalizedText::Pipeline getDescription();
  inline typename RequiredPermission::Pipeline getRequiredPermission();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ActivityTypeDef::RequiredPermission::Reader {
public:
  typedef RequiredPermission Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isEveryone() const;
  inline  ::capnp::Void getEveryone() const;

  inline bool isPermissionIndex() const;
  inline  ::uint16_t getPermissionIndex() const;

  inline bool isExplicitList() const;
  inline  ::capnp::Void getExplicitList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActivityTypeDef::RequiredPermission::Builder {
public:
  typedef RequiredPermission Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isEveryone();
  inline  ::capnp::Void getEveryone();
  inline void setEveryone( ::capnp::Void value = ::capnp::VOID);

  inline bool isPermissionIndex();
  inline  ::uint16_t getPermissionIndex();
  inline void setPermissionIndex( ::uint16_t value);

  inline bool isExplicitList();
  inline  ::capnp::Void getExplicitList();
  inline void setExplicitList( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActivityTypeDef::RequiredPermission::Pipeline {
public:
  typedef RequiredPermission Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NotificationDisplayInfo::Reader {
public:
  typedef NotificationDisplayInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasCaption() const;
  inline  ::sandstorm::LocalizedText::Reader getCaption() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NotificationDisplayInfo::Builder {
public:
  typedef NotificationDisplayInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCaption();
  inline  ::sandstorm::LocalizedText::Builder getCaption();
  inline void setCaption( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initCaption();
  inline void adoptCaption(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownCaption();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NotificationDisplayInfo::Pipeline {
public:
  typedef NotificationDisplayInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::LocalizedText::Pipeline getCaption();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class NotificationTarget::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef NotificationTarget Calls;
  typedef NotificationTarget Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::NotificationTarget::AddOngoingParams,  ::sandstorm::NotificationTarget::AddOngoingResults> addOngoingRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class NotificationTarget::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef NotificationTarget Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::NotificationTarget::AddOngoingParams AddOngoingParams;
  typedef  ::sandstorm::NotificationTarget::AddOngoingResults AddOngoingResults;
  typedef ::capnp::CallContext<AddOngoingParams, AddOngoingResults> AddOngoingContext;
  virtual ::kj::Promise<void> addOngoing(AddOngoingContext context);

  inline  ::sandstorm::NotificationTarget::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::NotificationTarget>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class NotificationTarget::AddOngoingParams::Reader {
public:
  typedef AddOngoingParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasDisplayInfo() const;
  inline  ::sandstorm::NotificationDisplayInfo::Reader getDisplayInfo() const;

  inline bool hasNotification() const;
#if !CAPNP_LITE
  inline  ::sandstorm::OngoingNotification::Client getNotification() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NotificationTarget::AddOngoingParams::Builder {
public:
  typedef AddOngoingParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDisplayInfo();
  inline  ::sandstorm::NotificationDisplayInfo::Builder getDisplayInfo();
  inline void setDisplayInfo( ::sandstorm::NotificationDisplayInfo::Reader value);
  inline  ::sandstorm::NotificationDisplayInfo::Builder initDisplayInfo();
  inline void adoptDisplayInfo(::capnp::Orphan< ::sandstorm::NotificationDisplayInfo>&& value);
  inline ::capnp::Orphan< ::sandstorm::NotificationDisplayInfo> disownDisplayInfo();

  inline bool hasNotification();
#if !CAPNP_LITE
  inline  ::sandstorm::OngoingNotification::Client getNotification();
  inline void setNotification( ::sandstorm::OngoingNotification::Client&& value);
  inline void setNotification( ::sandstorm::OngoingNotification::Client& value);
  inline void adoptNotification(::capnp::Orphan< ::sandstorm::OngoingNotification>&& value);
  inline ::capnp::Orphan< ::sandstorm::OngoingNotification> disownNotification();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NotificationTarget::AddOngoingParams::Pipeline {
public:
  typedef AddOngoingParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::NotificationDisplayInfo::Pipeline getDisplayInfo();
  inline  ::sandstorm::OngoingNotification::Client getNotification();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NotificationTarget::AddOngoingResults::Reader {
public:
  typedef AddOngoingResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasHandle() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Handle::Client getHandle() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NotificationTarget::AddOngoingResults::Builder {
public:
  typedef AddOngoingResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHandle();
#if !CAPNP_LITE
  inline  ::sandstorm::Handle::Client getHandle();
  inline void setHandle( ::sandstorm::Handle::Client&& value);
  inline void setHandle( ::sandstorm::Handle::Client& value);
  inline void adoptHandle(::capnp::Orphan< ::sandstorm::Handle>&& value);
  inline ::capnp::Orphan< ::sandstorm::Handle> disownHandle();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NotificationTarget::AddOngoingResults::Pipeline {
public:
  typedef AddOngoingResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Handle::Client getHandle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class OngoingNotification::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef OngoingNotification Calls;
  typedef OngoingNotification Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::OngoingNotification::CancelParams,  ::sandstorm::OngoingNotification::CancelResults> cancelRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class OngoingNotification::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef OngoingNotification Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::OngoingNotification::CancelParams CancelParams;
  typedef  ::sandstorm::OngoingNotification::CancelResults CancelResults;
  typedef ::capnp::CallContext<CancelParams, CancelResults> CancelContext;
  virtual ::kj::Promise<void> cancel(CancelContext context);

  inline  ::sandstorm::OngoingNotification::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::OngoingNotification>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class OngoingNotification::CancelParams::Reader {
public:
  typedef CancelParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OngoingNotification::CancelParams::Builder {
public:
  typedef CancelParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OngoingNotification::CancelParams::Pipeline {
public:
  typedef CancelParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OngoingNotification::CancelResults::Reader {
public:
  typedef CancelResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OngoingNotification::CancelResults::Builder {
public:
  typedef CancelResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OngoingNotification::CancelResults::Pipeline {
public:
  typedef CancelResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ActivityEvent::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ActivityEvent::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActivityEvent::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActivityEvent::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ActivityEvent::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActivityEvent::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ActivityEvent::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActivityEvent::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ActivityEvent::Reader::hasNotification() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ActivityEvent::Builder::hasNotification() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::NotificationDisplayInfo::Reader ActivityEvent::Reader::getNotification() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::NotificationDisplayInfo::Builder ActivityEvent::Builder::getNotification() {
  return ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::NotificationDisplayInfo::Pipeline ActivityEvent::Pipeline::getNotification() {
  return  ::sandstorm::NotificationDisplayInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ActivityEvent::Builder::setNotification( ::sandstorm::NotificationDisplayInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::NotificationDisplayInfo::Builder ActivityEvent::Builder::initNotification() {
  return ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ActivityEvent::Builder::adoptNotification(
    ::capnp::Orphan< ::sandstorm::NotificationDisplayInfo>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::NotificationDisplayInfo> ActivityEvent::Builder::disownNotification() {
  return ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint16_t ActivityEvent::Reader::getType() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t ActivityEvent::Builder::getType() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void ActivityEvent::Builder::setType( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ActivityEvent::Reader::hasUsers() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool ActivityEvent::Builder::hasUsers() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::ActivityEvent::User>::Reader ActivityEvent::Reader::getUsers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::ActivityEvent::User>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::ActivityEvent::User>::Builder ActivityEvent::Builder::getUsers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::ActivityEvent::User>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void ActivityEvent::Builder::setUsers( ::capnp::List< ::sandstorm::ActivityEvent::User>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::ActivityEvent::User>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::ActivityEvent::User>::Builder ActivityEvent::Builder::initUsers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::ActivityEvent::User>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void ActivityEvent::Builder::adoptUsers(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::ActivityEvent::User>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::ActivityEvent::User>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::ActivityEvent::User>> ActivityEvent::Builder::disownUsers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::ActivityEvent::User>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool ActivityEvent::Reader::hasThread() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool ActivityEvent::Builder::hasThread() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::ActivityEvent::ThreadInfo::Reader ActivityEvent::Reader::getThread() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent::ThreadInfo>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::sandstorm::ActivityEvent::ThreadInfo::Builder ActivityEvent::Builder::getThread() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent::ThreadInfo>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::ActivityEvent::ThreadInfo::Pipeline ActivityEvent::Pipeline::getThread() {
  return  ::sandstorm::ActivityEvent::ThreadInfo::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ActivityEvent::Builder::setThread( ::sandstorm::ActivityEvent::ThreadInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent::ThreadInfo>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::ActivityEvent::ThreadInfo::Builder ActivityEvent::Builder::initThread() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent::ThreadInfo>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void ActivityEvent::Builder::adoptThread(
    ::capnp::Orphan< ::sandstorm::ActivityEvent::ThreadInfo>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent::ThreadInfo>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::ActivityEvent::ThreadInfo> ActivityEvent::Builder::disownThread() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent::ThreadInfo>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool ActivityEvent::ThreadInfo::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ActivityEvent::ThreadInfo::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActivityEvent::ThreadInfo::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActivityEvent::ThreadInfo::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ActivityEvent::ThreadInfo::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActivityEvent::ThreadInfo::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ActivityEvent::ThreadInfo::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActivityEvent::ThreadInfo::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ActivityEvent::ThreadInfo::Reader::hasTitle() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ActivityEvent::ThreadInfo::Builder::hasTitle() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader ActivityEvent::ThreadInfo::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder ActivityEvent::ThreadInfo::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline ActivityEvent::ThreadInfo::Pipeline::getTitle() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ActivityEvent::ThreadInfo::Builder::setTitle( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder ActivityEvent::ThreadInfo::Builder::initTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ActivityEvent::ThreadInfo::Builder::adoptTitle(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> ActivityEvent::ThreadInfo::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ActivityEvent::User::Reader::hasIdentity() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ActivityEvent::User::Builder::hasIdentity() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Identity::Client ActivityEvent::User::Reader::getIdentity() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Identity>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Identity::Client ActivityEvent::User::Builder::getIdentity() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Identity>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Identity::Client ActivityEvent::User::Pipeline::getIdentity() {
  return  ::sandstorm::Identity::Client(_typeless.getPointerField(0).asCap());
}
inline void ActivityEvent::User::Builder::setIdentity( ::sandstorm::Identity::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Identity>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void ActivityEvent::User::Builder::setIdentity( ::sandstorm::Identity::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Identity>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void ActivityEvent::User::Builder::adoptIdentity(
    ::capnp::Orphan< ::sandstorm::Identity>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Identity>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Identity> ActivityEvent::User::Builder::disownIdentity() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Identity>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool ActivityEvent::User::Reader::getMentioned() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool ActivityEvent::User::Builder::getMentioned() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void ActivityEvent::User::Builder::setMentioned(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ActivityEvent::User::Reader::getCanView() const {
  return _reader.getDataField<bool>(
      1 * ::capnp::ELEMENTS);
}

inline bool ActivityEvent::User::Builder::getCanView() {
  return _builder.getDataField<bool>(
      1 * ::capnp::ELEMENTS);
}
inline void ActivityEvent::User::Builder::setCanView(bool value) {
  _builder.setDataField<bool>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool ActivityEvent::User::Reader::getSubscribed() const {
  return _reader.getDataField<bool>(
      2 * ::capnp::ELEMENTS);
}

inline bool ActivityEvent::User::Builder::getSubscribed() {
  return _builder.getDataField<bool>(
      2 * ::capnp::ELEMENTS);
}
inline void ActivityEvent::User::Builder::setSubscribed(bool value) {
  _builder.setDataField<bool>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool ActivityTypeDef::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ActivityTypeDef::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActivityTypeDef::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActivityTypeDef::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ActivityTypeDef::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActivityTypeDef::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ActivityTypeDef::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActivityTypeDef::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ActivityTypeDef::Reader::hasVerbPhrase() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ActivityTypeDef::Builder::hasVerbPhrase() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader ActivityTypeDef::Reader::getVerbPhrase() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder ActivityTypeDef::Builder::getVerbPhrase() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline ActivityTypeDef::Pipeline::getVerbPhrase() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ActivityTypeDef::Builder::setVerbPhrase( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder ActivityTypeDef::Builder::initVerbPhrase() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ActivityTypeDef::Builder::adoptVerbPhrase(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> ActivityTypeDef::Builder::disownVerbPhrase() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ActivityTypeDef::Reader::hasDescription() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool ActivityTypeDef::Builder::hasDescription() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader ActivityTypeDef::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder ActivityTypeDef::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline ActivityTypeDef::Pipeline::getDescription() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ActivityTypeDef::Builder::setDescription( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder ActivityTypeDef::Builder::initDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void ActivityTypeDef::Builder::adoptDescription(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> ActivityTypeDef::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline typename ActivityTypeDef::RequiredPermission::Reader ActivityTypeDef::Reader::getRequiredPermission() const {
  return typename ActivityTypeDef::RequiredPermission::Reader(_reader);
}
inline typename ActivityTypeDef::RequiredPermission::Builder ActivityTypeDef::Builder::getRequiredPermission() {
  return typename ActivityTypeDef::RequiredPermission::Builder(_builder);
}
#if !CAPNP_LITE
inline typename ActivityTypeDef::RequiredPermission::Pipeline ActivityTypeDef::Pipeline::getRequiredPermission() {
  return typename ActivityTypeDef::RequiredPermission::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename ActivityTypeDef::RequiredPermission::Builder ActivityTypeDef::Builder::initRequiredPermission() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(1 * ::capnp::ELEMENTS, 0);
  return typename ActivityTypeDef::RequiredPermission::Builder(_builder);
}
inline bool ActivityTypeDef::Reader::getObsolete() const {
  return _reader.getDataField<bool>(
      32 * ::capnp::ELEMENTS);
}

inline bool ActivityTypeDef::Builder::getObsolete() {
  return _builder.getDataField<bool>(
      32 * ::capnp::ELEMENTS);
}
inline void ActivityTypeDef::Builder::setObsolete(bool value) {
  _builder.setDataField<bool>(
      32 * ::capnp::ELEMENTS, value);
}

inline bool ActivityTypeDef::Reader::getNotifySubscribers() const {
  return _reader.getDataField<bool>(
      33 * ::capnp::ELEMENTS);
}

inline bool ActivityTypeDef::Builder::getNotifySubscribers() {
  return _builder.getDataField<bool>(
      33 * ::capnp::ELEMENTS);
}
inline void ActivityTypeDef::Builder::setNotifySubscribers(bool value) {
  _builder.setDataField<bool>(
      33 * ::capnp::ELEMENTS, value);
}

inline bool ActivityTypeDef::Reader::getAutoSubscribeToThread() const {
  return _reader.getDataField<bool>(
      34 * ::capnp::ELEMENTS);
}

inline bool ActivityTypeDef::Builder::getAutoSubscribeToThread() {
  return _builder.getDataField<bool>(
      34 * ::capnp::ELEMENTS);
}
inline void ActivityTypeDef::Builder::setAutoSubscribeToThread(bool value) {
  _builder.setDataField<bool>(
      34 * ::capnp::ELEMENTS, value);
}

inline bool ActivityTypeDef::Reader::getAutoSubscribeToGrain() const {
  return _reader.getDataField<bool>(
      35 * ::capnp::ELEMENTS);
}

inline bool ActivityTypeDef::Builder::getAutoSubscribeToGrain() {
  return _builder.getDataField<bool>(
      35 * ::capnp::ELEMENTS);
}
inline void ActivityTypeDef::Builder::setAutoSubscribeToGrain(bool value) {
  _builder.setDataField<bool>(
      35 * ::capnp::ELEMENTS, value);
}

inline bool ActivityTypeDef::Reader::getSuppressUnread() const {
  return _reader.getDataField<bool>(
      36 * ::capnp::ELEMENTS);
}

inline bool ActivityTypeDef::Builder::getSuppressUnread() {
  return _builder.getDataField<bool>(
      36 * ::capnp::ELEMENTS);
}
inline void ActivityTypeDef::Builder::setSuppressUnread(bool value) {
  _builder.setDataField<bool>(
      36 * ::capnp::ELEMENTS, value);
}

inline  ::sandstorm::ActivityTypeDef::RequiredPermission::Which ActivityTypeDef::RequiredPermission::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::ActivityTypeDef::RequiredPermission::Which ActivityTypeDef::RequiredPermission::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool ActivityTypeDef::RequiredPermission::Reader::isEveryone() const {
  return which() == ActivityTypeDef::RequiredPermission::EVERYONE;
}
inline bool ActivityTypeDef::RequiredPermission::Builder::isEveryone() {
  return which() == ActivityTypeDef::RequiredPermission::EVERYONE;
}
inline  ::capnp::Void ActivityTypeDef::RequiredPermission::Reader::getEveryone() const {
  KJ_IREQUIRE((which() == ActivityTypeDef::RequiredPermission::EVERYONE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void ActivityTypeDef::RequiredPermission::Builder::getEveryone() {
  KJ_IREQUIRE((which() == ActivityTypeDef::RequiredPermission::EVERYONE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void ActivityTypeDef::RequiredPermission::Builder::setEveryone( ::capnp::Void value) {
  _builder.setDataField<ActivityTypeDef::RequiredPermission::Which>(
      0 * ::capnp::ELEMENTS, ActivityTypeDef::RequiredPermission::EVERYONE);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ActivityTypeDef::RequiredPermission::Reader::isPermissionIndex() const {
  return which() == ActivityTypeDef::RequiredPermission::PERMISSION_INDEX;
}
inline bool ActivityTypeDef::RequiredPermission::Builder::isPermissionIndex() {
  return which() == ActivityTypeDef::RequiredPermission::PERMISSION_INDEX;
}
inline  ::uint16_t ActivityTypeDef::RequiredPermission::Reader::getPermissionIndex() const {
  KJ_IREQUIRE((which() == ActivityTypeDef::RequiredPermission::PERMISSION_INDEX),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint16_t ActivityTypeDef::RequiredPermission::Builder::getPermissionIndex() {
  KJ_IREQUIRE((which() == ActivityTypeDef::RequiredPermission::PERMISSION_INDEX),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}
inline void ActivityTypeDef::RequiredPermission::Builder::setPermissionIndex( ::uint16_t value) {
  _builder.setDataField<ActivityTypeDef::RequiredPermission::Which>(
      0 * ::capnp::ELEMENTS, ActivityTypeDef::RequiredPermission::PERMISSION_INDEX);
  _builder.setDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool ActivityTypeDef::RequiredPermission::Reader::isExplicitList() const {
  return which() == ActivityTypeDef::RequiredPermission::EXPLICIT_LIST;
}
inline bool ActivityTypeDef::RequiredPermission::Builder::isExplicitList() {
  return which() == ActivityTypeDef::RequiredPermission::EXPLICIT_LIST;
}
inline  ::capnp::Void ActivityTypeDef::RequiredPermission::Reader::getExplicitList() const {
  KJ_IREQUIRE((which() == ActivityTypeDef::RequiredPermission::EXPLICIT_LIST),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void ActivityTypeDef::RequiredPermission::Builder::getExplicitList() {
  KJ_IREQUIRE((which() == ActivityTypeDef::RequiredPermission::EXPLICIT_LIST),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void ActivityTypeDef::RequiredPermission::Builder::setExplicitList( ::capnp::Void value) {
  _builder.setDataField<ActivityTypeDef::RequiredPermission::Which>(
      0 * ::capnp::ELEMENTS, ActivityTypeDef::RequiredPermission::EXPLICIT_LIST);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool NotificationDisplayInfo::Reader::hasCaption() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool NotificationDisplayInfo::Builder::hasCaption() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader NotificationDisplayInfo::Reader::getCaption() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder NotificationDisplayInfo::Builder::getCaption() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline NotificationDisplayInfo::Pipeline::getCaption() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void NotificationDisplayInfo::Builder::setCaption( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder NotificationDisplayInfo::Builder::initCaption() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void NotificationDisplayInfo::Builder::adoptCaption(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> NotificationDisplayInfo::Builder::disownCaption() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

#if !CAPNP_LITE
inline NotificationTarget::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline NotificationTarget::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline NotificationTarget::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline NotificationTarget::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline NotificationTarget::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::NotificationTarget::Client& NotificationTarget::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::NotificationTarget::Client& NotificationTarget::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool NotificationTarget::AddOngoingParams::Reader::hasDisplayInfo() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool NotificationTarget::AddOngoingParams::Builder::hasDisplayInfo() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::NotificationDisplayInfo::Reader NotificationTarget::AddOngoingParams::Reader::getDisplayInfo() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::NotificationDisplayInfo::Builder NotificationTarget::AddOngoingParams::Builder::getDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::NotificationDisplayInfo::Pipeline NotificationTarget::AddOngoingParams::Pipeline::getDisplayInfo() {
  return  ::sandstorm::NotificationDisplayInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void NotificationTarget::AddOngoingParams::Builder::setDisplayInfo( ::sandstorm::NotificationDisplayInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::NotificationDisplayInfo::Builder NotificationTarget::AddOngoingParams::Builder::initDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void NotificationTarget::AddOngoingParams::Builder::adoptDisplayInfo(
    ::capnp::Orphan< ::sandstorm::NotificationDisplayInfo>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::NotificationDisplayInfo> NotificationTarget::AddOngoingParams::Builder::disownDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool NotificationTarget::AddOngoingParams::Reader::hasNotification() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool NotificationTarget::AddOngoingParams::Builder::hasNotification() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::OngoingNotification::Client NotificationTarget::AddOngoingParams::Reader::getNotification() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::OngoingNotification>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::OngoingNotification::Client NotificationTarget::AddOngoingParams::Builder::getNotification() {
  return ::capnp::_::PointerHelpers< ::sandstorm::OngoingNotification>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::OngoingNotification::Client NotificationTarget::AddOngoingParams::Pipeline::getNotification() {
  return  ::sandstorm::OngoingNotification::Client(_typeless.getPointerField(1).asCap());
}
inline void NotificationTarget::AddOngoingParams::Builder::setNotification( ::sandstorm::OngoingNotification::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::OngoingNotification>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(cap));
}
inline void NotificationTarget::AddOngoingParams::Builder::setNotification( ::sandstorm::OngoingNotification::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::OngoingNotification>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), cap);
}
inline void NotificationTarget::AddOngoingParams::Builder::adoptNotification(
    ::capnp::Orphan< ::sandstorm::OngoingNotification>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::OngoingNotification>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::OngoingNotification> NotificationTarget::AddOngoingParams::Builder::disownNotification() {
  return ::capnp::_::PointerHelpers< ::sandstorm::OngoingNotification>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool NotificationTarget::AddOngoingResults::Reader::hasHandle() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool NotificationTarget::AddOngoingResults::Builder::hasHandle() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Handle::Client NotificationTarget::AddOngoingResults::Reader::getHandle() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Handle::Client NotificationTarget::AddOngoingResults::Builder::getHandle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Handle::Client NotificationTarget::AddOngoingResults::Pipeline::getHandle() {
  return  ::sandstorm::Handle::Client(_typeless.getPointerField(0).asCap());
}
inline void NotificationTarget::AddOngoingResults::Builder::setHandle( ::sandstorm::Handle::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void NotificationTarget::AddOngoingResults::Builder::setHandle( ::sandstorm::Handle::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void NotificationTarget::AddOngoingResults::Builder::adoptHandle(
    ::capnp::Orphan< ::sandstorm::Handle>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Handle> NotificationTarget::AddOngoingResults::Builder::disownHandle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
inline OngoingNotification::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline OngoingNotification::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline OngoingNotification::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline OngoingNotification::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline OngoingNotification::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::OngoingNotification::Client& OngoingNotification::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::OngoingNotification::Client& OngoingNotification::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
}  // namespace

#endif  // CAPNP_INCLUDED_a4e001d4cbcf33fa_
