// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: web-publishing.capnp

#ifndef CAPNP_INCLUDED_d5d3e63bd0a552b6_
#define CAPNP_INCLUDED_d5d3e63bd0a552b6_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "util.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(dddcca47803e2377);
CAPNP_DECLARE_SCHEMA(d019dd3e3c0e7e68);
CAPNP_DECLARE_SCHEMA(82af432aa6c179b0);
CAPNP_DECLARE_SCHEMA(dc072ae47872d061);
CAPNP_DECLARE_SCHEMA(b2855d483568639e);
CAPNP_DECLARE_SCHEMA(fe1643d6b01e7cf4);
CAPNP_DECLARE_SCHEMA(c3739b6f070fb5ea);
CAPNP_DECLARE_SCHEMA(c3db68ea10a823b6);
CAPNP_DECLARE_SCHEMA(ff383cbabc241462);
CAPNP_DECLARE_SCHEMA(e2ae317a2a41a9f6);
CAPNP_DECLARE_SCHEMA(c63c6c15dd189744);
CAPNP_DECLARE_SCHEMA(dcbe913db7496644);
CAPNP_DECLARE_SCHEMA(90dec3f1a5d9b591);
CAPNP_DECLARE_SCHEMA(87a72be8e04db694);
CAPNP_DECLARE_SCHEMA(f5e0920223f0b273);

}  // namespace schemas
}  // namespace capnp

namespace sandstorm {

struct WebSite {
  WebSite() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct Entity;
  struct GetUrlParams;
  struct GetUrlResults;
  struct GetEntitiesParams;
  struct GetEntitiesResults;
  struct GetNotFoundEntitiesParams;
  struct GetNotFoundEntitiesResults;
  struct UploadBlobParams;
  struct UploadBlobResults;
  struct GetSubsiteParams;
  struct GetSubsiteResults;
  struct ListResourcesParams;
  struct ListResourcesResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(dddcca47803e2377)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct WebSite::Entity {
  Entity() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Body;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d019dd3e3c0e7e68, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSite::Entity::Body {
  Body() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    BYTES,
    BLOB,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(82af432aa6c179b0, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSite::GetUrlParams {
  GetUrlParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dc072ae47872d061, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSite::GetUrlResults {
  GetUrlResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b2855d483568639e, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSite::GetEntitiesParams {
  GetEntitiesParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fe1643d6b01e7cf4, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSite::GetEntitiesResults {
  GetEntitiesResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c3739b6f070fb5ea, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSite::GetNotFoundEntitiesParams {
  GetNotFoundEntitiesParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c3db68ea10a823b6, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSite::GetNotFoundEntitiesResults {
  GetNotFoundEntitiesResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff383cbabc241462, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSite::UploadBlobParams {
  UploadBlobParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e2ae317a2a41a9f6, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSite::UploadBlobResults {
  UploadBlobResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c63c6c15dd189744, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSite::GetSubsiteParams {
  GetSubsiteParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dcbe913db7496644, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSite::GetSubsiteResults {
  GetSubsiteResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(90dec3f1a5d9b591, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSite::ListResourcesParams {
  ListResourcesParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(87a72be8e04db694, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSite::ListResourcesResults {
  ListResourcesResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f5e0920223f0b273, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

#if !CAPNP_LITE
class WebSite::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef WebSite Calls;
  typedef WebSite Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::WebSite::GetUrlParams,  ::sandstorm::WebSite::GetUrlResults> getUrlRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSite::GetEntitiesParams,  ::sandstorm::WebSite::GetEntitiesResults> getEntitiesRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSite::GetNotFoundEntitiesParams,  ::sandstorm::WebSite::GetNotFoundEntitiesResults> getNotFoundEntitiesRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSite::UploadBlobParams,  ::sandstorm::WebSite::UploadBlobResults> uploadBlobRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSite::GetSubsiteParams,  ::sandstorm::WebSite::GetSubsiteResults> getSubsiteRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSite::ListResourcesParams,  ::sandstorm::WebSite::ListResourcesResults> listResourcesRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class WebSite::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef WebSite Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::WebSite::GetUrlParams GetUrlParams;
  typedef  ::sandstorm::WebSite::GetUrlResults GetUrlResults;
  typedef ::capnp::CallContext<GetUrlParams, GetUrlResults> GetUrlContext;
  virtual ::kj::Promise<void> getUrl(GetUrlContext context);
  typedef  ::sandstorm::WebSite::GetEntitiesParams GetEntitiesParams;
  typedef  ::sandstorm::WebSite::GetEntitiesResults GetEntitiesResults;
  typedef ::capnp::CallContext<GetEntitiesParams, GetEntitiesResults> GetEntitiesContext;
  virtual ::kj::Promise<void> getEntities(GetEntitiesContext context);
  typedef  ::sandstorm::WebSite::GetNotFoundEntitiesParams GetNotFoundEntitiesParams;
  typedef  ::sandstorm::WebSite::GetNotFoundEntitiesResults GetNotFoundEntitiesResults;
  typedef ::capnp::CallContext<GetNotFoundEntitiesParams, GetNotFoundEntitiesResults> GetNotFoundEntitiesContext;
  virtual ::kj::Promise<void> getNotFoundEntities(GetNotFoundEntitiesContext context);
  typedef  ::sandstorm::WebSite::UploadBlobParams UploadBlobParams;
  typedef  ::sandstorm::WebSite::UploadBlobResults UploadBlobResults;
  typedef ::capnp::CallContext<UploadBlobParams, UploadBlobResults> UploadBlobContext;
  virtual ::kj::Promise<void> uploadBlob(UploadBlobContext context);
  typedef  ::sandstorm::WebSite::GetSubsiteParams GetSubsiteParams;
  typedef  ::sandstorm::WebSite::GetSubsiteResults GetSubsiteResults;
  typedef ::capnp::CallContext<GetSubsiteParams, GetSubsiteResults> GetSubsiteContext;
  virtual ::kj::Promise<void> getSubsite(GetSubsiteContext context);
  typedef  ::sandstorm::WebSite::ListResourcesParams ListResourcesParams;
  typedef  ::sandstorm::WebSite::ListResourcesResults ListResourcesResults;
  typedef ::capnp::CallContext<ListResourcesParams, ListResourcesResults> ListResourcesContext;
  virtual ::kj::Promise<void> listResources(ListResourcesContext context);

  inline  ::sandstorm::WebSite::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::WebSite>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class WebSite::Entity::Reader {
public:
  typedef Entity Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMimeType() const;
  inline  ::capnp::Text::Reader getMimeType() const;

  inline bool hasLanguage() const;
  inline  ::capnp::Text::Reader getLanguage() const;

  inline bool hasEncoding() const;
  inline  ::capnp::Text::Reader getEncoding() const;

  inline typename Body::Reader getBody() const;

  inline bool hasRedirectTo() const;
  inline  ::capnp::Text::Reader getRedirectTo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSite::Entity::Builder {
public:
  typedef Entity Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMimeType();
  inline  ::capnp::Text::Builder getMimeType();
  inline void setMimeType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMimeType(unsigned int size);
  inline void adoptMimeType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMimeType();

  inline bool hasLanguage();
  inline  ::capnp::Text::Builder getLanguage();
  inline void setLanguage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLanguage(unsigned int size);
  inline void adoptLanguage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLanguage();

  inline bool hasEncoding();
  inline  ::capnp::Text::Builder getEncoding();
  inline void setEncoding( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEncoding(unsigned int size);
  inline void adoptEncoding(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEncoding();

  inline typename Body::Builder getBody();
  inline typename Body::Builder initBody();

  inline bool hasRedirectTo();
  inline  ::capnp::Text::Builder getRedirectTo();
  inline void setRedirectTo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRedirectTo(unsigned int size);
  inline void adoptRedirectTo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRedirectTo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSite::Entity::Pipeline {
public:
  typedef Entity Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Body::Pipeline getBody();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSite::Entity::Body::Reader {
public:
  typedef Body Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isBytes() const;
  inline bool hasBytes() const;
  inline  ::capnp::Data::Reader getBytes() const;

  inline bool isBlob() const;
  inline bool hasBlob() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Blob::Client getBlob() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSite::Entity::Body::Builder {
public:
  typedef Body Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isBytes();
  inline bool hasBytes();
  inline  ::capnp::Data::Builder getBytes();
  inline void setBytes( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initBytes(unsigned int size);
  inline void adoptBytes(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownBytes();

  inline bool isBlob();
  inline bool hasBlob();
#if !CAPNP_LITE
  inline  ::sandstorm::Blob::Client getBlob();
  inline void setBlob( ::sandstorm::Blob::Client&& value);
  inline void setBlob( ::sandstorm::Blob::Client& value);
  inline void adoptBlob(::capnp::Orphan< ::sandstorm::Blob>&& value);
  inline ::capnp::Orphan< ::sandstorm::Blob> disownBlob();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSite::Entity::Body::Pipeline {
public:
  typedef Body Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSite::GetUrlParams::Reader {
public:
  typedef GetUrlParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSite::GetUrlParams::Builder {
public:
  typedef GetUrlParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSite::GetUrlParams::Pipeline {
public:
  typedef GetUrlParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSite::GetUrlResults::Reader {
public:
  typedef GetUrlResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSite::GetUrlResults::Builder {
public:
  typedef GetUrlResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSite::GetUrlResults::Pipeline {
public:
  typedef GetUrlResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSite::GetEntitiesParams::Reader {
public:
  typedef GetEntitiesParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSite::GetEntitiesParams::Builder {
public:
  typedef GetEntitiesParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSite::GetEntitiesParams::Pipeline {
public:
  typedef GetEntitiesParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSite::GetEntitiesResults::Reader {
public:
  typedef GetEntitiesResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasEntities() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client getEntities() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSite::GetEntitiesResults::Builder {
public:
  typedef GetEntitiesResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEntities();
#if !CAPNP_LITE
  inline  ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client getEntities();
  inline void setEntities( ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client&& value);
  inline void setEntities( ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client& value);
  inline void adoptEntities(::capnp::Orphan< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>>&& value);
  inline ::capnp::Orphan< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>> disownEntities();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSite::GetEntitiesResults::Pipeline {
public:
  typedef GetEntitiesResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client getEntities();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSite::GetNotFoundEntitiesParams::Reader {
public:
  typedef GetNotFoundEntitiesParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSite::GetNotFoundEntitiesParams::Builder {
public:
  typedef GetNotFoundEntitiesParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSite::GetNotFoundEntitiesParams::Pipeline {
public:
  typedef GetNotFoundEntitiesParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSite::GetNotFoundEntitiesResults::Reader {
public:
  typedef GetNotFoundEntitiesResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasEntities() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client getEntities() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSite::GetNotFoundEntitiesResults::Builder {
public:
  typedef GetNotFoundEntitiesResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEntities();
#if !CAPNP_LITE
  inline  ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client getEntities();
  inline void setEntities( ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client&& value);
  inline void setEntities( ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client& value);
  inline void adoptEntities(::capnp::Orphan< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>>&& value);
  inline ::capnp::Orphan< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>> disownEntities();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSite::GetNotFoundEntitiesResults::Pipeline {
public:
  typedef GetNotFoundEntitiesResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client getEntities();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSite::UploadBlobParams::Reader {
public:
  typedef UploadBlobParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSite::UploadBlobParams::Builder {
public:
  typedef UploadBlobParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSite::UploadBlobParams::Pipeline {
public:
  typedef UploadBlobParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSite::UploadBlobResults::Reader {
public:
  typedef UploadBlobResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasBlob() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Blob::Client getBlob() const;
#endif  // !CAPNP_LITE

  inline bool hasStream() const;
#if !CAPNP_LITE
  inline  ::sandstorm::ByteStream::Client getStream() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSite::UploadBlobResults::Builder {
public:
  typedef UploadBlobResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBlob();
#if !CAPNP_LITE
  inline  ::sandstorm::Blob::Client getBlob();
  inline void setBlob( ::sandstorm::Blob::Client&& value);
  inline void setBlob( ::sandstorm::Blob::Client& value);
  inline void adoptBlob(::capnp::Orphan< ::sandstorm::Blob>&& value);
  inline ::capnp::Orphan< ::sandstorm::Blob> disownBlob();
#endif  // !CAPNP_LITE

  inline bool hasStream();
#if !CAPNP_LITE
  inline  ::sandstorm::ByteStream::Client getStream();
  inline void setStream( ::sandstorm::ByteStream::Client&& value);
  inline void setStream( ::sandstorm::ByteStream::Client& value);
  inline void adoptStream(::capnp::Orphan< ::sandstorm::ByteStream>&& value);
  inline ::capnp::Orphan< ::sandstorm::ByteStream> disownStream();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSite::UploadBlobResults::Pipeline {
public:
  typedef UploadBlobResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Blob::Client getBlob();
  inline  ::sandstorm::ByteStream::Client getStream();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSite::GetSubsiteParams::Reader {
public:
  typedef GetSubsiteParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPrefix() const;
  inline  ::capnp::Text::Reader getPrefix() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSite::GetSubsiteParams::Builder {
public:
  typedef GetSubsiteParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPrefix();
  inline  ::capnp::Text::Builder getPrefix();
  inline void setPrefix( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPrefix(unsigned int size);
  inline void adoptPrefix(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPrefix();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSite::GetSubsiteParams::Pipeline {
public:
  typedef GetSubsiteParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSite::GetSubsiteResults::Reader {
public:
  typedef GetSubsiteResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasSite() const;
#if !CAPNP_LITE
  inline  ::sandstorm::WebSite::Client getSite() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSite::GetSubsiteResults::Builder {
public:
  typedef GetSubsiteResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSite();
#if !CAPNP_LITE
  inline  ::sandstorm::WebSite::Client getSite();
  inline void setSite( ::sandstorm::WebSite::Client&& value);
  inline void setSite( ::sandstorm::WebSite::Client& value);
  inline void adoptSite(::capnp::Orphan< ::sandstorm::WebSite>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSite> disownSite();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSite::GetSubsiteResults::Pipeline {
public:
  typedef GetSubsiteResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSite::Client getSite();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSite::ListResourcesParams::Reader {
public:
  typedef ListResourcesParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool getShallow() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSite::ListResourcesParams::Builder {
public:
  typedef ListResourcesParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getShallow();
  inline void setShallow(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSite::ListResourcesParams::Pipeline {
public:
  typedef ListResourcesParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSite::ListResourcesResults::Reader {
public:
  typedef ListResourcesResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasNames() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getNames() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSite::ListResourcesResults::Builder {
public:
  typedef ListResourcesResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasNames();
  inline  ::capnp::List< ::capnp::Text>::Builder getNames();
  inline void setNames( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setNames(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initNames(unsigned int size);
  inline void adoptNames(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownNames();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSite::ListResourcesResults::Pipeline {
public:
  typedef ListResourcesResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
inline WebSite::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline WebSite::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline WebSite::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline WebSite::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline WebSite::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::WebSite::Client& WebSite::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::WebSite::Client& WebSite::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool WebSite::Entity::Reader::hasMimeType() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSite::Entity::Builder::hasMimeType() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSite::Entity::Reader::getMimeType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSite::Entity::Builder::getMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSite::Entity::Builder::setMimeType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSite::Entity::Builder::initMimeType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSite::Entity::Builder::adoptMimeType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSite::Entity::Builder::disownMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSite::Entity::Reader::hasLanguage() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSite::Entity::Builder::hasLanguage() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSite::Entity::Reader::getLanguage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSite::Entity::Builder::getLanguage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSite::Entity::Builder::setLanguage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSite::Entity::Builder::initLanguage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSite::Entity::Builder::adoptLanguage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSite::Entity::Builder::disownLanguage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSite::Entity::Reader::hasEncoding() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSite::Entity::Builder::hasEncoding() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSite::Entity::Reader::getEncoding() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSite::Entity::Builder::getEncoding() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSite::Entity::Builder::setEncoding( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSite::Entity::Builder::initEncoding(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void WebSite::Entity::Builder::adoptEncoding(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSite::Entity::Builder::disownEncoding() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline typename WebSite::Entity::Body::Reader WebSite::Entity::Reader::getBody() const {
  return typename WebSite::Entity::Body::Reader(_reader);
}
inline typename WebSite::Entity::Body::Builder WebSite::Entity::Builder::getBody() {
  return typename WebSite::Entity::Body::Builder(_builder);
}
#if !CAPNP_LITE
inline typename WebSite::Entity::Body::Pipeline WebSite::Entity::Pipeline::getBody() {
  return typename WebSite::Entity::Body::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename WebSite::Entity::Body::Builder WebSite::Entity::Builder::initBody() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(3 * ::capnp::POINTERS).clear();
  return typename WebSite::Entity::Body::Builder(_builder);
}
inline bool WebSite::Entity::Reader::hasRedirectTo() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool WebSite::Entity::Builder::hasRedirectTo() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSite::Entity::Reader::getRedirectTo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSite::Entity::Builder::getRedirectTo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void WebSite::Entity::Builder::setRedirectTo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSite::Entity::Builder::initRedirectTo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void WebSite::Entity::Builder::adoptRedirectTo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSite::Entity::Builder::disownRedirectTo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline  ::sandstorm::WebSite::Entity::Body::Which WebSite::Entity::Body::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::WebSite::Entity::Body::Which WebSite::Entity::Body::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool WebSite::Entity::Body::Reader::isBytes() const {
  return which() == WebSite::Entity::Body::BYTES;
}
inline bool WebSite::Entity::Body::Builder::isBytes() {
  return which() == WebSite::Entity::Body::BYTES;
}
inline bool WebSite::Entity::Body::Reader::hasBytes() const {
  if (which() != WebSite::Entity::Body::BYTES) return false;
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool WebSite::Entity::Body::Builder::hasBytes() {
  if (which() != WebSite::Entity::Body::BYTES) return false;
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader WebSite::Entity::Body::Reader::getBytes() const {
  KJ_IREQUIRE((which() == WebSite::Entity::Body::BYTES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder WebSite::Entity::Body::Builder::getBytes() {
  KJ_IREQUIRE((which() == WebSite::Entity::Body::BYTES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void WebSite::Entity::Body::Builder::setBytes( ::capnp::Data::Reader value) {
  _builder.setDataField<WebSite::Entity::Body::Which>(
      0 * ::capnp::ELEMENTS, WebSite::Entity::Body::BYTES);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder WebSite::Entity::Body::Builder::initBytes(unsigned int size) {
  _builder.setDataField<WebSite::Entity::Body::Which>(
      0 * ::capnp::ELEMENTS, WebSite::Entity::Body::BYTES);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void WebSite::Entity::Body::Builder::adoptBytes(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<WebSite::Entity::Body::Which>(
      0 * ::capnp::ELEMENTS, WebSite::Entity::Body::BYTES);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> WebSite::Entity::Body::Builder::disownBytes() {
  KJ_IREQUIRE((which() == WebSite::Entity::Body::BYTES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool WebSite::Entity::Body::Reader::isBlob() const {
  return which() == WebSite::Entity::Body::BLOB;
}
inline bool WebSite::Entity::Body::Builder::isBlob() {
  return which() == WebSite::Entity::Body::BLOB;
}
inline bool WebSite::Entity::Body::Reader::hasBlob() const {
  if (which() != WebSite::Entity::Body::BLOB) return false;
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool WebSite::Entity::Body::Builder::hasBlob() {
  if (which() != WebSite::Entity::Body::BLOB) return false;
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Blob::Client WebSite::Entity::Body::Reader::getBlob() const {
  KJ_IREQUIRE((which() == WebSite::Entity::Body::BLOB),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::sandstorm::Blob>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::sandstorm::Blob::Client WebSite::Entity::Body::Builder::getBlob() {
  KJ_IREQUIRE((which() == WebSite::Entity::Body::BLOB),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::sandstorm::Blob>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void WebSite::Entity::Body::Builder::setBlob( ::sandstorm::Blob::Client&& cap) {
  _builder.setDataField<WebSite::Entity::Body::Which>(
      0 * ::capnp::ELEMENTS, WebSite::Entity::Body::BLOB);
  ::capnp::_::PointerHelpers< ::sandstorm::Blob>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(cap));
}
inline void WebSite::Entity::Body::Builder::setBlob( ::sandstorm::Blob::Client& cap) {
  _builder.setDataField<WebSite::Entity::Body::Which>(
      0 * ::capnp::ELEMENTS, WebSite::Entity::Body::BLOB);
  ::capnp::_::PointerHelpers< ::sandstorm::Blob>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), cap);
}
inline void WebSite::Entity::Body::Builder::adoptBlob(
    ::capnp::Orphan< ::sandstorm::Blob>&& value) {
  _builder.setDataField<WebSite::Entity::Body::Which>(
      0 * ::capnp::ELEMENTS, WebSite::Entity::Body::BLOB);
  ::capnp::_::PointerHelpers< ::sandstorm::Blob>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Blob> WebSite::Entity::Body::Builder::disownBlob() {
  KJ_IREQUIRE((which() == WebSite::Entity::Body::BLOB),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::sandstorm::Blob>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool WebSite::GetUrlResults::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSite::GetUrlResults::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSite::GetUrlResults::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSite::GetUrlResults::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSite::GetUrlResults::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSite::GetUrlResults::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSite::GetUrlResults::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSite::GetUrlResults::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSite::GetEntitiesParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSite::GetEntitiesParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSite::GetEntitiesParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSite::GetEntitiesParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSite::GetEntitiesParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSite::GetEntitiesParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSite::GetEntitiesParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSite::GetEntitiesParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSite::GetEntitiesResults::Reader::hasEntities() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSite::GetEntitiesResults::Builder::hasEntities() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client WebSite::GetEntitiesResults::Reader::getEntities() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client WebSite::GetEntitiesResults::Builder::getEntities() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client WebSite::GetEntitiesResults::Pipeline::getEntities() {
  return  ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client(_typeless.getPointerField(0).asCap());
}
inline void WebSite::GetEntitiesResults::Builder::setEntities( ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void WebSite::GetEntitiesResults::Builder::setEntities( ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void WebSite::GetEntitiesResults::Builder::adoptEntities(
    ::capnp::Orphan< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>> WebSite::GetEntitiesResults::Builder::disownEntities() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool WebSite::GetNotFoundEntitiesResults::Reader::hasEntities() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSite::GetNotFoundEntitiesResults::Builder::hasEntities() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client WebSite::GetNotFoundEntitiesResults::Reader::getEntities() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client WebSite::GetNotFoundEntitiesResults::Builder::getEntities() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client WebSite::GetNotFoundEntitiesResults::Pipeline::getEntities() {
  return  ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client(_typeless.getPointerField(0).asCap());
}
inline void WebSite::GetNotFoundEntitiesResults::Builder::setEntities( ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void WebSite::GetNotFoundEntitiesResults::Builder::setEntities( ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void WebSite::GetNotFoundEntitiesResults::Builder::adoptEntities(
    ::capnp::Orphan< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>> WebSite::GetNotFoundEntitiesResults::Builder::disownEntities() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List< ::sandstorm::WebSite::Entity>>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool WebSite::UploadBlobResults::Reader::hasBlob() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSite::UploadBlobResults::Builder::hasBlob() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Blob::Client WebSite::UploadBlobResults::Reader::getBlob() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Blob>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Blob::Client WebSite::UploadBlobResults::Builder::getBlob() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Blob>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Blob::Client WebSite::UploadBlobResults::Pipeline::getBlob() {
  return  ::sandstorm::Blob::Client(_typeless.getPointerField(0).asCap());
}
inline void WebSite::UploadBlobResults::Builder::setBlob( ::sandstorm::Blob::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Blob>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void WebSite::UploadBlobResults::Builder::setBlob( ::sandstorm::Blob::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Blob>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void WebSite::UploadBlobResults::Builder::adoptBlob(
    ::capnp::Orphan< ::sandstorm::Blob>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Blob>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Blob> WebSite::UploadBlobResults::Builder::disownBlob() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Blob>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool WebSite::UploadBlobResults::Reader::hasStream() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSite::UploadBlobResults::Builder::hasStream() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::ByteStream::Client WebSite::UploadBlobResults::Reader::getStream() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::ByteStream::Client WebSite::UploadBlobResults::Builder::getStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::ByteStream::Client WebSite::UploadBlobResults::Pipeline::getStream() {
  return  ::sandstorm::ByteStream::Client(_typeless.getPointerField(1).asCap());
}
inline void WebSite::UploadBlobResults::Builder::setStream( ::sandstorm::ByteStream::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(cap));
}
inline void WebSite::UploadBlobResults::Builder::setStream( ::sandstorm::ByteStream::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), cap);
}
inline void WebSite::UploadBlobResults::Builder::adoptStream(
    ::capnp::Orphan< ::sandstorm::ByteStream>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::ByteStream> WebSite::UploadBlobResults::Builder::disownStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool WebSite::GetSubsiteParams::Reader::hasPrefix() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSite::GetSubsiteParams::Builder::hasPrefix() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSite::GetSubsiteParams::Reader::getPrefix() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSite::GetSubsiteParams::Builder::getPrefix() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSite::GetSubsiteParams::Builder::setPrefix( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSite::GetSubsiteParams::Builder::initPrefix(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSite::GetSubsiteParams::Builder::adoptPrefix(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSite::GetSubsiteParams::Builder::disownPrefix() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSite::GetSubsiteResults::Reader::hasSite() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSite::GetSubsiteResults::Builder::hasSite() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSite::Client WebSite::GetSubsiteResults::Reader::getSite() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSite>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSite::Client WebSite::GetSubsiteResults::Builder::getSite() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSite>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSite::Client WebSite::GetSubsiteResults::Pipeline::getSite() {
  return  ::sandstorm::WebSite::Client(_typeless.getPointerField(0).asCap());
}
inline void WebSite::GetSubsiteResults::Builder::setSite( ::sandstorm::WebSite::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSite>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void WebSite::GetSubsiteResults::Builder::setSite( ::sandstorm::WebSite::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSite>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void WebSite::GetSubsiteResults::Builder::adoptSite(
    ::capnp::Orphan< ::sandstorm::WebSite>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSite>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSite> WebSite::GetSubsiteResults::Builder::disownSite() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSite>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool WebSite::ListResourcesParams::Reader::getShallow() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool WebSite::ListResourcesParams::Builder::getShallow() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSite::ListResourcesParams::Builder::setShallow(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool WebSite::ListResourcesResults::Reader::hasNames() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSite::ListResourcesResults::Builder::hasNames() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader WebSite::ListResourcesResults::Reader::getNames() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder WebSite::ListResourcesResults::Builder::getNames() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSite::ListResourcesResults::Builder::setNames( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void WebSite::ListResourcesResults::Builder::setNames(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder WebSite::ListResourcesResults::Builder::initNames(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSite::ListResourcesResults::Builder::adoptNames(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> WebSite::ListResourcesResults::Builder::disownNames() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

}  // namespace

#endif  // CAPNP_INCLUDED_d5d3e63bd0a552b6_
