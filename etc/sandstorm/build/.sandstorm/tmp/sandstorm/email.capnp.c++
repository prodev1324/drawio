// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: email.capnp

#include "email.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<49> b_acaddcee86563ee1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    225,  62,  86, 134, 238, 220, 173, 172,
     22,   0,   0,   0,   1,   0,   0,   0,
    216, 198, 130,  90,  88, 223,  16, 221,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  65, 100, 100, 114, 101,
    115, 115,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     97, 100, 100, 114, 101, 115, 115,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_acaddcee86563ee1 = b_acaddcee86563ee1.words;
#if !CAPNP_LITE
static const uint16_t m_acaddcee86563ee1[] = {0, 1};
static const uint16_t i_acaddcee86563ee1[] = {0, 1};
const ::capnp::_::RawSchema s_acaddcee86563ee1 = {
  0xacaddcee86563ee1, b_acaddcee86563ee1.words, 49, nullptr, m_acaddcee86563ee1,
  0, 2, i_acaddcee86563ee1, nullptr, nullptr, { &s_acaddcee86563ee1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<83> b_b309c51a9d28244f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     79,  36,  40, 157,  26, 197,   9, 179,
     22,   0,   0,   0,   1,   0,   0,   0,
    216, 198, 130,  90,  88, 223,  16, 221,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  65, 116, 116,  97,  99,
    104, 109, 101, 110, 116,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 110, 116,  84,
    121, 112, 101,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 101, 110, 116,  68,
    105, 115, 112, 111, 115, 105, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 101, 110, 116,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 101, 110, 116,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b309c51a9d28244f = b_b309c51a9d28244f.words;
#if !CAPNP_LITE
static const uint16_t m_b309c51a9d28244f[] = {3, 1, 2, 0};
static const uint16_t i_b309c51a9d28244f[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_b309c51a9d28244f = {
  0xb309c51a9d28244f, b_b309c51a9d28244f.words, 83, nullptr, m_b309c51a9d28244f,
  0, 4, i_b309c51a9d28244f, nullptr, nullptr, { &s_b309c51a9d28244f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<242> b_cff459e769562d2f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     47,  45,  86, 105, 231,  89, 244, 207,
     22,   0,   0,   0,   1,   0,   1,   0,
    216, 198, 130,  90,  88, 223,  16, 221,
     12,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 223,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  77, 101, 115, 115,  97,
    103, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     52,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   1,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     88,   1,   0,   0,   3,   0,   1,   0,
    100,   1,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   1,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   1,   0,   0,   3,   0,   1,   0,
    104,   1,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   1,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   1,   0,   0,   3,   0,   1,   0,
    124,   1,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   1,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   1,   0,   0,   3,   0,   1,   0,
    144,   1,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   1,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   1,   0,   0,   3,   0,   1,   0,
    164,   1,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   1,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    156,   1,   0,   0,   3,   0,   1,   0,
    168,   1,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   1,   0,   0,   3,   0,   1,   0,
    176,   1,   0,   0,   2,   0,   1,   0,
      7,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    172,   1,   0,   0,   3,   0,   1,   0,
    200,   1,   0,   0,   2,   0,   1,   0,
      8,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    197,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    196,   1,   0,   0,   3,   0,   1,   0,
    224,   1,   0,   0,   2,   0,   1,   0,
      9,   0,   0,   0,   8,   0,   0,   0,
      0,   0,   1,   0,   9,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    221,   1,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    216,   1,   0,   0,   3,   0,   1,   0,
    228,   1,   0,   0,   2,   0,   1,   0,
     10,   0,   0,   0,   9,   0,   0,   0,
      0,   0,   1,   0,  10,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    225,   1,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    220,   1,   0,   0,   3,   0,   1,   0,
    232,   1,   0,   0,   2,   0,   1,   0,
     11,   0,   0,   0,  10,   0,   0,   0,
      0,   0,   1,   0,  11,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    229,   1,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    224,   1,   0,   0,   3,   0,   1,   0,
    236,   1,   0,   0,   2,   0,   1,   0,
     12,   0,   0,   0,  11,   0,   0,   0,
      0,   0,   1,   0,  12,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    233,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    232,   1,   0,   0,   3,   0,   1,   0,
      4,   2,   0,   0,   2,   0,   1,   0,
    100,  97, 116, 101,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 114, 111, 109,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    225,  62,  86, 134, 238, 220, 173, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 111,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    225,  62,  86, 134, 238, 220, 173, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  99,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    225,  62,  86, 134, 238, 220, 173, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,  99,  99,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    225,  62,  86, 134, 238, 220, 173, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 112, 108, 121,  84, 111,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    225,  62,  86, 134, 238, 220, 173, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 115, 115,  97, 103, 101,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 102, 101, 114, 101, 110,  99,
    101, 115,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110,  82, 101, 112, 108, 121,  84,
    111,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 117,  98, 106, 101,  99, 116,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 120, 116,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 109, 108,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 116, 116,  97,  99, 104, 109, 101,
    110, 116, 115,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     79,  36,  40, 157,  26, 197,   9, 179,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cff459e769562d2f = b_cff459e769562d2f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cff459e769562d2f[] = {
  &s_acaddcee86563ee1,
  &s_b309c51a9d28244f,
};
static const uint16_t m_cff459e769562d2f[] = {12, 4, 3, 0, 1, 11, 8, 6, 7, 5, 9, 10, 2};
static const uint16_t i_cff459e769562d2f[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
const ::capnp::_::RawSchema s_cff459e769562d2f = {
  0xcff459e769562d2f, b_cff459e769562d2f.words, 242, d_cff459e769562d2f, m_cff459e769562d2f,
  2, 13, i_cff459e769562d2f, nullptr, nullptr, { &s_cff459e769562d2f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<45> b_ec831dbf4cc9bcca = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    202, 188, 201,  76, 191,  29, 131, 236,
     22,   0,   0,   0,   3,   0,   0,   0,
    216, 198, 130,  90,  88, 223,  16, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 135,   0,   0,   0,
    133,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  83, 101, 110, 100,  80,
    111, 114, 116,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    211, 157, 137, 252,  97,  12, 121, 144,
      1,   0,   0,   0,  98,   0,   0,   0,
     80, 111, 119, 101, 114,  98, 111, 120,
     84,  97, 103,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    238,  89, 204,  76,  43, 183, 173, 165,
    216, 248,  27, 201, 230, 180,  99, 208,
     49,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    212, 228,  86, 222, 197, 195, 120, 156,
    188, 170,  41, 147,   0, 122, 114, 189,
     25,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   7,   0,   0,   0,
    115, 101, 110, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    104, 105, 110, 116,  65, 100, 100, 114,
    101, 115, 115,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ec831dbf4cc9bcca = b_ec831dbf4cc9bcca.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ec831dbf4cc9bcca[] = {
  &s_9c78c3c5de56e4d4,
  &s_a5adb72b4ccc59ee,
  &s_bd727a009329aabc,
  &s_d063b4e6c91bf8d8,
};
static const uint16_t m_ec831dbf4cc9bcca[] = {1, 0};
const ::capnp::_::RawSchema s_ec831dbf4cc9bcca = {
  0xec831dbf4cc9bcca, b_ec831dbf4cc9bcca.words, 45, d_ec831dbf4cc9bcca, m_ec831dbf4cc9bcca,
  4, 2, nullptr, nullptr, nullptr, { &s_ec831dbf4cc9bcca, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_90790c61fc899dd3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    211, 157, 137, 252,  97,  12, 121, 144,
     36,   0,   0,   0,   1,   0,   0,   0,
    202, 188, 201,  76, 191,  29, 131, 236,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  83, 101, 110, 100,  80,
    111, 114, 116,  46,  80, 111, 119, 101,
    114,  98, 111, 120,  84,  97, 103,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
    102, 114, 111, 109,  72, 105, 110, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    225,  62,  86, 134, 238, 220, 173, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 105, 115, 116,  73, 100,  72, 105,
    110, 116,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_90790c61fc899dd3 = b_90790c61fc899dd3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_90790c61fc899dd3[] = {
  &s_acaddcee86563ee1,
};
static const uint16_t m_90790c61fc899dd3[] = {0, 1};
static const uint16_t i_90790c61fc899dd3[] = {0, 1};
const ::capnp::_::RawSchema s_90790c61fc899dd3 = {
  0x90790c61fc899dd3, b_90790c61fc899dd3.words, 52, d_90790c61fc899dd3, m_90790c61fc899dd3,
  1, 2, i_90790c61fc899dd3, nullptr, nullptr, { &s_90790c61fc899dd3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a5adb72b4ccc59ee = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    238,  89, 204,  76,  43, 183, 173, 165,
     36,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  83, 101, 110, 100,  80,
    111, 114, 116,  46, 115, 101, 110, 100,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    101, 109,  97, 105, 108,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     47,  45,  86, 105, 231,  89, 244, 207,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a5adb72b4ccc59ee = b_a5adb72b4ccc59ee.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a5adb72b4ccc59ee[] = {
  &s_cff459e769562d2f,
};
static const uint16_t m_a5adb72b4ccc59ee[] = {0};
static const uint16_t i_a5adb72b4ccc59ee[] = {0};
const ::capnp::_::RawSchema s_a5adb72b4ccc59ee = {
  0xa5adb72b4ccc59ee, b_a5adb72b4ccc59ee.words, 34, d_a5adb72b4ccc59ee, m_a5adb72b4ccc59ee,
  1, 1, i_a5adb72b4ccc59ee, nullptr, nullptr, { &s_a5adb72b4ccc59ee, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_d063b4e6c91bf8d8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    216, 248,  27, 201, 230, 180,  99, 208,
     36,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  83, 101, 110, 100,  80,
    111, 114, 116,  46, 115, 101, 110, 100,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d063b4e6c91bf8d8 = b_d063b4e6c91bf8d8.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d063b4e6c91bf8d8 = {
  0xd063b4e6c91bf8d8, b_d063b4e6c91bf8d8.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d063b4e6c91bf8d8, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_9c78c3c5de56e4d4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    212, 228,  86, 222, 197, 195, 120, 156,
     36,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  83, 101, 110, 100,  80,
    111, 114, 116,  46, 104, 105, 110, 116,
     65, 100, 100, 114, 101, 115, 115,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97, 100, 100, 114, 101, 115, 115,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    225,  62,  86, 134, 238, 220, 173, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9c78c3c5de56e4d4 = b_9c78c3c5de56e4d4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9c78c3c5de56e4d4[] = {
  &s_acaddcee86563ee1,
};
static const uint16_t m_9c78c3c5de56e4d4[] = {0};
static const uint16_t i_9c78c3c5de56e4d4[] = {0};
const ::capnp::_::RawSchema s_9c78c3c5de56e4d4 = {
  0x9c78c3c5de56e4d4, b_9c78c3c5de56e4d4.words, 35, d_9c78c3c5de56e4d4, m_9c78c3c5de56e4d4,
  1, 1, i_9c78c3c5de56e4d4, nullptr, nullptr, { &s_9c78c3c5de56e4d4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_bd727a009329aabc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    188, 170,  41, 147,   0, 122, 114, 189,
     36,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  83, 101, 110, 100,  80,
    111, 114, 116,  46, 104, 105, 110, 116,
     65, 100, 100, 114, 101, 115, 115,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_bd727a009329aabc = b_bd727a009329aabc.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_bd727a009329aabc = {
  0xbd727a009329aabc, b_bd727a009329aabc.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_bd727a009329aabc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<24> b_f88bf102464dfa5a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     90, 250,  77,  70,   2, 241, 139, 248,
     22,   0,   0,   0,   3,   0,   0,   0,
    216, 198, 130,  90,  88, 223,  16, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  86, 101,
    114, 105, 102, 105, 101, 100,  69, 109,
     97, 105, 108,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    146, 184,  91, 172, 145, 146,  70, 151,
      1,   0,   0,   0,  98,   0,   0,   0,
     80, 111, 119, 101, 114,  98, 111, 120,
     84,  97, 103,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_f88bf102464dfa5a = b_f88bf102464dfa5a.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f88bf102464dfa5a = {
  0xf88bf102464dfa5a, b_f88bf102464dfa5a.words, 24, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f88bf102464dfa5a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<66> b_97469291ac5bb892 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    146, 184,  91, 172, 145, 146,  70, 151,
     36,   0,   0,   0,   1,   0,   0,   0,
     90, 250,  77,  70,   2, 241, 139, 248,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  86, 101,
    114, 105, 102, 105, 101, 100,  69, 109,
     97, 105, 108,  46,  80, 111, 119, 101,
    114,  98, 111, 120,  84,  97, 103,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    118, 101, 114, 105, 102, 105, 101, 114,
     73, 100,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 100, 100, 114, 101, 115, 115,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 111, 109,  97, 105, 110,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_97469291ac5bb892 = b_97469291ac5bb892.words;
#if !CAPNP_LITE
static const uint16_t m_97469291ac5bb892[] = {1, 2, 0};
static const uint16_t i_97469291ac5bb892[] = {0, 1, 2};
const ::capnp::_::RawSchema s_97469291ac5bb892 = {
  0x97469291ac5bb892, b_97469291ac5bb892.words, 66, nullptr, m_97469291ac5bb892,
  0, 3, i_97469291ac5bb892, nullptr, nullptr, { &s_97469291ac5bb892, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_a3cc885445aed8e9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    233, 216, 174,  69,  84, 136, 204, 163,
     22,   0,   0,   0,   3,   0,   0,   0,
    216, 198, 130,  90,  88, 223,  16, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
     41,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
     53,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  86, 101,
    114, 105, 102, 105, 101, 100,  69, 109,
     97, 105, 108,  83, 101, 110, 100,  80,
    111, 114, 116,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     59, 187,  31,  20, 212,  91,  85, 143,
      1,   0,   0,   0,  98,   0,   0,   0,
     80, 111, 119, 101, 114,  98, 111, 120,
     84,  97, 103,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   5,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
     90, 250,  77,  70,   2, 241, 139, 248,
      0,   0,   0,   0,   0,   0,   0,   0,
    202, 188, 201,  76, 191,  29, 131, 236,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a3cc885445aed8e9 = b_a3cc885445aed8e9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a3cc885445aed8e9[] = {
  &s_ec831dbf4cc9bcca,
  &s_f88bf102464dfa5a,
};
const ::capnp::_::RawSchema s_a3cc885445aed8e9 = {
  0xa3cc885445aed8e9, b_a3cc885445aed8e9.words, 29, d_a3cc885445aed8e9, nullptr,
  2, 0, nullptr, nullptr, nullptr, { &s_a3cc885445aed8e9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_8f555bd4141fbb3b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     59, 187,  31,  20, 212,  91,  85, 143,
     44,   0,   0,   0,   1,   0,   0,   0,
    233, 216, 174,  69,  84, 136, 204, 163,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  86, 101,
    114, 105, 102, 105, 101, 100,  69, 109,
     97, 105, 108,  83, 101, 110, 100,  80,
    111, 114, 116,  46,  80, 111, 119, 101,
    114,  98, 111, 120,  84,  97, 103,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    118, 101, 114, 105, 102, 105,  99,  97,
    116, 105, 111, 110,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    146, 184,  91, 172, 145, 146,  70, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 114, 116,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    211, 157, 137, 252,  97,  12, 121, 144,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8f555bd4141fbb3b = b_8f555bd4141fbb3b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8f555bd4141fbb3b[] = {
  &s_90790c61fc899dd3,
  &s_97469291ac5bb892,
};
static const uint16_t m_8f555bd4141fbb3b[] = {1, 0};
static const uint16_t i_8f555bd4141fbb3b[] = {0, 1};
const ::capnp::_::RawSchema s_8f555bd4141fbb3b = {
  0x8f555bd4141fbb3b, b_8f555bd4141fbb3b.words, 52, d_8f555bd4141fbb3b, m_8f555bd4141fbb3b,
  2, 2, i_8f555bd4141fbb3b, nullptr, nullptr, { &s_8f555bd4141fbb3b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<41> b_d458f7ca9d1ba9ff = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    255, 169,  27, 157, 202, 247,  88, 212,
     22,   0,   0,   0,   3,   0,   0,   0,
    216, 198, 130,  90,  88, 223,  16, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 135,   0,   0,   0,
    117,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  86, 101, 114, 105, 102,
    105, 101, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92, 186,  94, 246,  82, 115, 146, 229,
     52, 140,  81, 211, 197, 135, 226, 199,
     49,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    234,  78, 189, 177, 107, 146, 238, 147,
     64, 144, 228,  34,  67,  97, 153, 204,
     25,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  73, 100,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    118, 101, 114, 105, 102, 121,  69, 109,
     97, 105, 108,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_d458f7ca9d1ba9ff = b_d458f7ca9d1ba9ff.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d458f7ca9d1ba9ff[] = {
  &s_93ee926bb1bd4eea,
  &s_c7e287c5d3518c34,
  &s_cc99614322e49040,
  &s_e5927352f65eba5c,
};
static const uint16_t m_d458f7ca9d1ba9ff[] = {0, 1};
const ::capnp::_::RawSchema s_d458f7ca9d1ba9ff = {
  0xd458f7ca9d1ba9ff, b_d458f7ca9d1ba9ff.words, 41, d_d458f7ca9d1ba9ff, m_d458f7ca9d1ba9ff,
  4, 2, nullptr, nullptr, nullptr, { &s_d458f7ca9d1ba9ff, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_e5927352f65eba5c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     92, 186,  94, 246,  82, 115, 146, 229,
     36,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  86, 101, 114, 105, 102,
    105, 101, 114,  46, 103, 101, 116,  73,
    100,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e5927352f65eba5c = b_e5927352f65eba5c.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e5927352f65eba5c = {
  0xe5927352f65eba5c, b_e5927352f65eba5c.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e5927352f65eba5c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_c7e287c5d3518c34 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     52, 140,  81, 211, 197, 135, 226, 199,
     36,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  86, 101, 114, 105, 102,
    105, 101, 114,  46, 103, 101, 116,  73,
    100,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c7e287c5d3518c34 = b_c7e287c5d3518c34.words;
#if !CAPNP_LITE
static const uint16_t m_c7e287c5d3518c34[] = {0};
static const uint16_t i_c7e287c5d3518c34[] = {0};
const ::capnp::_::RawSchema s_c7e287c5d3518c34 = {
  0xc7e287c5d3518c34, b_c7e287c5d3518c34.words, 35, nullptr, m_c7e287c5d3518c34,
  0, 1, i_c7e287c5d3518c34, nullptr, nullptr, { &s_c7e287c5d3518c34, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_93ee926bb1bd4eea = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    234,  78, 189, 177, 107, 146, 238, 147,
     36,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  86, 101, 114, 105, 102,
    105, 101, 114,  46, 118, 101, 114, 105,
    102, 121,  69, 109,  97, 105, 108,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    116,  97,  98,  73, 100,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 101, 114, 105, 102, 105,  99,  97,
    116, 105, 111, 110,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     90, 250,  77,  70,   2, 241, 139, 248,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_93ee926bb1bd4eea = b_93ee926bb1bd4eea.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_93ee926bb1bd4eea[] = {
  &s_f88bf102464dfa5a,
};
static const uint16_t m_93ee926bb1bd4eea[] = {0, 1};
static const uint16_t i_93ee926bb1bd4eea[] = {0, 1};
const ::capnp::_::RawSchema s_93ee926bb1bd4eea = {
  0x93ee926bb1bd4eea, b_93ee926bb1bd4eea.words, 51, d_93ee926bb1bd4eea, m_93ee926bb1bd4eea,
  1, 2, i_93ee926bb1bd4eea, nullptr, nullptr, { &s_93ee926bb1bd4eea, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_cc99614322e49040 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     64, 144, 228,  34,  67,  97, 153, 204,
     36,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  86, 101, 114, 105, 102,
    105, 101, 114,  46, 118, 101, 114, 105,
    102, 121,  69, 109,  97, 105, 108,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97, 100, 100, 114, 101, 115, 115,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cc99614322e49040 = b_cc99614322e49040.words;
#if !CAPNP_LITE
static const uint16_t m_cc99614322e49040[] = {0};
static const uint16_t i_cc99614322e49040[] = {0};
const ::capnp::_::RawSchema s_cc99614322e49040 = {
  0xcc99614322e49040, b_cc99614322e49040.words, 35, nullptr, m_cc99614322e49040,
  0, 1, i_cc99614322e49040, nullptr, nullptr, { &s_cc99614322e49040, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<41> b_8b6f158d70cbc773 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    115, 199, 203, 112, 141,  21, 111, 139,
     22,   0,   0,   0,   3,   0,   0,   0,
    216, 198, 130,  90,  88, 223,  16, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 135,   0,   0,   0,
    117,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  65, 103, 101, 110, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    151, 143, 173,  69, 218,  22, 235, 168,
     69,  85,  72,   3,  24,  63, 243, 129,
     49,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    158, 126, 118,  17,  43,  65, 207, 250,
     12,  67,  93,  97, 104,  61, 142, 142,
     25,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   7,   0,   0,   0,
    115, 101, 110, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97, 100, 100,  82, 101,  99, 101, 105,
    118, 101, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_8b6f158d70cbc773 = b_8b6f158d70cbc773.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8b6f158d70cbc773[] = {
  &s_81f33f1803485545,
  &s_8e8e3d68615d430c,
  &s_a8eb16da45ad8f97,
  &s_facf412b11767e9e,
};
static const uint16_t m_8b6f158d70cbc773[] = {1, 0};
const ::capnp::_::RawSchema s_8b6f158d70cbc773 = {
  0x8b6f158d70cbc773, b_8b6f158d70cbc773.words, 41, d_8b6f158d70cbc773, m_8b6f158d70cbc773,
  4, 2, nullptr, nullptr, nullptr, { &s_8b6f158d70cbc773, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a8eb16da45ad8f97 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    151, 143, 173,  69, 218,  22, 235, 168,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  65, 103, 101, 110, 116,
     46, 115, 101, 110, 100,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    101, 109,  97, 105, 108,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     47,  45,  86, 105, 231,  89, 244, 207,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a8eb16da45ad8f97 = b_a8eb16da45ad8f97.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a8eb16da45ad8f97[] = {
  &s_cff459e769562d2f,
};
static const uint16_t m_a8eb16da45ad8f97[] = {0};
static const uint16_t i_a8eb16da45ad8f97[] = {0};
const ::capnp::_::RawSchema s_a8eb16da45ad8f97 = {
  0xa8eb16da45ad8f97, b_a8eb16da45ad8f97.words, 34, d_a8eb16da45ad8f97, m_a8eb16da45ad8f97,
  1, 1, i_a8eb16da45ad8f97, nullptr, nullptr, { &s_a8eb16da45ad8f97, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_81f33f1803485545 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     69,  85,  72,   3,  24,  63, 243, 129,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  65, 103, 101, 110, 116,
     46, 115, 101, 110, 100,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_81f33f1803485545 = b_81f33f1803485545.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_81f33f1803485545 = {
  0x81f33f1803485545, b_81f33f1803485545.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_81f33f1803485545, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_facf412b11767e9e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    158, 126, 118,  17,  43,  65, 207, 250,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  65, 103, 101, 110, 116,
     46,  97, 100, 100,  82, 101,  99, 101,
    105, 118, 101, 114,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 114, 116,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    202, 188, 201,  76, 191,  29, 131, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_facf412b11767e9e = b_facf412b11767e9e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_facf412b11767e9e[] = {
  &s_ec831dbf4cc9bcca,
};
static const uint16_t m_facf412b11767e9e[] = {0};
static const uint16_t i_facf412b11767e9e[] = {0};
const ::capnp::_::RawSchema s_facf412b11767e9e = {
  0xfacf412b11767e9e, b_facf412b11767e9e.words, 35, d_facf412b11767e9e, m_facf412b11767e9e,
  1, 1, i_facf412b11767e9e, nullptr, nullptr, { &s_facf412b11767e9e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8e8e3d68615d430c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     12,  67,  93,  97, 104,  61, 142, 142,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 101, 109,  97, 105, 108,  46,
     99,  97, 112, 110, 112,  58,  69, 109,
     97, 105, 108,  65, 103, 101, 110, 116,
     46,  97, 100, 100,  82, 101,  99, 101,
    105, 118, 101, 114,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    224,  66,  96,  96, 172,  36, 244, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8e8e3d68615d430c = b_8e8e3d68615d430c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8e8e3d68615d430c[] = {
  &s_98f424ac606042e0,
};
static const uint16_t m_8e8e3d68615d430c[] = {0};
static const uint16_t i_8e8e3d68615d430c[] = {0};
const ::capnp::_::RawSchema s_8e8e3d68615d430c = {
  0x8e8e3d68615d430c, b_8e8e3d68615d430c.words, 35, d_8e8e3d68615d430c, m_8e8e3d68615d430c,
  1, 1, i_8e8e3d68615d430c, nullptr, nullptr, { &s_8e8e3d68615d430c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace sandstorm {

// EmailAddress
constexpr uint16_t EmailAddress::_capnpPrivate::dataWordSize;
constexpr uint16_t EmailAddress::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailAddress::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailAddress::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailAddress::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EmailAttachment
constexpr uint16_t EmailAttachment::_capnpPrivate::dataWordSize;
constexpr uint16_t EmailAttachment::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailAttachment::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailAttachment::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailAttachment::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EmailMessage
constexpr uint16_t EmailMessage::_capnpPrivate::dataWordSize;
constexpr uint16_t EmailMessage::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailMessage::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailMessage::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailMessage::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::EmailSendPort::SendParams,  ::sandstorm::EmailSendPort::SendResults>
EmailSendPort::Client::sendRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::EmailSendPort::SendParams,  ::sandstorm::EmailSendPort::SendResults>(
      0xec831dbf4cc9bccaull, 0, sizeHint);
}
::kj::Promise<void> EmailSendPort::Server::send(SendContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/email.capnp:EmailSendPort", "send",
      0xec831dbf4cc9bccaull, 0);
}
::capnp::Request< ::sandstorm::EmailSendPort::HintAddressParams,  ::sandstorm::EmailSendPort::HintAddressResults>
EmailSendPort::Client::hintAddressRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::EmailSendPort::HintAddressParams,  ::sandstorm::EmailSendPort::HintAddressResults>(
      0xec831dbf4cc9bccaull, 1, sizeHint);
}
::kj::Promise<void> EmailSendPort::Server::hintAddress(HintAddressContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/email.capnp:EmailSendPort", "hintAddress",
      0xec831dbf4cc9bccaull, 1);
}
::kj::Promise<void> EmailSendPort::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xec831dbf4cc9bccaull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/email.capnp:EmailSendPort", interfaceId);
  }
}
::kj::Promise<void> EmailSendPort::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return send(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::EmailSendPort::SendParams,  ::sandstorm::EmailSendPort::SendResults>(context));
    case 1:
      return hintAddress(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::EmailSendPort::HintAddressParams,  ::sandstorm::EmailSendPort::HintAddressResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/email.capnp:EmailSendPort",
          0xec831dbf4cc9bccaull, methodId);
  }
}
#endif  // !CAPNP_LITE

// EmailSendPort
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailSendPort::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailSendPort::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailSendPort::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EmailSendPort::PowerboxTag
constexpr uint16_t EmailSendPort::PowerboxTag::_capnpPrivate::dataWordSize;
constexpr uint16_t EmailSendPort::PowerboxTag::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailSendPort::PowerboxTag::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailSendPort::PowerboxTag::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailSendPort::PowerboxTag::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EmailSendPort::SendParams
constexpr uint16_t EmailSendPort::SendParams::_capnpPrivate::dataWordSize;
constexpr uint16_t EmailSendPort::SendParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailSendPort::SendParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailSendPort::SendParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailSendPort::SendParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EmailSendPort::SendResults
constexpr uint16_t EmailSendPort::SendResults::_capnpPrivate::dataWordSize;
constexpr uint16_t EmailSendPort::SendResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailSendPort::SendResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailSendPort::SendResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailSendPort::SendResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EmailSendPort::HintAddressParams
constexpr uint16_t EmailSendPort::HintAddressParams::_capnpPrivate::dataWordSize;
constexpr uint16_t EmailSendPort::HintAddressParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailSendPort::HintAddressParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailSendPort::HintAddressParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailSendPort::HintAddressParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EmailSendPort::HintAddressResults
constexpr uint16_t EmailSendPort::HintAddressResults::_capnpPrivate::dataWordSize;
constexpr uint16_t EmailSendPort::HintAddressResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailSendPort::HintAddressResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailSendPort::HintAddressResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailSendPort::HintAddressResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::kj::Promise<void> VerifiedEmail::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xf88bf102464dfa5aull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/email.capnp:VerifiedEmail", interfaceId);
  }
}
::kj::Promise<void> VerifiedEmail::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/email.capnp:VerifiedEmail",
          0xf88bf102464dfa5aull, methodId);
  }
}
#endif  // !CAPNP_LITE

// VerifiedEmail
#if !CAPNP_LITE
constexpr ::capnp::Kind VerifiedEmail::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* VerifiedEmail::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* VerifiedEmail::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// VerifiedEmail::PowerboxTag
constexpr uint16_t VerifiedEmail::PowerboxTag::_capnpPrivate::dataWordSize;
constexpr uint16_t VerifiedEmail::PowerboxTag::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind VerifiedEmail::PowerboxTag::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* VerifiedEmail::PowerboxTag::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* VerifiedEmail::PowerboxTag::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::kj::Promise<void> VerifiedEmailSendPort::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xa3cc885445aed8e9ull:
      return dispatchCallInternal(methodId, context);
    case 0xec831dbf4cc9bccaull:
      return  ::sandstorm::EmailSendPort::Server::dispatchCallInternal(methodId, context);
    case 0xf88bf102464dfa5aull:
      return  ::sandstorm::VerifiedEmail::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/email.capnp:VerifiedEmailSendPort", interfaceId);
  }
}
::kj::Promise<void> VerifiedEmailSendPort::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/email.capnp:VerifiedEmailSendPort",
          0xa3cc885445aed8e9ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// VerifiedEmailSendPort
#if !CAPNP_LITE
constexpr ::capnp::Kind VerifiedEmailSendPort::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* VerifiedEmailSendPort::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* VerifiedEmailSendPort::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// VerifiedEmailSendPort::PowerboxTag
constexpr uint16_t VerifiedEmailSendPort::PowerboxTag::_capnpPrivate::dataWordSize;
constexpr uint16_t VerifiedEmailSendPort::PowerboxTag::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind VerifiedEmailSendPort::PowerboxTag::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* VerifiedEmailSendPort::PowerboxTag::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* VerifiedEmailSendPort::PowerboxTag::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::EmailVerifier::GetIdParams,  ::sandstorm::EmailVerifier::GetIdResults>
EmailVerifier::Client::getIdRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::EmailVerifier::GetIdParams,  ::sandstorm::EmailVerifier::GetIdResults>(
      0xd458f7ca9d1ba9ffull, 0, sizeHint);
}
::kj::Promise<void> EmailVerifier::Server::getId(GetIdContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/email.capnp:EmailVerifier", "getId",
      0xd458f7ca9d1ba9ffull, 0);
}
::capnp::Request< ::sandstorm::EmailVerifier::VerifyEmailParams,  ::sandstorm::EmailVerifier::VerifyEmailResults>
EmailVerifier::Client::verifyEmailRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::EmailVerifier::VerifyEmailParams,  ::sandstorm::EmailVerifier::VerifyEmailResults>(
      0xd458f7ca9d1ba9ffull, 1, sizeHint);
}
::kj::Promise<void> EmailVerifier::Server::verifyEmail(VerifyEmailContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/email.capnp:EmailVerifier", "verifyEmail",
      0xd458f7ca9d1ba9ffull, 1);
}
::kj::Promise<void> EmailVerifier::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd458f7ca9d1ba9ffull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/email.capnp:EmailVerifier", interfaceId);
  }
}
::kj::Promise<void> EmailVerifier::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return getId(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::EmailVerifier::GetIdParams,  ::sandstorm::EmailVerifier::GetIdResults>(context));
    case 1:
      return verifyEmail(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::EmailVerifier::VerifyEmailParams,  ::sandstorm::EmailVerifier::VerifyEmailResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/email.capnp:EmailVerifier",
          0xd458f7ca9d1ba9ffull, methodId);
  }
}
#endif  // !CAPNP_LITE

// EmailVerifier
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailVerifier::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailVerifier::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailVerifier::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EmailVerifier::GetIdParams
constexpr uint16_t EmailVerifier::GetIdParams::_capnpPrivate::dataWordSize;
constexpr uint16_t EmailVerifier::GetIdParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailVerifier::GetIdParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailVerifier::GetIdParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailVerifier::GetIdParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EmailVerifier::GetIdResults
constexpr uint16_t EmailVerifier::GetIdResults::_capnpPrivate::dataWordSize;
constexpr uint16_t EmailVerifier::GetIdResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailVerifier::GetIdResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailVerifier::GetIdResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailVerifier::GetIdResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EmailVerifier::VerifyEmailParams
constexpr uint16_t EmailVerifier::VerifyEmailParams::_capnpPrivate::dataWordSize;
constexpr uint16_t EmailVerifier::VerifyEmailParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailVerifier::VerifyEmailParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailVerifier::VerifyEmailParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailVerifier::VerifyEmailParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EmailVerifier::VerifyEmailResults
constexpr uint16_t EmailVerifier::VerifyEmailResults::_capnpPrivate::dataWordSize;
constexpr uint16_t EmailVerifier::VerifyEmailResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailVerifier::VerifyEmailResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailVerifier::VerifyEmailResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailVerifier::VerifyEmailResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::EmailAgent::SendParams,  ::sandstorm::EmailAgent::SendResults>
EmailAgent::Client::sendRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::EmailAgent::SendParams,  ::sandstorm::EmailAgent::SendResults>(
      0x8b6f158d70cbc773ull, 0, sizeHint);
}
::kj::Promise<void> EmailAgent::Server::send(SendContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/email.capnp:EmailAgent", "send",
      0x8b6f158d70cbc773ull, 0);
}
::capnp::Request< ::sandstorm::EmailAgent::AddReceiverParams,  ::sandstorm::EmailAgent::AddReceiverResults>
EmailAgent::Client::addReceiverRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::EmailAgent::AddReceiverParams,  ::sandstorm::EmailAgent::AddReceiverResults>(
      0x8b6f158d70cbc773ull, 1, sizeHint);
}
::kj::Promise<void> EmailAgent::Server::addReceiver(AddReceiverContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/email.capnp:EmailAgent", "addReceiver",
      0x8b6f158d70cbc773ull, 1);
}
::kj::Promise<void> EmailAgent::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x8b6f158d70cbc773ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/email.capnp:EmailAgent", interfaceId);
  }
}
::kj::Promise<void> EmailAgent::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return send(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::EmailAgent::SendParams,  ::sandstorm::EmailAgent::SendResults>(context));
    case 1:
      return addReceiver(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::EmailAgent::AddReceiverParams,  ::sandstorm::EmailAgent::AddReceiverResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/email.capnp:EmailAgent",
          0x8b6f158d70cbc773ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// EmailAgent
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailAgent::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailAgent::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailAgent::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EmailAgent::SendParams
constexpr uint16_t EmailAgent::SendParams::_capnpPrivate::dataWordSize;
constexpr uint16_t EmailAgent::SendParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailAgent::SendParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailAgent::SendParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailAgent::SendParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EmailAgent::SendResults
constexpr uint16_t EmailAgent::SendResults::_capnpPrivate::dataWordSize;
constexpr uint16_t EmailAgent::SendResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailAgent::SendResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailAgent::SendResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailAgent::SendResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EmailAgent::AddReceiverParams
constexpr uint16_t EmailAgent::AddReceiverParams::_capnpPrivate::dataWordSize;
constexpr uint16_t EmailAgent::AddReceiverParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailAgent::AddReceiverParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailAgent::AddReceiverParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailAgent::AddReceiverParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EmailAgent::AddReceiverResults
constexpr uint16_t EmailAgent::AddReceiverResults::_capnpPrivate::dataWordSize;
constexpr uint16_t EmailAgent::AddReceiverResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EmailAgent::AddReceiverResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EmailAgent::AddReceiverResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EmailAgent::AddReceiverResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE


}  // namespace

