// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: util.capnp

#ifndef CAPNP_INCLUDED_ecd50d792c3d9992_
#define CAPNP_INCLUDED_ecd50d792c3d9992_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(94a081e4abb13424);
CAPNP_DECLARE_SCHEMA(8b5db772377be249);
CAPNP_DECLARE_SCHEMA(a4f5ae06dd1b7791);
CAPNP_DECLARE_SCHEMA(98f424ac606042e0);
CAPNP_DECLARE_SCHEMA(cd57387729cfe35f);
CAPNP_DECLARE_SCHEMA(97ed122121126ff2);
CAPNP_DECLARE_SCHEMA(ecde2a9c6f3f84c9);
CAPNP_DECLARE_SCHEMA(bc1426493658b76e);
CAPNP_DECLARE_SCHEMA(d0d8d935ee30b219);
CAPNP_DECLARE_SCHEMA(8c9a3c7674c761d3);
CAPNP_DECLARE_SCHEMA(f35749d82a51479b);
CAPNP_DECLARE_SCHEMA(e53527a75d90198f);
CAPNP_DECLARE_SCHEMA(8ee5f62e1fab915d);
CAPNP_DECLARE_SCHEMA(8e48cb1497f3d6f4);
CAPNP_DECLARE_SCHEMA(9f0719e9a9dccc4b);
CAPNP_DECLARE_SCHEMA(db3152bd3bc2aa40);
CAPNP_DECLARE_SCHEMA(8edb5f3937d96b8a);
CAPNP_DECLARE_SCHEMA(c65caf9a2d389078);
CAPNP_DECLARE_SCHEMA(eaf255b498229199);
CAPNP_DECLARE_SCHEMA(80f2f65360d64224);
CAPNP_DECLARE_SCHEMA(b19fdbd356844119);
CAPNP_DECLARE_SCHEMA(97ef2da226123492);
CAPNP_DECLARE_SCHEMA(f02783ef982ecea9);
CAPNP_DECLARE_SCHEMA(84e0f802c9af605b);
CAPNP_DECLARE_SCHEMA(d5256a3f93589d2f);
CAPNP_DECLARE_SCHEMA(98d0372787b787d1);
CAPNP_DECLARE_SCHEMA(dbfbb635d3e6abab);
CAPNP_DECLARE_SCHEMA(bbfd27b5d2515662);
CAPNP_DECLARE_SCHEMA(b351b437cd426a4f);
CAPNP_DECLARE_SCHEMA(f907945b872b26cf);
CAPNP_DECLARE_SCHEMA(8c3d547ef2930e96);
CAPNP_DECLARE_SCHEMA(a01f603357f3b349);
CAPNP_DECLARE_SCHEMA(c6cbc10181c4f397);
CAPNP_DECLARE_SCHEMA(fabb5e621fa9a23f);
CAPNP_DECLARE_SCHEMA(9714437546d80c39);
enum class Protocol_9714437546d80c39: uint16_t {
  HTTPS,
  HTTP,
};
CAPNP_DECLARE_ENUM(Protocol, 9714437546d80c39);
CAPNP_DECLARE_SCHEMA(a75ecf12570b2966);
CAPNP_DECLARE_SCHEMA(a5c3aa75d6b648e2);

}  // namespace schemas
}  // namespace capnp

namespace sandstorm {

struct KeyValue {
  KeyValue() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(94a081e4abb13424, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct LocalizedText {
  LocalizedText() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Localization;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8b5db772377be249, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct LocalizedText::Localization {
  Localization() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a4f5ae06dd1b7791, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Handle {
  Handle() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE


  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(98f424ac606042e0)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct ByteStream {
  ByteStream() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct WriteParams;
  struct WriteResults;
  struct DoneParams;
  struct DoneResults;
  struct ExpectSizeParams;
  struct ExpectSizeResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(cd57387729cfe35f)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct ByteStream::WriteParams {
  WriteParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97ed122121126ff2, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ByteStream::WriteResults {
  WriteResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ecde2a9c6f3f84c9, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ByteStream::DoneParams {
  DoneParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc1426493658b76e, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ByteStream::DoneResults {
  DoneResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0d8d935ee30b219, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ByteStream::ExpectSizeParams {
  ExpectSizeParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c9a3c7674c761d3, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ByteStream::ExpectSizeResults {
  ExpectSizeResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f35749d82a51479b, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Blob {
  Blob() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct GetSizeParams;
  struct GetSizeResults;
  struct WriteToParams;
  struct WriteToResults;
  struct GetSliceParams;
  struct GetSliceResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(e53527a75d90198f)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct Blob::GetSizeParams {
  GetSizeParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ee5f62e1fab915d, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Blob::GetSizeResults {
  GetSizeResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8e48cb1497f3d6f4, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Blob::WriteToParams {
  WriteToParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f0719e9a9dccc4b, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Blob::WriteToResults {
  WriteToResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db3152bd3bc2aa40, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Blob::GetSliceParams {
  GetSliceParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8edb5f3937d96b8a, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Blob::GetSliceResults {
  GetSliceResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c65caf9a2d389078, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

template <typename T = ::capnp::AnyPointer>
struct Assignable {
  Assignable() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct Getter;
  struct Setter;
  struct GetParams;
  struct GetResults;
  struct AsGetterParams;
  struct AsGetterResults;
  struct AsSetterParams;
  struct AsSetterResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(eaf255b498229199)
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand;
  };
  #endif  // !CAPNP_LITE
};

template <typename T>
struct Assignable<T>::Getter {
  Getter() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct GetParams;
  struct GetResults;
  struct SubscribeParams;
  struct SubscribeResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(80f2f65360d64224)
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand;
  };
  #endif  // !CAPNP_LITE
};

template <typename T>
struct Assignable<T>::Getter::GetParams {
  GetParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b19fdbd356844119, 0, 0)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename T>
struct Assignable<T>::Getter::GetResults {
  GetResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97ef2da226123492, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename T>
struct Assignable<T>::Getter::SubscribeParams {
  SubscribeParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f02783ef982ecea9, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename T>
struct Assignable<T>::Getter::SubscribeResults {
  SubscribeResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(84e0f802c9af605b, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename T>
struct Assignable<T>::Setter {
  Setter() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct SetParams;
  struct SetResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(d5256a3f93589d2f)
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand;
  };
  #endif  // !CAPNP_LITE
};

template <typename T>
struct Assignable<T>::Setter::SetParams {
  SetParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98d0372787b787d1, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename T>
struct Assignable<T>::Setter::SetResults {
  SetResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dbfbb635d3e6abab, 0, 0)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename T>
struct Assignable<T>::GetParams {
  GetParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bbfd27b5d2515662, 0, 0)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename T>
struct Assignable<T>::GetResults {
  GetResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b351b437cd426a4f, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename T>
struct Assignable<T>::AsGetterParams {
  AsGetterParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f907945b872b26cf, 0, 0)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename T>
struct Assignable<T>::AsGetterResults {
  AsGetterResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c3d547ef2930e96, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename T>
struct Assignable<T>::AsSetterParams {
  AsSetterParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a01f603357f3b349, 0, 0)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename T>
struct Assignable<T>::AsSetterResults {
  AsSetterResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c6cbc10181c4f397, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand;
    #endif  // !CAPNP_LITE
  };
};

struct StaticAsset {
  StaticAsset() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  typedef ::capnp::schemas::Protocol_9714437546d80c39 Protocol;

  struct GetUrlParams;
  struct GetUrlResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(fabb5e621fa9a23f)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct StaticAsset::GetUrlParams {
  GetUrlParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a75ecf12570b2966, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct StaticAsset::GetUrlResults {
  GetUrlResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a5c3aa75d6b648e2, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class KeyValue::Reader {
public:
  typedef KeyValue Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class KeyValue::Builder {
public:
  typedef KeyValue Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class KeyValue::Pipeline {
public:
  typedef KeyValue Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LocalizedText::Reader {
public:
  typedef LocalizedText Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasDefaultText() const;
  inline  ::capnp::Text::Reader getDefaultText() const;

  inline bool hasLocalizations() const;
  inline  ::capnp::List< ::sandstorm::LocalizedText::Localization>::Reader getLocalizations() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LocalizedText::Builder {
public:
  typedef LocalizedText Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDefaultText();
  inline  ::capnp::Text::Builder getDefaultText();
  inline void setDefaultText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDefaultText(unsigned int size);
  inline void adoptDefaultText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDefaultText();

  inline bool hasLocalizations();
  inline  ::capnp::List< ::sandstorm::LocalizedText::Localization>::Builder getLocalizations();
  inline void setLocalizations( ::capnp::List< ::sandstorm::LocalizedText::Localization>::Reader value);
  inline  ::capnp::List< ::sandstorm::LocalizedText::Localization>::Builder initLocalizations(unsigned int size);
  inline void adoptLocalizations(::capnp::Orphan< ::capnp::List< ::sandstorm::LocalizedText::Localization>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::LocalizedText::Localization>> disownLocalizations();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LocalizedText::Pipeline {
public:
  typedef LocalizedText Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LocalizedText::Localization::Reader {
public:
  typedef Localization Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasLocale() const;
  inline  ::capnp::Text::Reader getLocale() const;

  inline bool hasText() const;
  inline  ::capnp::Text::Reader getText() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LocalizedText::Localization::Builder {
public:
  typedef Localization Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLocale();
  inline  ::capnp::Text::Builder getLocale();
  inline void setLocale( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLocale(unsigned int size);
  inline void adoptLocale(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLocale();

  inline bool hasText();
  inline  ::capnp::Text::Builder getText();
  inline void setText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initText(unsigned int size);
  inline void adoptText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownText();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LocalizedText::Localization::Pipeline {
public:
  typedef Localization Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class Handle::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef Handle Calls;
  typedef Handle Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);


protected:
  Client() = default;
};

class Handle::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef Handle Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:

  inline  ::sandstorm::Handle::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::Handle>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class ByteStream::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef ByteStream Calls;
  typedef ByteStream Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::ByteStream::WriteParams,  ::sandstorm::ByteStream::WriteResults> writeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::ByteStream::DoneParams,  ::sandstorm::ByteStream::DoneResults> doneRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::ByteStream::ExpectSizeParams,  ::sandstorm::ByteStream::ExpectSizeResults> expectSizeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class ByteStream::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef ByteStream Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::ByteStream::WriteParams WriteParams;
  typedef  ::sandstorm::ByteStream::WriteResults WriteResults;
  typedef ::capnp::CallContext<WriteParams, WriteResults> WriteContext;
  virtual ::kj::Promise<void> write(WriteContext context);
  typedef  ::sandstorm::ByteStream::DoneParams DoneParams;
  typedef  ::sandstorm::ByteStream::DoneResults DoneResults;
  typedef ::capnp::CallContext<DoneParams, DoneResults> DoneContext;
  virtual ::kj::Promise<void> done(DoneContext context);
  typedef  ::sandstorm::ByteStream::ExpectSizeParams ExpectSizeParams;
  typedef  ::sandstorm::ByteStream::ExpectSizeResults ExpectSizeResults;
  typedef ::capnp::CallContext<ExpectSizeParams, ExpectSizeResults> ExpectSizeContext;
  virtual ::kj::Promise<void> expectSize(ExpectSizeContext context);

  inline  ::sandstorm::ByteStream::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::ByteStream>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class ByteStream::WriteParams::Reader {
public:
  typedef WriteParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ByteStream::WriteParams::Builder {
public:
  typedef WriteParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ByteStream::WriteParams::Pipeline {
public:
  typedef WriteParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ByteStream::WriteResults::Reader {
public:
  typedef WriteResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ByteStream::WriteResults::Builder {
public:
  typedef WriteResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ByteStream::WriteResults::Pipeline {
public:
  typedef WriteResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ByteStream::DoneParams::Reader {
public:
  typedef DoneParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ByteStream::DoneParams::Builder {
public:
  typedef DoneParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ByteStream::DoneParams::Pipeline {
public:
  typedef DoneParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ByteStream::DoneResults::Reader {
public:
  typedef DoneResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ByteStream::DoneResults::Builder {
public:
  typedef DoneResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ByteStream::DoneResults::Pipeline {
public:
  typedef DoneResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ByteStream::ExpectSizeParams::Reader {
public:
  typedef ExpectSizeParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ByteStream::ExpectSizeParams::Builder {
public:
  typedef ExpectSizeParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ByteStream::ExpectSizeParams::Pipeline {
public:
  typedef ExpectSizeParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ByteStream::ExpectSizeResults::Reader {
public:
  typedef ExpectSizeResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ByteStream::ExpectSizeResults::Builder {
public:
  typedef ExpectSizeResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ByteStream::ExpectSizeResults::Pipeline {
public:
  typedef ExpectSizeResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class Blob::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef Blob Calls;
  typedef Blob Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::Blob::GetSizeParams,  ::sandstorm::Blob::GetSizeResults> getSizeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Blob::WriteToParams,  ::sandstorm::Blob::WriteToResults> writeToRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Blob::GetSliceParams,  ::sandstorm::Blob::GetSliceResults> getSliceRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class Blob::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef Blob Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::Blob::GetSizeParams GetSizeParams;
  typedef  ::sandstorm::Blob::GetSizeResults GetSizeResults;
  typedef ::capnp::CallContext<GetSizeParams, GetSizeResults> GetSizeContext;
  virtual ::kj::Promise<void> getSize(GetSizeContext context);
  typedef  ::sandstorm::Blob::WriteToParams WriteToParams;
  typedef  ::sandstorm::Blob::WriteToResults WriteToResults;
  typedef ::capnp::CallContext<WriteToParams, WriteToResults> WriteToContext;
  virtual ::kj::Promise<void> writeTo(WriteToContext context);
  typedef  ::sandstorm::Blob::GetSliceParams GetSliceParams;
  typedef  ::sandstorm::Blob::GetSliceResults GetSliceResults;
  typedef ::capnp::CallContext<GetSliceParams, GetSliceResults> GetSliceContext;
  virtual ::kj::Promise<void> getSlice(GetSliceContext context);

  inline  ::sandstorm::Blob::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::Blob>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class Blob::GetSizeParams::Reader {
public:
  typedef GetSizeParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Blob::GetSizeParams::Builder {
public:
  typedef GetSizeParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Blob::GetSizeParams::Pipeline {
public:
  typedef GetSizeParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Blob::GetSizeResults::Reader {
public:
  typedef GetSizeResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Blob::GetSizeResults::Builder {
public:
  typedef GetSizeResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Blob::GetSizeResults::Pipeline {
public:
  typedef GetSizeResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Blob::WriteToParams::Reader {
public:
  typedef WriteToParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasStream() const;
#if !CAPNP_LITE
  inline  ::sandstorm::ByteStream::Client getStream() const;
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStartAtOffset() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Blob::WriteToParams::Builder {
public:
  typedef WriteToParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStream();
#if !CAPNP_LITE
  inline  ::sandstorm::ByteStream::Client getStream();
  inline void setStream( ::sandstorm::ByteStream::Client&& value);
  inline void setStream( ::sandstorm::ByteStream::Client& value);
  inline void adoptStream(::capnp::Orphan< ::sandstorm::ByteStream>&& value);
  inline ::capnp::Orphan< ::sandstorm::ByteStream> disownStream();
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStartAtOffset();
  inline void setStartAtOffset( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Blob::WriteToParams::Pipeline {
public:
  typedef WriteToParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::ByteStream::Client getStream();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Blob::WriteToResults::Reader {
public:
  typedef WriteToResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasHandle() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Handle::Client getHandle() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Blob::WriteToResults::Builder {
public:
  typedef WriteToResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHandle();
#if !CAPNP_LITE
  inline  ::sandstorm::Handle::Client getHandle();
  inline void setHandle( ::sandstorm::Handle::Client&& value);
  inline void setHandle( ::sandstorm::Handle::Client& value);
  inline void adoptHandle(::capnp::Orphan< ::sandstorm::Handle>&& value);
  inline ::capnp::Orphan< ::sandstorm::Handle> disownHandle();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Blob::WriteToResults::Pipeline {
public:
  typedef WriteToResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Handle::Client getHandle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Blob::GetSliceParams::Reader {
public:
  typedef GetSliceParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getOffset() const;

  inline  ::uint32_t getSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Blob::GetSliceParams::Builder {
public:
  typedef GetSliceParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getOffset();
  inline void setOffset( ::uint64_t value);

  inline  ::uint32_t getSize();
  inline void setSize( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Blob::GetSliceParams::Pipeline {
public:
  typedef GetSliceParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Blob::GetSliceResults::Reader {
public:
  typedef GetSliceResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Blob::GetSliceResults::Builder {
public:
  typedef GetSliceResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Blob::GetSliceResults::Pipeline {
public:
  typedef GetSliceResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
template <typename T>
class Assignable<T>::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef Assignable<T> Calls;
  typedef Assignable<T> Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::Client asGeneric() {
    return castAs<Assignable<T2>>();
  }

  ::capnp::Request<typename  ::sandstorm::Assignable<T>::GetParams, typename  ::sandstorm::Assignable<T>::GetResults> getRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request<typename  ::sandstorm::Assignable<T>::AsGetterParams, typename  ::sandstorm::Assignable<T>::AsGetterResults> asGetterRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request<typename  ::sandstorm::Assignable<T>::AsSetterParams, typename  ::sandstorm::Assignable<T>::AsSetterResults> asSetterRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

template <typename T>
class Assignable<T>::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef Assignable<T> Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef typename  ::sandstorm::Assignable<T>::GetParams GetParams;
  typedef typename  ::sandstorm::Assignable<T>::GetResults GetResults;
  typedef ::capnp::CallContext<GetParams, GetResults> GetContext;
  virtual ::kj::Promise<void> get(GetContext context);
  typedef typename  ::sandstorm::Assignable<T>::AsGetterParams AsGetterParams;
  typedef typename  ::sandstorm::Assignable<T>::AsGetterResults AsGetterResults;
  typedef ::capnp::CallContext<AsGetterParams, AsGetterResults> AsGetterContext;
  virtual ::kj::Promise<void> asGetter(AsGetterContext context);
  typedef typename  ::sandstorm::Assignable<T>::AsSetterParams AsSetterParams;
  typedef typename  ::sandstorm::Assignable<T>::AsSetterResults AsSetterResults;
  typedef ::capnp::CallContext<AsSetterParams, AsSetterResults> AsSetterContext;
  virtual ::kj::Promise<void> asSetter(AsSetterContext context);

  inline typename  ::sandstorm::Assignable<T>::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::Assignable<T>>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
template <typename T>
class Assignable<T>::Getter::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef Assignable<T>::Getter Calls;
  typedef Assignable<T>::Getter Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::Getter::Client asAssignableGeneric() {
    return castAs<typename Assignable<T2>::Getter>();
  }

  ::capnp::Request<typename  ::sandstorm::Assignable<T>::Getter::GetParams, typename  ::sandstorm::Assignable<T>::Getter::GetResults> getRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request<typename  ::sandstorm::Assignable<T>::Getter::SubscribeParams, typename  ::sandstorm::Assignable<T>::Getter::SubscribeResults> subscribeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

template <typename T>
class Assignable<T>::Getter::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef Assignable<T>::Getter Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef typename  ::sandstorm::Assignable<T>::Getter::GetParams GetParams;
  typedef typename  ::sandstorm::Assignable<T>::Getter::GetResults GetResults;
  typedef ::capnp::CallContext<GetParams, GetResults> GetContext;
  virtual ::kj::Promise<void> get(GetContext context);
  typedef typename  ::sandstorm::Assignable<T>::Getter::SubscribeParams SubscribeParams;
  typedef typename  ::sandstorm::Assignable<T>::Getter::SubscribeResults SubscribeResults;
  typedef ::capnp::CallContext<SubscribeParams, SubscribeResults> SubscribeContext;
  virtual ::kj::Promise<void> subscribe(SubscribeContext context);

  inline typename  ::sandstorm::Assignable<T>::Getter::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs<typename  ::sandstorm::Assignable<T>::Getter>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

template <typename T>
class Assignable<T>::Getter::GetParams::Reader {
public:
  typedef GetParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::Getter::Reader asAssignableGeneric() {
    return typename Assignable<T2>::Getter::Reader(_reader);
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename T>
class Assignable<T>::Getter::GetParams::Builder {
public:
  typedef GetParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::Getter::Builder asAssignableGeneric() {
    return typename Assignable<T2>::Getter::Builder(_builder);
  }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename T>
class Assignable<T>::Getter::GetParams::Pipeline {
public:
  typedef GetParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename T>
class Assignable<T>::Getter::GetResults::Reader {
public:
  typedef GetResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::Getter::Reader asAssignableGeneric() {
    return typename Assignable<T2>::Getter::Reader(_reader);
  }

  inline bool hasValue() const;
  inline  ::capnp::ReaderFor<T> getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename T>
class Assignable<T>::Getter::GetResults::Builder {
public:
  typedef GetResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::Getter::Builder asAssignableGeneric() {
    return typename Assignable<T2>::Getter::Builder(_builder);
  }

  inline bool hasValue();
  inline  ::capnp::BuilderFor<T> getValue();
  inline void setValue( ::capnp::ReaderFor<T> value);
  inline  ::capnp::BuilderFor<T> initValue();
  inline  ::capnp::BuilderFor<T> initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan<T>&& value);
  inline ::capnp::Orphan<T> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename T>
class Assignable<T>::Getter::GetResults::Pipeline {
public:
  typedef GetResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<T> getValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename T>
class Assignable<T>::Getter::SubscribeParams::Reader {
public:
  typedef SubscribeParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::Getter::Reader asAssignableGeneric() {
    return typename Assignable<T2>::Getter::Reader(_reader);
  }

  inline bool hasSetter() const;
#if !CAPNP_LITE
  inline typename  ::sandstorm::Assignable<T>::Setter::Client getSetter() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename T>
class Assignable<T>::Getter::SubscribeParams::Builder {
public:
  typedef SubscribeParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::Getter::Builder asAssignableGeneric() {
    return typename Assignable<T2>::Getter::Builder(_builder);
  }

  inline bool hasSetter();
#if !CAPNP_LITE
  inline typename  ::sandstorm::Assignable<T>::Setter::Client getSetter();
  inline void setSetter(typename  ::sandstorm::Assignable<T>::Setter::Client&& value);
  inline void setSetter(typename  ::sandstorm::Assignable<T>::Setter::Client& value);
  inline void adoptSetter(::capnp::Orphan<typename  ::sandstorm::Assignable<T>::Setter>&& value);
  inline ::capnp::Orphan<typename  ::sandstorm::Assignable<T>::Setter> disownSetter();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename T>
class Assignable<T>::Getter::SubscribeParams::Pipeline {
public:
  typedef SubscribeParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename  ::sandstorm::Assignable<T>::Setter::Client getSetter();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename T>
class Assignable<T>::Getter::SubscribeResults::Reader {
public:
  typedef SubscribeResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::Getter::Reader asAssignableGeneric() {
    return typename Assignable<T2>::Getter::Reader(_reader);
  }

  inline bool hasHandle() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Handle::Client getHandle() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename T>
class Assignable<T>::Getter::SubscribeResults::Builder {
public:
  typedef SubscribeResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::Getter::Builder asAssignableGeneric() {
    return typename Assignable<T2>::Getter::Builder(_builder);
  }

  inline bool hasHandle();
#if !CAPNP_LITE
  inline  ::sandstorm::Handle::Client getHandle();
  inline void setHandle( ::sandstorm::Handle::Client&& value);
  inline void setHandle( ::sandstorm::Handle::Client& value);
  inline void adoptHandle(::capnp::Orphan< ::sandstorm::Handle>&& value);
  inline ::capnp::Orphan< ::sandstorm::Handle> disownHandle();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename T>
class Assignable<T>::Getter::SubscribeResults::Pipeline {
public:
  typedef SubscribeResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Handle::Client getHandle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
template <typename T>
class Assignable<T>::Setter::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef Assignable<T>::Setter Calls;
  typedef Assignable<T>::Setter Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::Setter::Client asAssignableGeneric() {
    return castAs<typename Assignable<T2>::Setter>();
  }

  ::capnp::Request<typename  ::sandstorm::Assignable<T>::Setter::SetParams, typename  ::sandstorm::Assignable<T>::Setter::SetResults> setRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

template <typename T>
class Assignable<T>::Setter::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef Assignable<T>::Setter Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef typename  ::sandstorm::Assignable<T>::Setter::SetParams SetParams;
  typedef typename  ::sandstorm::Assignable<T>::Setter::SetResults SetResults;
  typedef ::capnp::CallContext<SetParams, SetResults> SetContext;
  virtual ::kj::Promise<void> set(SetContext context);

  inline typename  ::sandstorm::Assignable<T>::Setter::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs<typename  ::sandstorm::Assignable<T>::Setter>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

template <typename T>
class Assignable<T>::Setter::SetParams::Reader {
public:
  typedef SetParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::Setter::Reader asAssignableGeneric() {
    return typename Assignable<T2>::Setter::Reader(_reader);
  }

  inline bool hasValue() const;
  inline  ::capnp::ReaderFor<T> getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename T>
class Assignable<T>::Setter::SetParams::Builder {
public:
  typedef SetParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::Setter::Builder asAssignableGeneric() {
    return typename Assignable<T2>::Setter::Builder(_builder);
  }

  inline bool hasValue();
  inline  ::capnp::BuilderFor<T> getValue();
  inline void setValue( ::capnp::ReaderFor<T> value);
  inline  ::capnp::BuilderFor<T> initValue();
  inline  ::capnp::BuilderFor<T> initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan<T>&& value);
  inline ::capnp::Orphan<T> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename T>
class Assignable<T>::Setter::SetParams::Pipeline {
public:
  typedef SetParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<T> getValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename T>
class Assignable<T>::Setter::SetResults::Reader {
public:
  typedef SetResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::Setter::Reader asAssignableGeneric() {
    return typename Assignable<T2>::Setter::Reader(_reader);
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename T>
class Assignable<T>::Setter::SetResults::Builder {
public:
  typedef SetResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::Setter::Builder asAssignableGeneric() {
    return typename Assignable<T2>::Setter::Builder(_builder);
  }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename T>
class Assignable<T>::Setter::SetResults::Pipeline {
public:
  typedef SetResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename T>
class Assignable<T>::GetParams::Reader {
public:
  typedef GetParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::GetParams::Reader asAssignableGeneric() {
    return typename Assignable<T2>::GetParams::Reader(_reader);
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename T>
class Assignable<T>::GetParams::Builder {
public:
  typedef GetParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::GetParams::Builder asAssignableGeneric() {
    return typename Assignable<T2>::GetParams::Builder(_builder);
  }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename T>
class Assignable<T>::GetParams::Pipeline {
public:
  typedef GetParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename T>
class Assignable<T>::GetResults::Reader {
public:
  typedef GetResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::GetResults::Reader asAssignableGeneric() {
    return typename Assignable<T2>::GetResults::Reader(_reader);
  }

  inline bool hasValue() const;
  inline  ::capnp::ReaderFor<T> getValue() const;

  inline bool hasSetter() const;
#if !CAPNP_LITE
  inline typename  ::sandstorm::Assignable<T>::Setter::Client getSetter() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename T>
class Assignable<T>::GetResults::Builder {
public:
  typedef GetResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::GetResults::Builder asAssignableGeneric() {
    return typename Assignable<T2>::GetResults::Builder(_builder);
  }

  inline bool hasValue();
  inline  ::capnp::BuilderFor<T> getValue();
  inline void setValue( ::capnp::ReaderFor<T> value);
  inline  ::capnp::BuilderFor<T> initValue();
  inline  ::capnp::BuilderFor<T> initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan<T>&& value);
  inline ::capnp::Orphan<T> disownValue();

  inline bool hasSetter();
#if !CAPNP_LITE
  inline typename  ::sandstorm::Assignable<T>::Setter::Client getSetter();
  inline void setSetter(typename  ::sandstorm::Assignable<T>::Setter::Client&& value);
  inline void setSetter(typename  ::sandstorm::Assignable<T>::Setter::Client& value);
  inline void adoptSetter(::capnp::Orphan<typename  ::sandstorm::Assignable<T>::Setter>&& value);
  inline ::capnp::Orphan<typename  ::sandstorm::Assignable<T>::Setter> disownSetter();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename T>
class Assignable<T>::GetResults::Pipeline {
public:
  typedef GetResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<T> getValue();
  inline typename  ::sandstorm::Assignable<T>::Setter::Client getSetter();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename T>
class Assignable<T>::AsGetterParams::Reader {
public:
  typedef AsGetterParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::AsGetterParams::Reader asAssignableGeneric() {
    return typename Assignable<T2>::AsGetterParams::Reader(_reader);
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename T>
class Assignable<T>::AsGetterParams::Builder {
public:
  typedef AsGetterParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::AsGetterParams::Builder asAssignableGeneric() {
    return typename Assignable<T2>::AsGetterParams::Builder(_builder);
  }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename T>
class Assignable<T>::AsGetterParams::Pipeline {
public:
  typedef AsGetterParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename T>
class Assignable<T>::AsGetterResults::Reader {
public:
  typedef AsGetterResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::AsGetterResults::Reader asAssignableGeneric() {
    return typename Assignable<T2>::AsGetterResults::Reader(_reader);
  }

  inline bool hasGetter() const;
#if !CAPNP_LITE
  inline typename  ::sandstorm::Assignable<T>::Getter::Client getGetter() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename T>
class Assignable<T>::AsGetterResults::Builder {
public:
  typedef AsGetterResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::AsGetterResults::Builder asAssignableGeneric() {
    return typename Assignable<T2>::AsGetterResults::Builder(_builder);
  }

  inline bool hasGetter();
#if !CAPNP_LITE
  inline typename  ::sandstorm::Assignable<T>::Getter::Client getGetter();
  inline void setGetter(typename  ::sandstorm::Assignable<T>::Getter::Client&& value);
  inline void setGetter(typename  ::sandstorm::Assignable<T>::Getter::Client& value);
  inline void adoptGetter(::capnp::Orphan<typename  ::sandstorm::Assignable<T>::Getter>&& value);
  inline ::capnp::Orphan<typename  ::sandstorm::Assignable<T>::Getter> disownGetter();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename T>
class Assignable<T>::AsGetterResults::Pipeline {
public:
  typedef AsGetterResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename  ::sandstorm::Assignable<T>::Getter::Client getGetter();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename T>
class Assignable<T>::AsSetterParams::Reader {
public:
  typedef AsSetterParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::AsSetterParams::Reader asAssignableGeneric() {
    return typename Assignable<T2>::AsSetterParams::Reader(_reader);
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename T>
class Assignable<T>::AsSetterParams::Builder {
public:
  typedef AsSetterParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::AsSetterParams::Builder asAssignableGeneric() {
    return typename Assignable<T2>::AsSetterParams::Builder(_builder);
  }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename T>
class Assignable<T>::AsSetterParams::Pipeline {
public:
  typedef AsSetterParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename T>
class Assignable<T>::AsSetterResults::Reader {
public:
  typedef AsSetterResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::AsSetterResults::Reader asAssignableGeneric() {
    return typename Assignable<T2>::AsSetterResults::Reader(_reader);
  }

  inline bool hasSetter() const;
#if !CAPNP_LITE
  inline typename  ::sandstorm::Assignable<T>::Setter::Client getSetter() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename T>
class Assignable<T>::AsSetterResults::Builder {
public:
  typedef AsSetterResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Assignable<T2>::AsSetterResults::Builder asAssignableGeneric() {
    return typename Assignable<T2>::AsSetterResults::Builder(_builder);
  }

  inline bool hasSetter();
#if !CAPNP_LITE
  inline typename  ::sandstorm::Assignable<T>::Setter::Client getSetter();
  inline void setSetter(typename  ::sandstorm::Assignable<T>::Setter::Client&& value);
  inline void setSetter(typename  ::sandstorm::Assignable<T>::Setter::Client& value);
  inline void adoptSetter(::capnp::Orphan<typename  ::sandstorm::Assignable<T>::Setter>&& value);
  inline ::capnp::Orphan<typename  ::sandstorm::Assignable<T>::Setter> disownSetter();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename T>
class Assignable<T>::AsSetterResults::Pipeline {
public:
  typedef AsSetterResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename  ::sandstorm::Assignable<T>::Setter::Client getSetter();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class StaticAsset::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef StaticAsset Calls;
  typedef StaticAsset Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::StaticAsset::GetUrlParams,  ::sandstorm::StaticAsset::GetUrlResults> getUrlRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class StaticAsset::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef StaticAsset Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::StaticAsset::GetUrlParams GetUrlParams;
  typedef  ::sandstorm::StaticAsset::GetUrlResults GetUrlResults;
  typedef ::capnp::CallContext<GetUrlParams, GetUrlResults> GetUrlContext;
  virtual ::kj::Promise<void> getUrl(GetUrlContext context);

  inline  ::sandstorm::StaticAsset::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::StaticAsset>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class StaticAsset::GetUrlParams::Reader {
public:
  typedef GetUrlParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StaticAsset::GetUrlParams::Builder {
public:
  typedef GetUrlParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StaticAsset::GetUrlParams::Pipeline {
public:
  typedef GetUrlParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StaticAsset::GetUrlResults::Reader {
public:
  typedef GetUrlResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::sandstorm::StaticAsset::Protocol getProtocol() const;

  inline bool hasHostPath() const;
  inline  ::capnp::Text::Reader getHostPath() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StaticAsset::GetUrlResults::Builder {
public:
  typedef GetUrlResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::sandstorm::StaticAsset::Protocol getProtocol();
  inline void setProtocol( ::sandstorm::StaticAsset::Protocol value);

  inline bool hasHostPath();
  inline  ::capnp::Text::Builder getHostPath();
  inline void setHostPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHostPath(unsigned int size);
  inline void adoptHostPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHostPath();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StaticAsset::GetUrlResults::Pipeline {
public:
  typedef GetUrlResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool KeyValue::Reader::hasKey() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool KeyValue::Builder::hasKey() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader KeyValue::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder KeyValue::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void KeyValue::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder KeyValue::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void KeyValue::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> KeyValue::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool KeyValue::Reader::hasValue() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool KeyValue::Builder::hasValue() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader KeyValue::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder KeyValue::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void KeyValue::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder KeyValue::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void KeyValue::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> KeyValue::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool LocalizedText::Reader::hasDefaultText() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool LocalizedText::Builder::hasDefaultText() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LocalizedText::Reader::getDefaultText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LocalizedText::Builder::getDefaultText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void LocalizedText::Builder::setDefaultText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LocalizedText::Builder::initDefaultText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void LocalizedText::Builder::adoptDefaultText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LocalizedText::Builder::disownDefaultText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool LocalizedText::Reader::hasLocalizations() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool LocalizedText::Builder::hasLocalizations() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::LocalizedText::Localization>::Reader LocalizedText::Reader::getLocalizations() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::LocalizedText::Localization>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::LocalizedText::Localization>::Builder LocalizedText::Builder::getLocalizations() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::LocalizedText::Localization>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void LocalizedText::Builder::setLocalizations( ::capnp::List< ::sandstorm::LocalizedText::Localization>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::LocalizedText::Localization>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::LocalizedText::Localization>::Builder LocalizedText::Builder::initLocalizations(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::LocalizedText::Localization>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void LocalizedText::Builder::adoptLocalizations(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::LocalizedText::Localization>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::LocalizedText::Localization>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::LocalizedText::Localization>> LocalizedText::Builder::disownLocalizations() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::LocalizedText::Localization>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool LocalizedText::Localization::Reader::hasLocale() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool LocalizedText::Localization::Builder::hasLocale() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LocalizedText::Localization::Reader::getLocale() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LocalizedText::Localization::Builder::getLocale() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void LocalizedText::Localization::Builder::setLocale( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LocalizedText::Localization::Builder::initLocale(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void LocalizedText::Localization::Builder::adoptLocale(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LocalizedText::Localization::Builder::disownLocale() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool LocalizedText::Localization::Reader::hasText() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool LocalizedText::Localization::Builder::hasText() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LocalizedText::Localization::Reader::getText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LocalizedText::Localization::Builder::getText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void LocalizedText::Localization::Builder::setText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LocalizedText::Localization::Builder::initText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void LocalizedText::Localization::Builder::adoptText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LocalizedText::Localization::Builder::disownText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

#if !CAPNP_LITE
inline Handle::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline Handle::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline Handle::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline Handle::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline Handle::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::Handle::Client& Handle::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::Handle::Client& Handle::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
#if !CAPNP_LITE
inline ByteStream::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline ByteStream::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline ByteStream::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline ByteStream::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline ByteStream::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::ByteStream::Client& ByteStream::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::ByteStream::Client& ByteStream::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool ByteStream::WriteParams::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ByteStream::WriteParams::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader ByteStream::WriteParams::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder ByteStream::WriteParams::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ByteStream::WriteParams::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder ByteStream::WriteParams::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ByteStream::WriteParams::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> ByteStream::WriteParams::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t ByteStream::ExpectSizeParams::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t ByteStream::ExpectSizeParams::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void ByteStream::ExpectSizeParams::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

#if !CAPNP_LITE
inline Blob::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline Blob::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline Blob::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline Blob::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline Blob::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::Blob::Client& Blob::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::Blob::Client& Blob::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline  ::uint64_t Blob::GetSizeResults::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Blob::GetSizeResults::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Blob::GetSizeResults::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Blob::WriteToParams::Reader::hasStream() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Blob::WriteToParams::Builder::hasStream() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::ByteStream::Client Blob::WriteToParams::Reader::getStream() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::ByteStream::Client Blob::WriteToParams::Builder::getStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::ByteStream::Client Blob::WriteToParams::Pipeline::getStream() {
  return  ::sandstorm::ByteStream::Client(_typeless.getPointerField(0).asCap());
}
inline void Blob::WriteToParams::Builder::setStream( ::sandstorm::ByteStream::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void Blob::WriteToParams::Builder::setStream( ::sandstorm::ByteStream::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void Blob::WriteToParams::Builder::adoptStream(
    ::capnp::Orphan< ::sandstorm::ByteStream>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::ByteStream> Blob::WriteToParams::Builder::disownStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline  ::uint64_t Blob::WriteToParams::Reader::getStartAtOffset() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Blob::WriteToParams::Builder::getStartAtOffset() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Blob::WriteToParams::Builder::setStartAtOffset( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Blob::WriteToResults::Reader::hasHandle() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Blob::WriteToResults::Builder::hasHandle() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Handle::Client Blob::WriteToResults::Reader::getHandle() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Handle::Client Blob::WriteToResults::Builder::getHandle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Handle::Client Blob::WriteToResults::Pipeline::getHandle() {
  return  ::sandstorm::Handle::Client(_typeless.getPointerField(0).asCap());
}
inline void Blob::WriteToResults::Builder::setHandle( ::sandstorm::Handle::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void Blob::WriteToResults::Builder::setHandle( ::sandstorm::Handle::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void Blob::WriteToResults::Builder::adoptHandle(
    ::capnp::Orphan< ::sandstorm::Handle>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Handle> Blob::WriteToResults::Builder::disownHandle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline  ::uint64_t Blob::GetSliceParams::Reader::getOffset() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Blob::GetSliceParams::Builder::getOffset() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Blob::GetSliceParams::Builder::setOffset( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Blob::GetSliceParams::Reader::getSize() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Blob::GetSliceParams::Builder::getSize() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Blob::GetSliceParams::Builder::setSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool Blob::GetSliceResults::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Blob::GetSliceResults::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Blob::GetSliceResults::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Blob::GetSliceResults::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Blob::GetSliceResults::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Blob::GetSliceResults::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Blob::GetSliceResults::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Blob::GetSliceResults::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

#if !CAPNP_LITE
template <typename T>
inline Assignable<T>::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
template <typename T>
inline Assignable<T>::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename T>
template <typename _t, typename>
inline Assignable<T>::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename T>
template <typename _t, typename>
inline Assignable<T>::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
template <typename T>
inline Assignable<T>::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Client& Assignable<T>::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Client& Assignable<T>::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
#if !CAPNP_LITE
template <typename T>
inline Assignable<T>::Getter::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
template <typename T>
inline Assignable<T>::Getter::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename T>
template <typename _t, typename>
inline Assignable<T>::Getter::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename T>
template <typename _t, typename>
inline Assignable<T>::Getter::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
template <typename T>
inline Assignable<T>::Getter::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Getter::Client& Assignable<T>::Getter::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Getter::Client& Assignable<T>::Getter::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
// Assignable<T>::Getter::GetParams
template <typename T>
constexpr uint16_t Assignable<T>::Getter::GetParams::_capnpPrivate::dataWordSize;
template <typename T>
constexpr uint16_t Assignable<T>::Getter::GetParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind Assignable<T>::Getter::GetParams::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* Assignable<T>::Getter::GetParams::_capnpPrivate::schema;
template <typename T>
constexpr ::capnp::_::RawBrandedSchema const* Assignable<T>::Getter::GetParams::_capnpPrivate::brand;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope Assignable<T>::Getter::GetParams::_capnpPrivate::brandScopes[] = {
  { 0xeaf255b498229199, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding Assignable<T>::Getter::GetParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema Assignable<T>::Getter::GetParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_b19fdbd356844119, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename T>
inline bool Assignable<T>::Getter::GetResults::Reader::hasValue() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename T>
inline bool Assignable<T>::Getter::GetResults::Builder::hasValue() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename T>
inline  ::capnp::ReaderFor<T> Assignable<T>::Getter::GetResults::Reader::getValue() const {
  return ::capnp::_::PointerHelpers<T>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename T>
inline  ::capnp::BuilderFor<T> Assignable<T>::Getter::GetResults::Builder::getValue() {
  return ::capnp::_::PointerHelpers<T>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename T>
inline  ::capnp::PipelineFor<T> Assignable<T>::Getter::GetResults::Pipeline::getValue() {
  return  ::capnp::PipelineFor<T>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename T>
inline void Assignable<T>::Getter::GetResults::Builder::setValue( ::capnp::ReaderFor<T> value) {
  ::capnp::_::PointerHelpers<T>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename T>
inline  ::capnp::BuilderFor<T> Assignable<T>::Getter::GetResults::Builder::initValue() {
  return ::capnp::_::PointerHelpers<T>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename T>
inline  ::capnp::BuilderFor<T> Assignable<T>::Getter::GetResults::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers<T>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename T>
inline void Assignable<T>::Getter::GetResults::Builder::adoptValue(
    ::capnp::Orphan<T>&& value) {
  ::capnp::_::PointerHelpers<T>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename T>
inline ::capnp::Orphan<T> Assignable<T>::Getter::GetResults::Builder::disownValue() {
  return ::capnp::_::PointerHelpers<T>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

// Assignable<T>::Getter::GetResults
template <typename T>
constexpr uint16_t Assignable<T>::Getter::GetResults::_capnpPrivate::dataWordSize;
template <typename T>
constexpr uint16_t Assignable<T>::Getter::GetResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind Assignable<T>::Getter::GetResults::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* Assignable<T>::Getter::GetResults::_capnpPrivate::schema;
template <typename T>
constexpr ::capnp::_::RawBrandedSchema const* Assignable<T>::Getter::GetResults::_capnpPrivate::brand;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope Assignable<T>::Getter::GetResults::_capnpPrivate::brandScopes[] = {
  { 0xeaf255b498229199, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding Assignable<T>::Getter::GetResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema Assignable<T>::Getter::GetResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_97ef2da226123492, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename T>
inline bool Assignable<T>::Getter::SubscribeParams::Reader::hasSetter() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename T>
inline bool Assignable<T>::Getter::SubscribeParams::Builder::hasSetter() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Setter::Client Assignable<T>::Getter::SubscribeParams::Reader::getSetter() const {
  return ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Setter::Client Assignable<T>::Getter::SubscribeParams::Builder::getSetter() {
  return ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Setter::Client Assignable<T>::Getter::SubscribeParams::Pipeline::getSetter() {
  return typename  ::sandstorm::Assignable<T>::Setter::Client(_typeless.getPointerField(0).asCap());
}
template <typename T>
inline void Assignable<T>::Getter::SubscribeParams::Builder::setSetter(typename  ::sandstorm::Assignable<T>::Setter::Client&& cap) {
  ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
template <typename T>
inline void Assignable<T>::Getter::SubscribeParams::Builder::setSetter(typename  ::sandstorm::Assignable<T>::Setter::Client& cap) {
  ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
template <typename T>
inline void Assignable<T>::Getter::SubscribeParams::Builder::adoptSetter(
    ::capnp::Orphan<typename  ::sandstorm::Assignable<T>::Setter>&& value) {
  ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename T>
inline ::capnp::Orphan<typename  ::sandstorm::Assignable<T>::Setter> Assignable<T>::Getter::SubscribeParams::Builder::disownSetter() {
  return ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

// Assignable<T>::Getter::SubscribeParams
template <typename T>
constexpr uint16_t Assignable<T>::Getter::SubscribeParams::_capnpPrivate::dataWordSize;
template <typename T>
constexpr uint16_t Assignable<T>::Getter::SubscribeParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind Assignable<T>::Getter::SubscribeParams::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* Assignable<T>::Getter::SubscribeParams::_capnpPrivate::schema;
template <typename T>
constexpr ::capnp::_::RawBrandedSchema const* Assignable<T>::Getter::SubscribeParams::_capnpPrivate::brand;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope Assignable<T>::Getter::SubscribeParams::_capnpPrivate::brandScopes[] = {
  { 0xeaf255b498229199, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding Assignable<T>::Getter::SubscribeParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Dependency Assignable<T>::Getter::SubscribeParams::_capnpPrivate::brandDependencies[] = {
  { 16777216,  ::sandstorm::Assignable<T>::Setter::_capnpPrivate::brand },
};
template <typename T>
const ::capnp::_::RawBrandedSchema Assignable<T>::Getter::SubscribeParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_f02783ef982ecea9, brandScopes, brandDependencies,
  sizeof(brandScopes) / sizeof(brandScopes[0]), sizeof(brandDependencies) / sizeof(brandDependencies[0]), nullptr
};
#endif  // !CAPNP_LITE

template <typename T>
inline bool Assignable<T>::Getter::SubscribeResults::Reader::hasHandle() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename T>
inline bool Assignable<T>::Getter::SubscribeResults::Builder::hasHandle() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename T>
inline  ::sandstorm::Handle::Client Assignable<T>::Getter::SubscribeResults::Reader::getHandle() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename T>
inline  ::sandstorm::Handle::Client Assignable<T>::Getter::SubscribeResults::Builder::getHandle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename T>
inline  ::sandstorm::Handle::Client Assignable<T>::Getter::SubscribeResults::Pipeline::getHandle() {
  return  ::sandstorm::Handle::Client(_typeless.getPointerField(0).asCap());
}
template <typename T>
inline void Assignable<T>::Getter::SubscribeResults::Builder::setHandle( ::sandstorm::Handle::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
template <typename T>
inline void Assignable<T>::Getter::SubscribeResults::Builder::setHandle( ::sandstorm::Handle::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
template <typename T>
inline void Assignable<T>::Getter::SubscribeResults::Builder::adoptHandle(
    ::capnp::Orphan< ::sandstorm::Handle>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename T>
inline ::capnp::Orphan< ::sandstorm::Handle> Assignable<T>::Getter::SubscribeResults::Builder::disownHandle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

// Assignable<T>::Getter::SubscribeResults
template <typename T>
constexpr uint16_t Assignable<T>::Getter::SubscribeResults::_capnpPrivate::dataWordSize;
template <typename T>
constexpr uint16_t Assignable<T>::Getter::SubscribeResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind Assignable<T>::Getter::SubscribeResults::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* Assignable<T>::Getter::SubscribeResults::_capnpPrivate::schema;
template <typename T>
constexpr ::capnp::_::RawBrandedSchema const* Assignable<T>::Getter::SubscribeResults::_capnpPrivate::brand;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope Assignable<T>::Getter::SubscribeResults::_capnpPrivate::brandScopes[] = {
  { 0xeaf255b498229199, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding Assignable<T>::Getter::SubscribeResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema Assignable<T>::Getter::SubscribeResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_84e0f802c9af605b, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
template <typename T>
::capnp::Request<typename  ::sandstorm::Assignable<T>::Getter::GetParams, typename  ::sandstorm::Assignable<T>::Getter::GetResults>
Assignable<T>::Getter::Client::getRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::Assignable<T>::Getter::GetParams, typename  ::sandstorm::Assignable<T>::Getter::GetResults>(
      0x80f2f65360d64224ull, 0, sizeHint);
}
template <typename T>
::kj::Promise<void> Assignable<T>::Getter::Server::get(GetContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/util.capnp:Assignable.Getter", "get",
      0x80f2f65360d64224ull, 0);
}
template <typename T>
::capnp::Request<typename  ::sandstorm::Assignable<T>::Getter::SubscribeParams, typename  ::sandstorm::Assignable<T>::Getter::SubscribeResults>
Assignable<T>::Getter::Client::subscribeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::Assignable<T>::Getter::SubscribeParams, typename  ::sandstorm::Assignable<T>::Getter::SubscribeResults>(
      0x80f2f65360d64224ull, 1, sizeHint);
}
template <typename T>
::kj::Promise<void> Assignable<T>::Getter::Server::subscribe(SubscribeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/util.capnp:Assignable.Getter", "subscribe",
      0x80f2f65360d64224ull, 1);
}
template <typename T>
::kj::Promise<void> Assignable<T>::Getter::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x80f2f65360d64224ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/util.capnp:Assignable.Getter", interfaceId);
  }
}
template <typename T>
::kj::Promise<void> Assignable<T>::Getter::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return get(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::Assignable<T>::Getter::GetParams, typename  ::sandstorm::Assignable<T>::Getter::GetResults>(context));
    case 1:
      return subscribe(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::Assignable<T>::Getter::SubscribeParams, typename  ::sandstorm::Assignable<T>::Getter::SubscribeResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/util.capnp:Assignable.Getter",
          0x80f2f65360d64224ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Assignable<T>::Getter
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind Assignable<T>::Getter::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* Assignable<T>::Getter::_capnpPrivate::schema;
template <typename T>
constexpr ::capnp::_::RawBrandedSchema const* Assignable<T>::Getter::_capnpPrivate::brand;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope Assignable<T>::Getter::_capnpPrivate::brandScopes[] = {
  { 0xeaf255b498229199, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding Assignable<T>::Getter::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Dependency Assignable<T>::Getter::_capnpPrivate::brandDependencies[] = {
  { 33554432,  ::sandstorm::Assignable<T>::Getter::GetParams::_capnpPrivate::brand },
  { 33554433,  ::sandstorm::Assignable<T>::Getter::SubscribeParams::_capnpPrivate::brand },
  { 50331648,  ::sandstorm::Assignable<T>::Getter::GetResults::_capnpPrivate::brand },
  { 50331649,  ::sandstorm::Assignable<T>::Getter::SubscribeResults::_capnpPrivate::brand },
};
template <typename T>
const ::capnp::_::RawBrandedSchema Assignable<T>::Getter::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_80f2f65360d64224, brandScopes, brandDependencies,
  sizeof(brandScopes) / sizeof(brandScopes[0]), sizeof(brandDependencies) / sizeof(brandDependencies[0]), nullptr
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
template <typename T>
inline Assignable<T>::Setter::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
template <typename T>
inline Assignable<T>::Setter::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename T>
template <typename _t, typename>
inline Assignable<T>::Setter::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename T>
template <typename _t, typename>
inline Assignable<T>::Setter::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
template <typename T>
inline Assignable<T>::Setter::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Setter::Client& Assignable<T>::Setter::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Setter::Client& Assignable<T>::Setter::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
template <typename T>
inline bool Assignable<T>::Setter::SetParams::Reader::hasValue() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename T>
inline bool Assignable<T>::Setter::SetParams::Builder::hasValue() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename T>
inline  ::capnp::ReaderFor<T> Assignable<T>::Setter::SetParams::Reader::getValue() const {
  return ::capnp::_::PointerHelpers<T>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename T>
inline  ::capnp::BuilderFor<T> Assignable<T>::Setter::SetParams::Builder::getValue() {
  return ::capnp::_::PointerHelpers<T>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename T>
inline  ::capnp::PipelineFor<T> Assignable<T>::Setter::SetParams::Pipeline::getValue() {
  return  ::capnp::PipelineFor<T>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename T>
inline void Assignable<T>::Setter::SetParams::Builder::setValue( ::capnp::ReaderFor<T> value) {
  ::capnp::_::PointerHelpers<T>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename T>
inline  ::capnp::BuilderFor<T> Assignable<T>::Setter::SetParams::Builder::initValue() {
  return ::capnp::_::PointerHelpers<T>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename T>
inline  ::capnp::BuilderFor<T> Assignable<T>::Setter::SetParams::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers<T>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename T>
inline void Assignable<T>::Setter::SetParams::Builder::adoptValue(
    ::capnp::Orphan<T>&& value) {
  ::capnp::_::PointerHelpers<T>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename T>
inline ::capnp::Orphan<T> Assignable<T>::Setter::SetParams::Builder::disownValue() {
  return ::capnp::_::PointerHelpers<T>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

// Assignable<T>::Setter::SetParams
template <typename T>
constexpr uint16_t Assignable<T>::Setter::SetParams::_capnpPrivate::dataWordSize;
template <typename T>
constexpr uint16_t Assignable<T>::Setter::SetParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind Assignable<T>::Setter::SetParams::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* Assignable<T>::Setter::SetParams::_capnpPrivate::schema;
template <typename T>
constexpr ::capnp::_::RawBrandedSchema const* Assignable<T>::Setter::SetParams::_capnpPrivate::brand;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope Assignable<T>::Setter::SetParams::_capnpPrivate::brandScopes[] = {
  { 0xeaf255b498229199, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding Assignable<T>::Setter::SetParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema Assignable<T>::Setter::SetParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_98d0372787b787d1, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

// Assignable<T>::Setter::SetResults
template <typename T>
constexpr uint16_t Assignable<T>::Setter::SetResults::_capnpPrivate::dataWordSize;
template <typename T>
constexpr uint16_t Assignable<T>::Setter::SetResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind Assignable<T>::Setter::SetResults::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* Assignable<T>::Setter::SetResults::_capnpPrivate::schema;
template <typename T>
constexpr ::capnp::_::RawBrandedSchema const* Assignable<T>::Setter::SetResults::_capnpPrivate::brand;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope Assignable<T>::Setter::SetResults::_capnpPrivate::brandScopes[] = {
  { 0xeaf255b498229199, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding Assignable<T>::Setter::SetResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema Assignable<T>::Setter::SetResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_dbfbb635d3e6abab, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
template <typename T>
::capnp::Request<typename  ::sandstorm::Assignable<T>::Setter::SetParams, typename  ::sandstorm::Assignable<T>::Setter::SetResults>
Assignable<T>::Setter::Client::setRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::Assignable<T>::Setter::SetParams, typename  ::sandstorm::Assignable<T>::Setter::SetResults>(
      0xd5256a3f93589d2full, 0, sizeHint);
}
template <typename T>
::kj::Promise<void> Assignable<T>::Setter::Server::set(SetContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/util.capnp:Assignable.Setter", "set",
      0xd5256a3f93589d2full, 0);
}
template <typename T>
::kj::Promise<void> Assignable<T>::Setter::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd5256a3f93589d2full:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/util.capnp:Assignable.Setter", interfaceId);
  }
}
template <typename T>
::kj::Promise<void> Assignable<T>::Setter::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return set(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::Assignable<T>::Setter::SetParams, typename  ::sandstorm::Assignable<T>::Setter::SetResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/util.capnp:Assignable.Setter",
          0xd5256a3f93589d2full, methodId);
  }
}
#endif  // !CAPNP_LITE

// Assignable<T>::Setter
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind Assignable<T>::Setter::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* Assignable<T>::Setter::_capnpPrivate::schema;
template <typename T>
constexpr ::capnp::_::RawBrandedSchema const* Assignable<T>::Setter::_capnpPrivate::brand;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope Assignable<T>::Setter::_capnpPrivate::brandScopes[] = {
  { 0xeaf255b498229199, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding Assignable<T>::Setter::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Dependency Assignable<T>::Setter::_capnpPrivate::brandDependencies[] = {
  { 33554432,  ::sandstorm::Assignable<T>::Setter::SetParams::_capnpPrivate::brand },
  { 50331648,  ::sandstorm::Assignable<T>::Setter::SetResults::_capnpPrivate::brand },
};
template <typename T>
const ::capnp::_::RawBrandedSchema Assignable<T>::Setter::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_d5256a3f93589d2f, brandScopes, brandDependencies,
  sizeof(brandScopes) / sizeof(brandScopes[0]), sizeof(brandDependencies) / sizeof(brandDependencies[0]), nullptr
};
#endif  // !CAPNP_LITE

// Assignable<T>::GetParams
template <typename T>
constexpr uint16_t Assignable<T>::GetParams::_capnpPrivate::dataWordSize;
template <typename T>
constexpr uint16_t Assignable<T>::GetParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind Assignable<T>::GetParams::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* Assignable<T>::GetParams::_capnpPrivate::schema;
template <typename T>
constexpr ::capnp::_::RawBrandedSchema const* Assignable<T>::GetParams::_capnpPrivate::brand;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope Assignable<T>::GetParams::_capnpPrivate::brandScopes[] = {
  { 0xeaf255b498229199, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding Assignable<T>::GetParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema Assignable<T>::GetParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_bbfd27b5d2515662, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename T>
inline bool Assignable<T>::GetResults::Reader::hasValue() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename T>
inline bool Assignable<T>::GetResults::Builder::hasValue() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename T>
inline  ::capnp::ReaderFor<T> Assignable<T>::GetResults::Reader::getValue() const {
  return ::capnp::_::PointerHelpers<T>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename T>
inline  ::capnp::BuilderFor<T> Assignable<T>::GetResults::Builder::getValue() {
  return ::capnp::_::PointerHelpers<T>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename T>
inline  ::capnp::PipelineFor<T> Assignable<T>::GetResults::Pipeline::getValue() {
  return  ::capnp::PipelineFor<T>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename T>
inline void Assignable<T>::GetResults::Builder::setValue( ::capnp::ReaderFor<T> value) {
  ::capnp::_::PointerHelpers<T>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename T>
inline  ::capnp::BuilderFor<T> Assignable<T>::GetResults::Builder::initValue() {
  return ::capnp::_::PointerHelpers<T>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename T>
inline  ::capnp::BuilderFor<T> Assignable<T>::GetResults::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers<T>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename T>
inline void Assignable<T>::GetResults::Builder::adoptValue(
    ::capnp::Orphan<T>&& value) {
  ::capnp::_::PointerHelpers<T>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename T>
inline ::capnp::Orphan<T> Assignable<T>::GetResults::Builder::disownValue() {
  return ::capnp::_::PointerHelpers<T>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

template <typename T>
inline bool Assignable<T>::GetResults::Reader::hasSetter() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename T>
inline bool Assignable<T>::GetResults::Builder::hasSetter() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Setter::Client Assignable<T>::GetResults::Reader::getSetter() const {
  return ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Setter::Client Assignable<T>::GetResults::Builder::getSetter() {
  return ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Setter::Client Assignable<T>::GetResults::Pipeline::getSetter() {
  return typename  ::sandstorm::Assignable<T>::Setter::Client(_typeless.getPointerField(1).asCap());
}
template <typename T>
inline void Assignable<T>::GetResults::Builder::setSetter(typename  ::sandstorm::Assignable<T>::Setter::Client&& cap) {
  ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(cap));
}
template <typename T>
inline void Assignable<T>::GetResults::Builder::setSetter(typename  ::sandstorm::Assignable<T>::Setter::Client& cap) {
  ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), cap);
}
template <typename T>
inline void Assignable<T>::GetResults::Builder::adoptSetter(
    ::capnp::Orphan<typename  ::sandstorm::Assignable<T>::Setter>&& value) {
  ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
template <typename T>
inline ::capnp::Orphan<typename  ::sandstorm::Assignable<T>::Setter> Assignable<T>::GetResults::Builder::disownSetter() {
  return ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

// Assignable<T>::GetResults
template <typename T>
constexpr uint16_t Assignable<T>::GetResults::_capnpPrivate::dataWordSize;
template <typename T>
constexpr uint16_t Assignable<T>::GetResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind Assignable<T>::GetResults::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* Assignable<T>::GetResults::_capnpPrivate::schema;
template <typename T>
constexpr ::capnp::_::RawBrandedSchema const* Assignable<T>::GetResults::_capnpPrivate::brand;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope Assignable<T>::GetResults::_capnpPrivate::brandScopes[] = {
  { 0xeaf255b498229199, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding Assignable<T>::GetResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Dependency Assignable<T>::GetResults::_capnpPrivate::brandDependencies[] = {
  { 16777217,  ::sandstorm::Assignable<T>::Setter::_capnpPrivate::brand },
};
template <typename T>
const ::capnp::_::RawBrandedSchema Assignable<T>::GetResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_b351b437cd426a4f, brandScopes, brandDependencies,
  sizeof(brandScopes) / sizeof(brandScopes[0]), sizeof(brandDependencies) / sizeof(brandDependencies[0]), nullptr
};
#endif  // !CAPNP_LITE

// Assignable<T>::AsGetterParams
template <typename T>
constexpr uint16_t Assignable<T>::AsGetterParams::_capnpPrivate::dataWordSize;
template <typename T>
constexpr uint16_t Assignable<T>::AsGetterParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind Assignable<T>::AsGetterParams::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* Assignable<T>::AsGetterParams::_capnpPrivate::schema;
template <typename T>
constexpr ::capnp::_::RawBrandedSchema const* Assignable<T>::AsGetterParams::_capnpPrivate::brand;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope Assignable<T>::AsGetterParams::_capnpPrivate::brandScopes[] = {
  { 0xeaf255b498229199, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding Assignable<T>::AsGetterParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema Assignable<T>::AsGetterParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_f907945b872b26cf, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename T>
inline bool Assignable<T>::AsGetterResults::Reader::hasGetter() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename T>
inline bool Assignable<T>::AsGetterResults::Builder::hasGetter() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Getter::Client Assignable<T>::AsGetterResults::Reader::getGetter() const {
  return ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Getter>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Getter::Client Assignable<T>::AsGetterResults::Builder::getGetter() {
  return ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Getter>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Getter::Client Assignable<T>::AsGetterResults::Pipeline::getGetter() {
  return typename  ::sandstorm::Assignable<T>::Getter::Client(_typeless.getPointerField(0).asCap());
}
template <typename T>
inline void Assignable<T>::AsGetterResults::Builder::setGetter(typename  ::sandstorm::Assignable<T>::Getter::Client&& cap) {
  ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Getter>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
template <typename T>
inline void Assignable<T>::AsGetterResults::Builder::setGetter(typename  ::sandstorm::Assignable<T>::Getter::Client& cap) {
  ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Getter>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
template <typename T>
inline void Assignable<T>::AsGetterResults::Builder::adoptGetter(
    ::capnp::Orphan<typename  ::sandstorm::Assignable<T>::Getter>&& value) {
  ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Getter>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename T>
inline ::capnp::Orphan<typename  ::sandstorm::Assignable<T>::Getter> Assignable<T>::AsGetterResults::Builder::disownGetter() {
  return ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Getter>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

// Assignable<T>::AsGetterResults
template <typename T>
constexpr uint16_t Assignable<T>::AsGetterResults::_capnpPrivate::dataWordSize;
template <typename T>
constexpr uint16_t Assignable<T>::AsGetterResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind Assignable<T>::AsGetterResults::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* Assignable<T>::AsGetterResults::_capnpPrivate::schema;
template <typename T>
constexpr ::capnp::_::RawBrandedSchema const* Assignable<T>::AsGetterResults::_capnpPrivate::brand;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope Assignable<T>::AsGetterResults::_capnpPrivate::brandScopes[] = {
  { 0xeaf255b498229199, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding Assignable<T>::AsGetterResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Dependency Assignable<T>::AsGetterResults::_capnpPrivate::brandDependencies[] = {
  { 16777216,  ::sandstorm::Assignable<T>::Getter::_capnpPrivate::brand },
};
template <typename T>
const ::capnp::_::RawBrandedSchema Assignable<T>::AsGetterResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_8c3d547ef2930e96, brandScopes, brandDependencies,
  sizeof(brandScopes) / sizeof(brandScopes[0]), sizeof(brandDependencies) / sizeof(brandDependencies[0]), nullptr
};
#endif  // !CAPNP_LITE

// Assignable<T>::AsSetterParams
template <typename T>
constexpr uint16_t Assignable<T>::AsSetterParams::_capnpPrivate::dataWordSize;
template <typename T>
constexpr uint16_t Assignable<T>::AsSetterParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind Assignable<T>::AsSetterParams::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* Assignable<T>::AsSetterParams::_capnpPrivate::schema;
template <typename T>
constexpr ::capnp::_::RawBrandedSchema const* Assignable<T>::AsSetterParams::_capnpPrivate::brand;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope Assignable<T>::AsSetterParams::_capnpPrivate::brandScopes[] = {
  { 0xeaf255b498229199, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding Assignable<T>::AsSetterParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema Assignable<T>::AsSetterParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_a01f603357f3b349, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename T>
inline bool Assignable<T>::AsSetterResults::Reader::hasSetter() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename T>
inline bool Assignable<T>::AsSetterResults::Builder::hasSetter() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Setter::Client Assignable<T>::AsSetterResults::Reader::getSetter() const {
  return ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Setter::Client Assignable<T>::AsSetterResults::Builder::getSetter() {
  return ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename T>
inline typename  ::sandstorm::Assignable<T>::Setter::Client Assignable<T>::AsSetterResults::Pipeline::getSetter() {
  return typename  ::sandstorm::Assignable<T>::Setter::Client(_typeless.getPointerField(0).asCap());
}
template <typename T>
inline void Assignable<T>::AsSetterResults::Builder::setSetter(typename  ::sandstorm::Assignable<T>::Setter::Client&& cap) {
  ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
template <typename T>
inline void Assignable<T>::AsSetterResults::Builder::setSetter(typename  ::sandstorm::Assignable<T>::Setter::Client& cap) {
  ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
template <typename T>
inline void Assignable<T>::AsSetterResults::Builder::adoptSetter(
    ::capnp::Orphan<typename  ::sandstorm::Assignable<T>::Setter>&& value) {
  ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename T>
inline ::capnp::Orphan<typename  ::sandstorm::Assignable<T>::Setter> Assignable<T>::AsSetterResults::Builder::disownSetter() {
  return ::capnp::_::PointerHelpers<typename  ::sandstorm::Assignable<T>::Setter>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

// Assignable<T>::AsSetterResults
template <typename T>
constexpr uint16_t Assignable<T>::AsSetterResults::_capnpPrivate::dataWordSize;
template <typename T>
constexpr uint16_t Assignable<T>::AsSetterResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind Assignable<T>::AsSetterResults::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* Assignable<T>::AsSetterResults::_capnpPrivate::schema;
template <typename T>
constexpr ::capnp::_::RawBrandedSchema const* Assignable<T>::AsSetterResults::_capnpPrivate::brand;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope Assignable<T>::AsSetterResults::_capnpPrivate::brandScopes[] = {
  { 0xeaf255b498229199, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding Assignable<T>::AsSetterResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Dependency Assignable<T>::AsSetterResults::_capnpPrivate::brandDependencies[] = {
  { 16777216,  ::sandstorm::Assignable<T>::Setter::_capnpPrivate::brand },
};
template <typename T>
const ::capnp::_::RawBrandedSchema Assignable<T>::AsSetterResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_c6cbc10181c4f397, brandScopes, brandDependencies,
  sizeof(brandScopes) / sizeof(brandScopes[0]), sizeof(brandDependencies) / sizeof(brandDependencies[0]), nullptr
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
template <typename T>
::capnp::Request<typename  ::sandstorm::Assignable<T>::GetParams, typename  ::sandstorm::Assignable<T>::GetResults>
Assignable<T>::Client::getRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::Assignable<T>::GetParams, typename  ::sandstorm::Assignable<T>::GetResults>(
      0xeaf255b498229199ull, 0, sizeHint);
}
template <typename T>
::kj::Promise<void> Assignable<T>::Server::get(GetContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/util.capnp:Assignable", "get",
      0xeaf255b498229199ull, 0);
}
template <typename T>
::capnp::Request<typename  ::sandstorm::Assignable<T>::AsGetterParams, typename  ::sandstorm::Assignable<T>::AsGetterResults>
Assignable<T>::Client::asGetterRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::Assignable<T>::AsGetterParams, typename  ::sandstorm::Assignable<T>::AsGetterResults>(
      0xeaf255b498229199ull, 1, sizeHint);
}
template <typename T>
::kj::Promise<void> Assignable<T>::Server::asGetter(AsGetterContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/util.capnp:Assignable", "asGetter",
      0xeaf255b498229199ull, 1);
}
template <typename T>
::capnp::Request<typename  ::sandstorm::Assignable<T>::AsSetterParams, typename  ::sandstorm::Assignable<T>::AsSetterResults>
Assignable<T>::Client::asSetterRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::Assignable<T>::AsSetterParams, typename  ::sandstorm::Assignable<T>::AsSetterResults>(
      0xeaf255b498229199ull, 2, sizeHint);
}
template <typename T>
::kj::Promise<void> Assignable<T>::Server::asSetter(AsSetterContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/util.capnp:Assignable", "asSetter",
      0xeaf255b498229199ull, 2);
}
template <typename T>
::kj::Promise<void> Assignable<T>::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xeaf255b498229199ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/util.capnp:Assignable", interfaceId);
  }
}
template <typename T>
::kj::Promise<void> Assignable<T>::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return get(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::Assignable<T>::GetParams, typename  ::sandstorm::Assignable<T>::GetResults>(context));
    case 1:
      return asGetter(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::Assignable<T>::AsGetterParams, typename  ::sandstorm::Assignable<T>::AsGetterResults>(context));
    case 2:
      return asSetter(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::Assignable<T>::AsSetterParams, typename  ::sandstorm::Assignable<T>::AsSetterResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/util.capnp:Assignable",
          0xeaf255b498229199ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Assignable<T>
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind Assignable<T>::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* Assignable<T>::_capnpPrivate::schema;
template <typename T>
constexpr ::capnp::_::RawBrandedSchema const* Assignable<T>::_capnpPrivate::brand;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope Assignable<T>::_capnpPrivate::brandScopes[] = {
  { 0xeaf255b498229199, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding Assignable<T>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Dependency Assignable<T>::_capnpPrivate::brandDependencies[] = {
  { 33554432,  ::sandstorm::Assignable<T>::GetParams::_capnpPrivate::brand },
  { 33554433,  ::sandstorm::Assignable<T>::AsGetterParams::_capnpPrivate::brand },
  { 33554434,  ::sandstorm::Assignable<T>::AsSetterParams::_capnpPrivate::brand },
  { 50331648,  ::sandstorm::Assignable<T>::GetResults::_capnpPrivate::brand },
  { 50331649,  ::sandstorm::Assignable<T>::AsGetterResults::_capnpPrivate::brand },
  { 50331650,  ::sandstorm::Assignable<T>::AsSetterResults::_capnpPrivate::brand },
};
template <typename T>
const ::capnp::_::RawBrandedSchema Assignable<T>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_eaf255b498229199, brandScopes, brandDependencies,
  sizeof(brandScopes) / sizeof(brandScopes[0]), sizeof(brandDependencies) / sizeof(brandDependencies[0]), nullptr
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
inline StaticAsset::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline StaticAsset::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline StaticAsset::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline StaticAsset::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline StaticAsset::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::StaticAsset::Client& StaticAsset::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::StaticAsset::Client& StaticAsset::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline  ::sandstorm::StaticAsset::Protocol StaticAsset::GetUrlResults::Reader::getProtocol() const {
  return _reader.getDataField< ::sandstorm::StaticAsset::Protocol>(
      0 * ::capnp::ELEMENTS);
}

inline  ::sandstorm::StaticAsset::Protocol StaticAsset::GetUrlResults::Builder::getProtocol() {
  return _builder.getDataField< ::sandstorm::StaticAsset::Protocol>(
      0 * ::capnp::ELEMENTS);
}
inline void StaticAsset::GetUrlResults::Builder::setProtocol( ::sandstorm::StaticAsset::Protocol value) {
  _builder.setDataField< ::sandstorm::StaticAsset::Protocol>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool StaticAsset::GetUrlResults::Reader::hasHostPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool StaticAsset::GetUrlResults::Builder::hasHostPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StaticAsset::GetUrlResults::Reader::getHostPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StaticAsset::GetUrlResults::Builder::getHostPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StaticAsset::GetUrlResults::Builder::setHostPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StaticAsset::GetUrlResults::Builder::initHostPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void StaticAsset::GetUrlResults::Builder::adoptHostPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StaticAsset::GetUrlResults::Builder::disownHostPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

}  // namespace

#endif  // CAPNP_INCLUDED_ecd50d792c3d9992_
