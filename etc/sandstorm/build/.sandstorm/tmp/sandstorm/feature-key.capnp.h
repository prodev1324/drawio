// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: feature-key.capnp

#ifndef CAPNP_INCLUDED_d24581e9cd6a6772_
#define CAPNP_INCLUDED_d24581e9cd6a6772_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "update-tool.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9548af5e959db169);
CAPNP_DECLARE_SCHEMA(94066c58db8fb34e);
CAPNP_DECLARE_SCHEMA(a5720faa80697364);
CAPNP_DECLARE_SCHEMA(a6281f9da724787b);

}  // namespace schemas
}  // namespace capnp

namespace sandstorm {

struct FeatureKey {
  FeatureKey() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Customer;
  static const ::capnp::_::ConstStruct< ::sandstorm::PublicSigningKey> SIGNING_KEY;
  struct Features;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9548af5e959db169, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct FeatureKey::Customer {
  Customer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(94066c58db8fb34e, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct FeatureKey::Features {
  Features() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a6281f9da724787b, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class FeatureKey::Reader {
public:
  typedef FeatureKey Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasSecret() const;
  inline  ::capnp::Data::Reader getSecret() const;

  inline bool hasCustomer() const;
  inline  ::sandstorm::FeatureKey::Customer::Reader getCustomer() const;

  inline  ::uint64_t getIssued() const;

  inline  ::uint64_t getExpires() const;

  inline  ::uint32_t getUserLimit() const;

  inline bool getIsElasticBilling() const;

  inline bool getIsTrial() const;

  inline typename Features::Reader getFeatures() const;

  inline bool getIsForTesting() const;

  inline bool getIsFreeKey() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FeatureKey::Builder {
public:
  typedef FeatureKey Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSecret();
  inline  ::capnp::Data::Builder getSecret();
  inline void setSecret( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initSecret(unsigned int size);
  inline void adoptSecret(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownSecret();

  inline bool hasCustomer();
  inline  ::sandstorm::FeatureKey::Customer::Builder getCustomer();
  inline void setCustomer( ::sandstorm::FeatureKey::Customer::Reader value);
  inline  ::sandstorm::FeatureKey::Customer::Builder initCustomer();
  inline void adoptCustomer(::capnp::Orphan< ::sandstorm::FeatureKey::Customer>&& value);
  inline ::capnp::Orphan< ::sandstorm::FeatureKey::Customer> disownCustomer();

  inline  ::uint64_t getIssued();
  inline void setIssued( ::uint64_t value);

  inline  ::uint64_t getExpires();
  inline void setExpires( ::uint64_t value);

  inline  ::uint32_t getUserLimit();
  inline void setUserLimit( ::uint32_t value);

  inline bool getIsElasticBilling();
  inline void setIsElasticBilling(bool value);

  inline bool getIsTrial();
  inline void setIsTrial(bool value);

  inline typename Features::Builder getFeatures();
  inline typename Features::Builder initFeatures();

  inline bool getIsForTesting();
  inline void setIsForTesting(bool value);

  inline bool getIsFreeKey();
  inline void setIsFreeKey(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FeatureKey::Pipeline {
public:
  typedef FeatureKey Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::FeatureKey::Customer::Pipeline getCustomer();
  inline typename Features::Pipeline getFeatures();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FeatureKey::Customer::Reader {
public:
  typedef Customer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool hasOrganizationName() const;
  inline  ::capnp::Text::Reader getOrganizationName() const;

  inline bool hasContactName() const;
  inline  ::capnp::Text::Reader getContactName() const;

  inline bool hasContactEmail() const;
  inline  ::capnp::Text::Reader getContactEmail() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FeatureKey::Customer::Builder {
public:
  typedef Customer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasOrganizationName();
  inline  ::capnp::Text::Builder getOrganizationName();
  inline void setOrganizationName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOrganizationName(unsigned int size);
  inline void adoptOrganizationName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOrganizationName();

  inline bool hasContactName();
  inline  ::capnp::Text::Builder getContactName();
  inline void setContactName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initContactName(unsigned int size);
  inline void adoptContactName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownContactName();

  inline bool hasContactEmail();
  inline  ::capnp::Text::Builder getContactEmail();
  inline void setContactEmail( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initContactEmail(unsigned int size);
  inline void adoptContactEmail(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownContactEmail();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FeatureKey::Customer::Pipeline {
public:
  typedef Customer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FeatureKey::Features::Reader {
public:
  typedef Features Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool getLdap() const;

  inline bool getSaml() const;

  inline bool getOrgManagement() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FeatureKey::Features::Builder {
public:
  typedef Features Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getLdap();
  inline void setLdap(bool value);

  inline bool getSaml();
  inline void setSaml(bool value);

  inline bool getOrgManagement();
  inline void setOrgManagement(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FeatureKey::Features::Pipeline {
public:
  typedef Features Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool FeatureKey::Reader::hasSecret() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool FeatureKey::Builder::hasSecret() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader FeatureKey::Reader::getSecret() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder FeatureKey::Builder::getSecret() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void FeatureKey::Builder::setSecret( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder FeatureKey::Builder::initSecret(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void FeatureKey::Builder::adoptSecret(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> FeatureKey::Builder::disownSecret() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool FeatureKey::Reader::hasCustomer() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool FeatureKey::Builder::hasCustomer() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::FeatureKey::Customer::Reader FeatureKey::Reader::getCustomer() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::FeatureKey::Customer>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::FeatureKey::Customer::Builder FeatureKey::Builder::getCustomer() {
  return ::capnp::_::PointerHelpers< ::sandstorm::FeatureKey::Customer>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::FeatureKey::Customer::Pipeline FeatureKey::Pipeline::getCustomer() {
  return  ::sandstorm::FeatureKey::Customer::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void FeatureKey::Builder::setCustomer( ::sandstorm::FeatureKey::Customer::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::FeatureKey::Customer>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::FeatureKey::Customer::Builder FeatureKey::Builder::initCustomer() {
  return ::capnp::_::PointerHelpers< ::sandstorm::FeatureKey::Customer>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void FeatureKey::Builder::adoptCustomer(
    ::capnp::Orphan< ::sandstorm::FeatureKey::Customer>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::FeatureKey::Customer>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::FeatureKey::Customer> FeatureKey::Builder::disownCustomer() {
  return ::capnp::_::PointerHelpers< ::sandstorm::FeatureKey::Customer>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint64_t FeatureKey::Reader::getIssued() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t FeatureKey::Builder::getIssued() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void FeatureKey::Builder::setIssued( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FeatureKey::Reader::getExpires() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t FeatureKey::Builder::getExpires() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void FeatureKey::Builder::setExpires( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t FeatureKey::Reader::getUserLimit() const {
  return _reader.getDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint32_t FeatureKey::Builder::getUserLimit() {
  return _builder.getDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS);
}
inline void FeatureKey::Builder::setUserLimit( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool FeatureKey::Reader::getIsElasticBilling() const {
  return _reader.getDataField<bool>(
      160 * ::capnp::ELEMENTS);
}

inline bool FeatureKey::Builder::getIsElasticBilling() {
  return _builder.getDataField<bool>(
      160 * ::capnp::ELEMENTS);
}
inline void FeatureKey::Builder::setIsElasticBilling(bool value) {
  _builder.setDataField<bool>(
      160 * ::capnp::ELEMENTS, value);
}

inline bool FeatureKey::Reader::getIsTrial() const {
  return _reader.getDataField<bool>(
      161 * ::capnp::ELEMENTS);
}

inline bool FeatureKey::Builder::getIsTrial() {
  return _builder.getDataField<bool>(
      161 * ::capnp::ELEMENTS);
}
inline void FeatureKey::Builder::setIsTrial(bool value) {
  _builder.setDataField<bool>(
      161 * ::capnp::ELEMENTS, value);
}

inline typename FeatureKey::Features::Reader FeatureKey::Reader::getFeatures() const {
  return typename FeatureKey::Features::Reader(_reader);
}
inline typename FeatureKey::Features::Builder FeatureKey::Builder::getFeatures() {
  return typename FeatureKey::Features::Builder(_builder);
}
#if !CAPNP_LITE
inline typename FeatureKey::Features::Pipeline FeatureKey::Pipeline::getFeatures() {
  return typename FeatureKey::Features::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename FeatureKey::Features::Builder FeatureKey::Builder::initFeatures() {
  _builder.setDataField<bool>(162 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(163 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(164 * ::capnp::ELEMENTS, 0);
  return typename FeatureKey::Features::Builder(_builder);
}
inline bool FeatureKey::Reader::getIsForTesting() const {
  return _reader.getDataField<bool>(
      165 * ::capnp::ELEMENTS);
}

inline bool FeatureKey::Builder::getIsForTesting() {
  return _builder.getDataField<bool>(
      165 * ::capnp::ELEMENTS);
}
inline void FeatureKey::Builder::setIsForTesting(bool value) {
  _builder.setDataField<bool>(
      165 * ::capnp::ELEMENTS, value);
}

inline bool FeatureKey::Reader::getIsFreeKey() const {
  return _reader.getDataField<bool>(
      166 * ::capnp::ELEMENTS);
}

inline bool FeatureKey::Builder::getIsFreeKey() {
  return _builder.getDataField<bool>(
      166 * ::capnp::ELEMENTS);
}
inline void FeatureKey::Builder::setIsFreeKey(bool value) {
  _builder.setDataField<bool>(
      166 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FeatureKey::Customer::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t FeatureKey::Customer::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void FeatureKey::Customer::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool FeatureKey::Customer::Reader::hasOrganizationName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool FeatureKey::Customer::Builder::hasOrganizationName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FeatureKey::Customer::Reader::getOrganizationName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FeatureKey::Customer::Builder::getOrganizationName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void FeatureKey::Customer::Builder::setOrganizationName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FeatureKey::Customer::Builder::initOrganizationName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void FeatureKey::Customer::Builder::adoptOrganizationName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FeatureKey::Customer::Builder::disownOrganizationName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool FeatureKey::Customer::Reader::hasContactName() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool FeatureKey::Customer::Builder::hasContactName() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FeatureKey::Customer::Reader::getContactName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FeatureKey::Customer::Builder::getContactName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void FeatureKey::Customer::Builder::setContactName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FeatureKey::Customer::Builder::initContactName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void FeatureKey::Customer::Builder::adoptContactName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FeatureKey::Customer::Builder::disownContactName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool FeatureKey::Customer::Reader::hasContactEmail() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool FeatureKey::Customer::Builder::hasContactEmail() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FeatureKey::Customer::Reader::getContactEmail() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FeatureKey::Customer::Builder::getContactEmail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void FeatureKey::Customer::Builder::setContactEmail( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FeatureKey::Customer::Builder::initContactEmail(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void FeatureKey::Customer::Builder::adoptContactEmail(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FeatureKey::Customer::Builder::disownContactEmail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool FeatureKey::Features::Reader::getLdap() const {
  return _reader.getDataField<bool>(
      162 * ::capnp::ELEMENTS, true);
}

inline bool FeatureKey::Features::Builder::getLdap() {
  return _builder.getDataField<bool>(
      162 * ::capnp::ELEMENTS, true);
}
inline void FeatureKey::Features::Builder::setLdap(bool value) {
  _builder.setDataField<bool>(
      162 * ::capnp::ELEMENTS, value, true);
}

inline bool FeatureKey::Features::Reader::getSaml() const {
  return _reader.getDataField<bool>(
      163 * ::capnp::ELEMENTS, true);
}

inline bool FeatureKey::Features::Builder::getSaml() {
  return _builder.getDataField<bool>(
      163 * ::capnp::ELEMENTS, true);
}
inline void FeatureKey::Features::Builder::setSaml(bool value) {
  _builder.setDataField<bool>(
      163 * ::capnp::ELEMENTS, value, true);
}

inline bool FeatureKey::Features::Reader::getOrgManagement() const {
  return _reader.getDataField<bool>(
      164 * ::capnp::ELEMENTS, true);
}

inline bool FeatureKey::Features::Builder::getOrgManagement() {
  return _builder.getDataField<bool>(
      164 * ::capnp::ELEMENTS, true);
}
inline void FeatureKey::Features::Builder::setOrgManagement(bool value) {
  _builder.setDataField<bool>(
      164 * ::capnp::ELEMENTS, value, true);
}

}  // namespace

#endif  // CAPNP_INCLUDED_d24581e9cd6a6772_
