// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: package.capnp

#ifndef CAPNP_INCLUDED_df9bc20172856a3a_
#define CAPNP_INCLUDED_df9bc20172856a3a_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "grain.capnp.h"
#include "powerbox.capnp.h"
#include "util.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9f149fa71489be0b);
CAPNP_DECLARE_SCHEMA(855f296a69e6e1ca);
CAPNP_DECLARE_SCHEMA(d9bd68bd9dba918f);
CAPNP_DECLARE_SCHEMA(c64951b2a02886cf);
CAPNP_DECLARE_SCHEMA(e5c59b9296375a00);
CAPNP_DECLARE_SCHEMA(f99c1ca7ae620f38);
CAPNP_DECLARE_SCHEMA(e3d7ba482b2e470b);
CAPNP_DECLARE_SCHEMA(87dcf1b1edcb3eaf);
CAPNP_DECLARE_SCHEMA(dd8c82383168c096);
CAPNP_DECLARE_SCHEMA(e0c5892a5448f4ee);
CAPNP_DECLARE_SCHEMA(e492a2981208ad0b);
CAPNP_DECLARE_SCHEMA(fddf7a71363d4e9f);
CAPNP_DECLARE_SCHEMA(8bc9f4365959348e);
CAPNP_DECLARE_SCHEMA(98fd6b0620c6cb58);
CAPNP_DECLARE_SCHEMA(9a774f764b69ca97);
CAPNP_DECLARE_SCHEMA(96b3cbb11cf671b8);
CAPNP_DECLARE_SCHEMA(b755d258845a4a8f);
CAPNP_DECLARE_SCHEMA(9476412d0315d869);
CAPNP_DECLARE_SCHEMA(d86e43f42c8b0f74);
enum class OpenSourceLicense_d86e43f42c8b0f74: uint16_t {
  INVALID,
  MIT,
  APACHE2,
  GPL3,
  AGPL3,
  BSD3_CLAUSE,
  BSD2_CLAUSE,
  GPL2,
  LGPL2,
  LGPL3,
  ISC,
  ARTISTIC2,
  PYTHON2,
  PHP3,
  MPL2,
  CDDL,
  EPL,
  CPAL,
  ZLIB,
};
CAPNP_DECLARE_ENUM(OpenSourceLicense, d86e43f42c8b0f74);
CAPNP_DECLARE_SCHEMA(880c6c7782a33310);
CAPNP_DECLARE_SCHEMA(e2e344d346ffda6b);
CAPNP_DECLARE_SCHEMA(987ef3040a0342a9);
CAPNP_DECLARE_SCHEMA(b9d2951d34ca391c);
CAPNP_DECLARE_SCHEMA(8d51dd236606d205);
CAPNP_DECLARE_SCHEMA(938e7e53b106e1c0);
enum class Category_938e7e53b106e1c0: uint16_t {
  OTHER,
  PRODUCTIVITY,
  COMMUNICATIONS,
  SOCIAL,
  WEB_PUBLISHING,
  OFFICE,
  DEVELOPER_TOOLS,
  SCIENCE,
  MEDIA,
  GAMES,
  GRAPHICS,
};
CAPNP_DECLARE_ENUM(Category, 938e7e53b106e1c0);
CAPNP_DECLARE_SCHEMA(e47ce2b3aab90f74);
CAPNP_DECLARE_SCHEMA(82bdd60d2cf486c9);
CAPNP_DECLARE_SCHEMA(eca8b9277cb36488);
CAPNP_DECLARE_SCHEMA(f153ba7dee1c9118);
CAPNP_DECLARE_SCHEMA(d92313d72a1ab4d0);

}  // namespace schemas
}  // namespace capnp

namespace sandstorm {
namespace spk {

struct PackageDefinition {
  PackageDefinition() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f149fa71489be0b, 0, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Manifest {
  Manifest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static constexpr  ::uint64_t SIZE_LIMIT_IN_WORDS = 1048576llu;
  struct Command;
  struct Action;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(855f296a69e6e1ca, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Manifest::Command {
  Command() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c64951b2a02886cf, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Manifest::Action {
  Action() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Input;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e5c59b9296375a00, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Manifest::Action::Input {
  Input() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NONE,
    CAPABILITY,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f99c1ca7ae620f38, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SourceMap {
  SourceMap() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Mapping;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3d7ba482b2e470b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SourceMap::Mapping {
  Mapping() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(87dcf1b1edcb3eaf, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct BridgeConfig {
  BridgeConfig() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dd8c82383168c096, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Metadata {
  Metadata() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Icon;
  struct Screenshot;
  struct Icons;
  struct License;
  struct Author;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e0c5892a5448f4ee, 1, 17)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Metadata::Icon {
  Icon() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UNKNOWN,
    SVG,
    PNG,
  };
  struct Png;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e492a2981208ad0b, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Metadata::Icon::Png {
  Png() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fddf7a71363d4e9f, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Metadata::Screenshot {
  Screenshot() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UNKNOWN,
    PNG,
    JPEG,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8bc9f4365959348e, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Metadata::Icons {
  Icons() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98fd6b0620c6cb58, 1, 17)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Metadata::License {
  License() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NONE,
    OPEN_SOURCE,
    PROPRIETARY,
    PUBLIC_DOMAIN,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9a774f764b69ca97, 1, 17)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Metadata::Author {
  Author() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(96b3cbb11cf671b8, 1, 17)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct OsiLicenseInfo {
  OsiLicenseInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b755d258845a4a8f, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::OpenSourceLicense_d86e43f42c8b0f74 OpenSourceLicense;

struct AppId {
  AppId() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(880c6c7782a33310, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct PackageId {
  PackageId() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e2e344d346ffda6b, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct VerifiedInfo {
  VerifiedInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(987ef3040a0342a9, 1, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct CategoryInfo {
  CategoryInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b9d2951d34ca391c, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::Category_938e7e53b106e1c0 Category;

struct KeyFile {
  KeyFile() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e47ce2b3aab90f74, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

extern const ::capnp::_::ConstData<8> MAGIC_NUMBER;
struct Signature {
  Signature() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eca8b9277cb36488, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Archive {
  Archive() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct File;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f153ba7dee1c9118, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Archive::File {
  File() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    REGULAR,
    EXECUTABLE,
    SYMLINK,
    DIRECTORY,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d92313d72a1ab4d0, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class PackageDefinition::Reader {
public:
  typedef PackageDefinition Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasManifest() const;
  inline  ::sandstorm::spk::Manifest::Reader getManifest() const;

  inline bool hasSourceMap() const;
  inline  ::sandstorm::spk::SourceMap::Reader getSourceMap() const;

  inline bool hasFileList() const;
  inline  ::capnp::Text::Reader getFileList() const;

  inline bool hasAlwaysInclude() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getAlwaysInclude() const;

  inline bool hasBridgeConfig() const;
  inline  ::sandstorm::spk::BridgeConfig::Reader getBridgeConfig() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PackageDefinition::Builder {
public:
  typedef PackageDefinition Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasManifest();
  inline  ::sandstorm::spk::Manifest::Builder getManifest();
  inline void setManifest( ::sandstorm::spk::Manifest::Reader value);
  inline  ::sandstorm::spk::Manifest::Builder initManifest();
  inline void adoptManifest(::capnp::Orphan< ::sandstorm::spk::Manifest>&& value);
  inline ::capnp::Orphan< ::sandstorm::spk::Manifest> disownManifest();

  inline bool hasSourceMap();
  inline  ::sandstorm::spk::SourceMap::Builder getSourceMap();
  inline void setSourceMap( ::sandstorm::spk::SourceMap::Reader value);
  inline  ::sandstorm::spk::SourceMap::Builder initSourceMap();
  inline void adoptSourceMap(::capnp::Orphan< ::sandstorm::spk::SourceMap>&& value);
  inline ::capnp::Orphan< ::sandstorm::spk::SourceMap> disownSourceMap();

  inline bool hasFileList();
  inline  ::capnp::Text::Builder getFileList();
  inline void setFileList( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFileList(unsigned int size);
  inline void adoptFileList(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFileList();

  inline bool hasAlwaysInclude();
  inline  ::capnp::List< ::capnp::Text>::Builder getAlwaysInclude();
  inline void setAlwaysInclude( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setAlwaysInclude(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initAlwaysInclude(unsigned int size);
  inline void adoptAlwaysInclude(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownAlwaysInclude();

  inline bool hasBridgeConfig();
  inline  ::sandstorm::spk::BridgeConfig::Builder getBridgeConfig();
  inline void setBridgeConfig( ::sandstorm::spk::BridgeConfig::Reader value);
  inline  ::sandstorm::spk::BridgeConfig::Builder initBridgeConfig();
  inline void adoptBridgeConfig(::capnp::Orphan< ::sandstorm::spk::BridgeConfig>&& value);
  inline ::capnp::Orphan< ::sandstorm::spk::BridgeConfig> disownBridgeConfig();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PackageDefinition::Pipeline {
public:
  typedef PackageDefinition Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::spk::Manifest::Pipeline getManifest();
  inline  ::sandstorm::spk::SourceMap::Pipeline getSourceMap();
  inline  ::sandstorm::spk::BridgeConfig::Pipeline getBridgeConfig();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Manifest::Reader {
public:
  typedef Manifest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getMinApiVersion() const;

  inline  ::uint32_t getMaxApiVersion() const;

  inline bool hasActions() const;
  inline  ::capnp::List< ::sandstorm::spk::Manifest::Action>::Reader getActions() const;

  inline bool hasContinueCommand() const;
  inline  ::sandstorm::spk::Manifest::Command::Reader getContinueCommand() const;

  inline  ::uint32_t getAppVersion() const;

  inline  ::uint32_t getMinUpgradableAppVersion() const;

  inline bool hasAppMarketingVersion() const;
  inline  ::sandstorm::LocalizedText::Reader getAppMarketingVersion() const;

  inline bool hasAppTitle() const;
  inline  ::sandstorm::LocalizedText::Reader getAppTitle() const;

  inline bool hasMetadata() const;
  inline  ::sandstorm::spk::Metadata::Reader getMetadata() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Manifest::Builder {
public:
  typedef Manifest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getMinApiVersion();
  inline void setMinApiVersion( ::uint32_t value);

  inline  ::uint32_t getMaxApiVersion();
  inline void setMaxApiVersion( ::uint32_t value);

  inline bool hasActions();
  inline  ::capnp::List< ::sandstorm::spk::Manifest::Action>::Builder getActions();
  inline void setActions( ::capnp::List< ::sandstorm::spk::Manifest::Action>::Reader value);
  inline  ::capnp::List< ::sandstorm::spk::Manifest::Action>::Builder initActions(unsigned int size);
  inline void adoptActions(::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Manifest::Action>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Manifest::Action>> disownActions();

  inline bool hasContinueCommand();
  inline  ::sandstorm::spk::Manifest::Command::Builder getContinueCommand();
  inline void setContinueCommand( ::sandstorm::spk::Manifest::Command::Reader value);
  inline  ::sandstorm::spk::Manifest::Command::Builder initContinueCommand();
  inline void adoptContinueCommand(::capnp::Orphan< ::sandstorm::spk::Manifest::Command>&& value);
  inline ::capnp::Orphan< ::sandstorm::spk::Manifest::Command> disownContinueCommand();

  inline  ::uint32_t getAppVersion();
  inline void setAppVersion( ::uint32_t value);

  inline  ::uint32_t getMinUpgradableAppVersion();
  inline void setMinUpgradableAppVersion( ::uint32_t value);

  inline bool hasAppMarketingVersion();
  inline  ::sandstorm::LocalizedText::Builder getAppMarketingVersion();
  inline void setAppMarketingVersion( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initAppMarketingVersion();
  inline void adoptAppMarketingVersion(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownAppMarketingVersion();

  inline bool hasAppTitle();
  inline  ::sandstorm::LocalizedText::Builder getAppTitle();
  inline void setAppTitle( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initAppTitle();
  inline void adoptAppTitle(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownAppTitle();

  inline bool hasMetadata();
  inline  ::sandstorm::spk::Metadata::Builder getMetadata();
  inline void setMetadata( ::sandstorm::spk::Metadata::Reader value);
  inline  ::sandstorm::spk::Metadata::Builder initMetadata();
  inline void adoptMetadata(::capnp::Orphan< ::sandstorm::spk::Metadata>&& value);
  inline ::capnp::Orphan< ::sandstorm::spk::Metadata> disownMetadata();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Manifest::Pipeline {
public:
  typedef Manifest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::spk::Manifest::Command::Pipeline getContinueCommand();
  inline  ::sandstorm::LocalizedText::Pipeline getAppMarketingVersion();
  inline  ::sandstorm::LocalizedText::Pipeline getAppTitle();
  inline  ::sandstorm::spk::Metadata::Pipeline getMetadata();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Manifest::Command::Reader {
public:
  typedef Command Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasDeprecatedExecutablePath() const;
  inline  ::capnp::Text::Reader getDeprecatedExecutablePath() const;

  inline bool hasArgv() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getArgv() const;

  inline bool hasEnviron() const;
  inline  ::capnp::List< ::sandstorm::KeyValue>::Reader getEnviron() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Manifest::Command::Builder {
public:
  typedef Command Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDeprecatedExecutablePath();
  inline  ::capnp::Text::Builder getDeprecatedExecutablePath();
  inline void setDeprecatedExecutablePath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDeprecatedExecutablePath(unsigned int size);
  inline void adoptDeprecatedExecutablePath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDeprecatedExecutablePath();

  inline bool hasArgv();
  inline  ::capnp::List< ::capnp::Text>::Builder getArgv();
  inline void setArgv( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setArgv(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initArgv(unsigned int size);
  inline void adoptArgv(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownArgv();

  inline bool hasEnviron();
  inline  ::capnp::List< ::sandstorm::KeyValue>::Builder getEnviron();
  inline void setEnviron( ::capnp::List< ::sandstorm::KeyValue>::Reader value);
  inline  ::capnp::List< ::sandstorm::KeyValue>::Builder initEnviron(unsigned int size);
  inline void adoptEnviron(::capnp::Orphan< ::capnp::List< ::sandstorm::KeyValue>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::KeyValue>> disownEnviron();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Manifest::Command::Pipeline {
public:
  typedef Command Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Manifest::Action::Reader {
public:
  typedef Action Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline typename Input::Reader getInput() const;

  inline bool hasCommand() const;
  inline  ::sandstorm::spk::Manifest::Command::Reader getCommand() const;

  inline bool hasTitle() const;
  inline  ::sandstorm::LocalizedText::Reader getTitle() const;

  inline bool hasDescription() const;
  inline  ::sandstorm::LocalizedText::Reader getDescription() const;

  inline bool hasNounPhrase() const;
  inline  ::sandstorm::LocalizedText::Reader getNounPhrase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Manifest::Action::Builder {
public:
  typedef Action Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Input::Builder getInput();
  inline typename Input::Builder initInput();

  inline bool hasCommand();
  inline  ::sandstorm::spk::Manifest::Command::Builder getCommand();
  inline void setCommand( ::sandstorm::spk::Manifest::Command::Reader value);
  inline  ::sandstorm::spk::Manifest::Command::Builder initCommand();
  inline void adoptCommand(::capnp::Orphan< ::sandstorm::spk::Manifest::Command>&& value);
  inline ::capnp::Orphan< ::sandstorm::spk::Manifest::Command> disownCommand();

  inline bool hasTitle();
  inline  ::sandstorm::LocalizedText::Builder getTitle();
  inline void setTitle( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initTitle();
  inline void adoptTitle(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownTitle();

  inline bool hasDescription();
  inline  ::sandstorm::LocalizedText::Builder getDescription();
  inline void setDescription( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initDescription();
  inline void adoptDescription(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownDescription();

  inline bool hasNounPhrase();
  inline  ::sandstorm::LocalizedText::Builder getNounPhrase();
  inline void setNounPhrase( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initNounPhrase();
  inline void adoptNounPhrase(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownNounPhrase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Manifest::Action::Pipeline {
public:
  typedef Action Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Input::Pipeline getInput();
  inline  ::sandstorm::spk::Manifest::Command::Pipeline getCommand();
  inline  ::sandstorm::LocalizedText::Pipeline getTitle();
  inline  ::sandstorm::LocalizedText::Pipeline getDescription();
  inline  ::sandstorm::LocalizedText::Pipeline getNounPhrase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Manifest::Action::Input::Reader {
public:
  typedef Input Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool isCapability() const;
  inline bool hasCapability() const;
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader getCapability() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Manifest::Action::Input::Builder {
public:
  typedef Input Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::VOID);

  inline bool isCapability();
  inline bool hasCapability();
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder getCapability();
  inline void setCapability( ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader value);
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder initCapability(unsigned int size);
  inline void adoptCapability(::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>> disownCapability();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Manifest::Action::Input::Pipeline {
public:
  typedef Input Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SourceMap::Reader {
public:
  typedef SourceMap Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasSearchPath() const;
  inline  ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>::Reader getSearchPath() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SourceMap::Builder {
public:
  typedef SourceMap Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSearchPath();
  inline  ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>::Builder getSearchPath();
  inline void setSearchPath( ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>::Reader value);
  inline  ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>::Builder initSearchPath(unsigned int size);
  inline void adoptSearchPath(::capnp::Orphan< ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>> disownSearchPath();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SourceMap::Pipeline {
public:
  typedef SourceMap Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SourceMap::Mapping::Reader {
public:
  typedef Mapping Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPackagePath() const;
  inline  ::capnp::Text::Reader getPackagePath() const;

  inline bool hasSourcePath() const;
  inline  ::capnp::Text::Reader getSourcePath() const;

  inline bool hasHidePaths() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getHidePaths() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SourceMap::Mapping::Builder {
public:
  typedef Mapping Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPackagePath();
  inline  ::capnp::Text::Builder getPackagePath();
  inline void setPackagePath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPackagePath(unsigned int size);
  inline void adoptPackagePath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPackagePath();

  inline bool hasSourcePath();
  inline  ::capnp::Text::Builder getSourcePath();
  inline void setSourcePath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSourcePath(unsigned int size);
  inline void adoptSourcePath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSourcePath();

  inline bool hasHidePaths();
  inline  ::capnp::List< ::capnp::Text>::Builder getHidePaths();
  inline void setHidePaths( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setHidePaths(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initHidePaths(unsigned int size);
  inline void adoptHidePaths(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownHidePaths();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SourceMap::Mapping::Pipeline {
public:
  typedef Mapping Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BridgeConfig::Reader {
public:
  typedef BridgeConfig Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasViewInfo() const;
  inline  ::sandstorm::UiView::ViewInfo::Reader getViewInfo() const;

  inline bool hasApiPath() const;
  inline  ::capnp::Text::Reader getApiPath() const;

  inline bool getSaveIdentityCaps() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BridgeConfig::Builder {
public:
  typedef BridgeConfig Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasViewInfo();
  inline  ::sandstorm::UiView::ViewInfo::Builder getViewInfo();
  inline void setViewInfo( ::sandstorm::UiView::ViewInfo::Reader value);
  inline  ::sandstorm::UiView::ViewInfo::Builder initViewInfo();
  inline void adoptViewInfo(::capnp::Orphan< ::sandstorm::UiView::ViewInfo>&& value);
  inline ::capnp::Orphan< ::sandstorm::UiView::ViewInfo> disownViewInfo();

  inline bool hasApiPath();
  inline  ::capnp::Text::Builder getApiPath();
  inline void setApiPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initApiPath(unsigned int size);
  inline void adoptApiPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownApiPath();

  inline bool getSaveIdentityCaps();
  inline void setSaveIdentityCaps(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BridgeConfig::Pipeline {
public:
  typedef BridgeConfig Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::UiView::ViewInfo::Pipeline getViewInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Metadata::Reader {
public:
  typedef Metadata Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline typename Icons::Reader getIcons() const;

  inline bool hasWebsite() const;
  inline  ::capnp::Text::Reader getWebsite() const;

  inline bool hasCodeUrl() const;
  inline  ::capnp::Text::Reader getCodeUrl() const;

  inline typename License::Reader getLicense() const;

  inline bool hasCategories() const;
  inline  ::capnp::List< ::sandstorm::spk::Category>::Reader getCategories() const;

  inline typename Author::Reader getAuthor() const;

  inline bool hasPgpKeyring() const;
  inline  ::capnp::Data::Reader getPgpKeyring() const;

  inline bool hasDescription() const;
  inline  ::sandstorm::LocalizedText::Reader getDescription() const;

  inline bool hasShortDescription() const;
  inline  ::sandstorm::LocalizedText::Reader getShortDescription() const;

  inline bool hasScreenshots() const;
  inline  ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>::Reader getScreenshots() const;

  inline bool hasChangeLog() const;
  inline  ::sandstorm::LocalizedText::Reader getChangeLog() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Metadata::Builder {
public:
  typedef Metadata Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Icons::Builder getIcons();
  inline typename Icons::Builder initIcons();

  inline bool hasWebsite();
  inline  ::capnp::Text::Builder getWebsite();
  inline void setWebsite( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initWebsite(unsigned int size);
  inline void adoptWebsite(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownWebsite();

  inline bool hasCodeUrl();
  inline  ::capnp::Text::Builder getCodeUrl();
  inline void setCodeUrl( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCodeUrl(unsigned int size);
  inline void adoptCodeUrl(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCodeUrl();

  inline typename License::Builder getLicense();
  inline typename License::Builder initLicense();

  inline bool hasCategories();
  inline  ::capnp::List< ::sandstorm::spk::Category>::Builder getCategories();
  inline void setCategories( ::capnp::List< ::sandstorm::spk::Category>::Reader value);
  inline void setCategories(::kj::ArrayPtr<const  ::sandstorm::spk::Category> value);
  inline  ::capnp::List< ::sandstorm::spk::Category>::Builder initCategories(unsigned int size);
  inline void adoptCategories(::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Category>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Category>> disownCategories();

  inline typename Author::Builder getAuthor();
  inline typename Author::Builder initAuthor();

  inline bool hasPgpKeyring();
  inline  ::capnp::Data::Builder getPgpKeyring();
  inline void setPgpKeyring( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPgpKeyring(unsigned int size);
  inline void adoptPgpKeyring(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPgpKeyring();

  inline bool hasDescription();
  inline  ::sandstorm::LocalizedText::Builder getDescription();
  inline void setDescription( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initDescription();
  inline void adoptDescription(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownDescription();

  inline bool hasShortDescription();
  inline  ::sandstorm::LocalizedText::Builder getShortDescription();
  inline void setShortDescription( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initShortDescription();
  inline void adoptShortDescription(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownShortDescription();

  inline bool hasScreenshots();
  inline  ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>::Builder getScreenshots();
  inline void setScreenshots( ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>::Reader value);
  inline  ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>::Builder initScreenshots(unsigned int size);
  inline void adoptScreenshots(::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>> disownScreenshots();

  inline bool hasChangeLog();
  inline  ::sandstorm::LocalizedText::Builder getChangeLog();
  inline void setChangeLog( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initChangeLog();
  inline void adoptChangeLog(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownChangeLog();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Metadata::Pipeline {
public:
  typedef Metadata Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Icons::Pipeline getIcons();
  inline typename License::Pipeline getLicense();
  inline typename Author::Pipeline getAuthor();
  inline  ::sandstorm::LocalizedText::Pipeline getDescription();
  inline  ::sandstorm::LocalizedText::Pipeline getShortDescription();
  inline  ::sandstorm::LocalizedText::Pipeline getChangeLog();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Metadata::Icon::Reader {
public:
  typedef Icon Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isUnknown() const;
  inline  ::capnp::Void getUnknown() const;

  inline bool isSvg() const;
  inline bool hasSvg() const;
  inline  ::capnp::Text::Reader getSvg() const;

  inline bool isPng() const;
  inline typename Png::Reader getPng() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Metadata::Icon::Builder {
public:
  typedef Icon Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isUnknown();
  inline  ::capnp::Void getUnknown();
  inline void setUnknown( ::capnp::Void value = ::capnp::VOID);

  inline bool isSvg();
  inline bool hasSvg();
  inline  ::capnp::Text::Builder getSvg();
  inline void setSvg( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSvg(unsigned int size);
  inline void adoptSvg(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSvg();

  inline bool isPng();
  inline typename Png::Builder getPng();
  inline typename Png::Builder initPng();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Metadata::Icon::Pipeline {
public:
  typedef Icon Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Metadata::Icon::Png::Reader {
public:
  typedef Png Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasDpi1x() const;
  inline  ::capnp::Data::Reader getDpi1x() const;

  inline bool hasDpi2x() const;
  inline  ::capnp::Data::Reader getDpi2x() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Metadata::Icon::Png::Builder {
public:
  typedef Png Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDpi1x();
  inline  ::capnp::Data::Builder getDpi1x();
  inline void setDpi1x( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDpi1x(unsigned int size);
  inline void adoptDpi1x(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDpi1x();

  inline bool hasDpi2x();
  inline  ::capnp::Data::Builder getDpi2x();
  inline void setDpi2x( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDpi2x(unsigned int size);
  inline void adoptDpi2x(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDpi2x();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Metadata::Icon::Png::Pipeline {
public:
  typedef Png Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Metadata::Screenshot::Reader {
public:
  typedef Screenshot Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint32_t getWidth() const;

  inline  ::uint32_t getHeight() const;

  inline bool isUnknown() const;
  inline  ::capnp::Void getUnknown() const;

  inline bool isPng() const;
  inline bool hasPng() const;
  inline  ::capnp::Data::Reader getPng() const;

  inline bool isJpeg() const;
  inline bool hasJpeg() const;
  inline  ::capnp::Data::Reader getJpeg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Metadata::Screenshot::Builder {
public:
  typedef Screenshot Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint32_t getWidth();
  inline void setWidth( ::uint32_t value);

  inline  ::uint32_t getHeight();
  inline void setHeight( ::uint32_t value);

  inline bool isUnknown();
  inline  ::capnp::Void getUnknown();
  inline void setUnknown( ::capnp::Void value = ::capnp::VOID);

  inline bool isPng();
  inline bool hasPng();
  inline  ::capnp::Data::Builder getPng();
  inline void setPng( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPng(unsigned int size);
  inline void adoptPng(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPng();

  inline bool isJpeg();
  inline bool hasJpeg();
  inline  ::capnp::Data::Builder getJpeg();
  inline void setJpeg( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initJpeg(unsigned int size);
  inline void adoptJpeg(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownJpeg();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Metadata::Screenshot::Pipeline {
public:
  typedef Screenshot Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Metadata::Icons::Reader {
public:
  typedef Icons Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAppGrid() const;
  inline  ::sandstorm::spk::Metadata::Icon::Reader getAppGrid() const;

  inline bool hasGrain() const;
  inline  ::sandstorm::spk::Metadata::Icon::Reader getGrain() const;

  inline bool hasMarket() const;
  inline  ::sandstorm::spk::Metadata::Icon::Reader getMarket() const;

  inline bool hasMarketBig() const;
  inline  ::sandstorm::spk::Metadata::Icon::Reader getMarketBig() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Metadata::Icons::Builder {
public:
  typedef Icons Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppGrid();
  inline  ::sandstorm::spk::Metadata::Icon::Builder getAppGrid();
  inline void setAppGrid( ::sandstorm::spk::Metadata::Icon::Reader value);
  inline  ::sandstorm::spk::Metadata::Icon::Builder initAppGrid();
  inline void adoptAppGrid(::capnp::Orphan< ::sandstorm::spk::Metadata::Icon>&& value);
  inline ::capnp::Orphan< ::sandstorm::spk::Metadata::Icon> disownAppGrid();

  inline bool hasGrain();
  inline  ::sandstorm::spk::Metadata::Icon::Builder getGrain();
  inline void setGrain( ::sandstorm::spk::Metadata::Icon::Reader value);
  inline  ::sandstorm::spk::Metadata::Icon::Builder initGrain();
  inline void adoptGrain(::capnp::Orphan< ::sandstorm::spk::Metadata::Icon>&& value);
  inline ::capnp::Orphan< ::sandstorm::spk::Metadata::Icon> disownGrain();

  inline bool hasMarket();
  inline  ::sandstorm::spk::Metadata::Icon::Builder getMarket();
  inline void setMarket( ::sandstorm::spk::Metadata::Icon::Reader value);
  inline  ::sandstorm::spk::Metadata::Icon::Builder initMarket();
  inline void adoptMarket(::capnp::Orphan< ::sandstorm::spk::Metadata::Icon>&& value);
  inline ::capnp::Orphan< ::sandstorm::spk::Metadata::Icon> disownMarket();

  inline bool hasMarketBig();
  inline  ::sandstorm::spk::Metadata::Icon::Builder getMarketBig();
  inline void setMarketBig( ::sandstorm::spk::Metadata::Icon::Reader value);
  inline  ::sandstorm::spk::Metadata::Icon::Builder initMarketBig();
  inline void adoptMarketBig(::capnp::Orphan< ::sandstorm::spk::Metadata::Icon>&& value);
  inline ::capnp::Orphan< ::sandstorm::spk::Metadata::Icon> disownMarketBig();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Metadata::Icons::Pipeline {
public:
  typedef Icons Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::spk::Metadata::Icon::Pipeline getAppGrid();
  inline  ::sandstorm::spk::Metadata::Icon::Pipeline getGrain();
  inline  ::sandstorm::spk::Metadata::Icon::Pipeline getMarket();
  inline  ::sandstorm::spk::Metadata::Icon::Pipeline getMarketBig();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Metadata::License::Reader {
public:
  typedef License Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool isOpenSource() const;
  inline  ::sandstorm::spk::OpenSourceLicense getOpenSource() const;

  inline bool isProprietary() const;
  inline bool hasProprietary() const;
  inline  ::sandstorm::LocalizedText::Reader getProprietary() const;

  inline bool isPublicDomain() const;
  inline bool hasPublicDomain() const;
  inline  ::sandstorm::LocalizedText::Reader getPublicDomain() const;

  inline bool hasNotices() const;
  inline  ::sandstorm::LocalizedText::Reader getNotices() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Metadata::License::Builder {
public:
  typedef License Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::VOID);

  inline bool isOpenSource();
  inline  ::sandstorm::spk::OpenSourceLicense getOpenSource();
  inline void setOpenSource( ::sandstorm::spk::OpenSourceLicense value);

  inline bool isProprietary();
  inline bool hasProprietary();
  inline  ::sandstorm::LocalizedText::Builder getProprietary();
  inline void setProprietary( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initProprietary();
  inline void adoptProprietary(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownProprietary();

  inline bool isPublicDomain();
  inline bool hasPublicDomain();
  inline  ::sandstorm::LocalizedText::Builder getPublicDomain();
  inline void setPublicDomain( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initPublicDomain();
  inline void adoptPublicDomain(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownPublicDomain();

  inline bool hasNotices();
  inline  ::sandstorm::LocalizedText::Builder getNotices();
  inline void setNotices( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initNotices();
  inline void adoptNotices(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownNotices();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Metadata::License::Pipeline {
public:
  typedef License Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::LocalizedText::Pipeline getNotices();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Metadata::Author::Reader {
public:
  typedef Author Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasContactEmail() const;
  inline  ::capnp::Text::Reader getContactEmail() const;

  inline bool hasPgpSignature() const;
  inline  ::capnp::Data::Reader getPgpSignature() const;

  inline bool hasUpstreamAuthor() const;
  inline  ::capnp::Text::Reader getUpstreamAuthor() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Metadata::Author::Builder {
public:
  typedef Author Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasContactEmail();
  inline  ::capnp::Text::Builder getContactEmail();
  inline void setContactEmail( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initContactEmail(unsigned int size);
  inline void adoptContactEmail(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownContactEmail();

  inline bool hasPgpSignature();
  inline  ::capnp::Data::Builder getPgpSignature();
  inline void setPgpSignature( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPgpSignature(unsigned int size);
  inline void adoptPgpSignature(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPgpSignature();

  inline bool hasUpstreamAuthor();
  inline  ::capnp::Text::Builder getUpstreamAuthor();
  inline void setUpstreamAuthor( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUpstreamAuthor(unsigned int size);
  inline void adoptUpstreamAuthor(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUpstreamAuthor();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Metadata::Author::Pipeline {
public:
  typedef Author Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OsiLicenseInfo::Reader {
public:
  typedef OsiLicenseInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasTitle() const;
  inline  ::capnp::Text::Reader getTitle() const;

  inline bool getRequireSource() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OsiLicenseInfo::Builder {
public:
  typedef OsiLicenseInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasTitle();
  inline  ::capnp::Text::Builder getTitle();
  inline void setTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTitle(unsigned int size);
  inline void adoptTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTitle();

  inline bool getRequireSource();
  inline void setRequireSource(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OsiLicenseInfo::Pipeline {
public:
  typedef OsiLicenseInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AppId::Reader {
public:
  typedef AppId Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId0() const;

  inline  ::uint64_t getId1() const;

  inline  ::uint64_t getId2() const;

  inline  ::uint64_t getId3() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AppId::Builder {
public:
  typedef AppId Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId0();
  inline void setId0( ::uint64_t value);

  inline  ::uint64_t getId1();
  inline void setId1( ::uint64_t value);

  inline  ::uint64_t getId2();
  inline void setId2( ::uint64_t value);

  inline  ::uint64_t getId3();
  inline void setId3( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AppId::Pipeline {
public:
  typedef AppId Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PackageId::Reader {
public:
  typedef PackageId Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId0() const;

  inline  ::uint64_t getId1() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PackageId::Builder {
public:
  typedef PackageId Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId0();
  inline void setId0( ::uint64_t value);

  inline  ::uint64_t getId1();
  inline void setId1( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PackageId::Pipeline {
public:
  typedef PackageId Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VerifiedInfo::Reader {
public:
  typedef VerifiedInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAppId() const;
  inline  ::sandstorm::spk::AppId::Reader getAppId() const;

  inline bool hasPackageId() const;
  inline  ::sandstorm::spk::PackageId::Reader getPackageId() const;

  inline bool hasTitle() const;
  inline  ::sandstorm::LocalizedText::Reader getTitle() const;

  inline  ::uint32_t getVersion() const;

  inline bool hasMarketingVersion() const;
  inline  ::sandstorm::LocalizedText::Reader getMarketingVersion() const;

  inline bool hasAuthorPgpKeyFingerprint() const;
  inline  ::capnp::Text::Reader getAuthorPgpKeyFingerprint() const;

  inline bool hasMetadata() const;
  inline  ::sandstorm::spk::Metadata::Reader getMetadata() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VerifiedInfo::Builder {
public:
  typedef VerifiedInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppId();
  inline  ::sandstorm::spk::AppId::Builder getAppId();
  inline void setAppId( ::sandstorm::spk::AppId::Reader value);
  inline  ::sandstorm::spk::AppId::Builder initAppId();
  inline void adoptAppId(::capnp::Orphan< ::sandstorm::spk::AppId>&& value);
  inline ::capnp::Orphan< ::sandstorm::spk::AppId> disownAppId();

  inline bool hasPackageId();
  inline  ::sandstorm::spk::PackageId::Builder getPackageId();
  inline void setPackageId( ::sandstorm::spk::PackageId::Reader value);
  inline  ::sandstorm::spk::PackageId::Builder initPackageId();
  inline void adoptPackageId(::capnp::Orphan< ::sandstorm::spk::PackageId>&& value);
  inline ::capnp::Orphan< ::sandstorm::spk::PackageId> disownPackageId();

  inline bool hasTitle();
  inline  ::sandstorm::LocalizedText::Builder getTitle();
  inline void setTitle( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initTitle();
  inline void adoptTitle(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownTitle();

  inline  ::uint32_t getVersion();
  inline void setVersion( ::uint32_t value);

  inline bool hasMarketingVersion();
  inline  ::sandstorm::LocalizedText::Builder getMarketingVersion();
  inline void setMarketingVersion( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initMarketingVersion();
  inline void adoptMarketingVersion(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownMarketingVersion();

  inline bool hasAuthorPgpKeyFingerprint();
  inline  ::capnp::Text::Builder getAuthorPgpKeyFingerprint();
  inline void setAuthorPgpKeyFingerprint( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAuthorPgpKeyFingerprint(unsigned int size);
  inline void adoptAuthorPgpKeyFingerprint(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAuthorPgpKeyFingerprint();

  inline bool hasMetadata();
  inline  ::sandstorm::spk::Metadata::Builder getMetadata();
  inline void setMetadata( ::sandstorm::spk::Metadata::Reader value);
  inline  ::sandstorm::spk::Metadata::Builder initMetadata();
  inline void adoptMetadata(::capnp::Orphan< ::sandstorm::spk::Metadata>&& value);
  inline ::capnp::Orphan< ::sandstorm::spk::Metadata> disownMetadata();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VerifiedInfo::Pipeline {
public:
  typedef VerifiedInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::spk::AppId::Pipeline getAppId();
  inline  ::sandstorm::spk::PackageId::Pipeline getPackageId();
  inline  ::sandstorm::LocalizedText::Pipeline getTitle();
  inline  ::sandstorm::LocalizedText::Pipeline getMarketingVersion();
  inline  ::sandstorm::spk::Metadata::Pipeline getMetadata();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CategoryInfo::Reader {
public:
  typedef CategoryInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasTitle() const;
  inline  ::capnp::Text::Reader getTitle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CategoryInfo::Builder {
public:
  typedef CategoryInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTitle();
  inline  ::capnp::Text::Builder getTitle();
  inline void setTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTitle(unsigned int size);
  inline void adoptTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTitle();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CategoryInfo::Pipeline {
public:
  typedef CategoryInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class KeyFile::Reader {
public:
  typedef KeyFile Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPublicKey() const;
  inline  ::capnp::Data::Reader getPublicKey() const;

  inline bool hasPrivateKey() const;
  inline  ::capnp::Data::Reader getPrivateKey() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class KeyFile::Builder {
public:
  typedef KeyFile Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPublicKey();
  inline  ::capnp::Data::Builder getPublicKey();
  inline void setPublicKey( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPublicKey(unsigned int size);
  inline void adoptPublicKey(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPublicKey();

  inline bool hasPrivateKey();
  inline  ::capnp::Data::Builder getPrivateKey();
  inline void setPrivateKey( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPrivateKey(unsigned int size);
  inline void adoptPrivateKey(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPrivateKey();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class KeyFile::Pipeline {
public:
  typedef KeyFile Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Signature::Reader {
public:
  typedef Signature Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPublicKey() const;
  inline  ::capnp::Data::Reader getPublicKey() const;

  inline bool hasSignature() const;
  inline  ::capnp::Data::Reader getSignature() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Signature::Builder {
public:
  typedef Signature Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPublicKey();
  inline  ::capnp::Data::Builder getPublicKey();
  inline void setPublicKey( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPublicKey(unsigned int size);
  inline void adoptPublicKey(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPublicKey();

  inline bool hasSignature();
  inline  ::capnp::Data::Builder getSignature();
  inline void setSignature( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initSignature(unsigned int size);
  inline void adoptSignature(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownSignature();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Signature::Pipeline {
public:
  typedef Signature Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Archive::Reader {
public:
  typedef Archive Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasFiles() const;
  inline  ::capnp::List< ::sandstorm::spk::Archive::File>::Reader getFiles() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Archive::Builder {
public:
  typedef Archive Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFiles();
  inline  ::capnp::List< ::sandstorm::spk::Archive::File>::Builder getFiles();
  inline void setFiles( ::capnp::List< ::sandstorm::spk::Archive::File>::Reader value);
  inline  ::capnp::List< ::sandstorm::spk::Archive::File>::Builder initFiles(unsigned int size);
  inline void adoptFiles(::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Archive::File>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Archive::File>> disownFiles();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Archive::Pipeline {
public:
  typedef Archive Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Archive::File::Reader {
public:
  typedef File Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool isRegular() const;
  inline bool hasRegular() const;
  inline  ::capnp::Data::Reader getRegular() const;

  inline bool isExecutable() const;
  inline bool hasExecutable() const;
  inline  ::capnp::Data::Reader getExecutable() const;

  inline bool isSymlink() const;
  inline bool hasSymlink() const;
  inline  ::capnp::Text::Reader getSymlink() const;

  inline bool isDirectory() const;
  inline bool hasDirectory() const;
  inline  ::capnp::List< ::sandstorm::spk::Archive::File>::Reader getDirectory() const;

  inline  ::int64_t getLastModificationTimeNs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Archive::File::Builder {
public:
  typedef File Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool isRegular();
  inline bool hasRegular();
  inline  ::capnp::Data::Builder getRegular();
  inline void setRegular( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initRegular(unsigned int size);
  inline void adoptRegular(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownRegular();

  inline bool isExecutable();
  inline bool hasExecutable();
  inline  ::capnp::Data::Builder getExecutable();
  inline void setExecutable( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initExecutable(unsigned int size);
  inline void adoptExecutable(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownExecutable();

  inline bool isSymlink();
  inline bool hasSymlink();
  inline  ::capnp::Text::Builder getSymlink();
  inline void setSymlink( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSymlink(unsigned int size);
  inline void adoptSymlink(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSymlink();

  inline bool isDirectory();
  inline bool hasDirectory();
  inline  ::capnp::List< ::sandstorm::spk::Archive::File>::Builder getDirectory();
  inline void setDirectory( ::capnp::List< ::sandstorm::spk::Archive::File>::Reader value);
  inline  ::capnp::List< ::sandstorm::spk::Archive::File>::Builder initDirectory(unsigned int size);
  inline void adoptDirectory(::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Archive::File>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Archive::File>> disownDirectory();

  inline  ::int64_t getLastModificationTimeNs();
  inline void setLastModificationTimeNs( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Archive::File::Pipeline {
public:
  typedef File Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool PackageDefinition::Reader::hasId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool PackageDefinition::Builder::hasId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PackageDefinition::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PackageDefinition::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void PackageDefinition::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PackageDefinition::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void PackageDefinition::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PackageDefinition::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool PackageDefinition::Reader::hasManifest() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool PackageDefinition::Builder::hasManifest() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::spk::Manifest::Reader PackageDefinition::Reader::getManifest() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::spk::Manifest::Builder PackageDefinition::Builder::getManifest() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::spk::Manifest::Pipeline PackageDefinition::Pipeline::getManifest() {
  return  ::sandstorm::spk::Manifest::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void PackageDefinition::Builder::setManifest( ::sandstorm::spk::Manifest::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::spk::Manifest::Builder PackageDefinition::Builder::initManifest() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void PackageDefinition::Builder::adoptManifest(
    ::capnp::Orphan< ::sandstorm::spk::Manifest>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::spk::Manifest> PackageDefinition::Builder::disownManifest() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool PackageDefinition::Reader::hasSourceMap() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool PackageDefinition::Builder::hasSourceMap() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::spk::SourceMap::Reader PackageDefinition::Reader::getSourceMap() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::SourceMap>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::spk::SourceMap::Builder PackageDefinition::Builder::getSourceMap() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::SourceMap>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::spk::SourceMap::Pipeline PackageDefinition::Pipeline::getSourceMap() {
  return  ::sandstorm::spk::SourceMap::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void PackageDefinition::Builder::setSourceMap( ::sandstorm::spk::SourceMap::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::SourceMap>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::spk::SourceMap::Builder PackageDefinition::Builder::initSourceMap() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::SourceMap>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void PackageDefinition::Builder::adoptSourceMap(
    ::capnp::Orphan< ::sandstorm::spk::SourceMap>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::SourceMap>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::spk::SourceMap> PackageDefinition::Builder::disownSourceMap() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::SourceMap>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool PackageDefinition::Reader::hasFileList() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool PackageDefinition::Builder::hasFileList() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PackageDefinition::Reader::getFileList() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PackageDefinition::Builder::getFileList() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void PackageDefinition::Builder::setFileList( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PackageDefinition::Builder::initFileList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void PackageDefinition::Builder::adoptFileList(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PackageDefinition::Builder::disownFileList() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool PackageDefinition::Reader::hasAlwaysInclude() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool PackageDefinition::Builder::hasAlwaysInclude() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader PackageDefinition::Reader::getAlwaysInclude() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder PackageDefinition::Builder::getAlwaysInclude() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void PackageDefinition::Builder::setAlwaysInclude( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void PackageDefinition::Builder::setAlwaysInclude(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder PackageDefinition::Builder::initAlwaysInclude(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void PackageDefinition::Builder::adoptAlwaysInclude(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> PackageDefinition::Builder::disownAlwaysInclude() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool PackageDefinition::Reader::hasBridgeConfig() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool PackageDefinition::Builder::hasBridgeConfig() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::spk::BridgeConfig::Reader PackageDefinition::Reader::getBridgeConfig() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::BridgeConfig>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::sandstorm::spk::BridgeConfig::Builder PackageDefinition::Builder::getBridgeConfig() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::BridgeConfig>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::spk::BridgeConfig::Pipeline PackageDefinition::Pipeline::getBridgeConfig() {
  return  ::sandstorm::spk::BridgeConfig::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void PackageDefinition::Builder::setBridgeConfig( ::sandstorm::spk::BridgeConfig::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::BridgeConfig>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::spk::BridgeConfig::Builder PackageDefinition::Builder::initBridgeConfig() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::BridgeConfig>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void PackageDefinition::Builder::adoptBridgeConfig(
    ::capnp::Orphan< ::sandstorm::spk::BridgeConfig>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::BridgeConfig>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::spk::BridgeConfig> PackageDefinition::Builder::disownBridgeConfig() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::BridgeConfig>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline  ::uint32_t Manifest::Reader::getMinApiVersion() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Manifest::Builder::getMinApiVersion() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Manifest::Builder::setMinApiVersion( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Manifest::Reader::getMaxApiVersion() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Manifest::Builder::getMaxApiVersion() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Manifest::Builder::setMaxApiVersion( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Manifest::Reader::hasActions() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Manifest::Builder::hasActions() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::spk::Manifest::Action>::Reader Manifest::Reader::getActions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Manifest::Action>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::spk::Manifest::Action>::Builder Manifest::Builder::getActions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Manifest::Action>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Manifest::Builder::setActions( ::capnp::List< ::sandstorm::spk::Manifest::Action>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Manifest::Action>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::spk::Manifest::Action>::Builder Manifest::Builder::initActions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Manifest::Action>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Manifest::Builder::adoptActions(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Manifest::Action>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Manifest::Action>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Manifest::Action>> Manifest::Builder::disownActions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Manifest::Action>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Manifest::Reader::hasContinueCommand() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Manifest::Builder::hasContinueCommand() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::spk::Manifest::Command::Reader Manifest::Reader::getContinueCommand() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::spk::Manifest::Command::Builder Manifest::Builder::getContinueCommand() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::spk::Manifest::Command::Pipeline Manifest::Pipeline::getContinueCommand() {
  return  ::sandstorm::spk::Manifest::Command::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Manifest::Builder::setContinueCommand( ::sandstorm::spk::Manifest::Command::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::spk::Manifest::Command::Builder Manifest::Builder::initContinueCommand() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Manifest::Builder::adoptContinueCommand(
    ::capnp::Orphan< ::sandstorm::spk::Manifest::Command>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::spk::Manifest::Command> Manifest::Builder::disownContinueCommand() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint32_t Manifest::Reader::getAppVersion() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Manifest::Builder::getAppVersion() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Manifest::Builder::setAppVersion( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Manifest::Reader::getMinUpgradableAppVersion() const {
  return _reader.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Manifest::Builder::getMinUpgradableAppVersion() {
  return _builder.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void Manifest::Builder::setMinUpgradableAppVersion( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool Manifest::Reader::hasAppMarketingVersion() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Manifest::Builder::hasAppMarketingVersion() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader Manifest::Reader::getAppMarketingVersion() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder Manifest::Builder::getAppMarketingVersion() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline Manifest::Pipeline::getAppMarketingVersion() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Manifest::Builder::setAppMarketingVersion( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder Manifest::Builder::initAppMarketingVersion() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Manifest::Builder::adoptAppMarketingVersion(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> Manifest::Builder::disownAppMarketingVersion() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Manifest::Reader::hasAppTitle() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Manifest::Builder::hasAppTitle() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader Manifest::Reader::getAppTitle() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder Manifest::Builder::getAppTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline Manifest::Pipeline::getAppTitle() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Manifest::Builder::setAppTitle( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder Manifest::Builder::initAppTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Manifest::Builder::adoptAppTitle(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> Manifest::Builder::disownAppTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Manifest::Reader::hasMetadata() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Manifest::Builder::hasMetadata() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::spk::Metadata::Reader Manifest::Reader::getMetadata() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::sandstorm::spk::Metadata::Builder Manifest::Builder::getMetadata() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::spk::Metadata::Pipeline Manifest::Pipeline::getMetadata() {
  return  ::sandstorm::spk::Metadata::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Manifest::Builder::setMetadata( ::sandstorm::spk::Metadata::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::spk::Metadata::Builder Manifest::Builder::initMetadata() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Manifest::Builder::adoptMetadata(
    ::capnp::Orphan< ::sandstorm::spk::Metadata>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::spk::Metadata> Manifest::Builder::disownMetadata() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool Manifest::Command::Reader::hasDeprecatedExecutablePath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Manifest::Command::Builder::hasDeprecatedExecutablePath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Manifest::Command::Reader::getDeprecatedExecutablePath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Manifest::Command::Builder::getDeprecatedExecutablePath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Manifest::Command::Builder::setDeprecatedExecutablePath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Manifest::Command::Builder::initDeprecatedExecutablePath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Manifest::Command::Builder::adoptDeprecatedExecutablePath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Manifest::Command::Builder::disownDeprecatedExecutablePath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Manifest::Command::Reader::hasArgv() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Manifest::Command::Builder::hasArgv() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader Manifest::Command::Reader::getArgv() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder Manifest::Command::Builder::getArgv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Manifest::Command::Builder::setArgv( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void Manifest::Command::Builder::setArgv(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder Manifest::Command::Builder::initArgv(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Manifest::Command::Builder::adoptArgv(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> Manifest::Command::Builder::disownArgv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Manifest::Command::Reader::hasEnviron() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Manifest::Command::Builder::hasEnviron() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::KeyValue>::Reader Manifest::Command::Reader::getEnviron() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::KeyValue>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::KeyValue>::Builder Manifest::Command::Builder::getEnviron() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::KeyValue>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Manifest::Command::Builder::setEnviron( ::capnp::List< ::sandstorm::KeyValue>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::KeyValue>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::KeyValue>::Builder Manifest::Command::Builder::initEnviron(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::KeyValue>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Manifest::Command::Builder::adoptEnviron(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::KeyValue>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::KeyValue>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::KeyValue>> Manifest::Command::Builder::disownEnviron() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::KeyValue>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline typename Manifest::Action::Input::Reader Manifest::Action::Reader::getInput() const {
  return typename Manifest::Action::Input::Reader(_reader);
}
inline typename Manifest::Action::Input::Builder Manifest::Action::Builder::getInput() {
  return typename Manifest::Action::Input::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Manifest::Action::Input::Pipeline Manifest::Action::Pipeline::getInput() {
  return typename Manifest::Action::Input::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Manifest::Action::Input::Builder Manifest::Action::Builder::initInput() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  return typename Manifest::Action::Input::Builder(_builder);
}
inline bool Manifest::Action::Reader::hasCommand() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Manifest::Action::Builder::hasCommand() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::spk::Manifest::Command::Reader Manifest::Action::Reader::getCommand() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::spk::Manifest::Command::Builder Manifest::Action::Builder::getCommand() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::spk::Manifest::Command::Pipeline Manifest::Action::Pipeline::getCommand() {
  return  ::sandstorm::spk::Manifest::Command::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Manifest::Action::Builder::setCommand( ::sandstorm::spk::Manifest::Command::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::spk::Manifest::Command::Builder Manifest::Action::Builder::initCommand() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Manifest::Action::Builder::adoptCommand(
    ::capnp::Orphan< ::sandstorm::spk::Manifest::Command>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::spk::Manifest::Command> Manifest::Action::Builder::disownCommand() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Manifest::Command>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Manifest::Action::Reader::hasTitle() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Manifest::Action::Builder::hasTitle() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader Manifest::Action::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder Manifest::Action::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline Manifest::Action::Pipeline::getTitle() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Manifest::Action::Builder::setTitle( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder Manifest::Action::Builder::initTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Manifest::Action::Builder::adoptTitle(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> Manifest::Action::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Manifest::Action::Reader::hasDescription() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Manifest::Action::Builder::hasDescription() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader Manifest::Action::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder Manifest::Action::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline Manifest::Action::Pipeline::getDescription() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Manifest::Action::Builder::setDescription( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder Manifest::Action::Builder::initDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Manifest::Action::Builder::adoptDescription(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> Manifest::Action::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Manifest::Action::Reader::hasNounPhrase() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Manifest::Action::Builder::hasNounPhrase() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader Manifest::Action::Reader::getNounPhrase() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder Manifest::Action::Builder::getNounPhrase() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline Manifest::Action::Pipeline::getNounPhrase() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Manifest::Action::Builder::setNounPhrase( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder Manifest::Action::Builder::initNounPhrase() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Manifest::Action::Builder::adoptNounPhrase(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> Manifest::Action::Builder::disownNounPhrase() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline  ::sandstorm::spk::Manifest::Action::Input::Which Manifest::Action::Input::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::spk::Manifest::Action::Input::Which Manifest::Action::Input::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool Manifest::Action::Input::Reader::isNone() const {
  return which() == Manifest::Action::Input::NONE;
}
inline bool Manifest::Action::Input::Builder::isNone() {
  return which() == Manifest::Action::Input::NONE;
}
inline  ::capnp::Void Manifest::Action::Input::Reader::getNone() const {
  KJ_IREQUIRE((which() == Manifest::Action::Input::NONE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Manifest::Action::Input::Builder::getNone() {
  KJ_IREQUIRE((which() == Manifest::Action::Input::NONE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Manifest::Action::Input::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<Manifest::Action::Input::Which>(
      0 * ::capnp::ELEMENTS, Manifest::Action::Input::NONE);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Manifest::Action::Input::Reader::isCapability() const {
  return which() == Manifest::Action::Input::CAPABILITY;
}
inline bool Manifest::Action::Input::Builder::isCapability() {
  return which() == Manifest::Action::Input::CAPABILITY;
}
inline bool Manifest::Action::Input::Reader::hasCapability() const {
  if (which() != Manifest::Action::Input::CAPABILITY) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Manifest::Action::Input::Builder::hasCapability() {
  if (which() != Manifest::Action::Input::CAPABILITY) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader Manifest::Action::Input::Reader::getCapability() const {
  KJ_IREQUIRE((which() == Manifest::Action::Input::CAPABILITY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder Manifest::Action::Input::Builder::getCapability() {
  KJ_IREQUIRE((which() == Manifest::Action::Input::CAPABILITY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Manifest::Action::Input::Builder::setCapability( ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader value) {
  _builder.setDataField<Manifest::Action::Input::Which>(
      0 * ::capnp::ELEMENTS, Manifest::Action::Input::CAPABILITY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder Manifest::Action::Input::Builder::initCapability(unsigned int size) {
  _builder.setDataField<Manifest::Action::Input::Which>(
      0 * ::capnp::ELEMENTS, Manifest::Action::Input::CAPABILITY);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Manifest::Action::Input::Builder::adoptCapability(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>>&& value) {
  _builder.setDataField<Manifest::Action::Input::Which>(
      0 * ::capnp::ELEMENTS, Manifest::Action::Input::CAPABILITY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>> Manifest::Action::Input::Builder::disownCapability() {
  KJ_IREQUIRE((which() == Manifest::Action::Input::CAPABILITY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SourceMap::Reader::hasSearchPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SourceMap::Builder::hasSearchPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>::Reader SourceMap::Reader::getSearchPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>::Builder SourceMap::Builder::getSearchPath() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SourceMap::Builder::setSearchPath( ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>::Builder SourceMap::Builder::initSearchPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SourceMap::Builder::adoptSearchPath(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>> SourceMap::Builder::disownSearchPath() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::SourceMap::Mapping>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SourceMap::Mapping::Reader::hasPackagePath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SourceMap::Mapping::Builder::hasPackagePath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SourceMap::Mapping::Reader::getPackagePath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SourceMap::Mapping::Builder::getPackagePath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SourceMap::Mapping::Builder::setPackagePath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SourceMap::Mapping::Builder::initPackagePath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SourceMap::Mapping::Builder::adoptPackagePath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SourceMap::Mapping::Builder::disownPackagePath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SourceMap::Mapping::Reader::hasSourcePath() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool SourceMap::Mapping::Builder::hasSourcePath() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SourceMap::Mapping::Reader::getSourcePath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SourceMap::Mapping::Builder::getSourcePath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void SourceMap::Mapping::Builder::setSourcePath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SourceMap::Mapping::Builder::initSourcePath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void SourceMap::Mapping::Builder::adoptSourcePath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SourceMap::Mapping::Builder::disownSourcePath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool SourceMap::Mapping::Reader::hasHidePaths() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool SourceMap::Mapping::Builder::hasHidePaths() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader SourceMap::Mapping::Reader::getHidePaths() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder SourceMap::Mapping::Builder::getHidePaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void SourceMap::Mapping::Builder::setHidePaths( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void SourceMap::Mapping::Builder::setHidePaths(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder SourceMap::Mapping::Builder::initHidePaths(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void SourceMap::Mapping::Builder::adoptHidePaths(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> SourceMap::Mapping::Builder::disownHidePaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool BridgeConfig::Reader::hasViewInfo() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool BridgeConfig::Builder::hasViewInfo() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::UiView::ViewInfo::Reader BridgeConfig::Reader::getViewInfo() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView::ViewInfo>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::UiView::ViewInfo::Builder BridgeConfig::Builder::getViewInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView::ViewInfo>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::UiView::ViewInfo::Pipeline BridgeConfig::Pipeline::getViewInfo() {
  return  ::sandstorm::UiView::ViewInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void BridgeConfig::Builder::setViewInfo( ::sandstorm::UiView::ViewInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView::ViewInfo>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::UiView::ViewInfo::Builder BridgeConfig::Builder::initViewInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView::ViewInfo>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void BridgeConfig::Builder::adoptViewInfo(
    ::capnp::Orphan< ::sandstorm::UiView::ViewInfo>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView::ViewInfo>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::UiView::ViewInfo> BridgeConfig::Builder::disownViewInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView::ViewInfo>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool BridgeConfig::Reader::hasApiPath() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool BridgeConfig::Builder::hasApiPath() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BridgeConfig::Reader::getApiPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BridgeConfig::Builder::getApiPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void BridgeConfig::Builder::setApiPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BridgeConfig::Builder::initApiPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void BridgeConfig::Builder::adoptApiPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BridgeConfig::Builder::disownApiPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool BridgeConfig::Reader::getSaveIdentityCaps() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool BridgeConfig::Builder::getSaveIdentityCaps() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void BridgeConfig::Builder::setSaveIdentityCaps(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline typename Metadata::Icons::Reader Metadata::Reader::getIcons() const {
  return typename Metadata::Icons::Reader(_reader);
}
inline typename Metadata::Icons::Builder Metadata::Builder::getIcons() {
  return typename Metadata::Icons::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Metadata::Icons::Pipeline Metadata::Pipeline::getIcons() {
  return typename Metadata::Icons::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Metadata::Icons::Builder Metadata::Builder::initIcons() {
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  _builder.getPointerField(2 * ::capnp::POINTERS).clear();
  _builder.getPointerField(15 * ::capnp::POINTERS).clear();
  return typename Metadata::Icons::Builder(_builder);
}
inline bool Metadata::Reader::hasWebsite() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Builder::hasWebsite() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Metadata::Reader::getWebsite() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Metadata::Builder::getWebsite() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Metadata::Builder::setWebsite( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Metadata::Builder::initWebsite(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Metadata::Builder::adoptWebsite(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Metadata::Builder::disownWebsite() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Metadata::Reader::hasCodeUrl() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Builder::hasCodeUrl() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Metadata::Reader::getCodeUrl() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Metadata::Builder::getCodeUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Metadata::Builder::setCodeUrl( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Metadata::Builder::initCodeUrl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Metadata::Builder::adoptCodeUrl(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Metadata::Builder::disownCodeUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline typename Metadata::License::Reader Metadata::Reader::getLicense() const {
  return typename Metadata::License::Reader(_reader);
}
inline typename Metadata::License::Builder Metadata::Builder::getLicense() {
  return typename Metadata::License::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Metadata::License::Pipeline Metadata::Pipeline::getLicense() {
  return typename Metadata::License::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Metadata::License::Builder Metadata::Builder::initLicense() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(5 * ::capnp::POINTERS).clear();
  _builder.getPointerField(6 * ::capnp::POINTERS).clear();
  return typename Metadata::License::Builder(_builder);
}
inline bool Metadata::Reader::hasCategories() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Builder::hasCategories() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::spk::Category>::Reader Metadata::Reader::getCategories() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Category>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::spk::Category>::Builder Metadata::Builder::getCategories() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Category>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void Metadata::Builder::setCategories( ::capnp::List< ::sandstorm::spk::Category>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Category>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline void Metadata::Builder::setCategories(::kj::ArrayPtr<const  ::sandstorm::spk::Category> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Category>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::spk::Category>::Builder Metadata::Builder::initCategories(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Category>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void Metadata::Builder::adoptCategories(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Category>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Category>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Category>> Metadata::Builder::disownCategories() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Category>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline typename Metadata::Author::Reader Metadata::Reader::getAuthor() const {
  return typename Metadata::Author::Reader(_reader);
}
inline typename Metadata::Author::Builder Metadata::Builder::getAuthor() {
  return typename Metadata::Author::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Metadata::Author::Pipeline Metadata::Pipeline::getAuthor() {
  return typename Metadata::Author::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Metadata::Author::Builder Metadata::Builder::initAuthor() {
  _builder.getPointerField(8 * ::capnp::POINTERS).clear();
  _builder.getPointerField(9 * ::capnp::POINTERS).clear();
  _builder.getPointerField(16 * ::capnp::POINTERS).clear();
  return typename Metadata::Author::Builder(_builder);
}
inline bool Metadata::Reader::hasPgpKeyring() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Builder::hasPgpKeyring() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Metadata::Reader::getPgpKeyring() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Metadata::Builder::getPgpKeyring() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
inline void Metadata::Builder::setPgpKeyring( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Metadata::Builder::initPgpKeyring(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS), size);
}
inline void Metadata::Builder::adoptPgpKeyring(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Metadata::Builder::disownPgpKeyring() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline bool Metadata::Reader::hasDescription() const {
  return !_reader.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Builder::hasDescription() {
  return !_builder.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader Metadata::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(11 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder Metadata::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline Metadata::Pipeline::getDescription() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void Metadata::Builder::setDescription( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder Metadata::Builder::initDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}
inline void Metadata::Builder::adoptDescription(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(11 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> Metadata::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}

inline bool Metadata::Reader::hasShortDescription() const {
  return !_reader.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Builder::hasShortDescription() {
  return !_builder.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader Metadata::Reader::getShortDescription() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(12 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder Metadata::Builder::getShortDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline Metadata::Pipeline::getShortDescription() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void Metadata::Builder::setShortDescription( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder Metadata::Builder::initShortDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}
inline void Metadata::Builder::adoptShortDescription(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(12 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> Metadata::Builder::disownShortDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}

inline bool Metadata::Reader::hasScreenshots() const {
  return !_reader.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Builder::hasScreenshots() {
  return !_builder.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>::Reader Metadata::Reader::getScreenshots() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>>::get(
      _reader.getPointerField(13 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>::Builder Metadata::Builder::getScreenshots() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>>::get(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}
inline void Metadata::Builder::setScreenshots( ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>::Builder Metadata::Builder::initScreenshots(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>>::init(
      _builder.getPointerField(13 * ::capnp::POINTERS), size);
}
inline void Metadata::Builder::adoptScreenshots(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>>::adopt(
      _builder.getPointerField(13 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>> Metadata::Builder::disownScreenshots() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Metadata::Screenshot>>::disown(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}

inline bool Metadata::Reader::hasChangeLog() const {
  return !_reader.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Builder::hasChangeLog() {
  return !_builder.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader Metadata::Reader::getChangeLog() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(14 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder Metadata::Builder::getChangeLog() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline Metadata::Pipeline::getChangeLog() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void Metadata::Builder::setChangeLog( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder Metadata::Builder::initChangeLog() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}
inline void Metadata::Builder::adoptChangeLog(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(14 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> Metadata::Builder::disownChangeLog() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}

inline  ::sandstorm::spk::Metadata::Icon::Which Metadata::Icon::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::spk::Metadata::Icon::Which Metadata::Icon::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool Metadata::Icon::Reader::isUnknown() const {
  return which() == Metadata::Icon::UNKNOWN;
}
inline bool Metadata::Icon::Builder::isUnknown() {
  return which() == Metadata::Icon::UNKNOWN;
}
inline  ::capnp::Void Metadata::Icon::Reader::getUnknown() const {
  KJ_IREQUIRE((which() == Metadata::Icon::UNKNOWN),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Metadata::Icon::Builder::getUnknown() {
  KJ_IREQUIRE((which() == Metadata::Icon::UNKNOWN),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Metadata::Icon::Builder::setUnknown( ::capnp::Void value) {
  _builder.setDataField<Metadata::Icon::Which>(
      0 * ::capnp::ELEMENTS, Metadata::Icon::UNKNOWN);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Metadata::Icon::Reader::isSvg() const {
  return which() == Metadata::Icon::SVG;
}
inline bool Metadata::Icon::Builder::isSvg() {
  return which() == Metadata::Icon::SVG;
}
inline bool Metadata::Icon::Reader::hasSvg() const {
  if (which() != Metadata::Icon::SVG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Icon::Builder::hasSvg() {
  if (which() != Metadata::Icon::SVG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Metadata::Icon::Reader::getSvg() const {
  KJ_IREQUIRE((which() == Metadata::Icon::SVG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Metadata::Icon::Builder::getSvg() {
  KJ_IREQUIRE((which() == Metadata::Icon::SVG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Metadata::Icon::Builder::setSvg( ::capnp::Text::Reader value) {
  _builder.setDataField<Metadata::Icon::Which>(
      0 * ::capnp::ELEMENTS, Metadata::Icon::SVG);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Metadata::Icon::Builder::initSvg(unsigned int size) {
  _builder.setDataField<Metadata::Icon::Which>(
      0 * ::capnp::ELEMENTS, Metadata::Icon::SVG);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Metadata::Icon::Builder::adoptSvg(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Metadata::Icon::Which>(
      0 * ::capnp::ELEMENTS, Metadata::Icon::SVG);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Metadata::Icon::Builder::disownSvg() {
  KJ_IREQUIRE((which() == Metadata::Icon::SVG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Metadata::Icon::Reader::isPng() const {
  return which() == Metadata::Icon::PNG;
}
inline bool Metadata::Icon::Builder::isPng() {
  return which() == Metadata::Icon::PNG;
}
inline typename Metadata::Icon::Png::Reader Metadata::Icon::Reader::getPng() const {
  KJ_IREQUIRE((which() == Metadata::Icon::PNG),
              "Must check which() before get()ing a union member.");
  return typename Metadata::Icon::Png::Reader(_reader);
}
inline typename Metadata::Icon::Png::Builder Metadata::Icon::Builder::getPng() {
  KJ_IREQUIRE((which() == Metadata::Icon::PNG),
              "Must check which() before get()ing a union member.");
  return typename Metadata::Icon::Png::Builder(_builder);
}
inline typename Metadata::Icon::Png::Builder Metadata::Icon::Builder::initPng() {
  _builder.setDataField<Metadata::Icon::Which>(
      0 * ::capnp::ELEMENTS, Metadata::Icon::PNG);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  return typename Metadata::Icon::Png::Builder(_builder);
}
inline bool Metadata::Icon::Png::Reader::hasDpi1x() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Icon::Png::Builder::hasDpi1x() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Metadata::Icon::Png::Reader::getDpi1x() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Metadata::Icon::Png::Builder::getDpi1x() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Metadata::Icon::Png::Builder::setDpi1x( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Metadata::Icon::Png::Builder::initDpi1x(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Metadata::Icon::Png::Builder::adoptDpi1x(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Metadata::Icon::Png::Builder::disownDpi1x() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Metadata::Icon::Png::Reader::hasDpi2x() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Icon::Png::Builder::hasDpi2x() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Metadata::Icon::Png::Reader::getDpi2x() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Metadata::Icon::Png::Builder::getDpi2x() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Metadata::Icon::Png::Builder::setDpi2x( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Metadata::Icon::Png::Builder::initDpi2x(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Metadata::Icon::Png::Builder::adoptDpi2x(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Metadata::Icon::Png::Builder::disownDpi2x() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::sandstorm::spk::Metadata::Screenshot::Which Metadata::Screenshot::Reader::which() const {
  return _reader.getDataField<Which>(4 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::spk::Metadata::Screenshot::Which Metadata::Screenshot::Builder::which() {
  return _builder.getDataField<Which>(4 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Metadata::Screenshot::Reader::getWidth() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Metadata::Screenshot::Builder::getWidth() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Metadata::Screenshot::Builder::setWidth( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Metadata::Screenshot::Reader::getHeight() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Metadata::Screenshot::Builder::getHeight() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Metadata::Screenshot::Builder::setHeight( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Metadata::Screenshot::Reader::isUnknown() const {
  return which() == Metadata::Screenshot::UNKNOWN;
}
inline bool Metadata::Screenshot::Builder::isUnknown() {
  return which() == Metadata::Screenshot::UNKNOWN;
}
inline  ::capnp::Void Metadata::Screenshot::Reader::getUnknown() const {
  KJ_IREQUIRE((which() == Metadata::Screenshot::UNKNOWN),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Metadata::Screenshot::Builder::getUnknown() {
  KJ_IREQUIRE((which() == Metadata::Screenshot::UNKNOWN),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Metadata::Screenshot::Builder::setUnknown( ::capnp::Void value) {
  _builder.setDataField<Metadata::Screenshot::Which>(
      4 * ::capnp::ELEMENTS, Metadata::Screenshot::UNKNOWN);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Metadata::Screenshot::Reader::isPng() const {
  return which() == Metadata::Screenshot::PNG;
}
inline bool Metadata::Screenshot::Builder::isPng() {
  return which() == Metadata::Screenshot::PNG;
}
inline bool Metadata::Screenshot::Reader::hasPng() const {
  if (which() != Metadata::Screenshot::PNG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Screenshot::Builder::hasPng() {
  if (which() != Metadata::Screenshot::PNG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Metadata::Screenshot::Reader::getPng() const {
  KJ_IREQUIRE((which() == Metadata::Screenshot::PNG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Metadata::Screenshot::Builder::getPng() {
  KJ_IREQUIRE((which() == Metadata::Screenshot::PNG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Metadata::Screenshot::Builder::setPng( ::capnp::Data::Reader value) {
  _builder.setDataField<Metadata::Screenshot::Which>(
      4 * ::capnp::ELEMENTS, Metadata::Screenshot::PNG);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Metadata::Screenshot::Builder::initPng(unsigned int size) {
  _builder.setDataField<Metadata::Screenshot::Which>(
      4 * ::capnp::ELEMENTS, Metadata::Screenshot::PNG);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Metadata::Screenshot::Builder::adoptPng(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<Metadata::Screenshot::Which>(
      4 * ::capnp::ELEMENTS, Metadata::Screenshot::PNG);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Metadata::Screenshot::Builder::disownPng() {
  KJ_IREQUIRE((which() == Metadata::Screenshot::PNG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Metadata::Screenshot::Reader::isJpeg() const {
  return which() == Metadata::Screenshot::JPEG;
}
inline bool Metadata::Screenshot::Builder::isJpeg() {
  return which() == Metadata::Screenshot::JPEG;
}
inline bool Metadata::Screenshot::Reader::hasJpeg() const {
  if (which() != Metadata::Screenshot::JPEG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Screenshot::Builder::hasJpeg() {
  if (which() != Metadata::Screenshot::JPEG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Metadata::Screenshot::Reader::getJpeg() const {
  KJ_IREQUIRE((which() == Metadata::Screenshot::JPEG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Metadata::Screenshot::Builder::getJpeg() {
  KJ_IREQUIRE((which() == Metadata::Screenshot::JPEG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Metadata::Screenshot::Builder::setJpeg( ::capnp::Data::Reader value) {
  _builder.setDataField<Metadata::Screenshot::Which>(
      4 * ::capnp::ELEMENTS, Metadata::Screenshot::JPEG);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Metadata::Screenshot::Builder::initJpeg(unsigned int size) {
  _builder.setDataField<Metadata::Screenshot::Which>(
      4 * ::capnp::ELEMENTS, Metadata::Screenshot::JPEG);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Metadata::Screenshot::Builder::adoptJpeg(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<Metadata::Screenshot::Which>(
      4 * ::capnp::ELEMENTS, Metadata::Screenshot::JPEG);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Metadata::Screenshot::Builder::disownJpeg() {
  KJ_IREQUIRE((which() == Metadata::Screenshot::JPEG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Metadata::Icons::Reader::hasAppGrid() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Icons::Builder::hasAppGrid() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::spk::Metadata::Icon::Reader Metadata::Icons::Reader::getAppGrid() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::spk::Metadata::Icon::Builder Metadata::Icons::Builder::getAppGrid() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::spk::Metadata::Icon::Pipeline Metadata::Icons::Pipeline::getAppGrid() {
  return  ::sandstorm::spk::Metadata::Icon::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Metadata::Icons::Builder::setAppGrid( ::sandstorm::spk::Metadata::Icon::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::spk::Metadata::Icon::Builder Metadata::Icons::Builder::initAppGrid() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Metadata::Icons::Builder::adoptAppGrid(
    ::capnp::Orphan< ::sandstorm::spk::Metadata::Icon>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::spk::Metadata::Icon> Metadata::Icons::Builder::disownAppGrid() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Metadata::Icons::Reader::hasGrain() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Icons::Builder::hasGrain() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::spk::Metadata::Icon::Reader Metadata::Icons::Reader::getGrain() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::spk::Metadata::Icon::Builder Metadata::Icons::Builder::getGrain() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::spk::Metadata::Icon::Pipeline Metadata::Icons::Pipeline::getGrain() {
  return  ::sandstorm::spk::Metadata::Icon::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Metadata::Icons::Builder::setGrain( ::sandstorm::spk::Metadata::Icon::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::spk::Metadata::Icon::Builder Metadata::Icons::Builder::initGrain() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Metadata::Icons::Builder::adoptGrain(
    ::capnp::Orphan< ::sandstorm::spk::Metadata::Icon>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::spk::Metadata::Icon> Metadata::Icons::Builder::disownGrain() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Metadata::Icons::Reader::hasMarket() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Icons::Builder::hasMarket() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::spk::Metadata::Icon::Reader Metadata::Icons::Reader::getMarket() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::spk::Metadata::Icon::Builder Metadata::Icons::Builder::getMarket() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::spk::Metadata::Icon::Pipeline Metadata::Icons::Pipeline::getMarket() {
  return  ::sandstorm::spk::Metadata::Icon::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Metadata::Icons::Builder::setMarket( ::sandstorm::spk::Metadata::Icon::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::spk::Metadata::Icon::Builder Metadata::Icons::Builder::initMarket() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Metadata::Icons::Builder::adoptMarket(
    ::capnp::Orphan< ::sandstorm::spk::Metadata::Icon>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::spk::Metadata::Icon> Metadata::Icons::Builder::disownMarket() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Metadata::Icons::Reader::hasMarketBig() const {
  return !_reader.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Icons::Builder::hasMarketBig() {
  return !_builder.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::spk::Metadata::Icon::Reader Metadata::Icons::Reader::getMarketBig() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::get(
      _reader.getPointerField(15 * ::capnp::POINTERS));
}
inline  ::sandstorm::spk::Metadata::Icon::Builder Metadata::Icons::Builder::getMarketBig() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::get(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::spk::Metadata::Icon::Pipeline Metadata::Icons::Pipeline::getMarketBig() {
  return  ::sandstorm::spk::Metadata::Icon::Pipeline(_typeless.getPointerField(15));
}
#endif  // !CAPNP_LITE
inline void Metadata::Icons::Builder::setMarketBig( ::sandstorm::spk::Metadata::Icon::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::spk::Metadata::Icon::Builder Metadata::Icons::Builder::initMarketBig() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::init(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}
inline void Metadata::Icons::Builder::adoptMarketBig(
    ::capnp::Orphan< ::sandstorm::spk::Metadata::Icon>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::adopt(
      _builder.getPointerField(15 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::spk::Metadata::Icon> Metadata::Icons::Builder::disownMarketBig() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata::Icon>::disown(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}

inline  ::sandstorm::spk::Metadata::License::Which Metadata::License::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::spk::Metadata::License::Which Metadata::License::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool Metadata::License::Reader::isNone() const {
  return which() == Metadata::License::NONE;
}
inline bool Metadata::License::Builder::isNone() {
  return which() == Metadata::License::NONE;
}
inline  ::capnp::Void Metadata::License::Reader::getNone() const {
  KJ_IREQUIRE((which() == Metadata::License::NONE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Metadata::License::Builder::getNone() {
  KJ_IREQUIRE((which() == Metadata::License::NONE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Metadata::License::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<Metadata::License::Which>(
      0 * ::capnp::ELEMENTS, Metadata::License::NONE);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Metadata::License::Reader::isOpenSource() const {
  return which() == Metadata::License::OPEN_SOURCE;
}
inline bool Metadata::License::Builder::isOpenSource() {
  return which() == Metadata::License::OPEN_SOURCE;
}
inline  ::sandstorm::spk::OpenSourceLicense Metadata::License::Reader::getOpenSource() const {
  KJ_IREQUIRE((which() == Metadata::License::OPEN_SOURCE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::sandstorm::spk::OpenSourceLicense>(
      1 * ::capnp::ELEMENTS);
}

inline  ::sandstorm::spk::OpenSourceLicense Metadata::License::Builder::getOpenSource() {
  KJ_IREQUIRE((which() == Metadata::License::OPEN_SOURCE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::sandstorm::spk::OpenSourceLicense>(
      1 * ::capnp::ELEMENTS);
}
inline void Metadata::License::Builder::setOpenSource( ::sandstorm::spk::OpenSourceLicense value) {
  _builder.setDataField<Metadata::License::Which>(
      0 * ::capnp::ELEMENTS, Metadata::License::OPEN_SOURCE);
  _builder.setDataField< ::sandstorm::spk::OpenSourceLicense>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Metadata::License::Reader::isProprietary() const {
  return which() == Metadata::License::PROPRIETARY;
}
inline bool Metadata::License::Builder::isProprietary() {
  return which() == Metadata::License::PROPRIETARY;
}
inline bool Metadata::License::Reader::hasProprietary() const {
  if (which() != Metadata::License::PROPRIETARY) return false;
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::License::Builder::hasProprietary() {
  if (which() != Metadata::License::PROPRIETARY) return false;
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader Metadata::License::Reader::getProprietary() const {
  KJ_IREQUIRE((which() == Metadata::License::PROPRIETARY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder Metadata::License::Builder::getProprietary() {
  KJ_IREQUIRE((which() == Metadata::License::PROPRIETARY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Metadata::License::Builder::setProprietary( ::sandstorm::LocalizedText::Reader value) {
  _builder.setDataField<Metadata::License::Which>(
      0 * ::capnp::ELEMENTS, Metadata::License::PROPRIETARY);
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder Metadata::License::Builder::initProprietary() {
  _builder.setDataField<Metadata::License::Which>(
      0 * ::capnp::ELEMENTS, Metadata::License::PROPRIETARY);
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Metadata::License::Builder::adoptProprietary(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  _builder.setDataField<Metadata::License::Which>(
      0 * ::capnp::ELEMENTS, Metadata::License::PROPRIETARY);
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> Metadata::License::Builder::disownProprietary() {
  KJ_IREQUIRE((which() == Metadata::License::PROPRIETARY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool Metadata::License::Reader::isPublicDomain() const {
  return which() == Metadata::License::PUBLIC_DOMAIN;
}
inline bool Metadata::License::Builder::isPublicDomain() {
  return which() == Metadata::License::PUBLIC_DOMAIN;
}
inline bool Metadata::License::Reader::hasPublicDomain() const {
  if (which() != Metadata::License::PUBLIC_DOMAIN) return false;
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::License::Builder::hasPublicDomain() {
  if (which() != Metadata::License::PUBLIC_DOMAIN) return false;
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader Metadata::License::Reader::getPublicDomain() const {
  KJ_IREQUIRE((which() == Metadata::License::PUBLIC_DOMAIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder Metadata::License::Builder::getPublicDomain() {
  KJ_IREQUIRE((which() == Metadata::License::PUBLIC_DOMAIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Metadata::License::Builder::setPublicDomain( ::sandstorm::LocalizedText::Reader value) {
  _builder.setDataField<Metadata::License::Which>(
      0 * ::capnp::ELEMENTS, Metadata::License::PUBLIC_DOMAIN);
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder Metadata::License::Builder::initPublicDomain() {
  _builder.setDataField<Metadata::License::Which>(
      0 * ::capnp::ELEMENTS, Metadata::License::PUBLIC_DOMAIN);
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Metadata::License::Builder::adoptPublicDomain(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  _builder.setDataField<Metadata::License::Which>(
      0 * ::capnp::ELEMENTS, Metadata::License::PUBLIC_DOMAIN);
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> Metadata::License::Builder::disownPublicDomain() {
  KJ_IREQUIRE((which() == Metadata::License::PUBLIC_DOMAIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool Metadata::License::Reader::hasNotices() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::License::Builder::hasNotices() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader Metadata::License::Reader::getNotices() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder Metadata::License::Builder::getNotices() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline Metadata::License::Pipeline::getNotices() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Metadata::License::Builder::setNotices( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder Metadata::License::Builder::initNotices() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void Metadata::License::Builder::adoptNotices(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> Metadata::License::Builder::disownNotices() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool Metadata::Author::Reader::hasContactEmail() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Author::Builder::hasContactEmail() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Metadata::Author::Reader::getContactEmail() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Metadata::Author::Builder::getContactEmail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void Metadata::Author::Builder::setContactEmail( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Metadata::Author::Builder::initContactEmail(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void Metadata::Author::Builder::adoptContactEmail(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Metadata::Author::Builder::disownContactEmail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool Metadata::Author::Reader::hasPgpSignature() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Author::Builder::hasPgpSignature() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Metadata::Author::Reader::getPgpSignature() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Metadata::Author::Builder::getPgpSignature() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void Metadata::Author::Builder::setPgpSignature( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Metadata::Author::Builder::initPgpSignature(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void Metadata::Author::Builder::adoptPgpSignature(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Metadata::Author::Builder::disownPgpSignature() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool Metadata::Author::Reader::hasUpstreamAuthor() const {
  return !_reader.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline bool Metadata::Author::Builder::hasUpstreamAuthor() {
  return !_builder.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Metadata::Author::Reader::getUpstreamAuthor() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(16 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Metadata::Author::Builder::getUpstreamAuthor() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}
inline void Metadata::Author::Builder::setUpstreamAuthor( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(16 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Metadata::Author::Builder::initUpstreamAuthor(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(16 * ::capnp::POINTERS), size);
}
inline void Metadata::Author::Builder::adoptUpstreamAuthor(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(16 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Metadata::Author::Builder::disownUpstreamAuthor() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}

inline bool OsiLicenseInfo::Reader::hasId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool OsiLicenseInfo::Builder::hasId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader OsiLicenseInfo::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder OsiLicenseInfo::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void OsiLicenseInfo::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder OsiLicenseInfo::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void OsiLicenseInfo::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> OsiLicenseInfo::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool OsiLicenseInfo::Reader::hasTitle() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool OsiLicenseInfo::Builder::hasTitle() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader OsiLicenseInfo::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder OsiLicenseInfo::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void OsiLicenseInfo::Builder::setTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder OsiLicenseInfo::Builder::initTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void OsiLicenseInfo::Builder::adoptTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> OsiLicenseInfo::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool OsiLicenseInfo::Reader::getRequireSource() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool OsiLicenseInfo::Builder::getRequireSource() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void OsiLicenseInfo::Builder::setRequireSource(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AppId::Reader::getId0() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t AppId::Builder::getId0() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void AppId::Builder::setId0( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AppId::Reader::getId1() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t AppId::Builder::getId1() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void AppId::Builder::setId1( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AppId::Reader::getId2() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t AppId::Builder::getId2() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void AppId::Builder::setId2( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AppId::Reader::getId3() const {
  return _reader.getDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint64_t AppId::Builder::getId3() {
  return _builder.getDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS);
}
inline void AppId::Builder::setId3( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t PackageId::Reader::getId0() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t PackageId::Builder::getId0() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void PackageId::Builder::setId0( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t PackageId::Reader::getId1() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t PackageId::Builder::getId1() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void PackageId::Builder::setId1( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool VerifiedInfo::Reader::hasAppId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool VerifiedInfo::Builder::hasAppId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::spk::AppId::Reader VerifiedInfo::Reader::getAppId() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::AppId>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::spk::AppId::Builder VerifiedInfo::Builder::getAppId() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::AppId>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::spk::AppId::Pipeline VerifiedInfo::Pipeline::getAppId() {
  return  ::sandstorm::spk::AppId::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void VerifiedInfo::Builder::setAppId( ::sandstorm::spk::AppId::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::AppId>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::spk::AppId::Builder VerifiedInfo::Builder::initAppId() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::AppId>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void VerifiedInfo::Builder::adoptAppId(
    ::capnp::Orphan< ::sandstorm::spk::AppId>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::AppId>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::spk::AppId> VerifiedInfo::Builder::disownAppId() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::AppId>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool VerifiedInfo::Reader::hasPackageId() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool VerifiedInfo::Builder::hasPackageId() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::spk::PackageId::Reader VerifiedInfo::Reader::getPackageId() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::PackageId>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::spk::PackageId::Builder VerifiedInfo::Builder::getPackageId() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::PackageId>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::spk::PackageId::Pipeline VerifiedInfo::Pipeline::getPackageId() {
  return  ::sandstorm::spk::PackageId::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void VerifiedInfo::Builder::setPackageId( ::sandstorm::spk::PackageId::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::PackageId>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::spk::PackageId::Builder VerifiedInfo::Builder::initPackageId() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::PackageId>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void VerifiedInfo::Builder::adoptPackageId(
    ::capnp::Orphan< ::sandstorm::spk::PackageId>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::PackageId>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::spk::PackageId> VerifiedInfo::Builder::disownPackageId() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::PackageId>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool VerifiedInfo::Reader::hasTitle() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool VerifiedInfo::Builder::hasTitle() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader VerifiedInfo::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder VerifiedInfo::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline VerifiedInfo::Pipeline::getTitle() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void VerifiedInfo::Builder::setTitle( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder VerifiedInfo::Builder::initTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void VerifiedInfo::Builder::adoptTitle(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> VerifiedInfo::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::uint32_t VerifiedInfo::Reader::getVersion() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t VerifiedInfo::Builder::getVersion() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void VerifiedInfo::Builder::setVersion( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool VerifiedInfo::Reader::hasMarketingVersion() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool VerifiedInfo::Builder::hasMarketingVersion() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader VerifiedInfo::Reader::getMarketingVersion() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder VerifiedInfo::Builder::getMarketingVersion() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline VerifiedInfo::Pipeline::getMarketingVersion() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void VerifiedInfo::Builder::setMarketingVersion( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder VerifiedInfo::Builder::initMarketingVersion() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void VerifiedInfo::Builder::adoptMarketingVersion(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> VerifiedInfo::Builder::disownMarketingVersion() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool VerifiedInfo::Reader::hasAuthorPgpKeyFingerprint() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool VerifiedInfo::Builder::hasAuthorPgpKeyFingerprint() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader VerifiedInfo::Reader::getAuthorPgpKeyFingerprint() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder VerifiedInfo::Builder::getAuthorPgpKeyFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void VerifiedInfo::Builder::setAuthorPgpKeyFingerprint( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder VerifiedInfo::Builder::initAuthorPgpKeyFingerprint(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void VerifiedInfo::Builder::adoptAuthorPgpKeyFingerprint(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> VerifiedInfo::Builder::disownAuthorPgpKeyFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool VerifiedInfo::Reader::hasMetadata() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool VerifiedInfo::Builder::hasMetadata() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::spk::Metadata::Reader VerifiedInfo::Reader::getMetadata() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::sandstorm::spk::Metadata::Builder VerifiedInfo::Builder::getMetadata() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::spk::Metadata::Pipeline VerifiedInfo::Pipeline::getMetadata() {
  return  ::sandstorm::spk::Metadata::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void VerifiedInfo::Builder::setMetadata( ::sandstorm::spk::Metadata::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::spk::Metadata::Builder VerifiedInfo::Builder::initMetadata() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void VerifiedInfo::Builder::adoptMetadata(
    ::capnp::Orphan< ::sandstorm::spk::Metadata>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::spk::Metadata> VerifiedInfo::Builder::disownMetadata() {
  return ::capnp::_::PointerHelpers< ::sandstorm::spk::Metadata>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool CategoryInfo::Reader::hasTitle() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool CategoryInfo::Builder::hasTitle() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CategoryInfo::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CategoryInfo::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void CategoryInfo::Builder::setTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CategoryInfo::Builder::initTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void CategoryInfo::Builder::adoptTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CategoryInfo::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool KeyFile::Reader::hasPublicKey() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool KeyFile::Builder::hasPublicKey() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader KeyFile::Reader::getPublicKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder KeyFile::Builder::getPublicKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void KeyFile::Builder::setPublicKey( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder KeyFile::Builder::initPublicKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void KeyFile::Builder::adoptPublicKey(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> KeyFile::Builder::disownPublicKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool KeyFile::Reader::hasPrivateKey() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool KeyFile::Builder::hasPrivateKey() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader KeyFile::Reader::getPrivateKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder KeyFile::Builder::getPrivateKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void KeyFile::Builder::setPrivateKey( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder KeyFile::Builder::initPrivateKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void KeyFile::Builder::adoptPrivateKey(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> KeyFile::Builder::disownPrivateKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Signature::Reader::hasPublicKey() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Signature::Builder::hasPublicKey() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Signature::Reader::getPublicKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Signature::Builder::getPublicKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Signature::Builder::setPublicKey( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Signature::Builder::initPublicKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Signature::Builder::adoptPublicKey(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Signature::Builder::disownPublicKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Signature::Reader::hasSignature() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Signature::Builder::hasSignature() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Signature::Reader::getSignature() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Signature::Builder::getSignature() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Signature::Builder::setSignature( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Signature::Builder::initSignature(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Signature::Builder::adoptSignature(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Signature::Builder::disownSignature() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Archive::Reader::hasFiles() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Archive::Builder::hasFiles() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::spk::Archive::File>::Reader Archive::Reader::getFiles() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Archive::File>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::spk::Archive::File>::Builder Archive::Builder::getFiles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Archive::File>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Archive::Builder::setFiles( ::capnp::List< ::sandstorm::spk::Archive::File>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Archive::File>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::spk::Archive::File>::Builder Archive::Builder::initFiles(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Archive::File>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Archive::Builder::adoptFiles(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Archive::File>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Archive::File>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Archive::File>> Archive::Builder::disownFiles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Archive::File>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::sandstorm::spk::Archive::File::Which Archive::File::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::spk::Archive::File::Which Archive::File::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool Archive::File::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Archive::File::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Archive::File::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Archive::File::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Archive::File::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Archive::File::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Archive::File::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Archive::File::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Archive::File::Reader::isRegular() const {
  return which() == Archive::File::REGULAR;
}
inline bool Archive::File::Builder::isRegular() {
  return which() == Archive::File::REGULAR;
}
inline bool Archive::File::Reader::hasRegular() const {
  if (which() != Archive::File::REGULAR) return false;
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Archive::File::Builder::hasRegular() {
  if (which() != Archive::File::REGULAR) return false;
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Archive::File::Reader::getRegular() const {
  KJ_IREQUIRE((which() == Archive::File::REGULAR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Archive::File::Builder::getRegular() {
  KJ_IREQUIRE((which() == Archive::File::REGULAR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Archive::File::Builder::setRegular( ::capnp::Data::Reader value) {
  _builder.setDataField<Archive::File::Which>(
      0 * ::capnp::ELEMENTS, Archive::File::REGULAR);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Archive::File::Builder::initRegular(unsigned int size) {
  _builder.setDataField<Archive::File::Which>(
      0 * ::capnp::ELEMENTS, Archive::File::REGULAR);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Archive::File::Builder::adoptRegular(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<Archive::File::Which>(
      0 * ::capnp::ELEMENTS, Archive::File::REGULAR);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Archive::File::Builder::disownRegular() {
  KJ_IREQUIRE((which() == Archive::File::REGULAR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Archive::File::Reader::isExecutable() const {
  return which() == Archive::File::EXECUTABLE;
}
inline bool Archive::File::Builder::isExecutable() {
  return which() == Archive::File::EXECUTABLE;
}
inline bool Archive::File::Reader::hasExecutable() const {
  if (which() != Archive::File::EXECUTABLE) return false;
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Archive::File::Builder::hasExecutable() {
  if (which() != Archive::File::EXECUTABLE) return false;
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Archive::File::Reader::getExecutable() const {
  KJ_IREQUIRE((which() == Archive::File::EXECUTABLE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Archive::File::Builder::getExecutable() {
  KJ_IREQUIRE((which() == Archive::File::EXECUTABLE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Archive::File::Builder::setExecutable( ::capnp::Data::Reader value) {
  _builder.setDataField<Archive::File::Which>(
      0 * ::capnp::ELEMENTS, Archive::File::EXECUTABLE);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Archive::File::Builder::initExecutable(unsigned int size) {
  _builder.setDataField<Archive::File::Which>(
      0 * ::capnp::ELEMENTS, Archive::File::EXECUTABLE);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Archive::File::Builder::adoptExecutable(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<Archive::File::Which>(
      0 * ::capnp::ELEMENTS, Archive::File::EXECUTABLE);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Archive::File::Builder::disownExecutable() {
  KJ_IREQUIRE((which() == Archive::File::EXECUTABLE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Archive::File::Reader::isSymlink() const {
  return which() == Archive::File::SYMLINK;
}
inline bool Archive::File::Builder::isSymlink() {
  return which() == Archive::File::SYMLINK;
}
inline bool Archive::File::Reader::hasSymlink() const {
  if (which() != Archive::File::SYMLINK) return false;
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Archive::File::Builder::hasSymlink() {
  if (which() != Archive::File::SYMLINK) return false;
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Archive::File::Reader::getSymlink() const {
  KJ_IREQUIRE((which() == Archive::File::SYMLINK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Archive::File::Builder::getSymlink() {
  KJ_IREQUIRE((which() == Archive::File::SYMLINK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Archive::File::Builder::setSymlink( ::capnp::Text::Reader value) {
  _builder.setDataField<Archive::File::Which>(
      0 * ::capnp::ELEMENTS, Archive::File::SYMLINK);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Archive::File::Builder::initSymlink(unsigned int size) {
  _builder.setDataField<Archive::File::Which>(
      0 * ::capnp::ELEMENTS, Archive::File::SYMLINK);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Archive::File::Builder::adoptSymlink(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Archive::File::Which>(
      0 * ::capnp::ELEMENTS, Archive::File::SYMLINK);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Archive::File::Builder::disownSymlink() {
  KJ_IREQUIRE((which() == Archive::File::SYMLINK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Archive::File::Reader::isDirectory() const {
  return which() == Archive::File::DIRECTORY;
}
inline bool Archive::File::Builder::isDirectory() {
  return which() == Archive::File::DIRECTORY;
}
inline bool Archive::File::Reader::hasDirectory() const {
  if (which() != Archive::File::DIRECTORY) return false;
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Archive::File::Builder::hasDirectory() {
  if (which() != Archive::File::DIRECTORY) return false;
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::spk::Archive::File>::Reader Archive::File::Reader::getDirectory() const {
  KJ_IREQUIRE((which() == Archive::File::DIRECTORY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Archive::File>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::spk::Archive::File>::Builder Archive::File::Builder::getDirectory() {
  KJ_IREQUIRE((which() == Archive::File::DIRECTORY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Archive::File>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Archive::File::Builder::setDirectory( ::capnp::List< ::sandstorm::spk::Archive::File>::Reader value) {
  _builder.setDataField<Archive::File::Which>(
      0 * ::capnp::ELEMENTS, Archive::File::DIRECTORY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Archive::File>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::spk::Archive::File>::Builder Archive::File::Builder::initDirectory(unsigned int size) {
  _builder.setDataField<Archive::File::Which>(
      0 * ::capnp::ELEMENTS, Archive::File::DIRECTORY);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Archive::File>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Archive::File::Builder::adoptDirectory(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Archive::File>>&& value) {
  _builder.setDataField<Archive::File::Which>(
      0 * ::capnp::ELEMENTS, Archive::File::DIRECTORY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Archive::File>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::spk::Archive::File>> Archive::File::Builder::disownDirectory() {
  KJ_IREQUIRE((which() == Archive::File::DIRECTORY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::spk::Archive::File>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int64_t Archive::File::Reader::getLastModificationTimeNs() const {
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int64_t Archive::File::Builder::getLastModificationTimeNs() {
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Archive::File::Builder::setLastModificationTimeNs( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_df9bc20172856a3a_
