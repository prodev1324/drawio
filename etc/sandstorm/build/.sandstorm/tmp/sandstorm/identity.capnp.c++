// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: identity.capnp

#include "identity.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<31> b_c084987aa951dd18 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     24, 221,  81, 169, 122, 152, 132, 192,
     25,   0,   0,   0,   3,   0,   0,   0,
     37, 125,  61,  92, 138,  16,  34, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  71,   0,   0,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 100, 101, 110, 116, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  73, 100, 101, 110, 116, 105, 116,
    121,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76, 217, 117, 181, 167, 121,  45, 243,
    109,  47, 201,  85, 184, 114, 114, 205,
     17,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  80, 114, 111, 102, 105,
    108, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_c084987aa951dd18 = b_c084987aa951dd18.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c084987aa951dd18[] = {
  &s_cd7272b855c92f6d,
  &s_f32d79a7b575d94c,
};
static const uint16_t m_c084987aa951dd18[] = {0};
const ::capnp::_::RawSchema s_c084987aa951dd18 = {
  0xc084987aa951dd18, b_c084987aa951dd18.words, 31, d_c084987aa951dd18, m_c084987aa951dd18,
  2, 1, nullptr, nullptr, nullptr, { &s_c084987aa951dd18, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_f32d79a7b575d94c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     76, 217, 117, 181, 167, 121,  45, 243,
     34,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 100, 101, 110, 116, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  73, 100, 101, 110, 116, 105, 116,
    121,  46, 103, 101, 116,  80, 114, 111,
    102, 105, 108, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f32d79a7b575d94c = b_f32d79a7b575d94c.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f32d79a7b575d94c = {
  0xf32d79a7b575d94c, b_f32d79a7b575d94c.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f32d79a7b575d94c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_cd7272b855c92f6d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    109,  47, 201,  85, 184, 114, 114, 205,
     34,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 100, 101, 110, 116, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  73, 100, 101, 110, 116, 105, 116,
    121,  46, 103, 101, 116,  80, 114, 111,
    102, 105, 108, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 114, 111, 102, 105, 108, 101,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    239, 252,   1, 114,  77, 195, 208, 211,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cd7272b855c92f6d = b_cd7272b855c92f6d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cd7272b855c92f6d[] = {
  &s_d3d0c34d7201fcef,
};
static const uint16_t m_cd7272b855c92f6d[] = {0};
static const uint16_t i_cd7272b855c92f6d[] = {0};
const ::capnp::_::RawSchema s_cd7272b855c92f6d = {
  0xcd7272b855c92f6d, b_cd7272b855c92f6d.words, 35, d_cd7272b855c92f6d, m_cd7272b855c92f6d,
  1, 1, i_cd7272b855c92f6d, nullptr, nullptr, { &s_cd7272b855c92f6d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<86> b_d3d0c34d7201fcef = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    239, 252,   1, 114,  77, 195, 208, 211,
     25,   0,   0,   0,   1,   0,   1,   0,
     37, 125,  61,  92, 138,  16,  34, 200,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 100, 101, 110, 116, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  80, 114, 111, 102, 105, 108, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
      1, 171,  57, 133, 207,  45, 117, 132,
      1,   0,   0,   0,  74,   0,   0,   0,
     80, 114, 111, 110, 111, 117, 110, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
    100, 105, 115, 112, 108,  97, 121,  78,
     97, 109, 101,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     73, 226, 123,  55, 114, 183,  93, 139,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 101, 102, 101, 114, 114, 101,
    100,  72,  97, 110, 100, 108, 101,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 105,  99, 116, 117, 114, 101,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     63, 162, 169,  31,  98,  94, 187, 250,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 110, 111, 117, 110, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      1, 171,  57, 133, 207,  45, 117, 132,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d3d0c34d7201fcef = b_d3d0c34d7201fcef.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d3d0c34d7201fcef[] = {
  &s_84752dcf8539ab01,
  &s_8b5db772377be249,
  &s_fabb5e621fa9a23f,
};
static const uint16_t m_d3d0c34d7201fcef[] = {0, 2, 1, 3};
static const uint16_t i_d3d0c34d7201fcef[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_d3d0c34d7201fcef = {
  0xd3d0c34d7201fcef, b_d3d0c34d7201fcef.words, 86, d_d3d0c34d7201fcef, m_d3d0c34d7201fcef,
  3, 4, i_d3d0c34d7201fcef, nullptr, nullptr, { &s_d3d0c34d7201fcef, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_84752dcf8539ab01 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      1, 171,  57, 133, 207,  45, 117, 132,
     33,   0,   0,   0,   2,   0,   0,   0,
    239, 252,   1, 114,  77, 195, 208, 211,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 103,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 100, 101, 110, 116, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  80, 114, 111, 102, 105, 108, 101,
     46,  80, 114, 111, 110, 111, 117, 110,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 117, 116, 114,  97, 108,   0,
    109,  97, 108, 101,   0,   0,   0,   0,
    102, 101, 109,  97, 108, 101,   0,   0,
    114, 111,  98, 111, 116,   0,   0,   0, }
};
::capnp::word const* const bp_84752dcf8539ab01 = b_84752dcf8539ab01.words;
#if !CAPNP_LITE
static const uint16_t m_84752dcf8539ab01[] = {2, 1, 0, 3};
const ::capnp::_::RawSchema s_84752dcf8539ab01 = {
  0x84752dcf8539ab01, b_84752dcf8539ab01.words, 36, nullptr, m_84752dcf8539ab01,
  0, 4, nullptr, nullptr, nullptr, { &s_84752dcf8539ab01, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Pronouns_84752dcf8539ab01, 84752dcf8539ab01);
static const ::capnp::_::AlignedData<153> b_94b9d1efb35d11d3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    211,  17,  93, 179, 239, 209, 185, 148,
     25,   0,   0,   0,   1,   0,   1,   0,
     37, 125,  61,  92, 138,  16,  34, 200,
      7,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 199,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 100, 101, 110, 116, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  85, 115, 101, 114,  73, 110, 102,
    111,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     32,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    208,   0,   0,   0,   3,   0,   1,   0,
    220,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    217,   0,   0,   0, 210,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    224,   0,   0,   0,   3,   0,   1,   0,
    236,   0,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    233,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    232,   0,   0,   0,   3,   0,   1,   0,
    244,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    241,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    240,   0,   0,   0,   3,   0,   1,   0,
     12,   1,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   1,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   1,   0,   0,   3,   0,   1,   0,
     20,   1,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   1,   0,   0,   3,   0,   1,   0,
     28,   1,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   1,   0,   0,   3,   0,   1,   0,
     36,   1,   0,   0,   2,   0,   1,   0,
      7,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     32,   1,   0,   0,   3,   0,   1,   0,
     44,   1,   0,   0,   2,   0,   1,   0,
    100, 105, 115, 112, 108,  97, 121,  78,
     97, 109, 101,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     73, 226, 123,  55, 114, 183,  93, 139,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 112, 114, 101,  99,  97, 116,
    101, 100,  80, 101, 114, 109, 105, 115,
    115, 105, 111, 110, 115,  66, 108, 111,
     98,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 101, 110, 116, 105, 116, 121,
     73, 100,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 101, 114, 109, 105, 115, 115, 105,
    111, 110, 115,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 101, 102, 101, 114, 114, 101,
    100,  72,  97, 110, 100, 108, 101,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 110, 111, 117, 110, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      1, 171,  57, 133, 207,  45, 117, 132,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 105,  99, 116, 117, 114, 101,  85,
    114, 108,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 101, 110, 116, 105, 116, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     24, 221,  81, 169, 122, 152, 132, 192,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_94b9d1efb35d11d3 = b_94b9d1efb35d11d3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_94b9d1efb35d11d3[] = {
  &s_84752dcf8539ab01,
  &s_8b5db772377be249,
  &s_c084987aa951dd18,
};
static const uint16_t m_94b9d1efb35d11d3[] = {1, 0, 7, 2, 3, 6, 4, 5};
static const uint16_t i_94b9d1efb35d11d3[] = {0, 1, 2, 3, 4, 5, 6, 7};
const ::capnp::_::RawSchema s_94b9d1efb35d11d3 = {
  0x94b9d1efb35d11d3, b_94b9d1efb35d11d3.words, 153, d_94b9d1efb35d11d3, m_94b9d1efb35d11d3,
  3, 8, i_94b9d1efb35d11d3, nullptr, nullptr, { &s_94b9d1efb35d11d3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace sandstorm {

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::Identity::GetProfileParams,  ::sandstorm::Identity::GetProfileResults>
Identity::Client::getProfileRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Identity::GetProfileParams,  ::sandstorm::Identity::GetProfileResults>(
      0xc084987aa951dd18ull, 0, sizeHint);
}
::kj::Promise<void> Identity::Server::getProfile(GetProfileContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/identity.capnp:Identity", "getProfile",
      0xc084987aa951dd18ull, 0);
}
::kj::Promise<void> Identity::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xc084987aa951dd18ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/identity.capnp:Identity", interfaceId);
  }
}
::kj::Promise<void> Identity::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return getProfile(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Identity::GetProfileParams,  ::sandstorm::Identity::GetProfileResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/identity.capnp:Identity",
          0xc084987aa951dd18ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Identity
#if !CAPNP_LITE
constexpr ::capnp::Kind Identity::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Identity::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Identity::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Identity::GetProfileParams
constexpr uint16_t Identity::GetProfileParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Identity::GetProfileParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Identity::GetProfileParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Identity::GetProfileParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Identity::GetProfileParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Identity::GetProfileResults
constexpr uint16_t Identity::GetProfileResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Identity::GetProfileResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Identity::GetProfileResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Identity::GetProfileResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Identity::GetProfileResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Profile
constexpr uint16_t Profile::_capnpPrivate::dataWordSize;
constexpr uint16_t Profile::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Profile::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Profile::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Profile::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// UserInfo
constexpr uint16_t UserInfo::_capnpPrivate::dataWordSize;
constexpr uint16_t UserInfo::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind UserInfo::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UserInfo::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* UserInfo::_capnpPrivate::brand;
#endif  // !CAPNP_LITE


}  // namespace

