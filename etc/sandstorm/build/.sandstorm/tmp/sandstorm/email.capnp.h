// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: email.capnp

#ifndef CAPNP_INCLUDED_dd10df585a82c6d8_
#define CAPNP_INCLUDED_dd10df585a82c6d8_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "util.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(acaddcee86563ee1);
CAPNP_DECLARE_SCHEMA(b309c51a9d28244f);
CAPNP_DECLARE_SCHEMA(cff459e769562d2f);
CAPNP_DECLARE_SCHEMA(ec831dbf4cc9bcca);
CAPNP_DECLARE_SCHEMA(90790c61fc899dd3);
CAPNP_DECLARE_SCHEMA(a5adb72b4ccc59ee);
CAPNP_DECLARE_SCHEMA(d063b4e6c91bf8d8);
CAPNP_DECLARE_SCHEMA(9c78c3c5de56e4d4);
CAPNP_DECLARE_SCHEMA(bd727a009329aabc);
CAPNP_DECLARE_SCHEMA(f88bf102464dfa5a);
CAPNP_DECLARE_SCHEMA(97469291ac5bb892);
CAPNP_DECLARE_SCHEMA(a3cc885445aed8e9);
CAPNP_DECLARE_SCHEMA(8f555bd4141fbb3b);
CAPNP_DECLARE_SCHEMA(d458f7ca9d1ba9ff);
CAPNP_DECLARE_SCHEMA(e5927352f65eba5c);
CAPNP_DECLARE_SCHEMA(c7e287c5d3518c34);
CAPNP_DECLARE_SCHEMA(93ee926bb1bd4eea);
CAPNP_DECLARE_SCHEMA(cc99614322e49040);
CAPNP_DECLARE_SCHEMA(8b6f158d70cbc773);
CAPNP_DECLARE_SCHEMA(a8eb16da45ad8f97);
CAPNP_DECLARE_SCHEMA(81f33f1803485545);
CAPNP_DECLARE_SCHEMA(facf412b11767e9e);
CAPNP_DECLARE_SCHEMA(8e8e3d68615d430c);

}  // namespace schemas
}  // namespace capnp

namespace sandstorm {

struct EmailAddress {
  EmailAddress() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(acaddcee86563ee1, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EmailAttachment {
  EmailAttachment() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b309c51a9d28244f, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EmailMessage {
  EmailMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cff459e769562d2f, 1, 12)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EmailSendPort {
  EmailSendPort() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct PowerboxTag;
  struct SendParams;
  struct SendResults;
  struct HintAddressParams;
  struct HintAddressResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(ec831dbf4cc9bcca)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct EmailSendPort::PowerboxTag {
  PowerboxTag() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(90790c61fc899dd3, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EmailSendPort::SendParams {
  SendParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a5adb72b4ccc59ee, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EmailSendPort::SendResults {
  SendResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d063b4e6c91bf8d8, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EmailSendPort::HintAddressParams {
  HintAddressParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9c78c3c5de56e4d4, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EmailSendPort::HintAddressResults {
  HintAddressResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd727a009329aabc, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct VerifiedEmail {
  VerifiedEmail() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct PowerboxTag;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(f88bf102464dfa5a)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct VerifiedEmail::PowerboxTag {
  PowerboxTag() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97469291ac5bb892, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct VerifiedEmailSendPort {
  VerifiedEmailSendPort() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct PowerboxTag;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(a3cc885445aed8e9)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct VerifiedEmailSendPort::PowerboxTag {
  PowerboxTag() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8f555bd4141fbb3b, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EmailVerifier {
  EmailVerifier() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct GetIdParams;
  struct GetIdResults;
  struct VerifyEmailParams;
  struct VerifyEmailResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(d458f7ca9d1ba9ff)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct EmailVerifier::GetIdParams {
  GetIdParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e5927352f65eba5c, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EmailVerifier::GetIdResults {
  GetIdResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c7e287c5d3518c34, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EmailVerifier::VerifyEmailParams {
  VerifyEmailParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(93ee926bb1bd4eea, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EmailVerifier::VerifyEmailResults {
  VerifyEmailResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cc99614322e49040, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EmailAgent {
  EmailAgent() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct SendParams;
  struct SendResults;
  struct AddReceiverParams;
  struct AddReceiverResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(8b6f158d70cbc773)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct EmailAgent::SendParams {
  SendParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a8eb16da45ad8f97, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EmailAgent::SendResults {
  SendResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(81f33f1803485545, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EmailAgent::AddReceiverParams {
  AddReceiverParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(facf412b11767e9e, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EmailAgent::AddReceiverResults {
  AddReceiverResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8e8e3d68615d430c, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class EmailAddress::Reader {
public:
  typedef EmailAddress Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAddress() const;
  inline  ::capnp::Text::Reader getAddress() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmailAddress::Builder {
public:
  typedef EmailAddress Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAddress();
  inline  ::capnp::Text::Builder getAddress();
  inline void setAddress( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAddress(unsigned int size);
  inline void adoptAddress(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAddress();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmailAddress::Pipeline {
public:
  typedef EmailAddress Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EmailAttachment::Reader {
public:
  typedef EmailAttachment Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasContentType() const;
  inline  ::capnp::Text::Reader getContentType() const;

  inline bool hasContentDisposition() const;
  inline  ::capnp::Text::Reader getContentDisposition() const;

  inline bool hasContentId() const;
  inline  ::capnp::Text::Reader getContentId() const;

  inline bool hasContent() const;
  inline  ::capnp::Data::Reader getContent() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmailAttachment::Builder {
public:
  typedef EmailAttachment Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasContentType();
  inline  ::capnp::Text::Builder getContentType();
  inline void setContentType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initContentType(unsigned int size);
  inline void adoptContentType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownContentType();

  inline bool hasContentDisposition();
  inline  ::capnp::Text::Builder getContentDisposition();
  inline void setContentDisposition( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initContentDisposition(unsigned int size);
  inline void adoptContentDisposition(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownContentDisposition();

  inline bool hasContentId();
  inline  ::capnp::Text::Builder getContentId();
  inline void setContentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initContentId(unsigned int size);
  inline void adoptContentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownContentId();

  inline bool hasContent();
  inline  ::capnp::Data::Builder getContent();
  inline void setContent( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initContent(unsigned int size);
  inline void adoptContent(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownContent();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmailAttachment::Pipeline {
public:
  typedef EmailAttachment Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EmailMessage::Reader {
public:
  typedef EmailMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getDate() const;

  inline bool hasFrom() const;
  inline  ::sandstorm::EmailAddress::Reader getFrom() const;

  inline bool hasTo() const;
  inline  ::capnp::List< ::sandstorm::EmailAddress>::Reader getTo() const;

  inline bool hasCc() const;
  inline  ::capnp::List< ::sandstorm::EmailAddress>::Reader getCc() const;

  inline bool hasBcc() const;
  inline  ::capnp::List< ::sandstorm::EmailAddress>::Reader getBcc() const;

  inline bool hasReplyTo() const;
  inline  ::sandstorm::EmailAddress::Reader getReplyTo() const;

  inline bool hasMessageId() const;
  inline  ::capnp::Text::Reader getMessageId() const;

  inline bool hasReferences() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getReferences() const;

  inline bool hasInReplyTo() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getInReplyTo() const;

  inline bool hasSubject() const;
  inline  ::capnp::Text::Reader getSubject() const;

  inline bool hasText() const;
  inline  ::capnp::Text::Reader getText() const;

  inline bool hasHtml() const;
  inline  ::capnp::Text::Reader getHtml() const;

  inline bool hasAttachments() const;
  inline  ::capnp::List< ::sandstorm::EmailAttachment>::Reader getAttachments() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmailMessage::Builder {
public:
  typedef EmailMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getDate();
  inline void setDate( ::int64_t value);

  inline bool hasFrom();
  inline  ::sandstorm::EmailAddress::Builder getFrom();
  inline void setFrom( ::sandstorm::EmailAddress::Reader value);
  inline  ::sandstorm::EmailAddress::Builder initFrom();
  inline void adoptFrom(::capnp::Orphan< ::sandstorm::EmailAddress>&& value);
  inline ::capnp::Orphan< ::sandstorm::EmailAddress> disownFrom();

  inline bool hasTo();
  inline  ::capnp::List< ::sandstorm::EmailAddress>::Builder getTo();
  inline void setTo( ::capnp::List< ::sandstorm::EmailAddress>::Reader value);
  inline  ::capnp::List< ::sandstorm::EmailAddress>::Builder initTo(unsigned int size);
  inline void adoptTo(::capnp::Orphan< ::capnp::List< ::sandstorm::EmailAddress>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::EmailAddress>> disownTo();

  inline bool hasCc();
  inline  ::capnp::List< ::sandstorm::EmailAddress>::Builder getCc();
  inline void setCc( ::capnp::List< ::sandstorm::EmailAddress>::Reader value);
  inline  ::capnp::List< ::sandstorm::EmailAddress>::Builder initCc(unsigned int size);
  inline void adoptCc(::capnp::Orphan< ::capnp::List< ::sandstorm::EmailAddress>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::EmailAddress>> disownCc();

  inline bool hasBcc();
  inline  ::capnp::List< ::sandstorm::EmailAddress>::Builder getBcc();
  inline void setBcc( ::capnp::List< ::sandstorm::EmailAddress>::Reader value);
  inline  ::capnp::List< ::sandstorm::EmailAddress>::Builder initBcc(unsigned int size);
  inline void adoptBcc(::capnp::Orphan< ::capnp::List< ::sandstorm::EmailAddress>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::EmailAddress>> disownBcc();

  inline bool hasReplyTo();
  inline  ::sandstorm::EmailAddress::Builder getReplyTo();
  inline void setReplyTo( ::sandstorm::EmailAddress::Reader value);
  inline  ::sandstorm::EmailAddress::Builder initReplyTo();
  inline void adoptReplyTo(::capnp::Orphan< ::sandstorm::EmailAddress>&& value);
  inline ::capnp::Orphan< ::sandstorm::EmailAddress> disownReplyTo();

  inline bool hasMessageId();
  inline  ::capnp::Text::Builder getMessageId();
  inline void setMessageId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessageId(unsigned int size);
  inline void adoptMessageId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessageId();

  inline bool hasReferences();
  inline  ::capnp::List< ::capnp::Text>::Builder getReferences();
  inline void setReferences( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setReferences(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initReferences(unsigned int size);
  inline void adoptReferences(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownReferences();

  inline bool hasInReplyTo();
  inline  ::capnp::List< ::capnp::Text>::Builder getInReplyTo();
  inline void setInReplyTo( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setInReplyTo(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initInReplyTo(unsigned int size);
  inline void adoptInReplyTo(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownInReplyTo();

  inline bool hasSubject();
  inline  ::capnp::Text::Builder getSubject();
  inline void setSubject( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSubject(unsigned int size);
  inline void adoptSubject(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSubject();

  inline bool hasText();
  inline  ::capnp::Text::Builder getText();
  inline void setText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initText(unsigned int size);
  inline void adoptText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownText();

  inline bool hasHtml();
  inline  ::capnp::Text::Builder getHtml();
  inline void setHtml( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHtml(unsigned int size);
  inline void adoptHtml(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHtml();

  inline bool hasAttachments();
  inline  ::capnp::List< ::sandstorm::EmailAttachment>::Builder getAttachments();
  inline void setAttachments( ::capnp::List< ::sandstorm::EmailAttachment>::Reader value);
  inline  ::capnp::List< ::sandstorm::EmailAttachment>::Builder initAttachments(unsigned int size);
  inline void adoptAttachments(::capnp::Orphan< ::capnp::List< ::sandstorm::EmailAttachment>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::EmailAttachment>> disownAttachments();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmailMessage::Pipeline {
public:
  typedef EmailMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::EmailAddress::Pipeline getFrom();
  inline  ::sandstorm::EmailAddress::Pipeline getReplyTo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class EmailSendPort::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef EmailSendPort Calls;
  typedef EmailSendPort Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::EmailSendPort::SendParams,  ::sandstorm::EmailSendPort::SendResults> sendRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::EmailSendPort::HintAddressParams,  ::sandstorm::EmailSendPort::HintAddressResults> hintAddressRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class EmailSendPort::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef EmailSendPort Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::EmailSendPort::SendParams SendParams;
  typedef  ::sandstorm::EmailSendPort::SendResults SendResults;
  typedef ::capnp::CallContext<SendParams, SendResults> SendContext;
  virtual ::kj::Promise<void> send(SendContext context);
  typedef  ::sandstorm::EmailSendPort::HintAddressParams HintAddressParams;
  typedef  ::sandstorm::EmailSendPort::HintAddressResults HintAddressResults;
  typedef ::capnp::CallContext<HintAddressParams, HintAddressResults> HintAddressContext;
  virtual ::kj::Promise<void> hintAddress(HintAddressContext context);

  inline  ::sandstorm::EmailSendPort::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::EmailSendPort>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class EmailSendPort::PowerboxTag::Reader {
public:
  typedef PowerboxTag Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasFromHint() const;
  inline  ::sandstorm::EmailAddress::Reader getFromHint() const;

  inline bool hasListIdHint() const;
  inline  ::capnp::Text::Reader getListIdHint() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmailSendPort::PowerboxTag::Builder {
public:
  typedef PowerboxTag Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFromHint();
  inline  ::sandstorm::EmailAddress::Builder getFromHint();
  inline void setFromHint( ::sandstorm::EmailAddress::Reader value);
  inline  ::sandstorm::EmailAddress::Builder initFromHint();
  inline void adoptFromHint(::capnp::Orphan< ::sandstorm::EmailAddress>&& value);
  inline ::capnp::Orphan< ::sandstorm::EmailAddress> disownFromHint();

  inline bool hasListIdHint();
  inline  ::capnp::Text::Builder getListIdHint();
  inline void setListIdHint( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initListIdHint(unsigned int size);
  inline void adoptListIdHint(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownListIdHint();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmailSendPort::PowerboxTag::Pipeline {
public:
  typedef PowerboxTag Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::EmailAddress::Pipeline getFromHint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EmailSendPort::SendParams::Reader {
public:
  typedef SendParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasEmail() const;
  inline  ::sandstorm::EmailMessage::Reader getEmail() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmailSendPort::SendParams::Builder {
public:
  typedef SendParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEmail();
  inline  ::sandstorm::EmailMessage::Builder getEmail();
  inline void setEmail( ::sandstorm::EmailMessage::Reader value);
  inline  ::sandstorm::EmailMessage::Builder initEmail();
  inline void adoptEmail(::capnp::Orphan< ::sandstorm::EmailMessage>&& value);
  inline ::capnp::Orphan< ::sandstorm::EmailMessage> disownEmail();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmailSendPort::SendParams::Pipeline {
public:
  typedef SendParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::EmailMessage::Pipeline getEmail();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EmailSendPort::SendResults::Reader {
public:
  typedef SendResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmailSendPort::SendResults::Builder {
public:
  typedef SendResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmailSendPort::SendResults::Pipeline {
public:
  typedef SendResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EmailSendPort::HintAddressParams::Reader {
public:
  typedef HintAddressParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAddress() const;
  inline  ::sandstorm::EmailAddress::Reader getAddress() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmailSendPort::HintAddressParams::Builder {
public:
  typedef HintAddressParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAddress();
  inline  ::sandstorm::EmailAddress::Builder getAddress();
  inline void setAddress( ::sandstorm::EmailAddress::Reader value);
  inline  ::sandstorm::EmailAddress::Builder initAddress();
  inline void adoptAddress(::capnp::Orphan< ::sandstorm::EmailAddress>&& value);
  inline ::capnp::Orphan< ::sandstorm::EmailAddress> disownAddress();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmailSendPort::HintAddressParams::Pipeline {
public:
  typedef HintAddressParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::EmailAddress::Pipeline getAddress();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EmailSendPort::HintAddressResults::Reader {
public:
  typedef HintAddressResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmailSendPort::HintAddressResults::Builder {
public:
  typedef HintAddressResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmailSendPort::HintAddressResults::Pipeline {
public:
  typedef HintAddressResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class VerifiedEmail::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef VerifiedEmail Calls;
  typedef VerifiedEmail Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);


protected:
  Client() = default;
};

class VerifiedEmail::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef VerifiedEmail Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:

  inline  ::sandstorm::VerifiedEmail::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::VerifiedEmail>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class VerifiedEmail::PowerboxTag::Reader {
public:
  typedef PowerboxTag Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasVerifierId() const;
  inline  ::capnp::Data::Reader getVerifierId() const;

  inline bool hasAddress() const;
  inline  ::capnp::Text::Reader getAddress() const;

  inline bool hasDomain() const;
  inline  ::capnp::Text::Reader getDomain() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VerifiedEmail::PowerboxTag::Builder {
public:
  typedef PowerboxTag Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasVerifierId();
  inline  ::capnp::Data::Builder getVerifierId();
  inline void setVerifierId( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initVerifierId(unsigned int size);
  inline void adoptVerifierId(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownVerifierId();

  inline bool hasAddress();
  inline  ::capnp::Text::Builder getAddress();
  inline void setAddress( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAddress(unsigned int size);
  inline void adoptAddress(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAddress();

  inline bool hasDomain();
  inline  ::capnp::Text::Builder getDomain();
  inline void setDomain( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDomain(unsigned int size);
  inline void adoptDomain(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDomain();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VerifiedEmail::PowerboxTag::Pipeline {
public:
  typedef PowerboxTag Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class VerifiedEmailSendPort::Client
    : public virtual ::capnp::Capability::Client,
      public virtual  ::sandstorm::VerifiedEmail::Client,
      public virtual  ::sandstorm::EmailSendPort::Client {
public:
  typedef VerifiedEmailSendPort Calls;
  typedef VerifiedEmailSendPort Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);


protected:
  Client() = default;
};

class VerifiedEmailSendPort::Server
    : public virtual ::capnp::Capability::Server,
      public virtual  ::sandstorm::VerifiedEmail::Server,
      public virtual  ::sandstorm::EmailSendPort::Server {
public:
  typedef VerifiedEmailSendPort Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:

  inline  ::sandstorm::VerifiedEmailSendPort::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::VerifiedEmailSendPort>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class VerifiedEmailSendPort::PowerboxTag::Reader {
public:
  typedef PowerboxTag Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasVerification() const;
  inline  ::sandstorm::VerifiedEmail::PowerboxTag::Reader getVerification() const;

  inline bool hasPort() const;
  inline  ::sandstorm::EmailSendPort::PowerboxTag::Reader getPort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VerifiedEmailSendPort::PowerboxTag::Builder {
public:
  typedef PowerboxTag Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasVerification();
  inline  ::sandstorm::VerifiedEmail::PowerboxTag::Builder getVerification();
  inline void setVerification( ::sandstorm::VerifiedEmail::PowerboxTag::Reader value);
  inline  ::sandstorm::VerifiedEmail::PowerboxTag::Builder initVerification();
  inline void adoptVerification(::capnp::Orphan< ::sandstorm::VerifiedEmail::PowerboxTag>&& value);
  inline ::capnp::Orphan< ::sandstorm::VerifiedEmail::PowerboxTag> disownVerification();

  inline bool hasPort();
  inline  ::sandstorm::EmailSendPort::PowerboxTag::Builder getPort();
  inline void setPort( ::sandstorm::EmailSendPort::PowerboxTag::Reader value);
  inline  ::sandstorm::EmailSendPort::PowerboxTag::Builder initPort();
  inline void adoptPort(::capnp::Orphan< ::sandstorm::EmailSendPort::PowerboxTag>&& value);
  inline ::capnp::Orphan< ::sandstorm::EmailSendPort::PowerboxTag> disownPort();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VerifiedEmailSendPort::PowerboxTag::Pipeline {
public:
  typedef PowerboxTag Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::VerifiedEmail::PowerboxTag::Pipeline getVerification();
  inline  ::sandstorm::EmailSendPort::PowerboxTag::Pipeline getPort();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class EmailVerifier::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef EmailVerifier Calls;
  typedef EmailVerifier Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::EmailVerifier::GetIdParams,  ::sandstorm::EmailVerifier::GetIdResults> getIdRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::EmailVerifier::VerifyEmailParams,  ::sandstorm::EmailVerifier::VerifyEmailResults> verifyEmailRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class EmailVerifier::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef EmailVerifier Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::EmailVerifier::GetIdParams GetIdParams;
  typedef  ::sandstorm::EmailVerifier::GetIdResults GetIdResults;
  typedef ::capnp::CallContext<GetIdParams, GetIdResults> GetIdContext;
  virtual ::kj::Promise<void> getId(GetIdContext context);
  typedef  ::sandstorm::EmailVerifier::VerifyEmailParams VerifyEmailParams;
  typedef  ::sandstorm::EmailVerifier::VerifyEmailResults VerifyEmailResults;
  typedef ::capnp::CallContext<VerifyEmailParams, VerifyEmailResults> VerifyEmailContext;
  virtual ::kj::Promise<void> verifyEmail(VerifyEmailContext context);

  inline  ::sandstorm::EmailVerifier::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::EmailVerifier>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class EmailVerifier::GetIdParams::Reader {
public:
  typedef GetIdParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmailVerifier::GetIdParams::Builder {
public:
  typedef GetIdParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmailVerifier::GetIdParams::Pipeline {
public:
  typedef GetIdParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EmailVerifier::GetIdResults::Reader {
public:
  typedef GetIdResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Data::Reader getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmailVerifier::GetIdResults::Builder {
public:
  typedef GetIdResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Data::Builder getId();
  inline void setId( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmailVerifier::GetIdResults::Pipeline {
public:
  typedef GetIdResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EmailVerifier::VerifyEmailParams::Reader {
public:
  typedef VerifyEmailParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasTabId() const;
  inline  ::capnp::Data::Reader getTabId() const;

  inline bool hasVerification() const;
#if !CAPNP_LITE
  inline  ::sandstorm::VerifiedEmail::Client getVerification() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmailVerifier::VerifyEmailParams::Builder {
public:
  typedef VerifyEmailParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTabId();
  inline  ::capnp::Data::Builder getTabId();
  inline void setTabId( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initTabId(unsigned int size);
  inline void adoptTabId(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownTabId();

  inline bool hasVerification();
#if !CAPNP_LITE
  inline  ::sandstorm::VerifiedEmail::Client getVerification();
  inline void setVerification( ::sandstorm::VerifiedEmail::Client&& value);
  inline void setVerification( ::sandstorm::VerifiedEmail::Client& value);
  inline void adoptVerification(::capnp::Orphan< ::sandstorm::VerifiedEmail>&& value);
  inline ::capnp::Orphan< ::sandstorm::VerifiedEmail> disownVerification();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmailVerifier::VerifyEmailParams::Pipeline {
public:
  typedef VerifyEmailParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::VerifiedEmail::Client getVerification();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EmailVerifier::VerifyEmailResults::Reader {
public:
  typedef VerifyEmailResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAddress() const;
  inline  ::capnp::Text::Reader getAddress() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmailVerifier::VerifyEmailResults::Builder {
public:
  typedef VerifyEmailResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAddress();
  inline  ::capnp::Text::Builder getAddress();
  inline void setAddress( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAddress(unsigned int size);
  inline void adoptAddress(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAddress();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmailVerifier::VerifyEmailResults::Pipeline {
public:
  typedef VerifyEmailResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class EmailAgent::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef EmailAgent Calls;
  typedef EmailAgent Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::EmailAgent::SendParams,  ::sandstorm::EmailAgent::SendResults> sendRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::EmailAgent::AddReceiverParams,  ::sandstorm::EmailAgent::AddReceiverResults> addReceiverRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class EmailAgent::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef EmailAgent Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::EmailAgent::SendParams SendParams;
  typedef  ::sandstorm::EmailAgent::SendResults SendResults;
  typedef ::capnp::CallContext<SendParams, SendResults> SendContext;
  virtual ::kj::Promise<void> send(SendContext context);
  typedef  ::sandstorm::EmailAgent::AddReceiverParams AddReceiverParams;
  typedef  ::sandstorm::EmailAgent::AddReceiverResults AddReceiverResults;
  typedef ::capnp::CallContext<AddReceiverParams, AddReceiverResults> AddReceiverContext;
  virtual ::kj::Promise<void> addReceiver(AddReceiverContext context);

  inline  ::sandstorm::EmailAgent::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::EmailAgent>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class EmailAgent::SendParams::Reader {
public:
  typedef SendParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasEmail() const;
  inline  ::sandstorm::EmailMessage::Reader getEmail() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmailAgent::SendParams::Builder {
public:
  typedef SendParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEmail();
  inline  ::sandstorm::EmailMessage::Builder getEmail();
  inline void setEmail( ::sandstorm::EmailMessage::Reader value);
  inline  ::sandstorm::EmailMessage::Builder initEmail();
  inline void adoptEmail(::capnp::Orphan< ::sandstorm::EmailMessage>&& value);
  inline ::capnp::Orphan< ::sandstorm::EmailMessage> disownEmail();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmailAgent::SendParams::Pipeline {
public:
  typedef SendParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::EmailMessage::Pipeline getEmail();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EmailAgent::SendResults::Reader {
public:
  typedef SendResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmailAgent::SendResults::Builder {
public:
  typedef SendResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmailAgent::SendResults::Pipeline {
public:
  typedef SendResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EmailAgent::AddReceiverParams::Reader {
public:
  typedef AddReceiverParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPort() const;
#if !CAPNP_LITE
  inline  ::sandstorm::EmailSendPort::Client getPort() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmailAgent::AddReceiverParams::Builder {
public:
  typedef AddReceiverParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPort();
#if !CAPNP_LITE
  inline  ::sandstorm::EmailSendPort::Client getPort();
  inline void setPort( ::sandstorm::EmailSendPort::Client&& value);
  inline void setPort( ::sandstorm::EmailSendPort::Client& value);
  inline void adoptPort(::capnp::Orphan< ::sandstorm::EmailSendPort>&& value);
  inline ::capnp::Orphan< ::sandstorm::EmailSendPort> disownPort();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmailAgent::AddReceiverParams::Pipeline {
public:
  typedef AddReceiverParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::EmailSendPort::Client getPort();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EmailAgent::AddReceiverResults::Reader {
public:
  typedef AddReceiverResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasHandle() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Handle::Client getHandle() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmailAgent::AddReceiverResults::Builder {
public:
  typedef AddReceiverResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHandle();
#if !CAPNP_LITE
  inline  ::sandstorm::Handle::Client getHandle();
  inline void setHandle( ::sandstorm::Handle::Client&& value);
  inline void setHandle( ::sandstorm::Handle::Client& value);
  inline void adoptHandle(::capnp::Orphan< ::sandstorm::Handle>&& value);
  inline ::capnp::Orphan< ::sandstorm::Handle> disownHandle();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmailAgent::AddReceiverResults::Pipeline {
public:
  typedef AddReceiverResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Handle::Client getHandle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool EmailAddress::Reader::hasAddress() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EmailAddress::Builder::hasAddress() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EmailAddress::Reader::getAddress() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EmailAddress::Builder::getAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void EmailAddress::Builder::setAddress( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EmailAddress::Builder::initAddress(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void EmailAddress::Builder::adoptAddress(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EmailAddress::Builder::disownAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool EmailAddress::Reader::hasName() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool EmailAddress::Builder::hasName() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EmailAddress::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EmailAddress::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void EmailAddress::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EmailAddress::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void EmailAddress::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EmailAddress::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool EmailAttachment::Reader::hasContentType() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EmailAttachment::Builder::hasContentType() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EmailAttachment::Reader::getContentType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EmailAttachment::Builder::getContentType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void EmailAttachment::Builder::setContentType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EmailAttachment::Builder::initContentType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void EmailAttachment::Builder::adoptContentType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EmailAttachment::Builder::disownContentType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool EmailAttachment::Reader::hasContentDisposition() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool EmailAttachment::Builder::hasContentDisposition() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EmailAttachment::Reader::getContentDisposition() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EmailAttachment::Builder::getContentDisposition() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void EmailAttachment::Builder::setContentDisposition( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EmailAttachment::Builder::initContentDisposition(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void EmailAttachment::Builder::adoptContentDisposition(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EmailAttachment::Builder::disownContentDisposition() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool EmailAttachment::Reader::hasContentId() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool EmailAttachment::Builder::hasContentId() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EmailAttachment::Reader::getContentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EmailAttachment::Builder::getContentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void EmailAttachment::Builder::setContentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EmailAttachment::Builder::initContentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void EmailAttachment::Builder::adoptContentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EmailAttachment::Builder::disownContentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool EmailAttachment::Reader::hasContent() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool EmailAttachment::Builder::hasContent() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader EmailAttachment::Reader::getContent() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder EmailAttachment::Builder::getContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void EmailAttachment::Builder::setContent( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder EmailAttachment::Builder::initContent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void EmailAttachment::Builder::adoptContent(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> EmailAttachment::Builder::disownContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::int64_t EmailMessage::Reader::getDate() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t EmailMessage::Builder::getDate() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void EmailMessage::Builder::setDate( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool EmailMessage::Reader::hasFrom() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EmailMessage::Builder::hasFrom() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::EmailAddress::Reader EmailMessage::Reader::getFrom() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::EmailAddress::Builder EmailMessage::Builder::getFrom() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::EmailAddress::Pipeline EmailMessage::Pipeline::getFrom() {
  return  ::sandstorm::EmailAddress::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void EmailMessage::Builder::setFrom( ::sandstorm::EmailAddress::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::EmailAddress::Builder EmailMessage::Builder::initFrom() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void EmailMessage::Builder::adoptFrom(
    ::capnp::Orphan< ::sandstorm::EmailAddress>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::EmailAddress> EmailMessage::Builder::disownFrom() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool EmailMessage::Reader::hasTo() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool EmailMessage::Builder::hasTo() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::EmailAddress>::Reader EmailMessage::Reader::getTo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::EmailAddress>::Builder EmailMessage::Builder::getTo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void EmailMessage::Builder::setTo( ::capnp::List< ::sandstorm::EmailAddress>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::EmailAddress>::Builder EmailMessage::Builder::initTo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void EmailMessage::Builder::adoptTo(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::EmailAddress>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::EmailAddress>> EmailMessage::Builder::disownTo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool EmailMessage::Reader::hasCc() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool EmailMessage::Builder::hasCc() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::EmailAddress>::Reader EmailMessage::Reader::getCc() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::EmailAddress>::Builder EmailMessage::Builder::getCc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void EmailMessage::Builder::setCc( ::capnp::List< ::sandstorm::EmailAddress>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::EmailAddress>::Builder EmailMessage::Builder::initCc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void EmailMessage::Builder::adoptCc(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::EmailAddress>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::EmailAddress>> EmailMessage::Builder::disownCc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool EmailMessage::Reader::hasBcc() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool EmailMessage::Builder::hasBcc() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::EmailAddress>::Reader EmailMessage::Reader::getBcc() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::EmailAddress>::Builder EmailMessage::Builder::getBcc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void EmailMessage::Builder::setBcc( ::capnp::List< ::sandstorm::EmailAddress>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::EmailAddress>::Builder EmailMessage::Builder::initBcc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void EmailMessage::Builder::adoptBcc(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::EmailAddress>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::EmailAddress>> EmailMessage::Builder::disownBcc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAddress>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool EmailMessage::Reader::hasReplyTo() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool EmailMessage::Builder::hasReplyTo() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::EmailAddress::Reader EmailMessage::Reader::getReplyTo() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::sandstorm::EmailAddress::Builder EmailMessage::Builder::getReplyTo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::EmailAddress::Pipeline EmailMessage::Pipeline::getReplyTo() {
  return  ::sandstorm::EmailAddress::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void EmailMessage::Builder::setReplyTo( ::sandstorm::EmailAddress::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::EmailAddress::Builder EmailMessage::Builder::initReplyTo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void EmailMessage::Builder::adoptReplyTo(
    ::capnp::Orphan< ::sandstorm::EmailAddress>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::EmailAddress> EmailMessage::Builder::disownReplyTo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool EmailMessage::Reader::hasMessageId() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool EmailMessage::Builder::hasMessageId() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EmailMessage::Reader::getMessageId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EmailMessage::Builder::getMessageId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void EmailMessage::Builder::setMessageId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EmailMessage::Builder::initMessageId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void EmailMessage::Builder::adoptMessageId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EmailMessage::Builder::disownMessageId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool EmailMessage::Reader::hasReferences() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool EmailMessage::Builder::hasReferences() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader EmailMessage::Reader::getReferences() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder EmailMessage::Builder::getReferences() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void EmailMessage::Builder::setReferences( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void EmailMessage::Builder::setReferences(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder EmailMessage::Builder::initReferences(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void EmailMessage::Builder::adoptReferences(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> EmailMessage::Builder::disownReferences() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool EmailMessage::Reader::hasInReplyTo() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool EmailMessage::Builder::hasInReplyTo() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader EmailMessage::Reader::getInReplyTo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder EmailMessage::Builder::getInReplyTo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void EmailMessage::Builder::setInReplyTo( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline void EmailMessage::Builder::setInReplyTo(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder EmailMessage::Builder::initInReplyTo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void EmailMessage::Builder::adoptInReplyTo(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> EmailMessage::Builder::disownInReplyTo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool EmailMessage::Reader::hasSubject() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool EmailMessage::Builder::hasSubject() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EmailMessage::Reader::getSubject() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EmailMessage::Builder::getSubject() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void EmailMessage::Builder::setSubject( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EmailMessage::Builder::initSubject(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void EmailMessage::Builder::adoptSubject(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EmailMessage::Builder::disownSubject() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool EmailMessage::Reader::hasText() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool EmailMessage::Builder::hasText() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EmailMessage::Reader::getText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EmailMessage::Builder::getText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void EmailMessage::Builder::setText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EmailMessage::Builder::initText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void EmailMessage::Builder::adoptText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EmailMessage::Builder::disownText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool EmailMessage::Reader::hasHtml() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool EmailMessage::Builder::hasHtml() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EmailMessage::Reader::getHtml() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EmailMessage::Builder::getHtml() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
inline void EmailMessage::Builder::setHtml( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EmailMessage::Builder::initHtml(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS), size);
}
inline void EmailMessage::Builder::adoptHtml(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EmailMessage::Builder::disownHtml() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline bool EmailMessage::Reader::hasAttachments() const {
  return !_reader.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline bool EmailMessage::Builder::hasAttachments() {
  return !_builder.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::EmailAttachment>::Reader EmailMessage::Reader::getAttachments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAttachment>>::get(
      _reader.getPointerField(11 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::EmailAttachment>::Builder EmailMessage::Builder::getAttachments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAttachment>>::get(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}
inline void EmailMessage::Builder::setAttachments( ::capnp::List< ::sandstorm::EmailAttachment>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAttachment>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::EmailAttachment>::Builder EmailMessage::Builder::initAttachments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAttachment>>::init(
      _builder.getPointerField(11 * ::capnp::POINTERS), size);
}
inline void EmailMessage::Builder::adoptAttachments(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::EmailAttachment>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAttachment>>::adopt(
      _builder.getPointerField(11 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::EmailAttachment>> EmailMessage::Builder::disownAttachments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::EmailAttachment>>::disown(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}

#if !CAPNP_LITE
inline EmailSendPort::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline EmailSendPort::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline EmailSendPort::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline EmailSendPort::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline EmailSendPort::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::EmailSendPort::Client& EmailSendPort::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::EmailSendPort::Client& EmailSendPort::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool EmailSendPort::PowerboxTag::Reader::hasFromHint() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EmailSendPort::PowerboxTag::Builder::hasFromHint() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::EmailAddress::Reader EmailSendPort::PowerboxTag::Reader::getFromHint() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::EmailAddress::Builder EmailSendPort::PowerboxTag::Builder::getFromHint() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::EmailAddress::Pipeline EmailSendPort::PowerboxTag::Pipeline::getFromHint() {
  return  ::sandstorm::EmailAddress::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void EmailSendPort::PowerboxTag::Builder::setFromHint( ::sandstorm::EmailAddress::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::EmailAddress::Builder EmailSendPort::PowerboxTag::Builder::initFromHint() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void EmailSendPort::PowerboxTag::Builder::adoptFromHint(
    ::capnp::Orphan< ::sandstorm::EmailAddress>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::EmailAddress> EmailSendPort::PowerboxTag::Builder::disownFromHint() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool EmailSendPort::PowerboxTag::Reader::hasListIdHint() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool EmailSendPort::PowerboxTag::Builder::hasListIdHint() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EmailSendPort::PowerboxTag::Reader::getListIdHint() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EmailSendPort::PowerboxTag::Builder::getListIdHint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void EmailSendPort::PowerboxTag::Builder::setListIdHint( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EmailSendPort::PowerboxTag::Builder::initListIdHint(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void EmailSendPort::PowerboxTag::Builder::adoptListIdHint(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EmailSendPort::PowerboxTag::Builder::disownListIdHint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool EmailSendPort::SendParams::Reader::hasEmail() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EmailSendPort::SendParams::Builder::hasEmail() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::EmailMessage::Reader EmailSendPort::SendParams::Reader::getEmail() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailMessage>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::EmailMessage::Builder EmailSendPort::SendParams::Builder::getEmail() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailMessage>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::EmailMessage::Pipeline EmailSendPort::SendParams::Pipeline::getEmail() {
  return  ::sandstorm::EmailMessage::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void EmailSendPort::SendParams::Builder::setEmail( ::sandstorm::EmailMessage::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailMessage>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::EmailMessage::Builder EmailSendPort::SendParams::Builder::initEmail() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailMessage>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void EmailSendPort::SendParams::Builder::adoptEmail(
    ::capnp::Orphan< ::sandstorm::EmailMessage>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailMessage>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::EmailMessage> EmailSendPort::SendParams::Builder::disownEmail() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailMessage>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool EmailSendPort::HintAddressParams::Reader::hasAddress() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EmailSendPort::HintAddressParams::Builder::hasAddress() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::EmailAddress::Reader EmailSendPort::HintAddressParams::Reader::getAddress() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::EmailAddress::Builder EmailSendPort::HintAddressParams::Builder::getAddress() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::EmailAddress::Pipeline EmailSendPort::HintAddressParams::Pipeline::getAddress() {
  return  ::sandstorm::EmailAddress::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void EmailSendPort::HintAddressParams::Builder::setAddress( ::sandstorm::EmailAddress::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::EmailAddress::Builder EmailSendPort::HintAddressParams::Builder::initAddress() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void EmailSendPort::HintAddressParams::Builder::adoptAddress(
    ::capnp::Orphan< ::sandstorm::EmailAddress>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::EmailAddress> EmailSendPort::HintAddressParams::Builder::disownAddress() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailAddress>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

#if !CAPNP_LITE
inline VerifiedEmail::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline VerifiedEmail::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline VerifiedEmail::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline VerifiedEmail::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline VerifiedEmail::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::VerifiedEmail::Client& VerifiedEmail::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::VerifiedEmail::Client& VerifiedEmail::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool VerifiedEmail::PowerboxTag::Reader::hasVerifierId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool VerifiedEmail::PowerboxTag::Builder::hasVerifierId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader VerifiedEmail::PowerboxTag::Reader::getVerifierId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder VerifiedEmail::PowerboxTag::Builder::getVerifierId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void VerifiedEmail::PowerboxTag::Builder::setVerifierId( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder VerifiedEmail::PowerboxTag::Builder::initVerifierId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void VerifiedEmail::PowerboxTag::Builder::adoptVerifierId(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> VerifiedEmail::PowerboxTag::Builder::disownVerifierId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool VerifiedEmail::PowerboxTag::Reader::hasAddress() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool VerifiedEmail::PowerboxTag::Builder::hasAddress() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader VerifiedEmail::PowerboxTag::Reader::getAddress() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder VerifiedEmail::PowerboxTag::Builder::getAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void VerifiedEmail::PowerboxTag::Builder::setAddress( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder VerifiedEmail::PowerboxTag::Builder::initAddress(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void VerifiedEmail::PowerboxTag::Builder::adoptAddress(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> VerifiedEmail::PowerboxTag::Builder::disownAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool VerifiedEmail::PowerboxTag::Reader::hasDomain() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool VerifiedEmail::PowerboxTag::Builder::hasDomain() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader VerifiedEmail::PowerboxTag::Reader::getDomain() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder VerifiedEmail::PowerboxTag::Builder::getDomain() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void VerifiedEmail::PowerboxTag::Builder::setDomain( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder VerifiedEmail::PowerboxTag::Builder::initDomain(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void VerifiedEmail::PowerboxTag::Builder::adoptDomain(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> VerifiedEmail::PowerboxTag::Builder::disownDomain() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

#if !CAPNP_LITE
inline VerifiedEmailSendPort::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline VerifiedEmailSendPort::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline VerifiedEmailSendPort::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline VerifiedEmailSendPort::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline VerifiedEmailSendPort::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::VerifiedEmailSendPort::Client& VerifiedEmailSendPort::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::VerifiedEmailSendPort::Client& VerifiedEmailSendPort::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool VerifiedEmailSendPort::PowerboxTag::Reader::hasVerification() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool VerifiedEmailSendPort::PowerboxTag::Builder::hasVerification() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::VerifiedEmail::PowerboxTag::Reader VerifiedEmailSendPort::PowerboxTag::Reader::getVerification() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::VerifiedEmail::PowerboxTag>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::VerifiedEmail::PowerboxTag::Builder VerifiedEmailSendPort::PowerboxTag::Builder::getVerification() {
  return ::capnp::_::PointerHelpers< ::sandstorm::VerifiedEmail::PowerboxTag>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::VerifiedEmail::PowerboxTag::Pipeline VerifiedEmailSendPort::PowerboxTag::Pipeline::getVerification() {
  return  ::sandstorm::VerifiedEmail::PowerboxTag::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void VerifiedEmailSendPort::PowerboxTag::Builder::setVerification( ::sandstorm::VerifiedEmail::PowerboxTag::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::VerifiedEmail::PowerboxTag>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::VerifiedEmail::PowerboxTag::Builder VerifiedEmailSendPort::PowerboxTag::Builder::initVerification() {
  return ::capnp::_::PointerHelpers< ::sandstorm::VerifiedEmail::PowerboxTag>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void VerifiedEmailSendPort::PowerboxTag::Builder::adoptVerification(
    ::capnp::Orphan< ::sandstorm::VerifiedEmail::PowerboxTag>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::VerifiedEmail::PowerboxTag>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::VerifiedEmail::PowerboxTag> VerifiedEmailSendPort::PowerboxTag::Builder::disownVerification() {
  return ::capnp::_::PointerHelpers< ::sandstorm::VerifiedEmail::PowerboxTag>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool VerifiedEmailSendPort::PowerboxTag::Reader::hasPort() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool VerifiedEmailSendPort::PowerboxTag::Builder::hasPort() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::EmailSendPort::PowerboxTag::Reader VerifiedEmailSendPort::PowerboxTag::Reader::getPort() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailSendPort::PowerboxTag>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::EmailSendPort::PowerboxTag::Builder VerifiedEmailSendPort::PowerboxTag::Builder::getPort() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailSendPort::PowerboxTag>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::EmailSendPort::PowerboxTag::Pipeline VerifiedEmailSendPort::PowerboxTag::Pipeline::getPort() {
  return  ::sandstorm::EmailSendPort::PowerboxTag::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void VerifiedEmailSendPort::PowerboxTag::Builder::setPort( ::sandstorm::EmailSendPort::PowerboxTag::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailSendPort::PowerboxTag>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::EmailSendPort::PowerboxTag::Builder VerifiedEmailSendPort::PowerboxTag::Builder::initPort() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailSendPort::PowerboxTag>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void VerifiedEmailSendPort::PowerboxTag::Builder::adoptPort(
    ::capnp::Orphan< ::sandstorm::EmailSendPort::PowerboxTag>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailSendPort::PowerboxTag>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::EmailSendPort::PowerboxTag> VerifiedEmailSendPort::PowerboxTag::Builder::disownPort() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailSendPort::PowerboxTag>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

#if !CAPNP_LITE
inline EmailVerifier::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline EmailVerifier::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline EmailVerifier::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline EmailVerifier::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline EmailVerifier::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::EmailVerifier::Client& EmailVerifier::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::EmailVerifier::Client& EmailVerifier::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool EmailVerifier::GetIdResults::Reader::hasId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EmailVerifier::GetIdResults::Builder::hasId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader EmailVerifier::GetIdResults::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder EmailVerifier::GetIdResults::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void EmailVerifier::GetIdResults::Builder::setId( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder EmailVerifier::GetIdResults::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void EmailVerifier::GetIdResults::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> EmailVerifier::GetIdResults::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool EmailVerifier::VerifyEmailParams::Reader::hasTabId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EmailVerifier::VerifyEmailParams::Builder::hasTabId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader EmailVerifier::VerifyEmailParams::Reader::getTabId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder EmailVerifier::VerifyEmailParams::Builder::getTabId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void EmailVerifier::VerifyEmailParams::Builder::setTabId( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder EmailVerifier::VerifyEmailParams::Builder::initTabId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void EmailVerifier::VerifyEmailParams::Builder::adoptTabId(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> EmailVerifier::VerifyEmailParams::Builder::disownTabId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool EmailVerifier::VerifyEmailParams::Reader::hasVerification() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool EmailVerifier::VerifyEmailParams::Builder::hasVerification() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::VerifiedEmail::Client EmailVerifier::VerifyEmailParams::Reader::getVerification() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::VerifiedEmail>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::VerifiedEmail::Client EmailVerifier::VerifyEmailParams::Builder::getVerification() {
  return ::capnp::_::PointerHelpers< ::sandstorm::VerifiedEmail>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::VerifiedEmail::Client EmailVerifier::VerifyEmailParams::Pipeline::getVerification() {
  return  ::sandstorm::VerifiedEmail::Client(_typeless.getPointerField(1).asCap());
}
inline void EmailVerifier::VerifyEmailParams::Builder::setVerification( ::sandstorm::VerifiedEmail::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::VerifiedEmail>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(cap));
}
inline void EmailVerifier::VerifyEmailParams::Builder::setVerification( ::sandstorm::VerifiedEmail::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::VerifiedEmail>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), cap);
}
inline void EmailVerifier::VerifyEmailParams::Builder::adoptVerification(
    ::capnp::Orphan< ::sandstorm::VerifiedEmail>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::VerifiedEmail>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::VerifiedEmail> EmailVerifier::VerifyEmailParams::Builder::disownVerification() {
  return ::capnp::_::PointerHelpers< ::sandstorm::VerifiedEmail>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool EmailVerifier::VerifyEmailResults::Reader::hasAddress() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EmailVerifier::VerifyEmailResults::Builder::hasAddress() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EmailVerifier::VerifyEmailResults::Reader::getAddress() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EmailVerifier::VerifyEmailResults::Builder::getAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void EmailVerifier::VerifyEmailResults::Builder::setAddress( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EmailVerifier::VerifyEmailResults::Builder::initAddress(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void EmailVerifier::VerifyEmailResults::Builder::adoptAddress(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EmailVerifier::VerifyEmailResults::Builder::disownAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

#if !CAPNP_LITE
inline EmailAgent::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline EmailAgent::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline EmailAgent::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline EmailAgent::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline EmailAgent::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::EmailAgent::Client& EmailAgent::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::EmailAgent::Client& EmailAgent::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool EmailAgent::SendParams::Reader::hasEmail() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EmailAgent::SendParams::Builder::hasEmail() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::EmailMessage::Reader EmailAgent::SendParams::Reader::getEmail() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailMessage>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::EmailMessage::Builder EmailAgent::SendParams::Builder::getEmail() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailMessage>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::EmailMessage::Pipeline EmailAgent::SendParams::Pipeline::getEmail() {
  return  ::sandstorm::EmailMessage::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void EmailAgent::SendParams::Builder::setEmail( ::sandstorm::EmailMessage::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailMessage>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::EmailMessage::Builder EmailAgent::SendParams::Builder::initEmail() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailMessage>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void EmailAgent::SendParams::Builder::adoptEmail(
    ::capnp::Orphan< ::sandstorm::EmailMessage>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailMessage>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::EmailMessage> EmailAgent::SendParams::Builder::disownEmail() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailMessage>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool EmailAgent::AddReceiverParams::Reader::hasPort() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EmailAgent::AddReceiverParams::Builder::hasPort() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::EmailSendPort::Client EmailAgent::AddReceiverParams::Reader::getPort() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailSendPort>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::EmailSendPort::Client EmailAgent::AddReceiverParams::Builder::getPort() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailSendPort>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::EmailSendPort::Client EmailAgent::AddReceiverParams::Pipeline::getPort() {
  return  ::sandstorm::EmailSendPort::Client(_typeless.getPointerField(0).asCap());
}
inline void EmailAgent::AddReceiverParams::Builder::setPort( ::sandstorm::EmailSendPort::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailSendPort>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void EmailAgent::AddReceiverParams::Builder::setPort( ::sandstorm::EmailSendPort::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailSendPort>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void EmailAgent::AddReceiverParams::Builder::adoptPort(
    ::capnp::Orphan< ::sandstorm::EmailSendPort>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::EmailSendPort>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::EmailSendPort> EmailAgent::AddReceiverParams::Builder::disownPort() {
  return ::capnp::_::PointerHelpers< ::sandstorm::EmailSendPort>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool EmailAgent::AddReceiverResults::Reader::hasHandle() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EmailAgent::AddReceiverResults::Builder::hasHandle() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Handle::Client EmailAgent::AddReceiverResults::Reader::getHandle() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Handle::Client EmailAgent::AddReceiverResults::Builder::getHandle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Handle::Client EmailAgent::AddReceiverResults::Pipeline::getHandle() {
  return  ::sandstorm::Handle::Client(_typeless.getPointerField(0).asCap());
}
inline void EmailAgent::AddReceiverResults::Builder::setHandle( ::sandstorm::Handle::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void EmailAgent::AddReceiverResults::Builder::setHandle( ::sandstorm::Handle::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void EmailAgent::AddReceiverResults::Builder::adoptHandle(
    ::capnp::Orphan< ::sandstorm::Handle>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Handle> EmailAgent::AddReceiverResults::Builder::disownHandle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

}  // namespace

#endif  // CAPNP_INCLUDED_dd10df585a82c6d8_
