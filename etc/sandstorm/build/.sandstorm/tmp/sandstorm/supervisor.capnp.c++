// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: supervisor.capnp

#include "supervisor.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<136> b_9951c12163385530 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     48,  85,  56,  99,  33, 193,  81, 153,
     27,   0,   0,   0,   3,   0,   0,   0,
     64, 176, 199,  50, 109,  93,  32, 199,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
     37,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 135,   2,   0,   0,
    241,   1,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    156, 240, 175, 196,  31, 243, 204, 133,
      1,   0,   0,   0, 114,   0,   0,   0,
     87, 119, 119,  70, 105, 108, 101,  83,
    116,  97, 116, 117, 115,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     34, 178, 238,  29,  73, 253,  25, 186,
     15,  61, 198, 123,  52, 219, 171, 136,
     49,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   1,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     55,  66,  69, 234,  80, 246, 164, 228,
    119,  62,  87, 128,  80,   8, 180, 160,
     29,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   1,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    223, 197, 254, 136, 215, 200, 151, 213,
    112, 110, 205, 105, 250, 224, 126, 203,
      9,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   1,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0, 115,  17, 174,  22, 140, 233, 243,
     75, 154,  47, 210,  27,   7, 118, 220,
    245,   0,   0,   0, 170,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    241,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      5,  14, 251, 180, 234, 183, 143, 192,
      4, 155, 170, 251, 194,   6, 225, 204,
    229,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    233,   0,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    171,  96, 110,  56, 178,  76, 229, 170,
    159,  89,  32, 227, 217,  47, 251, 150,
    221,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
     59, 140, 120, 155,  76,  13,  60, 175,
    167, 239, 210, 171, 193, 191, 231, 128,
    197,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    185,   0,   0,   0,   7,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
     10,  12, 180, 116,  17, 171,  82, 193,
    137, 166,  47, 193,  55,  48,   5, 152,
    173,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    208, 107,  80, 208, 207, 143,  62, 207,
      3,  26,  65,  58, 127, 159, 139, 186,
    153,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,   7,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
     42, 178, 252, 214,  98, 227, 198, 249,
    150, 137,  69, 222, 214,  81,  38, 144,
    133,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  77,  97, 105, 110,  86,
    105, 101, 119,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    107, 101, 101, 112,  65, 108, 105, 118,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 104, 117, 116, 100, 111, 119, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    111,  98, 115, 111, 108, 101, 116, 101,
     71, 101, 116,  71, 114,  97, 105, 110,
     83, 105, 122, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    111,  98, 115, 111, 108, 111, 116, 101,
     71, 101, 116,  71, 114,  97, 105, 110,
     83, 105, 122, 101,  87, 104, 101, 110,
     68, 105, 102, 102, 101, 114, 101, 110,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 115, 116, 111, 114, 101,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 114, 111, 112,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    119,  97, 116,  99, 104,  76, 111, 103,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 121, 110,  99,  83, 116, 111, 114,
     97, 103, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  87, 119, 119,  70, 105,
    108, 101,  72,  97,  99, 107,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_9951c12163385530 = b_9951c12163385530.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9951c12163385530[] = {
  &s_80e7bfc1abd2efa7,
  &s_88abdb347bc63d0f,
  &s_902651d6de458996,
  &s_96fb2fd9e320599f,
  &s_98053037c12fa689,
  &s_a0b4085080573e77,
  &s_aae54cb2386e60ab,
  &s_af3c0d4c9b788c3b,
  &s_ba19fd491deeb222,
  &s_ba8b9f7f3a411a03,
  &s_c08fb7eab4fb0e05,
  &s_c152ab1174b40c0a,
  &s_cb7ee0fa69cd6e70,
  &s_cce106c2fbaa9b04,
  &s_cf3e8fcfd0506bd0,
  &s_d597c8d788fec5df,
  &s_dc76071bd22f9a4b,
  &s_e4a4f650ea454237,
  &s_f3e98c16ae117300,
  &s_f9c6e362d6fcb22a,
};
static const uint16_t m_9951c12163385530[] = {6, 0, 9, 1, 3, 4, 5, 2, 8, 7};
const ::capnp::_::RawSchema s_9951c12163385530 = {
  0x9951c12163385530, b_9951c12163385530.words, 136, d_9951c12163385530, m_9951c12163385530,
  20, 10, nullptr, nullptr, nullptr, { &s_9951c12163385530, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_85ccf31fc4aff09c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    156, 240, 175, 196,  31, 243, 204, 133,
     38,   0,   0,   0,   2,   0,   0,   0,
     48,  85,  56,  99,  33, 193,  81, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  79,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46,  87, 119,
    119,  70, 105, 108, 101,  83, 116,  97,
    116, 117, 115,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 105, 108, 101,   0,   0,   0,   0,
    100, 105, 114, 101,  99, 116, 111, 114,
    121,   0,   0,   0,   0,   0,   0,   0,
    110, 111, 116,  70, 111, 117, 110, 100,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_85ccf31fc4aff09c = b_85ccf31fc4aff09c.words;
#if !CAPNP_LITE
static const uint16_t m_85ccf31fc4aff09c[] = {1, 0, 2};
const ::capnp::_::RawSchema s_85ccf31fc4aff09c = {
  0x85ccf31fc4aff09c, b_85ccf31fc4aff09c.words, 35, nullptr, m_85ccf31fc4aff09c,
  0, 3, nullptr, nullptr, nullptr, { &s_85ccf31fc4aff09c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(WwwFileStatus_85ccf31fc4aff09c, 85ccf31fc4aff09c);
static const ::capnp::_::AlignedData<20> b_ba19fd491deeb222 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     34, 178, 238,  29,  73, 253,  25, 186,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 103, 101,
    116,  77,  97, 105, 110,  86, 105, 101,
    119,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ba19fd491deeb222 = b_ba19fd491deeb222.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ba19fd491deeb222 = {
  0xba19fd491deeb222, b_ba19fd491deeb222.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ba19fd491deeb222, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_88abdb347bc63d0f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     15,  61, 198, 123,  52, 219, 171, 136,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 103, 101,
    116,  77,  97, 105, 110,  86, 105, 101,
    119,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118, 105, 101, 119,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    231, 226, 103, 234, 152, 215, 180, 219,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_88abdb347bc63d0f = b_88abdb347bc63d0f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_88abdb347bc63d0f[] = {
  &s_dbb4d798ea67e2e7,
};
static const uint16_t m_88abdb347bc63d0f[] = {0};
static const uint16_t i_88abdb347bc63d0f[] = {0};
const ::capnp::_::RawSchema s_88abdb347bc63d0f = {
  0x88abdb347bc63d0f, b_88abdb347bc63d0f.words, 36, d_88abdb347bc63d0f, m_88abdb347bc63d0f,
  1, 1, i_88abdb347bc63d0f, nullptr, nullptr, { &s_88abdb347bc63d0f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e4a4f650ea454237 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     55,  66,  69, 234,  80, 246, 164, 228,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 107, 101,
    101, 112,  65, 108, 105, 118, 101,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 114, 101,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     12, 182, 148, 162, 120,  87, 164, 155,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e4a4f650ea454237 = b_e4a4f650ea454237.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e4a4f650ea454237[] = {
  &s_9ba45778a294b60c,
};
static const uint16_t m_e4a4f650ea454237[] = {0};
static const uint16_t i_e4a4f650ea454237[] = {0};
const ::capnp::_::RawSchema s_e4a4f650ea454237 = {
  0xe4a4f650ea454237, b_e4a4f650ea454237.words, 35, d_e4a4f650ea454237, m_e4a4f650ea454237,
  1, 1, i_e4a4f650ea454237, nullptr, nullptr, { &s_e4a4f650ea454237, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_a0b4085080573e77 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    119,  62,  87, 128,  80,   8, 180, 160,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 107, 101,
    101, 112,  65, 108, 105, 118, 101,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_a0b4085080573e77 = b_a0b4085080573e77.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a0b4085080573e77 = {
  0xa0b4085080573e77, b_a0b4085080573e77.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a0b4085080573e77, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_d597c8d788fec5df = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    223, 197, 254, 136, 215, 200, 151, 213,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 115, 104,
    117, 116, 100, 111, 119, 110,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_d597c8d788fec5df = b_d597c8d788fec5df.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d597c8d788fec5df = {
  0xd597c8d788fec5df, b_d597c8d788fec5df.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d597c8d788fec5df, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_cb7ee0fa69cd6e70 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    112, 110, 205, 105, 250, 224, 126, 203,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 115, 104,
    117, 116, 100, 111, 119, 110,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_cb7ee0fa69cd6e70 = b_cb7ee0fa69cd6e70.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_cb7ee0fa69cd6e70 = {
  0xcb7ee0fa69cd6e70, b_cb7ee0fa69cd6e70.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_cb7ee0fa69cd6e70, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_f3e98c16ae117300 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      0, 115,  17, 174,  22, 140, 233, 243,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 111,  98,
    115, 111, 108, 101, 116, 101,  71, 101,
    116,  71, 114,  97, 105, 110,  83, 105,
    122, 101,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f3e98c16ae117300 = b_f3e98c16ae117300.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f3e98c16ae117300 = {
  0xf3e98c16ae117300, b_f3e98c16ae117300.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f3e98c16ae117300, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_dc76071bd22f9a4b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     75, 154,  47, 210,  27,   7, 118, 220,
     38,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 111,  98,
    115, 111, 108, 101, 116, 101,  71, 101,
    116,  71, 114,  97, 105, 110,  83, 105,
    122, 101,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dc76071bd22f9a4b = b_dc76071bd22f9a4b.words;
#if !CAPNP_LITE
static const uint16_t m_dc76071bd22f9a4b[] = {0};
static const uint16_t i_dc76071bd22f9a4b[] = {0};
const ::capnp::_::RawSchema s_dc76071bd22f9a4b = {
  0xdc76071bd22f9a4b, b_dc76071bd22f9a4b.words, 37, nullptr, m_dc76071bd22f9a4b,
  0, 1, i_dc76071bd22f9a4b, nullptr, nullptr, { &s_dc76071bd22f9a4b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_c08fb7eab4fb0e05 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      5,  14, 251, 180, 234, 183, 143, 192,
     38,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 111,  98,
    115, 111, 108, 111, 116, 101,  71, 101,
    116,  71, 114,  97, 105, 110,  83, 105,
    122, 101,  87, 104, 101, 110,  68, 105,
    102, 102, 101, 114, 101, 110, 116,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    111, 108, 100,  83, 105, 122, 101,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c08fb7eab4fb0e05 = b_c08fb7eab4fb0e05.words;
#if !CAPNP_LITE
static const uint16_t m_c08fb7eab4fb0e05[] = {0};
static const uint16_t i_c08fb7eab4fb0e05[] = {0};
const ::capnp::_::RawSchema s_c08fb7eab4fb0e05 = {
  0xc08fb7eab4fb0e05, b_c08fb7eab4fb0e05.words, 38, nullptr, m_c08fb7eab4fb0e05,
  0, 1, i_c08fb7eab4fb0e05, nullptr, nullptr, { &s_c08fb7eab4fb0e05, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_cce106c2fbaa9b04 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      4, 155, 170, 251, 194,   6, 225, 204,
     38,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 111,  98,
    115, 111, 108, 111, 116, 101,  71, 101,
    116,  71, 114,  97, 105, 110,  83, 105,
    122, 101,  87, 104, 101, 110,  68, 105,
    102, 102, 101, 114, 101, 110, 116,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cce106c2fbaa9b04 = b_cce106c2fbaa9b04.words;
#if !CAPNP_LITE
static const uint16_t m_cce106c2fbaa9b04[] = {0};
static const uint16_t i_cce106c2fbaa9b04[] = {0};
const ::capnp::_::RawSchema s_cce106c2fbaa9b04 = {
  0xcce106c2fbaa9b04, b_cce106c2fbaa9b04.words, 38, nullptr, m_cce106c2fbaa9b04,
  0, 1, i_cce106c2fbaa9b04, nullptr, nullptr, { &s_cce106c2fbaa9b04, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<71> b_aae54cb2386e60ab = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    171,  96, 110,  56, 178,  76, 229, 170,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 114, 101,
    115, 116, 111, 114, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 102,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     64, 184, 219,  55,   7, 101, 116, 142,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 113, 117, 105, 114, 101, 109,
    101, 110, 116, 115,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    134,  56, 241,  33, 167, 185, 141, 145,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 114, 101, 110, 116,  84, 111,
    107, 101, 110,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_aae54cb2386e60ab = b_aae54cb2386e60ab.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_aae54cb2386e60ab[] = {
  &s_8e74650737dbb840,
  &s_918db9a721f13886,
};
static const uint16_t m_aae54cb2386e60ab[] = {2, 0, 1};
static const uint16_t i_aae54cb2386e60ab[] = {0, 1, 2};
const ::capnp::_::RawSchema s_aae54cb2386e60ab = {
  0xaae54cb2386e60ab, b_aae54cb2386e60ab.words, 71, d_aae54cb2386e60ab, m_aae54cb2386e60ab,
  2, 3, i_aae54cb2386e60ab, nullptr, nullptr, { &s_aae54cb2386e60ab, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_96fb2fd9e320599f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    159,  89,  32, 227, 217,  47, 251, 150,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 114, 101,
    115, 116, 111, 114, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 112,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   3,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_96fb2fd9e320599f = b_96fb2fd9e320599f.words;
#if !CAPNP_LITE
static const uint16_t m_96fb2fd9e320599f[] = {0};
static const uint16_t i_96fb2fd9e320599f[] = {0};
const ::capnp::_::RawSchema s_96fb2fd9e320599f = {
  0x96fb2fd9e320599f, b_96fb2fd9e320599f.words, 35, nullptr, m_96fb2fd9e320599f,
  0, 1, i_96fb2fd9e320599f, nullptr, nullptr, { &s_96fb2fd9e320599f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_af3c0d4c9b788c3b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     59, 140, 120, 155,  76,  13,  60, 175,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 100, 114,
    111, 112,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 102,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     64, 184, 219,  55,   7, 101, 116, 142,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_af3c0d4c9b788c3b = b_af3c0d4c9b788c3b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_af3c0d4c9b788c3b[] = {
  &s_8e74650737dbb840,
};
static const uint16_t m_af3c0d4c9b788c3b[] = {0};
static const uint16_t i_af3c0d4c9b788c3b[] = {0};
const ::capnp::_::RawSchema s_af3c0d4c9b788c3b = {
  0xaf3c0d4c9b788c3b, b_af3c0d4c9b788c3b.words, 35, d_af3c0d4c9b788c3b, m_af3c0d4c9b788c3b,
  1, 1, i_af3c0d4c9b788c3b, nullptr, nullptr, { &s_af3c0d4c9b788c3b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_80e7bfc1abd2efa7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    167, 239, 210, 171, 193, 191, 231, 128,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 100, 114,
    111, 112,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_80e7bfc1abd2efa7 = b_80e7bfc1abd2efa7.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_80e7bfc1abd2efa7 = {
  0x80e7bfc1abd2efa7, b_80e7bfc1abd2efa7.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_80e7bfc1abd2efa7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_c152ab1174b40c0a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     10,  12, 180, 116,  17, 171,  82, 193,
     38,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 119,  97,
    116,  99, 104,  76, 111, 103,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
     98,  97,  99, 107, 108, 111, 103,  65,
    109, 111, 117, 110, 116,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 101,  97, 109,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     95, 227, 207,  41, 119,  56,  87, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c152ab1174b40c0a = b_c152ab1174b40c0a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c152ab1174b40c0a[] = {
  &s_cd57387729cfe35f,
};
static const uint16_t m_c152ab1174b40c0a[] = {0, 1};
static const uint16_t i_c152ab1174b40c0a[] = {0, 1};
const ::capnp::_::RawSchema s_c152ab1174b40c0a = {
  0xc152ab1174b40c0a, b_c152ab1174b40c0a.words, 51, d_c152ab1174b40c0a, m_c152ab1174b40c0a,
  1, 2, i_c152ab1174b40c0a, nullptr, nullptr, { &s_c152ab1174b40c0a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_98053037c12fa689 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    137, 166,  47, 193,  55,  48,   5, 152,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 119,  97,
    116,  99, 104,  76, 111, 103,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    224,  66,  96,  96, 172,  36, 244, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_98053037c12fa689 = b_98053037c12fa689.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_98053037c12fa689[] = {
  &s_98f424ac606042e0,
};
static const uint16_t m_98053037c12fa689[] = {0};
static const uint16_t i_98053037c12fa689[] = {0};
const ::capnp::_::RawSchema s_98053037c12fa689 = {
  0x98053037c12fa689, b_98053037c12fa689.words, 35, d_98053037c12fa689, m_98053037c12fa689,
  1, 1, i_98053037c12fa689, nullptr, nullptr, { &s_98053037c12fa689, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_cf3e8fcfd0506bd0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    208, 107,  80, 208, 207, 143,  62, 207,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 115, 121,
    110,  99,  83, 116, 111, 114,  97, 103,
    101,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cf3e8fcfd0506bd0 = b_cf3e8fcfd0506bd0.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_cf3e8fcfd0506bd0 = {
  0xcf3e8fcfd0506bd0, b_cf3e8fcfd0506bd0.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_cf3e8fcfd0506bd0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_ba8b9f7f3a411a03 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      3,  26,  65,  58, 127, 159, 139, 186,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 115, 121,
    110,  99,  83, 116, 111, 114,  97, 103,
    101,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ba8b9f7f3a411a03 = b_ba8b9f7f3a411a03.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ba8b9f7f3a411a03 = {
  0xba8b9f7f3a411a03, b_ba8b9f7f3a411a03.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ba8b9f7f3a411a03, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_f9c6e362d6fcb22a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     42, 178, 252, 214,  98, 227, 198, 249,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 103, 101,
    116,  87, 119, 119,  70, 105, 108, 101,
     72,  97,  99, 107,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 116, 104,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 101,  97, 109,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     95, 227, 207,  41, 119,  56,  87, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f9c6e362d6fcb22a = b_f9c6e362d6fcb22a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f9c6e362d6fcb22a[] = {
  &s_cd57387729cfe35f,
};
static const uint16_t m_f9c6e362d6fcb22a[] = {0, 1};
static const uint16_t i_f9c6e362d6fcb22a[] = {0, 1};
const ::capnp::_::RawSchema s_f9c6e362d6fcb22a = {
  0xf9c6e362d6fcb22a, b_f9c6e362d6fcb22a.words, 51, d_f9c6e362d6fcb22a, m_f9c6e362d6fcb22a,
  1, 2, i_f9c6e362d6fcb22a, nullptr, nullptr, { &s_f9c6e362d6fcb22a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_902651d6de458996 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    150, 137,  69, 222, 214,  81,  38, 144,
     38,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  46, 103, 101,
    116,  87, 119, 119,  70, 105, 108, 101,
     72,  97,  99, 107,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 116,  97, 116, 117, 115,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    156, 240, 175, 196,  31, 243, 204, 133,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_902651d6de458996 = b_902651d6de458996.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_902651d6de458996[] = {
  &s_85ccf31fc4aff09c,
};
static const uint16_t m_902651d6de458996[] = {0};
static const uint16_t i_902651d6de458996[] = {0};
const ::capnp::_::RawSchema s_902651d6de458996 = {
  0x902651d6de458996, b_902651d6de458996.words, 36, d_902651d6de458996, m_902651d6de458996,
  1, 1, i_902651d6de458996, nullptr, nullptr, { &s_902651d6de458996, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<127> b_9ba45778a294b60c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     12, 182, 148, 162, 120,  87, 164, 155,
     27,   0,   0,   0,   3,   0,   0,   0,
     64, 176, 199,  50, 109,  93,  32, 199,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
     41,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,  71,   2,   0,   0,
    205,   1,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    247,  70, 107, 248,  67, 132, 235, 163,
      1,   0,   0,   0, 162,   0,   0,   0,
     82, 101, 113, 117, 105, 114, 101, 109,
    101, 110, 116,  79,  98, 115, 101, 114,
    118, 101, 114,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,  11, 240,  33,  47, 249,  57, 248,
    183, 178, 182, 242, 113,  39, 233, 146,
     17,   1,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   1,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    210, 151,  31,  18, 155,  53, 232, 240,
    145,  31,  82,  72, 185, 212, 150, 159,
    249,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    241,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     84, 191, 244, 219, 147, 214, 114, 175,
    118, 201,  44, 223, 149, 109, 140, 136,
    229,   0,   0,   0, 218,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    229,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    198,  87, 217,  99, 129, 140,  59, 224,
    151,  27, 124, 169, 146,  92,  67, 206,
    217,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    205,   0,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    195,  69, 188,  83,  79, 239, 103, 136,
    127, 237,   8, 105, 243, 230, 131, 202,
    193,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    189,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     32, 176, 178, 237,  72, 193,  37, 155,
    138,  19, 135, 252,  70, 106, 165, 158,
    177,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      1,  11,  62, 229, 153, 183, 174, 238,
     19, 171, 185, 215, 227, 113,  16, 185,
    157,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   0,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
    172, 214, 227, 192, 140, 121, 142, 147,
     33,  13, 100,  72, 156,   1, 135, 157,
    137,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,   7,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
    243, 244, 121, 212,  53,  94, 193, 174,
    202,  19, 225,  48,  20,  90,  61, 196,
    121,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,   7,   0,   0,   0,
    114, 101, 115, 116, 111, 114, 101,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109,  97, 107, 101,  84, 111, 107, 101,
    110,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  79, 119, 110, 101, 114,
     78, 111, 116, 105, 102, 105,  99,  97,
    116, 105, 111, 110,  84,  97, 114, 103,
    101, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 114, 111, 112,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 104, 101,  99, 107,  82, 101, 113,
    117, 105, 114, 101, 109, 101, 110, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109,  97, 107, 101,  67, 104, 105, 108,
    100,  84, 111, 107, 101, 110,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 108,  97, 105, 109,  82, 101, 113,
    117, 101, 115, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     98,  97,  99, 107, 103, 114, 111, 117,
    110, 100,  65,  99, 116, 105, 118, 105,
    116, 121,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 112, 111, 114, 116,  71, 114,
     97, 105, 110,  83, 105, 122, 101,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_9ba45778a294b60c = b_9ba45778a294b60c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9ba45778a294b60c[] = {
  &s_8867ef4f53bc45c3,
  &s_888c6d95df2cc976,
  &s_92e92771f2b6b2b7,
  &s_938e798cc0e3d6ac,
  &s_9b25c148edb2b020,
  &s_9d87019c48640d21,
  &s_9ea56a46fc87138a,
  &s_9f96d4b948521f91,
  &s_aec15e35d479f4f3,
  &s_af72d693dbf4bf54,
  &s_b91071e3d7b9ab13,
  &s_c43d5a1430e113ca,
  &s_ca83e6f36908ed7f,
  &s_ce435c92a97c1b97,
  &s_e03b8c8163d957c6,
  &s_eeaeb799e53e0b01,
  &s_f0e8359b121f97d2,
  &s_f839f92f21f00b08,
};
static const uint16_t m_9ba45778a294b60c[] = {7, 4, 6, 3, 2, 5, 1, 8, 0};
const ::capnp::_::RawSchema s_9ba45778a294b60c = {
  0x9ba45778a294b60c, b_9ba45778a294b60c.words, 127, d_9ba45778a294b60c, m_9ba45778a294b60c,
  18, 9, nullptr, nullptr, nullptr, { &s_9ba45778a294b60c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_a3eb8443f86b46f7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    247,  70, 107, 248,  67, 132, 235, 163,
     41,   0,   0,   0,   3,   0,   0,   0,
     12, 182, 148, 162, 120,  87, 164, 155,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  71,   0,   0,   0,
     85,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46,  82, 101, 113, 117, 105, 114, 101,
    109, 101, 110, 116,  79,  98, 115, 101,
    114, 118, 101, 114,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     61, 193, 151,  93, 253,  51, 188, 153,
    223, 179, 113, 204, 124,  54,  40, 204,
     17,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    111,  98, 115, 101, 114, 118, 101,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_a3eb8443f86b46f7 = b_a3eb8443f86b46f7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a3eb8443f86b46f7[] = {
  &s_99bc33fd5d97c13d,
  &s_cc28367ccc71b3df,
};
static const uint16_t m_a3eb8443f86b46f7[] = {0};
const ::capnp::_::RawSchema s_a3eb8443f86b46f7 = {
  0xa3eb8443f86b46f7, b_a3eb8443f86b46f7.words, 33, d_a3eb8443f86b46f7, m_a3eb8443f86b46f7,
  2, 1, nullptr, nullptr, nullptr, { &s_a3eb8443f86b46f7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_99bc33fd5d97c13d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     61, 193, 151,  93, 253,  51, 188, 153,
     61,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46,  82, 101, 113, 117, 105, 114, 101,
    109, 101, 110, 116,  79,  98, 115, 101,
    114, 118, 101, 114,  46, 111,  98, 115,
    101, 114, 118, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_99bc33fd5d97c13d = b_99bc33fd5d97c13d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_99bc33fd5d97c13d = {
  0x99bc33fd5d97c13d, b_99bc33fd5d97c13d.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_99bc33fd5d97c13d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_cc28367ccc71b3df = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    223, 179, 113, 204, 124,  54,  40, 204,
     61,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46,  82, 101, 113, 117, 105, 114, 101,
    109, 101, 110, 116,  79,  98, 115, 101,
    114, 118, 101, 114,  46, 111,  98, 115,
    101, 114, 118, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cc28367ccc71b3df = b_cc28367ccc71b3df.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_cc28367ccc71b3df = {
  0xcc28367ccc71b3df, b_cc28367ccc71b3df.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_cc28367ccc71b3df, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_f839f92f21f00b08 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      8,  11, 240,  33,  47, 249,  57, 248,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46, 114, 101, 115, 116, 111, 114, 101,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    116, 111, 107, 101, 110,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f839f92f21f00b08 = b_f839f92f21f00b08.words;
#if !CAPNP_LITE
static const uint16_t m_f839f92f21f00b08[] = {0};
static const uint16_t i_f839f92f21f00b08[] = {0};
const ::capnp::_::RawSchema s_f839f92f21f00b08 = {
  0xf839f92f21f00b08, b_f839f92f21f00b08.words, 35, nullptr, m_f839f92f21f00b08,
  0, 1, i_f839f92f21f00b08, nullptr, nullptr, { &s_f839f92f21f00b08, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_92e92771f2b6b2b7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    183, 178, 182, 242, 113,  39, 233, 146,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46, 114, 101, 115, 116, 111, 114, 101,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 112,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   3,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_92e92771f2b6b2b7 = b_92e92771f2b6b2b7.words;
#if !CAPNP_LITE
static const uint16_t m_92e92771f2b6b2b7[] = {0};
static const uint16_t i_92e92771f2b6b2b7[] = {0};
const ::capnp::_::RawSchema s_92e92771f2b6b2b7 = {
  0x92e92771f2b6b2b7, b_92e92771f2b6b2b7.words, 36, nullptr, m_92e92771f2b6b2b7,
  0, 1, i_92e92771f2b6b2b7, nullptr, nullptr, { &s_92e92771f2b6b2b7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<71> b_f0e8359b121f97d2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    210, 151,  31,  18, 155,  53, 232, 240,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46, 109,  97, 107, 101,  84, 111, 107,
    101, 110,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 102,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     64, 184, 219,  55,   7, 101, 116, 142,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 119, 110, 101, 114,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    169, 169, 168, 226,  55,   5, 151, 218,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 113, 117, 105, 114, 101, 109,
    101, 110, 116, 115,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    134,  56, 241,  33, 167, 185, 141, 145,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f0e8359b121f97d2 = b_f0e8359b121f97d2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f0e8359b121f97d2[] = {
  &s_8e74650737dbb840,
  &s_918db9a721f13886,
  &s_da970537e2a8a9a9,
};
static const uint16_t m_f0e8359b121f97d2[] = {1, 0, 2};
static const uint16_t i_f0e8359b121f97d2[] = {0, 1, 2};
const ::capnp::_::RawSchema s_f0e8359b121f97d2 = {
  0xf0e8359b121f97d2, b_f0e8359b121f97d2.words, 71, d_f0e8359b121f97d2, m_f0e8359b121f97d2,
  3, 3, i_f0e8359b121f97d2, nullptr, nullptr, { &s_f0e8359b121f97d2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_9f96d4b948521f91 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    145,  31,  82,  72, 185, 212, 150, 159,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46, 109,  97, 107, 101,  84, 111, 107,
    101, 110,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    116, 111, 107, 101, 110,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9f96d4b948521f91 = b_9f96d4b948521f91.words;
#if !CAPNP_LITE
static const uint16_t m_9f96d4b948521f91[] = {0};
static const uint16_t i_9f96d4b948521f91[] = {0};
const ::capnp::_::RawSchema s_9f96d4b948521f91 = {
  0x9f96d4b948521f91, b_9f96d4b948521f91.words, 36, nullptr, m_9f96d4b948521f91,
  0, 1, i_9f96d4b948521f91, nullptr, nullptr, { &s_9f96d4b948521f91, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_af72d693dbf4bf54 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     84, 191, 244, 219, 147, 214, 114, 175,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46, 103, 101, 116,  79, 119, 110, 101,
    114,  78, 111, 116, 105, 102, 105,  99,
     97, 116, 105, 111, 110,  84,  97, 114,
    103, 101, 116,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_af72d693dbf4bf54 = b_af72d693dbf4bf54.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_af72d693dbf4bf54 = {
  0xaf72d693dbf4bf54, b_af72d693dbf4bf54.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_af72d693dbf4bf54, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_888c6d95df2cc976 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    118, 201,  44, 223, 149, 109, 140, 136,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46, 103, 101, 116,  79, 119, 110, 101,
    114,  78, 111, 116, 105, 102, 105,  99,
     97, 116, 105, 111, 110,  84,  97, 114,
    103, 101, 116,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    111, 119, 110, 101, 114,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    240,  32,  48, 215,  55, 115, 248, 240,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_888c6d95df2cc976 = b_888c6d95df2cc976.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_888c6d95df2cc976[] = {
  &s_f0f87337d73020f0,
};
static const uint16_t m_888c6d95df2cc976[] = {0};
static const uint16_t i_888c6d95df2cc976[] = {0};
const ::capnp::_::RawSchema s_888c6d95df2cc976 = {
  0x888c6d95df2cc976, b_888c6d95df2cc976.words, 38, d_888c6d95df2cc976, m_888c6d95df2cc976,
  1, 1, i_888c6d95df2cc976, nullptr, nullptr, { &s_888c6d95df2cc976, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e03b8c8163d957c6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    198,  87, 217,  99, 129, 140,  59, 224,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46, 100, 114, 111, 112,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    116, 111, 107, 101, 110,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e03b8c8163d957c6 = b_e03b8c8163d957c6.words;
#if !CAPNP_LITE
static const uint16_t m_e03b8c8163d957c6[] = {0};
static const uint16_t i_e03b8c8163d957c6[] = {0};
const ::capnp::_::RawSchema s_e03b8c8163d957c6 = {
  0xe03b8c8163d957c6, b_e03b8c8163d957c6.words, 35, nullptr, m_e03b8c8163d957c6,
  0, 1, i_e03b8c8163d957c6, nullptr, nullptr, { &s_e03b8c8163d957c6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_ce435c92a97c1b97 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    151,  27, 124, 169, 146,  92,  67, 206,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46, 100, 114, 111, 112,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_ce435c92a97c1b97 = b_ce435c92a97c1b97.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ce435c92a97c1b97 = {
  0xce435c92a97c1b97, b_ce435c92a97c1b97.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ce435c92a97c1b97, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_8867ef4f53bc45c3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    195,  69, 188,  83,  79, 239, 103, 136,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46,  99, 104, 101,  99, 107,  82, 101,
    113, 117, 105, 114, 101, 109, 101, 110,
    116, 115,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 105, 114, 101, 109,
    101, 110, 116, 115,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    134,  56, 241,  33, 167, 185, 141, 145,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8867ef4f53bc45c3 = b_8867ef4f53bc45c3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8867ef4f53bc45c3[] = {
  &s_918db9a721f13886,
};
static const uint16_t m_8867ef4f53bc45c3[] = {0};
static const uint16_t i_8867ef4f53bc45c3[] = {0};
const ::capnp::_::RawSchema s_8867ef4f53bc45c3 = {
  0x8867ef4f53bc45c3, b_8867ef4f53bc45c3.words, 42, d_8867ef4f53bc45c3, m_8867ef4f53bc45c3,
  1, 1, i_8867ef4f53bc45c3, nullptr, nullptr, { &s_8867ef4f53bc45c3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_ca83e6f36908ed7f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    127, 237,   8, 105, 243, 230, 131, 202,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46,  99, 104, 101,  99, 107,  82, 101,
    113, 117, 105, 114, 101, 109, 101, 110,
    116, 115,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    111,  98, 115, 101, 114, 118, 101, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    247,  70, 107, 248,  67, 132, 235, 163,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ca83e6f36908ed7f = b_ca83e6f36908ed7f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ca83e6f36908ed7f[] = {
  &s_a3eb8443f86b46f7,
};
static const uint16_t m_ca83e6f36908ed7f[] = {0};
static const uint16_t i_ca83e6f36908ed7f[] = {0};
const ::capnp::_::RawSchema s_ca83e6f36908ed7f = {
  0xca83e6f36908ed7f, b_ca83e6f36908ed7f.words, 38, d_ca83e6f36908ed7f, m_ca83e6f36908ed7f,
  1, 1, i_ca83e6f36908ed7f, nullptr, nullptr, { &s_ca83e6f36908ed7f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<71> b_9b25c148edb2b020 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     32, 176, 178, 237,  72, 193,  37, 155,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46, 109,  97, 107, 101,  67, 104, 105,
    108, 100,  84, 111, 107, 101, 110,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114, 101, 110, 116,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 119, 110, 101, 114,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    169, 169, 168, 226,  55,   5, 151, 218,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 113, 117, 105, 114, 101, 109,
    101, 110, 116, 115,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    134,  56, 241,  33, 167, 185, 141, 145,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9b25c148edb2b020 = b_9b25c148edb2b020.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9b25c148edb2b020[] = {
  &s_918db9a721f13886,
  &s_da970537e2a8a9a9,
};
static const uint16_t m_9b25c148edb2b020[] = {1, 0, 2};
static const uint16_t i_9b25c148edb2b020[] = {0, 1, 2};
const ::capnp::_::RawSchema s_9b25c148edb2b020 = {
  0x9b25c148edb2b020, b_9b25c148edb2b020.words, 71, d_9b25c148edb2b020, m_9b25c148edb2b020,
  2, 3, i_9b25c148edb2b020, nullptr, nullptr, { &s_9b25c148edb2b020, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_9ea56a46fc87138a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    138,  19, 135, 252,  70, 106, 165, 158,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46, 109,  97, 107, 101,  67, 104, 105,
    108, 100,  84, 111, 107, 101, 110,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    116, 111, 107, 101, 110,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9ea56a46fc87138a = b_9ea56a46fc87138a.words;
#if !CAPNP_LITE
static const uint16_t m_9ea56a46fc87138a[] = {0};
static const uint16_t i_9ea56a46fc87138a[] = {0};
const ::capnp::_::RawSchema s_9ea56a46fc87138a = {
  0x9ea56a46fc87138a, b_9ea56a46fc87138a.words, 36, nullptr, m_9ea56a46fc87138a,
  0, 1, i_9ea56a46fc87138a, nullptr, nullptr, { &s_9ea56a46fc87138a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<58> b_eeaeb799e53e0b01 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      1,  11,  62, 229, 153, 183, 174, 238,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46,  99, 108,  97, 105, 109,  82, 101,
    113, 117, 101, 115, 116,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     52,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,  84,
    111, 107, 101, 110,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 113, 117, 105, 114, 101, 100,
     80, 101, 114, 109, 105, 115, 115, 105,
    111, 110, 115,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eeaeb799e53e0b01 = b_eeaeb799e53e0b01.words;
#if !CAPNP_LITE
static const uint16_t m_eeaeb799e53e0b01[] = {0, 1};
static const uint16_t i_eeaeb799e53e0b01[] = {0, 1};
const ::capnp::_::RawSchema s_eeaeb799e53e0b01 = {
  0xeeaeb799e53e0b01, b_eeaeb799e53e0b01.words, 58, nullptr, m_eeaeb799e53e0b01,
  0, 2, i_eeaeb799e53e0b01, nullptr, nullptr, { &s_eeaeb799e53e0b01, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_b91071e3d7b9ab13 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     19, 171, 185, 215, 227, 113,  16, 185,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46,  99, 108,  97, 105, 109,  82, 101,
    113, 117, 101, 115, 116,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 112,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   3,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b91071e3d7b9ab13 = b_b91071e3d7b9ab13.words;
#if !CAPNP_LITE
static const uint16_t m_b91071e3d7b9ab13[] = {0};
static const uint16_t i_b91071e3d7b9ab13[] = {0};
const ::capnp::_::RawSchema s_b91071e3d7b9ab13 = {
  0xb91071e3d7b9ab13, b_b91071e3d7b9ab13.words, 36, nullptr, m_b91071e3d7b9ab13,
  0, 1, i_b91071e3d7b9ab13, nullptr, nullptr, { &s_b91071e3d7b9ab13, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_938e798cc0e3d6ac = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    172, 214, 227, 192, 140, 121, 142, 147,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46,  98,  97,  99, 107, 103, 114, 111,
    117, 110, 100,  65,  99, 116, 105, 118,
    105, 116, 121,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    101, 118, 101, 110, 116,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     75, 108, 140, 169, 234, 182, 192, 167,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_938e798cc0e3d6ac = b_938e798cc0e3d6ac.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_938e798cc0e3d6ac[] = {
  &s_a7c0b6eaa98c6c4b,
};
static const uint16_t m_938e798cc0e3d6ac[] = {0};
static const uint16_t i_938e798cc0e3d6ac[] = {0};
const ::capnp::_::RawSchema s_938e798cc0e3d6ac = {
  0x938e798cc0e3d6ac, b_938e798cc0e3d6ac.words, 37, d_938e798cc0e3d6ac, m_938e798cc0e3d6ac,
  1, 1, i_938e798cc0e3d6ac, nullptr, nullptr, { &s_938e798cc0e3d6ac, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_9d87019c48640d21 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     33,  13, 100,  72, 156,   1, 135, 157,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46,  98,  97,  99, 107, 103, 114, 111,
    117, 110, 100,  65,  99, 116, 105, 118,
    105, 116, 121,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9d87019c48640d21 = b_9d87019c48640d21.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9d87019c48640d21 = {
  0x9d87019c48640d21, b_9d87019c48640d21.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9d87019c48640d21, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_aec15e35d479f4f3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    243, 244, 121, 212,  53,  94, 193, 174,
     41,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46, 114, 101, 112, 111, 114, 116,  71,
    114,  97, 105, 110,  83, 105, 122, 101,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     98, 121, 116, 101, 115,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_aec15e35d479f4f3 = b_aec15e35d479f4f3.words;
#if !CAPNP_LITE
static const uint16_t m_aec15e35d479f4f3[] = {0};
static const uint16_t i_aec15e35d479f4f3[] = {0};
const ::capnp::_::RawSchema s_aec15e35d479f4f3 = {
  0xaec15e35d479f4f3, b_aec15e35d479f4f3.words, 36, nullptr, m_aec15e35d479f4f3,
  0, 1, i_aec15e35d479f4f3, nullptr, nullptr, { &s_aec15e35d479f4f3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_c43d5a1430e113ca = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    202,  19, 225,  48,  20,  90,  61, 196,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
     46, 114, 101, 112, 111, 114, 116,  71,
    114,  97, 105, 110,  83, 105, 122, 101,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c43d5a1430e113ca = b_c43d5a1430e113ca.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c43d5a1430e113ca = {
  0xc43d5a1430e113ca, b_c43d5a1430e113ca.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c43d5a1430e113ca, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<61> b_918db9a721f13886 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    134,  56, 241,  33, 167, 185, 141, 145,
     27,   0,   0,   0,   1,   0,   1,   0,
     64, 176, 199,  50, 109,  93,  32, 199,
      4,   0,   7,   0,   0,   0,   3,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  77, 101, 109,  98, 114,
     97, 110, 101,  82, 101, 113, 117, 105,
    114, 101, 109, 101, 110, 116,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     48, 190,  63, 106, 237,  44,   9, 248,
     77,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     56,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
    116, 111, 107, 101, 110,  86,  97, 108,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 101, 114, 109, 105, 115, 115, 105,
    111, 110, 115,  72, 101, 108, 100,   0,
    117, 115, 101, 114,  73, 115,  65, 100,
    109, 105, 110,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_918db9a721f13886 = b_918db9a721f13886.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_918db9a721f13886[] = {
  &s_f8092ced6a3fbe30,
};
static const uint16_t m_918db9a721f13886[] = {1, 0, 2};
static const uint16_t i_918db9a721f13886[] = {0, 1, 2};
const ::capnp::_::RawSchema s_918db9a721f13886 = {
  0x918db9a721f13886, b_918db9a721f13886.words, 61, d_918db9a721f13886, m_918db9a721f13886,
  1, 3, i_918db9a721f13886, nullptr, nullptr, { &s_918db9a721f13886, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<102> b_f8092ced6a3fbe30 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     48, 190,  63, 106, 237,  44,   9, 248,
     47,   0,   0,   0,   1,   0,   1,   0,
    134,  56, 241,  33, 167, 185, 141, 145,
      4,   0,   7,   0,   1,   0,   2,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  77, 101, 109,  98, 114,
     97, 110, 101,  82, 101, 113, 117, 105,
    114, 101, 109, 101, 110, 116,  46, 112,
    101, 114, 109, 105, 115, 115, 105, 111,
    110, 115,  72, 101, 108, 100,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
      0,   0, 255, 255,   3,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    157,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    156,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   3,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    160,   0,   0,   0,   3,   0,   1,   0,
    172,   0,   0,   0,   2,   0,   1,   0,
    117, 115, 101, 114,  73, 100,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114,  97, 105, 110,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 101, 114, 109, 105, 115, 115, 105,
    111, 110, 115,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 101, 110, 116, 105, 116, 121,
     73, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 111, 107, 101, 110,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f8092ced6a3fbe30 = b_f8092ced6a3fbe30.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f8092ced6a3fbe30[] = {
  &s_918db9a721f13886,
};
static const uint16_t m_f8092ced6a3fbe30[] = {1, 3, 2, 4, 0};
static const uint16_t i_f8092ced6a3fbe30[] = {3, 4, 0, 1, 2};
const ::capnp::_::RawSchema s_f8092ced6a3fbe30 = {
  0xf8092ced6a3fbe30, b_f8092ced6a3fbe30.words, 102, d_f8092ced6a3fbe30, m_f8092ced6a3fbe30,
  1, 5, i_f8092ced6a3fbe30, nullptr, nullptr, { &s_f8092ced6a3fbe30, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_c38cedd77cbed5b4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    180, 213, 190, 124, 215, 237, 140, 195,
     27,   0,   0,   0,   3,   0,   0,   0,
     64, 176, 199,  50, 109,  93,  32, 199,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  71,   0,   0,   0,
     81,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 121, 115, 116, 101,
    109,  80, 101, 114, 115, 105, 115, 116,
    101, 110, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    135,  21,  72, 225, 189, 176,  94, 187,
    254, 207, 246, 105, 213, 213, 136, 132,
     17,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
     97, 100, 100,  82, 101, 113, 117, 105,
    114, 101, 109, 101, 110, 116, 115,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    145,  86, 159, 205,  47,  33, 203, 200,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    145,  86, 159, 205,  47,  33, 203, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  39,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   1,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    169, 169, 168, 226,  55,   5, 151, 218,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c38cedd77cbed5b4 = b_c38cedd77cbed5b4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c38cedd77cbed5b4[] = {
  &s_8488d5d569f6cffe,
  &s_bb5eb0bde1481587,
  &s_c8cb212fcd9f5691,
};
static const uint16_t m_c38cedd77cbed5b4[] = {0};
const ::capnp::_::RawBrandedSchema::Dependency bd_c38cedd77cbed5b4[] = {
  { 67108864,  ::capnp::Persistent< ::capnp::Data,  ::sandstorm::ApiTokenOwner>::_capnpPrivate::brand },
};
const ::capnp::_::RawSchema s_c38cedd77cbed5b4 = {
  0xc38cedd77cbed5b4, b_c38cedd77cbed5b4.words, 52, d_c38cedd77cbed5b4, m_c38cedd77cbed5b4,
  3, 1, nullptr, nullptr, nullptr, { &s_c38cedd77cbed5b4, nullptr, bd_c38cedd77cbed5b4, 0, sizeof(bd_c38cedd77cbed5b4) / sizeof(bd_c38cedd77cbed5b4[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_bb5eb0bde1481587 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    135,  21,  72, 225, 189, 176,  94, 187,
     44,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 121, 115, 116, 101,
    109,  80, 101, 114, 115, 105, 115, 116,
    101, 110, 116,  46,  97, 100, 100,  82,
    101, 113, 117, 105, 114, 101, 109, 101,
    110, 116, 115,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 105, 114, 101, 109,
    101, 110, 116, 115,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    134,  56, 241,  33, 167, 185, 141, 145,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bb5eb0bde1481587 = b_bb5eb0bde1481587.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bb5eb0bde1481587[] = {
  &s_918db9a721f13886,
};
static const uint16_t m_bb5eb0bde1481587[] = {0};
static const uint16_t i_bb5eb0bde1481587[] = {0};
const ::capnp::_::RawSchema s_bb5eb0bde1481587 = {
  0xbb5eb0bde1481587, b_bb5eb0bde1481587.words, 42, d_bb5eb0bde1481587, m_bb5eb0bde1481587,
  1, 1, i_bb5eb0bde1481587, nullptr, nullptr, { &s_bb5eb0bde1481587, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_8488d5d569f6cffe = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    254, 207, 246, 105, 213, 213, 136, 132,
     44,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 121, 115, 116, 101,
    109,  80, 101, 114, 115, 105, 115, 116,
    101, 110, 116,  46,  97, 100, 100,  82,
    101, 113, 117, 105, 114, 101, 109, 101,
    110, 116, 115,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 112,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    180, 213, 190, 124, 215, 237, 140, 195,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8488d5d569f6cffe = b_8488d5d569f6cffe.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8488d5d569f6cffe[] = {
  &s_c38cedd77cbed5b4,
};
static const uint16_t m_8488d5d569f6cffe[] = {0};
static const uint16_t i_8488d5d569f6cffe[] = {0};
const ::capnp::_::RawSchema s_8488d5d569f6cffe = {
  0x8488d5d569f6cffe, b_8488d5d569f6cffe.words, 37, d_8488d5d569f6cffe, m_8488d5d569f6cffe,
  1, 1, i_8488d5d569f6cffe, nullptr, nullptr, { &s_8488d5d569f6cffe, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<25> b_c22ce229c18c0a02 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      2,  10, 140, 193,  41, 226,  44, 194,
     27,   0,   0,   0,   3,   0,   0,   0,
     64, 176, 199,  50, 109,  93,  32, 199,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
     37,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  80, 101, 114, 115, 105,
    115, 116, 101, 110, 116,  72,  97, 110,
    100, 108, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   3,   0,   5,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    180, 213, 190, 124, 215, 237, 140, 195,
      0,   0,   0,   0,   0,   0,   0,   0,
    224,  66,  96,  96, 172,  36, 244, 152,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c22ce229c18c0a02 = b_c22ce229c18c0a02.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c22ce229c18c0a02[] = {
  &s_98f424ac606042e0,
  &s_c38cedd77cbed5b4,
};
const ::capnp::_::RawSchema s_c22ce229c18c0a02 = {
  0xc22ce229c18c0a02, b_c22ce229c18c0a02.words, 25, d_c22ce229c18c0a02, nullptr,
  2, 0, nullptr, nullptr, nullptr, { &s_c22ce229c18c0a02, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<27> b_dbbdcec8587dd355 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     85, 211, 125,  88, 200, 206, 189, 219,
     27,   0,   0,   0,   3,   0,   0,   0,
     64, 176, 199,  50, 109,  93,  32, 199,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
     45,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  80, 101, 114, 115, 105,
    115, 116, 101, 110, 116,  79, 110, 103,
    111, 105, 110, 103,  78, 111, 116, 105,
    102, 105,  99,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   3,   0,   5,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    180, 213, 190, 124, 215, 237, 140, 195,
      0,   0,   0,   0,   0,   0,   0,   0,
    205,  64, 137, 184, 219,  29, 133, 254,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dbbdcec8587dd355 = b_dbbdcec8587dd355.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dbbdcec8587dd355[] = {
  &s_c38cedd77cbed5b4,
  &s_fe851ddbb88940cd,
};
const ::capnp::_::RawSchema s_dbbdcec8587dd355 = {
  0xdbbdcec8587dd355, b_dbbdcec8587dd355.words, 27, d_dbbdcec8587dd355, nullptr,
  2, 0, nullptr, nullptr, nullptr, { &s_dbbdcec8587dd355, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<60> b_bdd9bea5585df6c5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    197, 246,  93,  88, 165, 190, 217, 189,
     27,   0,   0,   0,   1,   0,   1,   0,
     64, 176, 199,  50, 109,  93,  32, 199,
      4,   0,   7,   0,   0,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  68, 101, 110, 111, 114,
    109,  97, 108, 105, 122, 101, 100,  71,
    114,  97, 105, 110,  77, 101, 116,  97,
    100,  97, 116,  97,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 255, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    163, 189,  18,   8, 104, 152,  27, 217,
     77,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0, 254, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
     97, 112, 112,  84, 105, 116, 108, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     73, 226, 123,  55, 114, 183,  93, 139,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,  99, 111, 110,   0,   0,   0,   0,
     97, 112, 112,  73, 100,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bdd9bea5585df6c5 = b_bdd9bea5585df6c5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bdd9bea5585df6c5[] = {
  &s_8b5db772377be249,
  &s_d91b98680812bda3,
};
static const uint16_t m_bdd9bea5585df6c5[] = {2, 0, 1};
static const uint16_t i_bdd9bea5585df6c5[] = {1, 2, 0};
const ::capnp::_::RawSchema s_bdd9bea5585df6c5 = {
  0xbdd9bea5585df6c5, b_bdd9bea5585df6c5.words, 60, d_bdd9bea5585df6c5, m_bdd9bea5585df6c5,
  2, 3, i_bdd9bea5585df6c5, nullptr, nullptr, { &s_bdd9bea5585df6c5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<67> b_d91b98680812bda3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    163, 189,  18,   8, 104, 152,  27, 217,
     53,   0,   0,   0,   1,   0,   1,   0,
    197, 246,  93,  88, 165, 190, 217, 189,
      4,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  68, 101, 110, 111, 114,
    109,  97, 108, 105, 122, 101, 100,  71,
    114,  97, 105, 110,  77, 101, 116,  97,
    100,  97, 116,  97,  46, 105,  99, 111,
    110,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    102, 111, 114, 109,  97, 116,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 115, 115, 101, 116,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 115, 115, 101, 116,  73, 100,  50,
    120,  68, 112, 105,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d91b98680812bda3 = b_d91b98680812bda3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d91b98680812bda3[] = {
  &s_bdd9bea5585df6c5,
};
static const uint16_t m_d91b98680812bda3[] = {1, 2, 0};
static const uint16_t i_d91b98680812bda3[] = {0, 1, 2};
const ::capnp::_::RawSchema s_d91b98680812bda3 = {
  0xd91b98680812bda3, b_d91b98680812bda3.words, 67, d_d91b98680812bda3, m_d91b98680812bda3,
  1, 3, i_d91b98680812bda3, nullptr, nullptr, { &s_d91b98680812bda3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<103> b_da970537e2a8a9a9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    169, 169, 168, 226,  55,   5, 151, 218,
     27,   0,   0,   0,   1,   0,   1,   0,
     64, 176, 199,  50, 109,  93,  32, 199,
      5,   0,   7,   0,   0,   0,   7,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 143,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  65, 112, 105,  84, 111,
    107, 101, 110,  79, 119, 110, 101, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     28,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    176,   0,   0,   0,   3,   0,   1,   0,
    188,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     33, 100,   6, 104, 199,   4, 115, 203,
    185,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    160,   0,   0,   0,   3,   0,   1,   0,
    172,   0,   0,   0,   2,   0,   1,   0,
      5,   0, 252, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    168,   0,   0,   0,   3,   0,   1,   0,
    180,   0,   0,   0,   2,   0,   1,   0,
      6,   0, 251, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     61, 214,  71, 226, 117, 195,  79, 217,
    177,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0, 250, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    172,  69, 243, 125, 123, 137, 101, 199,
    153,   0,   0,   0, 178,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0, 249, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     81, 116, 202, 222, 252, 190, 130, 136,
    137,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119, 101,  98, 107, 101, 121,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114,  97, 105, 110,   0,   0,   0,
    105, 110, 116, 101, 114, 110, 101, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 114, 111, 110, 116, 101, 110, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 115, 101, 114,   0,   0,   0,   0,
     99, 108, 105, 101, 110, 116,  80, 111,
    119, 101, 114,  98, 111, 120,  82, 101,
    113, 117, 101, 115, 116,   0,   0,   0,
     99, 108, 105, 101, 110, 116,  80, 111,
    119, 101, 114,  98, 111, 120,  79, 102,
    102, 101, 114,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_da970537e2a8a9a9 = b_da970537e2a8a9a9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_da970537e2a8a9a9[] = {
  &s_8882befcdeca7451,
  &s_c765897b7df345ac,
  &s_cb7304c768066421,
  &s_d94fc375e247d63d,
};
static const uint16_t m_da970537e2a8a9a9[] = {6, 5, 3, 1, 2, 4, 0};
static const uint16_t i_da970537e2a8a9a9[] = {0, 1, 2, 3, 4, 5, 6};
const ::capnp::_::RawSchema s_da970537e2a8a9a9 = {
  0xda970537e2a8a9a9, b_da970537e2a8a9a9.words, 103, d_da970537e2a8a9a9, m_da970537e2a8a9a9,
  4, 7, i_da970537e2a8a9a9, nullptr, nullptr, { &s_da970537e2a8a9a9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<83> b_cb7304c768066421 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     33, 100,   6, 104, 199,   4, 115, 203,
     41,   0,   0,   0,   1,   0,   1,   0,
    169, 169, 168, 226,  55,   5, 151, 218,
      5,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  65, 112, 105,  84, 111,
    107, 101, 110,  79, 119, 110, 101, 114,
     46, 103, 114,  97, 105, 110,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   9,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
    103, 114,  97, 105, 110,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 118, 101,  76,  97,  98, 101,
    108,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     73, 226, 123,  55, 114, 183,  93, 139,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 114, 111, 100, 117,  99,
    101, 114,  85, 115, 101, 114,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 114, 111, 100, 117,  99,
    101, 114,  73, 100, 101, 110, 116, 105,
    116, 121,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cb7304c768066421 = b_cb7304c768066421.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cb7304c768066421[] = {
  &s_8b5db772377be249,
  &s_da970537e2a8a9a9,
};
static const uint16_t m_cb7304c768066421[] = {0, 3, 2, 1};
static const uint16_t i_cb7304c768066421[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_cb7304c768066421 = {
  0xcb7304c768066421, b_cb7304c768066421.words, 83, d_cb7304c768066421, m_cb7304c768066421,
  2, 4, i_cb7304c768066421, nullptr, nullptr, { &s_cb7304c768066421, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<130> b_d94fc375e247d63d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     61, 214,  71, 226, 117, 195,  79, 217,
     41,   0,   0,   0,   1,   0,   1,   0,
    169, 169, 168, 226,  55,   5, 151, 218,
      5,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 143,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  65, 112, 105,  84, 111,
    107, 101, 110,  79, 119, 110, 101, 114,
     46, 117, 115, 101, 114,   0,   0,   0,
     28,   0,   0,   0,   3,   0,   4,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    176,   0,   0,   0,   3,   0,   1,   0,
    188,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    185,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    180,   0,   0,   0,   3,   0,   1,   0,
    192,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    189,   0,   0,   0, 210,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    196,   0,   0,   0,   3,   0,   1,   0,
    208,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,  10,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    205,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    204,   0,   0,   0,   3,   0,   1,   0,
    216,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,  11,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    213,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    212,   0,   0,   0,   3,   0,   1,   0,
    224,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,  16,   0,   0,   0,
      0,   0,   1,   0,  12,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    221,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    216,   0,   0,   0,   3,   0,   1,   0,
    228,   0,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,  17,   0,   0,   0,
      0,   0,   1,   0,  16,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    225,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    224,   0,   0,   0,   3,   0,   1,   0,
    236,   0,   0,   0,   2,   0,   1,   0,
    117, 115, 101, 114,  73, 100,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 116, 108, 101,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 110, 111, 114, 109,  97, 108,
    105, 122, 101, 100,  71, 114,  97, 105,
    110,  77, 101, 116,  97, 100,  97, 116,
     97,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    197, 246,  93,  88, 165, 190, 217, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 101, 110, 116, 105, 116, 121,
     73, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 112, 115, 116, 114, 101,  97, 109,
     84, 105, 116, 108, 101,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 110,  97, 109, 101, 100,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 101, 110,  65, 108, 108,  65,
     99, 116, 105, 118, 105, 116, 121,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d94fc375e247d63d = b_d94fc375e247d63d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d94fc375e247d63d[] = {
  &s_bdd9bea5585df6c5,
  &s_da970537e2a8a9a9,
};
static const uint16_t m_d94fc375e247d63d[] = {2, 3, 5, 6, 1, 4, 0};
static const uint16_t i_d94fc375e247d63d[] = {0, 1, 2, 3, 4, 5, 6};
const ::capnp::_::RawSchema s_d94fc375e247d63d = {
  0xd94fc375e247d63d, b_d94fc375e247d63d.words, 130, d_d94fc375e247d63d, m_d94fc375e247d63d,
  2, 7, i_d94fc375e247d63d, nullptr, nullptr, { &s_d94fc375e247d63d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<69> b_c765897b7df345ac = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    172,  69, 243, 125, 123, 137, 101, 199,
     41,   0,   0,   0,   1,   0,   1,   0,
    169, 169, 168, 226,  55,   5, 151, 218,
      5,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  65, 112, 105,  84, 111,
    107, 101, 110,  79, 119, 110, 101, 114,
     46,  99, 108, 105, 101, 110, 116,  80,
    111, 119, 101, 114,  98, 111, 120,  82,
    101, 113, 117, 101, 115, 116,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,  13,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,  14,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,  15,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
    103, 114,  97, 105, 110,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 114, 111, 100, 117,  99,
    101, 114,  73, 100, 101, 110, 116, 105,
    116, 121,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 115, 115, 105, 111, 110,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c765897b7df345ac = b_c765897b7df345ac.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c765897b7df345ac[] = {
  &s_da970537e2a8a9a9,
};
static const uint16_t m_c765897b7df345ac[] = {0, 1, 2};
static const uint16_t i_c765897b7df345ac[] = {0, 1, 2};
const ::capnp::_::RawSchema s_c765897b7df345ac = {
  0xc765897b7df345ac, b_c765897b7df345ac.words, 69, d_c765897b7df345ac, m_c765897b7df345ac,
  1, 3, i_c765897b7df345ac, nullptr, nullptr, { &s_c765897b7df345ac, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_8882befcdeca7451 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     81, 116, 202, 222, 252, 190, 130, 136,
     41,   0,   0,   0,   1,   0,   1,   0,
    169, 169, 168, 226,  55,   5, 151, 218,
      5,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  65, 112, 105,  84, 111,
    107, 101, 110,  79, 119, 110, 101, 114,
     46,  99, 108, 105, 101, 110, 116,  80,
    111, 119, 101, 114,  98, 111, 120,  79,
    102, 102, 101, 114,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,  17,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    115, 101, 115, 115, 105, 111, 110,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8882befcdeca7451 = b_8882befcdeca7451.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8882befcdeca7451[] = {
  &s_da970537e2a8a9a9,
};
static const uint16_t m_8882befcdeca7451[] = {0};
static const uint16_t i_8882befcdeca7451[] = {0};
const ::capnp::_::RawSchema s_8882befcdeca7451 = {
  0x8882befcdeca7451, b_8882befcdeca7451.words, 37, d_8882befcdeca7451, m_8882befcdeca7451,
  1, 1, i_8882befcdeca7451, nullptr, nullptr, { &s_8882befcdeca7451, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<56> b_8e74650737dbb840 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     64, 184, 219,  55,   7, 101, 116, 142,
     27,   0,   0,   0,   1,   0,   1,   0,
     64, 176, 199,  50, 109,  93,  32, 199,
      1,   0,   7,   0,   0,   0,   2,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0,  15,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 115, 117, 112, 101, 114, 118,
    105, 115, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 117, 112, 101, 114,
    118, 105, 115, 111, 114,  79,  98, 106,
    101,  99, 116,  73, 100,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 170,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
     97, 112, 112,  82, 101, 102,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     64, 184, 219,  55,   7, 101, 116, 142,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119,  97, 107, 101,  76, 111,  99, 107,
     78, 111, 116, 105, 102, 105,  99,  97,
    116, 105, 111, 110,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  98,   0,   0,   0,
     65, 112, 112,  79,  98, 106, 101,  99,
    116,  73, 100,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8e74650737dbb840 = b_8e74650737dbb840.words;
#if !CAPNP_LITE
static const uint16_t m_8e74650737dbb840[] = {0, 1};
static const uint16_t i_8e74650737dbb840[] = {0, 1};
const ::capnp::_::RawSchema s_8e74650737dbb840 = {
  0x8e74650737dbb840, b_8e74650737dbb840.words, 56, nullptr, m_8e74650737dbb840,
  0, 2, i_8e74650737dbb840, nullptr, nullptr, { &s_8e74650737dbb840, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace sandstorm {

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::Supervisor::GetMainViewParams,  ::sandstorm::Supervisor::GetMainViewResults>
Supervisor::Client::getMainViewRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Supervisor::GetMainViewParams,  ::sandstorm::Supervisor::GetMainViewResults>(
      0x9951c12163385530ull, 0, sizeHint);
}
::kj::Promise<void> Supervisor::Server::getMainView(GetMainViewContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:Supervisor", "getMainView",
      0x9951c12163385530ull, 0);
}
::capnp::Request< ::sandstorm::Supervisor::KeepAliveParams,  ::sandstorm::Supervisor::KeepAliveResults>
Supervisor::Client::keepAliveRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Supervisor::KeepAliveParams,  ::sandstorm::Supervisor::KeepAliveResults>(
      0x9951c12163385530ull, 1, sizeHint);
}
::kj::Promise<void> Supervisor::Server::keepAlive(KeepAliveContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:Supervisor", "keepAlive",
      0x9951c12163385530ull, 1);
}
::capnp::Request< ::sandstorm::Supervisor::ShutdownParams,  ::sandstorm::Supervisor::ShutdownResults>
Supervisor::Client::shutdownRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Supervisor::ShutdownParams,  ::sandstorm::Supervisor::ShutdownResults>(
      0x9951c12163385530ull, 2, sizeHint);
}
::kj::Promise<void> Supervisor::Server::shutdown(ShutdownContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:Supervisor", "shutdown",
      0x9951c12163385530ull, 2);
}
::capnp::Request< ::sandstorm::Supervisor::ObsoleteGetGrainSizeParams,  ::sandstorm::Supervisor::ObsoleteGetGrainSizeResults>
Supervisor::Client::obsoleteGetGrainSizeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Supervisor::ObsoleteGetGrainSizeParams,  ::sandstorm::Supervisor::ObsoleteGetGrainSizeResults>(
      0x9951c12163385530ull, 3, sizeHint);
}
::kj::Promise<void> Supervisor::Server::obsoleteGetGrainSize(ObsoleteGetGrainSizeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:Supervisor", "obsoleteGetGrainSize",
      0x9951c12163385530ull, 3);
}
::capnp::Request< ::sandstorm::Supervisor::ObsoloteGetGrainSizeWhenDifferentParams,  ::sandstorm::Supervisor::ObsoloteGetGrainSizeWhenDifferentResults>
Supervisor::Client::obsoloteGetGrainSizeWhenDifferentRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Supervisor::ObsoloteGetGrainSizeWhenDifferentParams,  ::sandstorm::Supervisor::ObsoloteGetGrainSizeWhenDifferentResults>(
      0x9951c12163385530ull, 4, sizeHint);
}
::kj::Promise<void> Supervisor::Server::obsoloteGetGrainSizeWhenDifferent(ObsoloteGetGrainSizeWhenDifferentContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:Supervisor", "obsoloteGetGrainSizeWhenDifferent",
      0x9951c12163385530ull, 4);
}
::capnp::Request< ::sandstorm::Supervisor::RestoreParams,  ::sandstorm::Supervisor::RestoreResults>
Supervisor::Client::restoreRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Supervisor::RestoreParams,  ::sandstorm::Supervisor::RestoreResults>(
      0x9951c12163385530ull, 5, sizeHint);
}
::kj::Promise<void> Supervisor::Server::restore(RestoreContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:Supervisor", "restore",
      0x9951c12163385530ull, 5);
}
::capnp::Request< ::sandstorm::Supervisor::DropParams,  ::sandstorm::Supervisor::DropResults>
Supervisor::Client::dropRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Supervisor::DropParams,  ::sandstorm::Supervisor::DropResults>(
      0x9951c12163385530ull, 6, sizeHint);
}
::kj::Promise<void> Supervisor::Server::drop(DropContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:Supervisor", "drop",
      0x9951c12163385530ull, 6);
}
::capnp::Request< ::sandstorm::Supervisor::WatchLogParams,  ::sandstorm::Supervisor::WatchLogResults>
Supervisor::Client::watchLogRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Supervisor::WatchLogParams,  ::sandstorm::Supervisor::WatchLogResults>(
      0x9951c12163385530ull, 7, sizeHint);
}
::kj::Promise<void> Supervisor::Server::watchLog(WatchLogContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:Supervisor", "watchLog",
      0x9951c12163385530ull, 7);
}
::capnp::Request< ::sandstorm::Supervisor::SyncStorageParams,  ::sandstorm::Supervisor::SyncStorageResults>
Supervisor::Client::syncStorageRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Supervisor::SyncStorageParams,  ::sandstorm::Supervisor::SyncStorageResults>(
      0x9951c12163385530ull, 8, sizeHint);
}
::kj::Promise<void> Supervisor::Server::syncStorage(SyncStorageContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:Supervisor", "syncStorage",
      0x9951c12163385530ull, 8);
}
::capnp::Request< ::sandstorm::Supervisor::GetWwwFileHackParams,  ::sandstorm::Supervisor::GetWwwFileHackResults>
Supervisor::Client::getWwwFileHackRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Supervisor::GetWwwFileHackParams,  ::sandstorm::Supervisor::GetWwwFileHackResults>(
      0x9951c12163385530ull, 9, sizeHint);
}
::kj::Promise<void> Supervisor::Server::getWwwFileHack(GetWwwFileHackContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:Supervisor", "getWwwFileHack",
      0x9951c12163385530ull, 9);
}
::kj::Promise<void> Supervisor::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x9951c12163385530ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/supervisor.capnp:Supervisor", interfaceId);
  }
}
::kj::Promise<void> Supervisor::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return getMainView(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Supervisor::GetMainViewParams,  ::sandstorm::Supervisor::GetMainViewResults>(context));
    case 1:
      return keepAlive(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Supervisor::KeepAliveParams,  ::sandstorm::Supervisor::KeepAliveResults>(context));
    case 2:
      return shutdown(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Supervisor::ShutdownParams,  ::sandstorm::Supervisor::ShutdownResults>(context));
    case 3:
      return obsoleteGetGrainSize(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Supervisor::ObsoleteGetGrainSizeParams,  ::sandstorm::Supervisor::ObsoleteGetGrainSizeResults>(context));
    case 4:
      return obsoloteGetGrainSizeWhenDifferent(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Supervisor::ObsoloteGetGrainSizeWhenDifferentParams,  ::sandstorm::Supervisor::ObsoloteGetGrainSizeWhenDifferentResults>(context));
    case 5:
      return restore(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Supervisor::RestoreParams,  ::sandstorm::Supervisor::RestoreResults>(context));
    case 6:
      return drop(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Supervisor::DropParams,  ::sandstorm::Supervisor::DropResults>(context));
    case 7:
      return watchLog(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Supervisor::WatchLogParams,  ::sandstorm::Supervisor::WatchLogResults>(context));
    case 8:
      return syncStorage(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Supervisor::SyncStorageParams,  ::sandstorm::Supervisor::SyncStorageResults>(context));
    case 9:
      return getWwwFileHack(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Supervisor::GetWwwFileHackParams,  ::sandstorm::Supervisor::GetWwwFileHackResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/supervisor.capnp:Supervisor",
          0x9951c12163385530ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Supervisor
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::GetMainViewParams
constexpr uint16_t Supervisor::GetMainViewParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::GetMainViewParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::GetMainViewParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::GetMainViewParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::GetMainViewParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::GetMainViewResults
constexpr uint16_t Supervisor::GetMainViewResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::GetMainViewResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::GetMainViewResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::GetMainViewResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::GetMainViewResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::KeepAliveParams
constexpr uint16_t Supervisor::KeepAliveParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::KeepAliveParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::KeepAliveParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::KeepAliveParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::KeepAliveParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::KeepAliveResults
constexpr uint16_t Supervisor::KeepAliveResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::KeepAliveResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::KeepAliveResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::KeepAliveResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::KeepAliveResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::ShutdownParams
constexpr uint16_t Supervisor::ShutdownParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::ShutdownParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::ShutdownParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::ShutdownParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::ShutdownParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::ShutdownResults
constexpr uint16_t Supervisor::ShutdownResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::ShutdownResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::ShutdownResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::ShutdownResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::ShutdownResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::ObsoleteGetGrainSizeParams
constexpr uint16_t Supervisor::ObsoleteGetGrainSizeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::ObsoleteGetGrainSizeParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::ObsoleteGetGrainSizeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::ObsoleteGetGrainSizeParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::ObsoleteGetGrainSizeParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::ObsoleteGetGrainSizeResults
constexpr uint16_t Supervisor::ObsoleteGetGrainSizeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::ObsoleteGetGrainSizeResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::ObsoleteGetGrainSizeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::ObsoleteGetGrainSizeResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::ObsoleteGetGrainSizeResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::ObsoloteGetGrainSizeWhenDifferentParams
constexpr uint16_t Supervisor::ObsoloteGetGrainSizeWhenDifferentParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::ObsoloteGetGrainSizeWhenDifferentParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::ObsoloteGetGrainSizeWhenDifferentParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::ObsoloteGetGrainSizeWhenDifferentParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::ObsoloteGetGrainSizeWhenDifferentParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::ObsoloteGetGrainSizeWhenDifferentResults
constexpr uint16_t Supervisor::ObsoloteGetGrainSizeWhenDifferentResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::ObsoloteGetGrainSizeWhenDifferentResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::ObsoloteGetGrainSizeWhenDifferentResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::ObsoloteGetGrainSizeWhenDifferentResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::ObsoloteGetGrainSizeWhenDifferentResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::RestoreParams
constexpr uint16_t Supervisor::RestoreParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::RestoreParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::RestoreParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::RestoreParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::RestoreParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::RestoreResults
constexpr uint16_t Supervisor::RestoreResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::RestoreResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::RestoreResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::RestoreResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::RestoreResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::DropParams
constexpr uint16_t Supervisor::DropParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::DropParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::DropParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::DropParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::DropParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::DropResults
constexpr uint16_t Supervisor::DropResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::DropResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::DropResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::DropResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::DropResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::WatchLogParams
constexpr uint16_t Supervisor::WatchLogParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::WatchLogParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::WatchLogParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::WatchLogParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::WatchLogParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::WatchLogResults
constexpr uint16_t Supervisor::WatchLogResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::WatchLogResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::WatchLogResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::WatchLogResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::WatchLogResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::SyncStorageParams
constexpr uint16_t Supervisor::SyncStorageParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::SyncStorageParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::SyncStorageParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::SyncStorageParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::SyncStorageParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::SyncStorageResults
constexpr uint16_t Supervisor::SyncStorageResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::SyncStorageResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::SyncStorageResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::SyncStorageResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::SyncStorageResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::GetWwwFileHackParams
constexpr uint16_t Supervisor::GetWwwFileHackParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::GetWwwFileHackParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::GetWwwFileHackParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::GetWwwFileHackParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::GetWwwFileHackParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Supervisor::GetWwwFileHackResults
constexpr uint16_t Supervisor::GetWwwFileHackResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Supervisor::GetWwwFileHackResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Supervisor::GetWwwFileHackResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Supervisor::GetWwwFileHackResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Supervisor::GetWwwFileHackResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::SandstormCore::RestoreParams,  ::sandstorm::SandstormCore::RestoreResults>
SandstormCore::Client::restoreRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::SandstormCore::RestoreParams,  ::sandstorm::SandstormCore::RestoreResults>(
      0x9ba45778a294b60cull, 0, sizeHint);
}
::kj::Promise<void> SandstormCore::Server::restore(RestoreContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:SandstormCore", "restore",
      0x9ba45778a294b60cull, 0);
}
::capnp::Request< ::sandstorm::SandstormCore::MakeTokenParams,  ::sandstorm::SandstormCore::MakeTokenResults>
SandstormCore::Client::makeTokenRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::SandstormCore::MakeTokenParams,  ::sandstorm::SandstormCore::MakeTokenResults>(
      0x9ba45778a294b60cull, 1, sizeHint);
}
::kj::Promise<void> SandstormCore::Server::makeToken(MakeTokenContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:SandstormCore", "makeToken",
      0x9ba45778a294b60cull, 1);
}
::capnp::Request< ::sandstorm::SandstormCore::GetOwnerNotificationTargetParams,  ::sandstorm::SandstormCore::GetOwnerNotificationTargetResults>
SandstormCore::Client::getOwnerNotificationTargetRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::SandstormCore::GetOwnerNotificationTargetParams,  ::sandstorm::SandstormCore::GetOwnerNotificationTargetResults>(
      0x9ba45778a294b60cull, 2, sizeHint);
}
::kj::Promise<void> SandstormCore::Server::getOwnerNotificationTarget(GetOwnerNotificationTargetContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:SandstormCore", "getOwnerNotificationTarget",
      0x9ba45778a294b60cull, 2);
}
::capnp::Request< ::sandstorm::SandstormCore::DropParams,  ::sandstorm::SandstormCore::DropResults>
SandstormCore::Client::dropRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::SandstormCore::DropParams,  ::sandstorm::SandstormCore::DropResults>(
      0x9ba45778a294b60cull, 3, sizeHint);
}
::kj::Promise<void> SandstormCore::Server::drop(DropContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:SandstormCore", "drop",
      0x9ba45778a294b60cull, 3);
}
::capnp::Request< ::sandstorm::SandstormCore::CheckRequirementsParams,  ::sandstorm::SandstormCore::CheckRequirementsResults>
SandstormCore::Client::checkRequirementsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::SandstormCore::CheckRequirementsParams,  ::sandstorm::SandstormCore::CheckRequirementsResults>(
      0x9ba45778a294b60cull, 4, sizeHint);
}
::kj::Promise<void> SandstormCore::Server::checkRequirements(CheckRequirementsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:SandstormCore", "checkRequirements",
      0x9ba45778a294b60cull, 4);
}
::capnp::Request< ::sandstorm::SandstormCore::MakeChildTokenParams,  ::sandstorm::SandstormCore::MakeChildTokenResults>
SandstormCore::Client::makeChildTokenRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::SandstormCore::MakeChildTokenParams,  ::sandstorm::SandstormCore::MakeChildTokenResults>(
      0x9ba45778a294b60cull, 5, sizeHint);
}
::kj::Promise<void> SandstormCore::Server::makeChildToken(MakeChildTokenContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:SandstormCore", "makeChildToken",
      0x9ba45778a294b60cull, 5);
}
::capnp::Request< ::sandstorm::SandstormCore::ClaimRequestParams,  ::sandstorm::SandstormCore::ClaimRequestResults>
SandstormCore::Client::claimRequestRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::SandstormCore::ClaimRequestParams,  ::sandstorm::SandstormCore::ClaimRequestResults>(
      0x9ba45778a294b60cull, 6, sizeHint);
}
::kj::Promise<void> SandstormCore::Server::claimRequest(ClaimRequestContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:SandstormCore", "claimRequest",
      0x9ba45778a294b60cull, 6);
}
::capnp::Request< ::sandstorm::SandstormCore::BackgroundActivityParams,  ::sandstorm::SandstormCore::BackgroundActivityResults>
SandstormCore::Client::backgroundActivityRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::SandstormCore::BackgroundActivityParams,  ::sandstorm::SandstormCore::BackgroundActivityResults>(
      0x9ba45778a294b60cull, 7, sizeHint);
}
::kj::Promise<void> SandstormCore::Server::backgroundActivity(BackgroundActivityContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:SandstormCore", "backgroundActivity",
      0x9ba45778a294b60cull, 7);
}
::capnp::Request< ::sandstorm::SandstormCore::ReportGrainSizeParams,  ::sandstorm::SandstormCore::ReportGrainSizeResults>
SandstormCore::Client::reportGrainSizeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::SandstormCore::ReportGrainSizeParams,  ::sandstorm::SandstormCore::ReportGrainSizeResults>(
      0x9ba45778a294b60cull, 8, sizeHint);
}
::kj::Promise<void> SandstormCore::Server::reportGrainSize(ReportGrainSizeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:SandstormCore", "reportGrainSize",
      0x9ba45778a294b60cull, 8);
}
::kj::Promise<void> SandstormCore::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x9ba45778a294b60cull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/supervisor.capnp:SandstormCore", interfaceId);
  }
}
::kj::Promise<void> SandstormCore::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return restore(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::SandstormCore::RestoreParams,  ::sandstorm::SandstormCore::RestoreResults>(context));
    case 1:
      return makeToken(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::SandstormCore::MakeTokenParams,  ::sandstorm::SandstormCore::MakeTokenResults>(context));
    case 2:
      return getOwnerNotificationTarget(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::SandstormCore::GetOwnerNotificationTargetParams,  ::sandstorm::SandstormCore::GetOwnerNotificationTargetResults>(context));
    case 3:
      return drop(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::SandstormCore::DropParams,  ::sandstorm::SandstormCore::DropResults>(context));
    case 4:
      return checkRequirements(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::SandstormCore::CheckRequirementsParams,  ::sandstorm::SandstormCore::CheckRequirementsResults>(context));
    case 5:
      return makeChildToken(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::SandstormCore::MakeChildTokenParams,  ::sandstorm::SandstormCore::MakeChildTokenResults>(context));
    case 6:
      return claimRequest(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::SandstormCore::ClaimRequestParams,  ::sandstorm::SandstormCore::ClaimRequestResults>(context));
    case 7:
      return backgroundActivity(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::SandstormCore::BackgroundActivityParams,  ::sandstorm::SandstormCore::BackgroundActivityResults>(context));
    case 8:
      return reportGrainSize(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::SandstormCore::ReportGrainSizeParams,  ::sandstorm::SandstormCore::ReportGrainSizeResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/supervisor.capnp:SandstormCore",
          0x9ba45778a294b60cull, methodId);
  }
}
#endif  // !CAPNP_LITE

// SandstormCore
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::SandstormCore::RequirementObserver::ObserveParams,  ::sandstorm::SandstormCore::RequirementObserver::ObserveResults>
SandstormCore::RequirementObserver::Client::observeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::SandstormCore::RequirementObserver::ObserveParams,  ::sandstorm::SandstormCore::RequirementObserver::ObserveResults>(
      0xa3eb8443f86b46f7ull, 0, sizeHint);
}
::kj::Promise<void> SandstormCore::RequirementObserver::Server::observe(ObserveContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:SandstormCore.RequirementObserver", "observe",
      0xa3eb8443f86b46f7ull, 0);
}
::kj::Promise<void> SandstormCore::RequirementObserver::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xa3eb8443f86b46f7ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/supervisor.capnp:SandstormCore.RequirementObserver", interfaceId);
  }
}
::kj::Promise<void> SandstormCore::RequirementObserver::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return observe(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::SandstormCore::RequirementObserver::ObserveParams,  ::sandstorm::SandstormCore::RequirementObserver::ObserveResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/supervisor.capnp:SandstormCore.RequirementObserver",
          0xa3eb8443f86b46f7ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// SandstormCore::RequirementObserver
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::RequirementObserver::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::RequirementObserver::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::RequirementObserver::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::RequirementObserver::ObserveParams
constexpr uint16_t SandstormCore::RequirementObserver::ObserveParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::RequirementObserver::ObserveParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::RequirementObserver::ObserveParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::RequirementObserver::ObserveParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::RequirementObserver::ObserveParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::RequirementObserver::ObserveResults
constexpr uint16_t SandstormCore::RequirementObserver::ObserveResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::RequirementObserver::ObserveResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::RequirementObserver::ObserveResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::RequirementObserver::ObserveResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::RequirementObserver::ObserveResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::RestoreParams
constexpr uint16_t SandstormCore::RestoreParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::RestoreParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::RestoreParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::RestoreParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::RestoreParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::RestoreResults
constexpr uint16_t SandstormCore::RestoreResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::RestoreResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::RestoreResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::RestoreResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::RestoreResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::MakeTokenParams
constexpr uint16_t SandstormCore::MakeTokenParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::MakeTokenParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::MakeTokenParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::MakeTokenParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::MakeTokenParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::MakeTokenResults
constexpr uint16_t SandstormCore::MakeTokenResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::MakeTokenResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::MakeTokenResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::MakeTokenResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::MakeTokenResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::GetOwnerNotificationTargetParams
constexpr uint16_t SandstormCore::GetOwnerNotificationTargetParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::GetOwnerNotificationTargetParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::GetOwnerNotificationTargetParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::GetOwnerNotificationTargetParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::GetOwnerNotificationTargetParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::GetOwnerNotificationTargetResults
constexpr uint16_t SandstormCore::GetOwnerNotificationTargetResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::GetOwnerNotificationTargetResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::GetOwnerNotificationTargetResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::GetOwnerNotificationTargetResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::GetOwnerNotificationTargetResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::DropParams
constexpr uint16_t SandstormCore::DropParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::DropParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::DropParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::DropParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::DropParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::DropResults
constexpr uint16_t SandstormCore::DropResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::DropResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::DropResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::DropResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::DropResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::CheckRequirementsParams
constexpr uint16_t SandstormCore::CheckRequirementsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::CheckRequirementsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::CheckRequirementsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::CheckRequirementsParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::CheckRequirementsParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::CheckRequirementsResults
constexpr uint16_t SandstormCore::CheckRequirementsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::CheckRequirementsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::CheckRequirementsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::CheckRequirementsResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::CheckRequirementsResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::MakeChildTokenParams
constexpr uint16_t SandstormCore::MakeChildTokenParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::MakeChildTokenParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::MakeChildTokenParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::MakeChildTokenParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::MakeChildTokenParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::MakeChildTokenResults
constexpr uint16_t SandstormCore::MakeChildTokenResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::MakeChildTokenResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::MakeChildTokenResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::MakeChildTokenResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::MakeChildTokenResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::ClaimRequestParams
constexpr uint16_t SandstormCore::ClaimRequestParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::ClaimRequestParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::ClaimRequestParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::ClaimRequestParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::ClaimRequestParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::ClaimRequestResults
constexpr uint16_t SandstormCore::ClaimRequestResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::ClaimRequestResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::ClaimRequestResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::ClaimRequestResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::ClaimRequestResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::BackgroundActivityParams
constexpr uint16_t SandstormCore::BackgroundActivityParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::BackgroundActivityParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::BackgroundActivityParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::BackgroundActivityParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::BackgroundActivityParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::BackgroundActivityResults
constexpr uint16_t SandstormCore::BackgroundActivityResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::BackgroundActivityResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::BackgroundActivityResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::BackgroundActivityResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::BackgroundActivityResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::ReportGrainSizeParams
constexpr uint16_t SandstormCore::ReportGrainSizeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::ReportGrainSizeParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::ReportGrainSizeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::ReportGrainSizeParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::ReportGrainSizeParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCore::ReportGrainSizeResults
constexpr uint16_t SandstormCore::ReportGrainSizeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCore::ReportGrainSizeResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCore::ReportGrainSizeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCore::ReportGrainSizeResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCore::ReportGrainSizeResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// MembraneRequirement
constexpr uint16_t MembraneRequirement::_capnpPrivate::dataWordSize;
constexpr uint16_t MembraneRequirement::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind MembraneRequirement::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MembraneRequirement::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* MembraneRequirement::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// MembraneRequirement::PermissionsHeld
constexpr uint16_t MembraneRequirement::PermissionsHeld::_capnpPrivate::dataWordSize;
constexpr uint16_t MembraneRequirement::PermissionsHeld::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind MembraneRequirement::PermissionsHeld::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MembraneRequirement::PermissionsHeld::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* MembraneRequirement::PermissionsHeld::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::SystemPersistent::AddRequirementsParams,  ::sandstorm::SystemPersistent::AddRequirementsResults>
SystemPersistent::Client::addRequirementsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::SystemPersistent::AddRequirementsParams,  ::sandstorm::SystemPersistent::AddRequirementsResults>(
      0xc38cedd77cbed5b4ull, 0, sizeHint);
}
::kj::Promise<void> SystemPersistent::Server::addRequirements(AddRequirementsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/supervisor.capnp:SystemPersistent", "addRequirements",
      0xc38cedd77cbed5b4ull, 0);
}
::kj::Promise<void> SystemPersistent::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xc38cedd77cbed5b4ull:
      return dispatchCallInternal(methodId, context);
    case 0xc8cb212fcd9f5691ull:
      return  ::capnp::Persistent< ::capnp::Data,  ::sandstorm::ApiTokenOwner>::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/supervisor.capnp:SystemPersistent", interfaceId);
  }
}
::kj::Promise<void> SystemPersistent::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return addRequirements(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::SystemPersistent::AddRequirementsParams,  ::sandstorm::SystemPersistent::AddRequirementsResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/supervisor.capnp:SystemPersistent",
          0xc38cedd77cbed5b4ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// SystemPersistent
#if !CAPNP_LITE
constexpr ::capnp::Kind SystemPersistent::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SystemPersistent::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SystemPersistent::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SystemPersistent::AddRequirementsParams
constexpr uint16_t SystemPersistent::AddRequirementsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SystemPersistent::AddRequirementsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SystemPersistent::AddRequirementsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SystemPersistent::AddRequirementsParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SystemPersistent::AddRequirementsParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SystemPersistent::AddRequirementsResults
constexpr uint16_t SystemPersistent::AddRequirementsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SystemPersistent::AddRequirementsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SystemPersistent::AddRequirementsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SystemPersistent::AddRequirementsResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SystemPersistent::AddRequirementsResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::kj::Promise<void> PersistentHandle::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xc22ce229c18c0a02ull:
      return dispatchCallInternal(methodId, context);
    case 0x98f424ac606042e0ull:
      return  ::sandstorm::Handle::Server::dispatchCallInternal(methodId, context);
    case 0xc38cedd77cbed5b4ull:
      return  ::sandstorm::SystemPersistent::Server::dispatchCallInternal(methodId, context);
    case 0xc8cb212fcd9f5691ull:
      return  ::capnp::Persistent< ::capnp::Data,  ::sandstorm::ApiTokenOwner>::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/supervisor.capnp:PersistentHandle", interfaceId);
  }
}
::kj::Promise<void> PersistentHandle::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/supervisor.capnp:PersistentHandle",
          0xc22ce229c18c0a02ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// PersistentHandle
#if !CAPNP_LITE
constexpr ::capnp::Kind PersistentHandle::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PersistentHandle::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* PersistentHandle::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::kj::Promise<void> PersistentOngoingNotification::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xdbbdcec8587dd355ull:
      return dispatchCallInternal(methodId, context);
    case 0xc38cedd77cbed5b4ull:
      return  ::sandstorm::SystemPersistent::Server::dispatchCallInternal(methodId, context);
    case 0xc8cb212fcd9f5691ull:
      return  ::capnp::Persistent< ::capnp::Data,  ::sandstorm::ApiTokenOwner>::Server::dispatchCallInternal(methodId, context);
    case 0xfe851ddbb88940cdull:
      return  ::sandstorm::OngoingNotification::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/supervisor.capnp:PersistentOngoingNotification", interfaceId);
  }
}
::kj::Promise<void> PersistentOngoingNotification::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/supervisor.capnp:PersistentOngoingNotification",
          0xdbbdcec8587dd355ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// PersistentOngoingNotification
#if !CAPNP_LITE
constexpr ::capnp::Kind PersistentOngoingNotification::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PersistentOngoingNotification::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* PersistentOngoingNotification::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// DenormalizedGrainMetadata
constexpr uint16_t DenormalizedGrainMetadata::_capnpPrivate::dataWordSize;
constexpr uint16_t DenormalizedGrainMetadata::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind DenormalizedGrainMetadata::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* DenormalizedGrainMetadata::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* DenormalizedGrainMetadata::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// DenormalizedGrainMetadata::Icon
constexpr uint16_t DenormalizedGrainMetadata::Icon::_capnpPrivate::dataWordSize;
constexpr uint16_t DenormalizedGrainMetadata::Icon::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind DenormalizedGrainMetadata::Icon::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* DenormalizedGrainMetadata::Icon::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* DenormalizedGrainMetadata::Icon::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ApiTokenOwner
constexpr uint16_t ApiTokenOwner::_capnpPrivate::dataWordSize;
constexpr uint16_t ApiTokenOwner::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ApiTokenOwner::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ApiTokenOwner::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ApiTokenOwner::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ApiTokenOwner::Grain
constexpr uint16_t ApiTokenOwner::Grain::_capnpPrivate::dataWordSize;
constexpr uint16_t ApiTokenOwner::Grain::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ApiTokenOwner::Grain::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ApiTokenOwner::Grain::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ApiTokenOwner::Grain::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ApiTokenOwner::User
constexpr uint16_t ApiTokenOwner::User::_capnpPrivate::dataWordSize;
constexpr uint16_t ApiTokenOwner::User::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ApiTokenOwner::User::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ApiTokenOwner::User::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ApiTokenOwner::User::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ApiTokenOwner::ClientPowerboxRequest
constexpr uint16_t ApiTokenOwner::ClientPowerboxRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t ApiTokenOwner::ClientPowerboxRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ApiTokenOwner::ClientPowerboxRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ApiTokenOwner::ClientPowerboxRequest::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ApiTokenOwner::ClientPowerboxRequest::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ApiTokenOwner::ClientPowerboxOffer
constexpr uint16_t ApiTokenOwner::ClientPowerboxOffer::_capnpPrivate::dataWordSize;
constexpr uint16_t ApiTokenOwner::ClientPowerboxOffer::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ApiTokenOwner::ClientPowerboxOffer::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ApiTokenOwner::ClientPowerboxOffer::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ApiTokenOwner::ClientPowerboxOffer::_capnpPrivate::brand;
#endif  // !CAPNP_LITE


}  // namespace

