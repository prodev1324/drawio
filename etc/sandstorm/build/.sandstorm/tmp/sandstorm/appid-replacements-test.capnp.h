// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: appid-replacements-test.capnp

#ifndef CAPNP_INCLUDED_bee445adfb01a777_
#define CAPNP_INCLUDED_bee445adfb01a777_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "appid-replacements.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9440399ec56efc9b);
CAPNP_DECLARE_SCHEMA(a4039a8503794bb5);
CAPNP_DECLARE_SCHEMA(af2f0d76a56e3559);
CAPNP_DECLARE_SCHEMA(f747c7537f61d15e);
CAPNP_DECLARE_SCHEMA(9607b1f83cab1ff5);
CAPNP_DECLARE_SCHEMA(af87bcb778eaad68);
CAPNP_DECLARE_SCHEMA(83dd7f735581bbf6);
CAPNP_DECLARE_SCHEMA(bcb098ad1f300dab);
CAPNP_DECLARE_SCHEMA(c6d560121c91da08);
CAPNP_DECLARE_SCHEMA(f8377658a7706b08);
CAPNP_DECLARE_SCHEMA(c0826b1f73498cd7);
CAPNP_DECLARE_SCHEMA(d381037554cc22f3);
CAPNP_DECLARE_SCHEMA(c9ff15fb0eece422);

}  // namespace schemas
}  // namespace capnp

namespace sandstorm {

struct TestIds {
  TestIds() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static const ::capnp::_::ConstText<52> UNUSED_APP;
  static const ::capnp::_::ConstText<52> APP1;
  static const ::capnp::_::ConstText<52> APP2;
  static const ::capnp::_::ConstText<52> APP3;
  static const ::capnp::_::ConstText<52> APP4;
  static const ::capnp::_::ConstText<52> APP5;
  static const ::capnp::_::ConstText<52> APP6;
  static const ::capnp::_::ConstText<32> UNUSED_PKG;
  static const ::capnp::_::ConstText<32> PKG1;
  static const ::capnp::_::ConstText<32> PKG2;
  static const ::capnp::_::ConstText<32> PKG3;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9440399ec56efc9b, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

extern const ::capnp::_::ConstList< ::sandstorm::spk::AppIdReplacement> TEST_APP_ID_REPLACEMENT_LIST;
// =======================================================================================

class TestIds::Reader {
public:
  typedef TestIds Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestIds::Builder {
public:
  typedef TestIds Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestIds::Pipeline {
public:
  typedef TestIds Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

}  // namespace

#endif  // CAPNP_INCLUDED_bee445adfb01a777_
