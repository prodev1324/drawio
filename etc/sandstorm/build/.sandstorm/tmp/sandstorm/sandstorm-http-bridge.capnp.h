// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: sandstorm-http-bridge.capnp

#ifndef CAPNP_INCLUDED_ac137d236832bb1e_
#define CAPNP_INCLUDED_ac137d236832bb1e_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "grain.capnp.h"
#include "identity.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ad678f0d09bdd98a);
CAPNP_DECLARE_SCHEMA(86d490c59f64c564);
CAPNP_DECLARE_SCHEMA(c174fe273bd649ac);
CAPNP_DECLARE_SCHEMA(c2a480fa3863a3fa);
CAPNP_DECLARE_SCHEMA(b84ffa3322e48dbd);
CAPNP_DECLARE_SCHEMA(930d8201947c86bf);
CAPNP_DECLARE_SCHEMA(c2ba6a7e9ab2e369);

}  // namespace schemas
}  // namespace capnp

namespace sandstorm {

struct SandstormHttpBridge {
  SandstormHttpBridge() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct GetSandstormApiParams;
  struct GetSandstormApiResults;
  struct GetSessionContextParams;
  struct GetSessionContextResults;
  struct GetSavedIdentityParams;
  struct GetSavedIdentityResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(ad678f0d09bdd98a)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct SandstormHttpBridge::GetSandstormApiParams {
  GetSandstormApiParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86d490c59f64c564, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormHttpBridge::GetSandstormApiResults {
  GetSandstormApiResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c174fe273bd649ac, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormHttpBridge::GetSessionContextParams {
  GetSessionContextParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c2a480fa3863a3fa, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormHttpBridge::GetSessionContextResults {
  GetSessionContextResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b84ffa3322e48dbd, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormHttpBridge::GetSavedIdentityParams {
  GetSavedIdentityParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(930d8201947c86bf, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormHttpBridge::GetSavedIdentityResults {
  GetSavedIdentityResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c2ba6a7e9ab2e369, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

#if !CAPNP_LITE
class SandstormHttpBridge::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef SandstormHttpBridge Calls;
  typedef SandstormHttpBridge Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::SandstormHttpBridge::GetSandstormApiParams,  ::sandstorm::SandstormHttpBridge::GetSandstormApiResults> getSandstormApiRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SandstormHttpBridge::GetSessionContextParams,  ::sandstorm::SandstormHttpBridge::GetSessionContextResults> getSessionContextRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SandstormHttpBridge::GetSavedIdentityParams,  ::sandstorm::SandstormHttpBridge::GetSavedIdentityResults> getSavedIdentityRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class SandstormHttpBridge::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef SandstormHttpBridge Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::SandstormHttpBridge::GetSandstormApiParams GetSandstormApiParams;
  typedef  ::sandstorm::SandstormHttpBridge::GetSandstormApiResults GetSandstormApiResults;
  typedef ::capnp::CallContext<GetSandstormApiParams, GetSandstormApiResults> GetSandstormApiContext;
  virtual ::kj::Promise<void> getSandstormApi(GetSandstormApiContext context);
  typedef  ::sandstorm::SandstormHttpBridge::GetSessionContextParams GetSessionContextParams;
  typedef  ::sandstorm::SandstormHttpBridge::GetSessionContextResults GetSessionContextResults;
  typedef ::capnp::CallContext<GetSessionContextParams, GetSessionContextResults> GetSessionContextContext;
  virtual ::kj::Promise<void> getSessionContext(GetSessionContextContext context);
  typedef  ::sandstorm::SandstormHttpBridge::GetSavedIdentityParams GetSavedIdentityParams;
  typedef  ::sandstorm::SandstormHttpBridge::GetSavedIdentityResults GetSavedIdentityResults;
  typedef ::capnp::CallContext<GetSavedIdentityParams, GetSavedIdentityResults> GetSavedIdentityContext;
  virtual ::kj::Promise<void> getSavedIdentity(GetSavedIdentityContext context);

  inline  ::sandstorm::SandstormHttpBridge::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::SandstormHttpBridge>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class SandstormHttpBridge::GetSandstormApiParams::Reader {
public:
  typedef GetSandstormApiParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormHttpBridge::GetSandstormApiParams::Builder {
public:
  typedef GetSandstormApiParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormHttpBridge::GetSandstormApiParams::Pipeline {
public:
  typedef GetSandstormApiParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormHttpBridge::GetSandstormApiResults::Reader {
public:
  typedef GetSandstormApiResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasApi() const;
#if !CAPNP_LITE
  inline  ::sandstorm::SandstormApi< ::capnp::AnyPointer>::Client getApi() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormHttpBridge::GetSandstormApiResults::Builder {
public:
  typedef GetSandstormApiResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasApi();
#if !CAPNP_LITE
  inline  ::sandstorm::SandstormApi< ::capnp::AnyPointer>::Client getApi();
  inline void setApi( ::sandstorm::SandstormApi< ::capnp::AnyPointer>::Client&& value);
  inline void setApi( ::sandstorm::SandstormApi< ::capnp::AnyPointer>::Client& value);
  inline void adoptApi(::capnp::Orphan< ::sandstorm::SandstormApi< ::capnp::AnyPointer>>&& value);
  inline ::capnp::Orphan< ::sandstorm::SandstormApi< ::capnp::AnyPointer>> disownApi();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormHttpBridge::GetSandstormApiResults::Pipeline {
public:
  typedef GetSandstormApiResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::SandstormApi< ::capnp::AnyPointer>::Client getApi();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormHttpBridge::GetSessionContextParams::Reader {
public:
  typedef GetSessionContextParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormHttpBridge::GetSessionContextParams::Builder {
public:
  typedef GetSessionContextParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormHttpBridge::GetSessionContextParams::Pipeline {
public:
  typedef GetSessionContextParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormHttpBridge::GetSessionContextResults::Reader {
public:
  typedef GetSessionContextResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasContext() const;
#if !CAPNP_LITE
  inline  ::sandstorm::SessionContext::Client getContext() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormHttpBridge::GetSessionContextResults::Builder {
public:
  typedef GetSessionContextResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasContext();
#if !CAPNP_LITE
  inline  ::sandstorm::SessionContext::Client getContext();
  inline void setContext( ::sandstorm::SessionContext::Client&& value);
  inline void setContext( ::sandstorm::SessionContext::Client& value);
  inline void adoptContext(::capnp::Orphan< ::sandstorm::SessionContext>&& value);
  inline ::capnp::Orphan< ::sandstorm::SessionContext> disownContext();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormHttpBridge::GetSessionContextResults::Pipeline {
public:
  typedef GetSessionContextResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::SessionContext::Client getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormHttpBridge::GetSavedIdentityParams::Reader {
public:
  typedef GetSavedIdentityParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasIdentityId() const;
  inline  ::capnp::Text::Reader getIdentityId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormHttpBridge::GetSavedIdentityParams::Builder {
public:
  typedef GetSavedIdentityParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasIdentityId();
  inline  ::capnp::Text::Builder getIdentityId();
  inline void setIdentityId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initIdentityId(unsigned int size);
  inline void adoptIdentityId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownIdentityId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormHttpBridge::GetSavedIdentityParams::Pipeline {
public:
  typedef GetSavedIdentityParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormHttpBridge::GetSavedIdentityResults::Reader {
public:
  typedef GetSavedIdentityResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasIdentity() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Identity::Client getIdentity() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormHttpBridge::GetSavedIdentityResults::Builder {
public:
  typedef GetSavedIdentityResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasIdentity();
#if !CAPNP_LITE
  inline  ::sandstorm::Identity::Client getIdentity();
  inline void setIdentity( ::sandstorm::Identity::Client&& value);
  inline void setIdentity( ::sandstorm::Identity::Client& value);
  inline void adoptIdentity(::capnp::Orphan< ::sandstorm::Identity>&& value);
  inline ::capnp::Orphan< ::sandstorm::Identity> disownIdentity();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormHttpBridge::GetSavedIdentityResults::Pipeline {
public:
  typedef GetSavedIdentityResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Identity::Client getIdentity();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
inline SandstormHttpBridge::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline SandstormHttpBridge::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline SandstormHttpBridge::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline SandstormHttpBridge::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline SandstormHttpBridge::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::SandstormHttpBridge::Client& SandstormHttpBridge::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::SandstormHttpBridge::Client& SandstormHttpBridge::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool SandstormHttpBridge::GetSandstormApiResults::Reader::hasApi() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormHttpBridge::GetSandstormApiResults::Builder::hasApi() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::SandstormApi< ::capnp::AnyPointer>::Client SandstormHttpBridge::GetSandstormApiResults::Reader::getApi() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::SandstormApi< ::capnp::AnyPointer>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::SandstormApi< ::capnp::AnyPointer>::Client SandstormHttpBridge::GetSandstormApiResults::Builder::getApi() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SandstormApi< ::capnp::AnyPointer>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::SandstormApi< ::capnp::AnyPointer>::Client SandstormHttpBridge::GetSandstormApiResults::Pipeline::getApi() {
  return  ::sandstorm::SandstormApi< ::capnp::AnyPointer>::Client(_typeless.getPointerField(0).asCap());
}
inline void SandstormHttpBridge::GetSandstormApiResults::Builder::setApi( ::sandstorm::SandstormApi< ::capnp::AnyPointer>::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SandstormApi< ::capnp::AnyPointer>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SandstormHttpBridge::GetSandstormApiResults::Builder::setApi( ::sandstorm::SandstormApi< ::capnp::AnyPointer>::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SandstormApi< ::capnp::AnyPointer>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SandstormHttpBridge::GetSandstormApiResults::Builder::adoptApi(
    ::capnp::Orphan< ::sandstorm::SandstormApi< ::capnp::AnyPointer>>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::SandstormApi< ::capnp::AnyPointer>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::SandstormApi< ::capnp::AnyPointer>> SandstormHttpBridge::GetSandstormApiResults::Builder::disownApi() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SandstormApi< ::capnp::AnyPointer>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool SandstormHttpBridge::GetSessionContextParams::Reader::hasId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormHttpBridge::GetSessionContextParams::Builder::hasId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SandstormHttpBridge::GetSessionContextParams::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SandstormHttpBridge::GetSessionContextParams::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SandstormHttpBridge::GetSessionContextParams::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SandstormHttpBridge::GetSessionContextParams::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SandstormHttpBridge::GetSessionContextParams::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SandstormHttpBridge::GetSessionContextParams::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SandstormHttpBridge::GetSessionContextResults::Reader::hasContext() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormHttpBridge::GetSessionContextResults::Builder::hasContext() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::SessionContext::Client SandstormHttpBridge::GetSessionContextResults::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::SessionContext::Client SandstormHttpBridge::GetSessionContextResults::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::SessionContext::Client SandstormHttpBridge::GetSessionContextResults::Pipeline::getContext() {
  return  ::sandstorm::SessionContext::Client(_typeless.getPointerField(0).asCap());
}
inline void SandstormHttpBridge::GetSessionContextResults::Builder::setContext( ::sandstorm::SessionContext::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SandstormHttpBridge::GetSessionContextResults::Builder::setContext( ::sandstorm::SessionContext::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SandstormHttpBridge::GetSessionContextResults::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::SessionContext>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::SessionContext> SandstormHttpBridge::GetSessionContextResults::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool SandstormHttpBridge::GetSavedIdentityParams::Reader::hasIdentityId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormHttpBridge::GetSavedIdentityParams::Builder::hasIdentityId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SandstormHttpBridge::GetSavedIdentityParams::Reader::getIdentityId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SandstormHttpBridge::GetSavedIdentityParams::Builder::getIdentityId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SandstormHttpBridge::GetSavedIdentityParams::Builder::setIdentityId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SandstormHttpBridge::GetSavedIdentityParams::Builder::initIdentityId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SandstormHttpBridge::GetSavedIdentityParams::Builder::adoptIdentityId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SandstormHttpBridge::GetSavedIdentityParams::Builder::disownIdentityId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SandstormHttpBridge::GetSavedIdentityResults::Reader::hasIdentity() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormHttpBridge::GetSavedIdentityResults::Builder::hasIdentity() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Identity::Client SandstormHttpBridge::GetSavedIdentityResults::Reader::getIdentity() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Identity>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Identity::Client SandstormHttpBridge::GetSavedIdentityResults::Builder::getIdentity() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Identity>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Identity::Client SandstormHttpBridge::GetSavedIdentityResults::Pipeline::getIdentity() {
  return  ::sandstorm::Identity::Client(_typeless.getPointerField(0).asCap());
}
inline void SandstormHttpBridge::GetSavedIdentityResults::Builder::setIdentity( ::sandstorm::Identity::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Identity>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SandstormHttpBridge::GetSavedIdentityResults::Builder::setIdentity( ::sandstorm::Identity::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Identity>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SandstormHttpBridge::GetSavedIdentityResults::Builder::adoptIdentity(
    ::capnp::Orphan< ::sandstorm::Identity>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Identity>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Identity> SandstormHttpBridge::GetSavedIdentityResults::Builder::disownIdentity() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Identity>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

}  // namespace

#endif  // CAPNP_INCLUDED_ac137d236832bb1e_
