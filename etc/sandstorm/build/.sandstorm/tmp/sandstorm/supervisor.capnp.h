// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: supervisor.capnp

#ifndef CAPNP_INCLUDED_c7205d6d32c7b040_
#define CAPNP_INCLUDED_c7205d6d32c7b040_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <capnp/persistent.capnp.h>
#include "activity.capnp.h"
#include "grain.capnp.h"
#include "util.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9951c12163385530);
CAPNP_DECLARE_SCHEMA(85ccf31fc4aff09c);
enum class WwwFileStatus_85ccf31fc4aff09c: uint16_t {
  FILE,
  DIRECTORY,
  NOT_FOUND,
};
CAPNP_DECLARE_ENUM(WwwFileStatus, 85ccf31fc4aff09c);
CAPNP_DECLARE_SCHEMA(ba19fd491deeb222);
CAPNP_DECLARE_SCHEMA(88abdb347bc63d0f);
CAPNP_DECLARE_SCHEMA(e4a4f650ea454237);
CAPNP_DECLARE_SCHEMA(a0b4085080573e77);
CAPNP_DECLARE_SCHEMA(d597c8d788fec5df);
CAPNP_DECLARE_SCHEMA(cb7ee0fa69cd6e70);
CAPNP_DECLARE_SCHEMA(f3e98c16ae117300);
CAPNP_DECLARE_SCHEMA(dc76071bd22f9a4b);
CAPNP_DECLARE_SCHEMA(c08fb7eab4fb0e05);
CAPNP_DECLARE_SCHEMA(cce106c2fbaa9b04);
CAPNP_DECLARE_SCHEMA(aae54cb2386e60ab);
CAPNP_DECLARE_SCHEMA(96fb2fd9e320599f);
CAPNP_DECLARE_SCHEMA(af3c0d4c9b788c3b);
CAPNP_DECLARE_SCHEMA(80e7bfc1abd2efa7);
CAPNP_DECLARE_SCHEMA(c152ab1174b40c0a);
CAPNP_DECLARE_SCHEMA(98053037c12fa689);
CAPNP_DECLARE_SCHEMA(cf3e8fcfd0506bd0);
CAPNP_DECLARE_SCHEMA(ba8b9f7f3a411a03);
CAPNP_DECLARE_SCHEMA(f9c6e362d6fcb22a);
CAPNP_DECLARE_SCHEMA(902651d6de458996);
CAPNP_DECLARE_SCHEMA(9ba45778a294b60c);
CAPNP_DECLARE_SCHEMA(a3eb8443f86b46f7);
CAPNP_DECLARE_SCHEMA(99bc33fd5d97c13d);
CAPNP_DECLARE_SCHEMA(cc28367ccc71b3df);
CAPNP_DECLARE_SCHEMA(f839f92f21f00b08);
CAPNP_DECLARE_SCHEMA(92e92771f2b6b2b7);
CAPNP_DECLARE_SCHEMA(f0e8359b121f97d2);
CAPNP_DECLARE_SCHEMA(9f96d4b948521f91);
CAPNP_DECLARE_SCHEMA(af72d693dbf4bf54);
CAPNP_DECLARE_SCHEMA(888c6d95df2cc976);
CAPNP_DECLARE_SCHEMA(e03b8c8163d957c6);
CAPNP_DECLARE_SCHEMA(ce435c92a97c1b97);
CAPNP_DECLARE_SCHEMA(8867ef4f53bc45c3);
CAPNP_DECLARE_SCHEMA(ca83e6f36908ed7f);
CAPNP_DECLARE_SCHEMA(9b25c148edb2b020);
CAPNP_DECLARE_SCHEMA(9ea56a46fc87138a);
CAPNP_DECLARE_SCHEMA(eeaeb799e53e0b01);
CAPNP_DECLARE_SCHEMA(b91071e3d7b9ab13);
CAPNP_DECLARE_SCHEMA(938e798cc0e3d6ac);
CAPNP_DECLARE_SCHEMA(9d87019c48640d21);
CAPNP_DECLARE_SCHEMA(aec15e35d479f4f3);
CAPNP_DECLARE_SCHEMA(c43d5a1430e113ca);
CAPNP_DECLARE_SCHEMA(918db9a721f13886);
CAPNP_DECLARE_SCHEMA(f8092ced6a3fbe30);
CAPNP_DECLARE_SCHEMA(c38cedd77cbed5b4);
CAPNP_DECLARE_SCHEMA(bb5eb0bde1481587);
CAPNP_DECLARE_SCHEMA(8488d5d569f6cffe);
CAPNP_DECLARE_SCHEMA(c22ce229c18c0a02);
CAPNP_DECLARE_SCHEMA(dbbdcec8587dd355);
CAPNP_DECLARE_SCHEMA(bdd9bea5585df6c5);
CAPNP_DECLARE_SCHEMA(d91b98680812bda3);
CAPNP_DECLARE_SCHEMA(da970537e2a8a9a9);
CAPNP_DECLARE_SCHEMA(cb7304c768066421);
CAPNP_DECLARE_SCHEMA(d94fc375e247d63d);
CAPNP_DECLARE_SCHEMA(c765897b7df345ac);
CAPNP_DECLARE_SCHEMA(8882befcdeca7451);
CAPNP_DECLARE_SCHEMA(8e74650737dbb840);

}  // namespace schemas
}  // namespace capnp

namespace sandstorm {

struct Supervisor {
  Supervisor() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  typedef ::capnp::schemas::WwwFileStatus_85ccf31fc4aff09c WwwFileStatus;

  struct GetMainViewParams;
  struct GetMainViewResults;
  struct KeepAliveParams;
  struct KeepAliveResults;
  struct ShutdownParams;
  struct ShutdownResults;
  struct ObsoleteGetGrainSizeParams;
  struct ObsoleteGetGrainSizeResults;
  struct ObsoloteGetGrainSizeWhenDifferentParams;
  struct ObsoloteGetGrainSizeWhenDifferentResults;
  struct RestoreParams;
  struct RestoreResults;
  struct DropParams;
  struct DropResults;
  struct WatchLogParams;
  struct WatchLogResults;
  struct SyncStorageParams;
  struct SyncStorageResults;
  struct GetWwwFileHackParams;
  struct GetWwwFileHackResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(9951c12163385530)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct Supervisor::GetMainViewParams {
  GetMainViewParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba19fd491deeb222, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::GetMainViewResults {
  GetMainViewResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(88abdb347bc63d0f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::KeepAliveParams {
  KeepAliveParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e4a4f650ea454237, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::KeepAliveResults {
  KeepAliveResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0b4085080573e77, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::ShutdownParams {
  ShutdownParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d597c8d788fec5df, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::ShutdownResults {
  ShutdownResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb7ee0fa69cd6e70, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::ObsoleteGetGrainSizeParams {
  ObsoleteGetGrainSizeParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f3e98c16ae117300, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::ObsoleteGetGrainSizeResults {
  ObsoleteGetGrainSizeResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dc76071bd22f9a4b, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::ObsoloteGetGrainSizeWhenDifferentParams {
  ObsoloteGetGrainSizeWhenDifferentParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c08fb7eab4fb0e05, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::ObsoloteGetGrainSizeWhenDifferentResults {
  ObsoloteGetGrainSizeWhenDifferentResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cce106c2fbaa9b04, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::RestoreParams {
  RestoreParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aae54cb2386e60ab, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::RestoreResults {
  RestoreResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(96fb2fd9e320599f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::DropParams {
  DropParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(af3c0d4c9b788c3b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::DropResults {
  DropResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(80e7bfc1abd2efa7, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::WatchLogParams {
  WatchLogParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c152ab1174b40c0a, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::WatchLogResults {
  WatchLogResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98053037c12fa689, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::SyncStorageParams {
  SyncStorageParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf3e8fcfd0506bd0, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::SyncStorageResults {
  SyncStorageResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba8b9f7f3a411a03, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::GetWwwFileHackParams {
  GetWwwFileHackParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f9c6e362d6fcb22a, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Supervisor::GetWwwFileHackResults {
  GetWwwFileHackResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(902651d6de458996, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore {
  SandstormCore() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct RequirementObserver;
  struct RestoreParams;
  struct RestoreResults;
  struct MakeTokenParams;
  struct MakeTokenResults;
  struct GetOwnerNotificationTargetParams;
  struct GetOwnerNotificationTargetResults;
  struct DropParams;
  struct DropResults;
  struct CheckRequirementsParams;
  struct CheckRequirementsResults;
  struct MakeChildTokenParams;
  struct MakeChildTokenResults;
  struct ClaimRequestParams;
  struct ClaimRequestResults;
  struct BackgroundActivityParams;
  struct BackgroundActivityResults;
  struct ReportGrainSizeParams;
  struct ReportGrainSizeResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(9ba45778a294b60c)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct SandstormCore::RequirementObserver {
  RequirementObserver() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct ObserveParams;
  struct ObserveResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(a3eb8443f86b46f7)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct SandstormCore::RequirementObserver::ObserveParams {
  ObserveParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(99bc33fd5d97c13d, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::RequirementObserver::ObserveResults {
  ObserveResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cc28367ccc71b3df, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::RestoreParams {
  RestoreParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f839f92f21f00b08, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::RestoreResults {
  RestoreResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(92e92771f2b6b2b7, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::MakeTokenParams {
  MakeTokenParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f0e8359b121f97d2, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::MakeTokenResults {
  MakeTokenResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f96d4b948521f91, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::GetOwnerNotificationTargetParams {
  GetOwnerNotificationTargetParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(af72d693dbf4bf54, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::GetOwnerNotificationTargetResults {
  GetOwnerNotificationTargetResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(888c6d95df2cc976, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::DropParams {
  DropParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e03b8c8163d957c6, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::DropResults {
  DropResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ce435c92a97c1b97, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::CheckRequirementsParams {
  CheckRequirementsParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8867ef4f53bc45c3, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::CheckRequirementsResults {
  CheckRequirementsResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca83e6f36908ed7f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::MakeChildTokenParams {
  MakeChildTokenParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b25c148edb2b020, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::MakeChildTokenResults {
  MakeChildTokenResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ea56a46fc87138a, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::ClaimRequestParams {
  ClaimRequestParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eeaeb799e53e0b01, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::ClaimRequestResults {
  ClaimRequestResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b91071e3d7b9ab13, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::BackgroundActivityParams {
  BackgroundActivityParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(938e798cc0e3d6ac, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::BackgroundActivityResults {
  BackgroundActivityResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9d87019c48640d21, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::ReportGrainSizeParams {
  ReportGrainSizeParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aec15e35d479f4f3, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SandstormCore::ReportGrainSizeResults {
  ReportGrainSizeResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c43d5a1430e113ca, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MembraneRequirement {
  MembraneRequirement() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    TOKEN_VALID,
    PERMISSIONS_HELD,
    USER_IS_ADMIN,
  };
  struct PermissionsHeld;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(918db9a721f13886, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MembraneRequirement::PermissionsHeld {
  PermissionsHeld() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    IDENTITY_ID,
    TOKEN_ID,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8092ced6a3fbe30, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SystemPersistent {
  SystemPersistent() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct AddRequirementsParams;
  struct AddRequirementsResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(c38cedd77cbed5b4)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct SystemPersistent::AddRequirementsParams {
  AddRequirementsParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb5eb0bde1481587, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SystemPersistent::AddRequirementsResults {
  AddRequirementsResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8488d5d569f6cffe, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct PersistentHandle {
  PersistentHandle() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE


  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(c22ce229c18c0a02)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct PersistentOngoingNotification {
  PersistentOngoingNotification() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE


  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(dbbdcec8587dd355)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct DenormalizedGrainMetadata {
  DenormalizedGrainMetadata() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ICON,
    APP_ID,
  };
  struct Icon;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bdd9bea5585df6c5, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DenormalizedGrainMetadata::Icon {
  Icon() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d91b98680812bda3, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ApiTokenOwner {
  ApiTokenOwner() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    WEBKEY,
    GRAIN,
    INTERNET,
    FRONTEND,
    USER,
    CLIENT_POWERBOX_REQUEST,
    CLIENT_POWERBOX_OFFER,
  };
  struct Grain;
  struct User;
  struct ClientPowerboxRequest;
  struct ClientPowerboxOffer;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(da970537e2a8a9a9, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ApiTokenOwner::Grain {
  Grain() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb7304c768066421, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ApiTokenOwner::User {
  User() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d94fc375e247d63d, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ApiTokenOwner::ClientPowerboxRequest {
  ClientPowerboxRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c765897b7df345ac, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ApiTokenOwner::ClientPowerboxOffer {
  ClientPowerboxOffer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8882befcdeca7451, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId = ::capnp::AnyPointer>
struct SupervisorObjectId {
  SupervisorObjectId() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    APP_REF,
    WAKE_LOCK_NOTIFICATION,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8e74650737dbb840, 1, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

#if !CAPNP_LITE
class Supervisor::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef Supervisor Calls;
  typedef Supervisor Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::Supervisor::GetMainViewParams,  ::sandstorm::Supervisor::GetMainViewResults> getMainViewRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Supervisor::KeepAliveParams,  ::sandstorm::Supervisor::KeepAliveResults> keepAliveRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Supervisor::ShutdownParams,  ::sandstorm::Supervisor::ShutdownResults> shutdownRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Supervisor::ObsoleteGetGrainSizeParams,  ::sandstorm::Supervisor::ObsoleteGetGrainSizeResults> obsoleteGetGrainSizeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Supervisor::ObsoloteGetGrainSizeWhenDifferentParams,  ::sandstorm::Supervisor::ObsoloteGetGrainSizeWhenDifferentResults> obsoloteGetGrainSizeWhenDifferentRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Supervisor::RestoreParams,  ::sandstorm::Supervisor::RestoreResults> restoreRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Supervisor::DropParams,  ::sandstorm::Supervisor::DropResults> dropRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Supervisor::WatchLogParams,  ::sandstorm::Supervisor::WatchLogResults> watchLogRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Supervisor::SyncStorageParams,  ::sandstorm::Supervisor::SyncStorageResults> syncStorageRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::Supervisor::GetWwwFileHackParams,  ::sandstorm::Supervisor::GetWwwFileHackResults> getWwwFileHackRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class Supervisor::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef Supervisor Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::Supervisor::GetMainViewParams GetMainViewParams;
  typedef  ::sandstorm::Supervisor::GetMainViewResults GetMainViewResults;
  typedef ::capnp::CallContext<GetMainViewParams, GetMainViewResults> GetMainViewContext;
  virtual ::kj::Promise<void> getMainView(GetMainViewContext context);
  typedef  ::sandstorm::Supervisor::KeepAliveParams KeepAliveParams;
  typedef  ::sandstorm::Supervisor::KeepAliveResults KeepAliveResults;
  typedef ::capnp::CallContext<KeepAliveParams, KeepAliveResults> KeepAliveContext;
  virtual ::kj::Promise<void> keepAlive(KeepAliveContext context);
  typedef  ::sandstorm::Supervisor::ShutdownParams ShutdownParams;
  typedef  ::sandstorm::Supervisor::ShutdownResults ShutdownResults;
  typedef ::capnp::CallContext<ShutdownParams, ShutdownResults> ShutdownContext;
  virtual ::kj::Promise<void> shutdown(ShutdownContext context);
  typedef  ::sandstorm::Supervisor::ObsoleteGetGrainSizeParams ObsoleteGetGrainSizeParams;
  typedef  ::sandstorm::Supervisor::ObsoleteGetGrainSizeResults ObsoleteGetGrainSizeResults;
  typedef ::capnp::CallContext<ObsoleteGetGrainSizeParams, ObsoleteGetGrainSizeResults> ObsoleteGetGrainSizeContext;
  virtual ::kj::Promise<void> obsoleteGetGrainSize(ObsoleteGetGrainSizeContext context);
  typedef  ::sandstorm::Supervisor::ObsoloteGetGrainSizeWhenDifferentParams ObsoloteGetGrainSizeWhenDifferentParams;
  typedef  ::sandstorm::Supervisor::ObsoloteGetGrainSizeWhenDifferentResults ObsoloteGetGrainSizeWhenDifferentResults;
  typedef ::capnp::CallContext<ObsoloteGetGrainSizeWhenDifferentParams, ObsoloteGetGrainSizeWhenDifferentResults> ObsoloteGetGrainSizeWhenDifferentContext;
  virtual ::kj::Promise<void> obsoloteGetGrainSizeWhenDifferent(ObsoloteGetGrainSizeWhenDifferentContext context);
  typedef  ::sandstorm::Supervisor::RestoreParams RestoreParams;
  typedef  ::sandstorm::Supervisor::RestoreResults RestoreResults;
  typedef ::capnp::CallContext<RestoreParams, RestoreResults> RestoreContext;
  virtual ::kj::Promise<void> restore(RestoreContext context);
  typedef  ::sandstorm::Supervisor::DropParams DropParams;
  typedef  ::sandstorm::Supervisor::DropResults DropResults;
  typedef ::capnp::CallContext<DropParams, DropResults> DropContext;
  virtual ::kj::Promise<void> drop(DropContext context);
  typedef  ::sandstorm::Supervisor::WatchLogParams WatchLogParams;
  typedef  ::sandstorm::Supervisor::WatchLogResults WatchLogResults;
  typedef ::capnp::CallContext<WatchLogParams, WatchLogResults> WatchLogContext;
  virtual ::kj::Promise<void> watchLog(WatchLogContext context);
  typedef  ::sandstorm::Supervisor::SyncStorageParams SyncStorageParams;
  typedef  ::sandstorm::Supervisor::SyncStorageResults SyncStorageResults;
  typedef ::capnp::CallContext<SyncStorageParams, SyncStorageResults> SyncStorageContext;
  virtual ::kj::Promise<void> syncStorage(SyncStorageContext context);
  typedef  ::sandstorm::Supervisor::GetWwwFileHackParams GetWwwFileHackParams;
  typedef  ::sandstorm::Supervisor::GetWwwFileHackResults GetWwwFileHackResults;
  typedef ::capnp::CallContext<GetWwwFileHackParams, GetWwwFileHackResults> GetWwwFileHackContext;
  virtual ::kj::Promise<void> getWwwFileHack(GetWwwFileHackContext context);

  inline  ::sandstorm::Supervisor::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::Supervisor>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class Supervisor::GetMainViewParams::Reader {
public:
  typedef GetMainViewParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::GetMainViewParams::Builder {
public:
  typedef GetMainViewParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::GetMainViewParams::Pipeline {
public:
  typedef GetMainViewParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::GetMainViewResults::Reader {
public:
  typedef GetMainViewResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasView() const;
#if !CAPNP_LITE
  inline  ::sandstorm::UiView::Client getView() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::GetMainViewResults::Builder {
public:
  typedef GetMainViewResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasView();
#if !CAPNP_LITE
  inline  ::sandstorm::UiView::Client getView();
  inline void setView( ::sandstorm::UiView::Client&& value);
  inline void setView( ::sandstorm::UiView::Client& value);
  inline void adoptView(::capnp::Orphan< ::sandstorm::UiView>&& value);
  inline ::capnp::Orphan< ::sandstorm::UiView> disownView();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::GetMainViewResults::Pipeline {
public:
  typedef GetMainViewResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::UiView::Client getView();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::KeepAliveParams::Reader {
public:
  typedef KeepAliveParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasCore() const;
#if !CAPNP_LITE
  inline  ::sandstorm::SandstormCore::Client getCore() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::KeepAliveParams::Builder {
public:
  typedef KeepAliveParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCore();
#if !CAPNP_LITE
  inline  ::sandstorm::SandstormCore::Client getCore();
  inline void setCore( ::sandstorm::SandstormCore::Client&& value);
  inline void setCore( ::sandstorm::SandstormCore::Client& value);
  inline void adoptCore(::capnp::Orphan< ::sandstorm::SandstormCore>&& value);
  inline ::capnp::Orphan< ::sandstorm::SandstormCore> disownCore();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::KeepAliveParams::Pipeline {
public:
  typedef KeepAliveParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::SandstormCore::Client getCore();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::KeepAliveResults::Reader {
public:
  typedef KeepAliveResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::KeepAliveResults::Builder {
public:
  typedef KeepAliveResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::KeepAliveResults::Pipeline {
public:
  typedef KeepAliveResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::ShutdownParams::Reader {
public:
  typedef ShutdownParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::ShutdownParams::Builder {
public:
  typedef ShutdownParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::ShutdownParams::Pipeline {
public:
  typedef ShutdownParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::ShutdownResults::Reader {
public:
  typedef ShutdownResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::ShutdownResults::Builder {
public:
  typedef ShutdownResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::ShutdownResults::Pipeline {
public:
  typedef ShutdownResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::ObsoleteGetGrainSizeParams::Reader {
public:
  typedef ObsoleteGetGrainSizeParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::ObsoleteGetGrainSizeParams::Builder {
public:
  typedef ObsoleteGetGrainSizeParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::ObsoleteGetGrainSizeParams::Pipeline {
public:
  typedef ObsoleteGetGrainSizeParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::ObsoleteGetGrainSizeResults::Reader {
public:
  typedef ObsoleteGetGrainSizeResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::ObsoleteGetGrainSizeResults::Builder {
public:
  typedef ObsoleteGetGrainSizeResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::ObsoleteGetGrainSizeResults::Pipeline {
public:
  typedef ObsoleteGetGrainSizeResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::ObsoloteGetGrainSizeWhenDifferentParams::Reader {
public:
  typedef ObsoloteGetGrainSizeWhenDifferentParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getOldSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::ObsoloteGetGrainSizeWhenDifferentParams::Builder {
public:
  typedef ObsoloteGetGrainSizeWhenDifferentParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getOldSize();
  inline void setOldSize( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::ObsoloteGetGrainSizeWhenDifferentParams::Pipeline {
public:
  typedef ObsoloteGetGrainSizeWhenDifferentParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::ObsoloteGetGrainSizeWhenDifferentResults::Reader {
public:
  typedef ObsoloteGetGrainSizeWhenDifferentResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::ObsoloteGetGrainSizeWhenDifferentResults::Builder {
public:
  typedef ObsoloteGetGrainSizeWhenDifferentResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::ObsoloteGetGrainSizeWhenDifferentResults::Pipeline {
public:
  typedef ObsoloteGetGrainSizeWhenDifferentResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::RestoreParams::Reader {
public:
  typedef RestoreParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasRef() const;
  inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Reader getRef() const;

  inline bool hasRequirements() const;
  inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Reader getRequirements() const;

  inline bool hasParentToken() const;
  inline  ::capnp::Data::Reader getParentToken() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::RestoreParams::Builder {
public:
  typedef RestoreParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRef();
  inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Builder getRef();
  inline void setRef( ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Reader value);
  inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Builder initRef();
  inline void adoptRef(::capnp::Orphan< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>&& value);
  inline ::capnp::Orphan< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>> disownRef();

  inline bool hasRequirements();
  inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder getRequirements();
  inline void setRequirements( ::capnp::List< ::sandstorm::MembraneRequirement>::Reader value);
  inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder initRequirements(unsigned int size);
  inline void adoptRequirements(::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>> disownRequirements();

  inline bool hasParentToken();
  inline  ::capnp::Data::Builder getParentToken();
  inline void setParentToken( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initParentToken(unsigned int size);
  inline void adoptParentToken(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownParentToken();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::RestoreParams::Pipeline {
public:
  typedef RestoreParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Pipeline getRef();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::RestoreResults::Reader {
public:
  typedef RestoreResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasCap() const;
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::RestoreResults::Builder {
public:
  typedef RestoreResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCap();
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap();
  inline void setCap( ::capnp::Capability::Client&& value);
  inline void setCap( ::capnp::Capability::Client& value);
  inline void adoptCap(::capnp::Orphan< ::capnp::Capability>&& value);
  inline ::capnp::Orphan< ::capnp::Capability> disownCap();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::RestoreResults::Pipeline {
public:
  typedef RestoreResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::Capability::Client getCap();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::DropParams::Reader {
public:
  typedef DropParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasRef() const;
  inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Reader getRef() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::DropParams::Builder {
public:
  typedef DropParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRef();
  inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Builder getRef();
  inline void setRef( ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Reader value);
  inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Builder initRef();
  inline void adoptRef(::capnp::Orphan< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>&& value);
  inline ::capnp::Orphan< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>> disownRef();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::DropParams::Pipeline {
public:
  typedef DropParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Pipeline getRef();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::DropResults::Reader {
public:
  typedef DropResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::DropResults::Builder {
public:
  typedef DropResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::DropResults::Pipeline {
public:
  typedef DropResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::WatchLogParams::Reader {
public:
  typedef WatchLogParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getBacklogAmount() const;

  inline bool hasStream() const;
#if !CAPNP_LITE
  inline  ::sandstorm::ByteStream::Client getStream() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::WatchLogParams::Builder {
public:
  typedef WatchLogParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getBacklogAmount();
  inline void setBacklogAmount( ::uint64_t value);

  inline bool hasStream();
#if !CAPNP_LITE
  inline  ::sandstorm::ByteStream::Client getStream();
  inline void setStream( ::sandstorm::ByteStream::Client&& value);
  inline void setStream( ::sandstorm::ByteStream::Client& value);
  inline void adoptStream(::capnp::Orphan< ::sandstorm::ByteStream>&& value);
  inline ::capnp::Orphan< ::sandstorm::ByteStream> disownStream();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::WatchLogParams::Pipeline {
public:
  typedef WatchLogParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::ByteStream::Client getStream();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::WatchLogResults::Reader {
public:
  typedef WatchLogResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasHandle() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Handle::Client getHandle() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::WatchLogResults::Builder {
public:
  typedef WatchLogResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHandle();
#if !CAPNP_LITE
  inline  ::sandstorm::Handle::Client getHandle();
  inline void setHandle( ::sandstorm::Handle::Client&& value);
  inline void setHandle( ::sandstorm::Handle::Client& value);
  inline void adoptHandle(::capnp::Orphan< ::sandstorm::Handle>&& value);
  inline ::capnp::Orphan< ::sandstorm::Handle> disownHandle();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::WatchLogResults::Pipeline {
public:
  typedef WatchLogResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Handle::Client getHandle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::SyncStorageParams::Reader {
public:
  typedef SyncStorageParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::SyncStorageParams::Builder {
public:
  typedef SyncStorageParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::SyncStorageParams::Pipeline {
public:
  typedef SyncStorageParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::SyncStorageResults::Reader {
public:
  typedef SyncStorageResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::SyncStorageResults::Builder {
public:
  typedef SyncStorageResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::SyncStorageResults::Pipeline {
public:
  typedef SyncStorageResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::GetWwwFileHackParams::Reader {
public:
  typedef GetWwwFileHackParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasStream() const;
#if !CAPNP_LITE
  inline  ::sandstorm::ByteStream::Client getStream() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::GetWwwFileHackParams::Builder {
public:
  typedef GetWwwFileHackParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasStream();
#if !CAPNP_LITE
  inline  ::sandstorm::ByteStream::Client getStream();
  inline void setStream( ::sandstorm::ByteStream::Client&& value);
  inline void setStream( ::sandstorm::ByteStream::Client& value);
  inline void adoptStream(::capnp::Orphan< ::sandstorm::ByteStream>&& value);
  inline ::capnp::Orphan< ::sandstorm::ByteStream> disownStream();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::GetWwwFileHackParams::Pipeline {
public:
  typedef GetWwwFileHackParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::ByteStream::Client getStream();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Supervisor::GetWwwFileHackResults::Reader {
public:
  typedef GetWwwFileHackResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::sandstorm::Supervisor::WwwFileStatus getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Supervisor::GetWwwFileHackResults::Builder {
public:
  typedef GetWwwFileHackResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::sandstorm::Supervisor::WwwFileStatus getStatus();
  inline void setStatus( ::sandstorm::Supervisor::WwwFileStatus value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Supervisor::GetWwwFileHackResults::Pipeline {
public:
  typedef GetWwwFileHackResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class SandstormCore::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef SandstormCore Calls;
  typedef SandstormCore Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::SandstormCore::RestoreParams,  ::sandstorm::SandstormCore::RestoreResults> restoreRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SandstormCore::MakeTokenParams,  ::sandstorm::SandstormCore::MakeTokenResults> makeTokenRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SandstormCore::GetOwnerNotificationTargetParams,  ::sandstorm::SandstormCore::GetOwnerNotificationTargetResults> getOwnerNotificationTargetRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SandstormCore::DropParams,  ::sandstorm::SandstormCore::DropResults> dropRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SandstormCore::CheckRequirementsParams,  ::sandstorm::SandstormCore::CheckRequirementsResults> checkRequirementsRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SandstormCore::MakeChildTokenParams,  ::sandstorm::SandstormCore::MakeChildTokenResults> makeChildTokenRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SandstormCore::ClaimRequestParams,  ::sandstorm::SandstormCore::ClaimRequestResults> claimRequestRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SandstormCore::BackgroundActivityParams,  ::sandstorm::SandstormCore::BackgroundActivityResults> backgroundActivityRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SandstormCore::ReportGrainSizeParams,  ::sandstorm::SandstormCore::ReportGrainSizeResults> reportGrainSizeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class SandstormCore::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef SandstormCore Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::SandstormCore::RestoreParams RestoreParams;
  typedef  ::sandstorm::SandstormCore::RestoreResults RestoreResults;
  typedef ::capnp::CallContext<RestoreParams, RestoreResults> RestoreContext;
  virtual ::kj::Promise<void> restore(RestoreContext context);
  typedef  ::sandstorm::SandstormCore::MakeTokenParams MakeTokenParams;
  typedef  ::sandstorm::SandstormCore::MakeTokenResults MakeTokenResults;
  typedef ::capnp::CallContext<MakeTokenParams, MakeTokenResults> MakeTokenContext;
  virtual ::kj::Promise<void> makeToken(MakeTokenContext context);
  typedef  ::sandstorm::SandstormCore::GetOwnerNotificationTargetParams GetOwnerNotificationTargetParams;
  typedef  ::sandstorm::SandstormCore::GetOwnerNotificationTargetResults GetOwnerNotificationTargetResults;
  typedef ::capnp::CallContext<GetOwnerNotificationTargetParams, GetOwnerNotificationTargetResults> GetOwnerNotificationTargetContext;
  virtual ::kj::Promise<void> getOwnerNotificationTarget(GetOwnerNotificationTargetContext context);
  typedef  ::sandstorm::SandstormCore::DropParams DropParams;
  typedef  ::sandstorm::SandstormCore::DropResults DropResults;
  typedef ::capnp::CallContext<DropParams, DropResults> DropContext;
  virtual ::kj::Promise<void> drop(DropContext context);
  typedef  ::sandstorm::SandstormCore::CheckRequirementsParams CheckRequirementsParams;
  typedef  ::sandstorm::SandstormCore::CheckRequirementsResults CheckRequirementsResults;
  typedef ::capnp::CallContext<CheckRequirementsParams, CheckRequirementsResults> CheckRequirementsContext;
  virtual ::kj::Promise<void> checkRequirements(CheckRequirementsContext context);
  typedef  ::sandstorm::SandstormCore::MakeChildTokenParams MakeChildTokenParams;
  typedef  ::sandstorm::SandstormCore::MakeChildTokenResults MakeChildTokenResults;
  typedef ::capnp::CallContext<MakeChildTokenParams, MakeChildTokenResults> MakeChildTokenContext;
  virtual ::kj::Promise<void> makeChildToken(MakeChildTokenContext context);
  typedef  ::sandstorm::SandstormCore::ClaimRequestParams ClaimRequestParams;
  typedef  ::sandstorm::SandstormCore::ClaimRequestResults ClaimRequestResults;
  typedef ::capnp::CallContext<ClaimRequestParams, ClaimRequestResults> ClaimRequestContext;
  virtual ::kj::Promise<void> claimRequest(ClaimRequestContext context);
  typedef  ::sandstorm::SandstormCore::BackgroundActivityParams BackgroundActivityParams;
  typedef  ::sandstorm::SandstormCore::BackgroundActivityResults BackgroundActivityResults;
  typedef ::capnp::CallContext<BackgroundActivityParams, BackgroundActivityResults> BackgroundActivityContext;
  virtual ::kj::Promise<void> backgroundActivity(BackgroundActivityContext context);
  typedef  ::sandstorm::SandstormCore::ReportGrainSizeParams ReportGrainSizeParams;
  typedef  ::sandstorm::SandstormCore::ReportGrainSizeResults ReportGrainSizeResults;
  typedef ::capnp::CallContext<ReportGrainSizeParams, ReportGrainSizeResults> ReportGrainSizeContext;
  virtual ::kj::Promise<void> reportGrainSize(ReportGrainSizeContext context);

  inline  ::sandstorm::SandstormCore::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::SandstormCore>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class SandstormCore::RequirementObserver::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef SandstormCore::RequirementObserver Calls;
  typedef SandstormCore::RequirementObserver Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::SandstormCore::RequirementObserver::ObserveParams,  ::sandstorm::SandstormCore::RequirementObserver::ObserveResults> observeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class SandstormCore::RequirementObserver::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef SandstormCore::RequirementObserver Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::SandstormCore::RequirementObserver::ObserveParams ObserveParams;
  typedef  ::sandstorm::SandstormCore::RequirementObserver::ObserveResults ObserveResults;
  typedef ::capnp::CallContext<ObserveParams, ObserveResults> ObserveContext;
  virtual ::kj::Promise<void> observe(ObserveContext context);

  inline  ::sandstorm::SandstormCore::RequirementObserver::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::SandstormCore::RequirementObserver>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class SandstormCore::RequirementObserver::ObserveParams::Reader {
public:
  typedef ObserveParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::RequirementObserver::ObserveParams::Builder {
public:
  typedef ObserveParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::RequirementObserver::ObserveParams::Pipeline {
public:
  typedef ObserveParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::RequirementObserver::ObserveResults::Reader {
public:
  typedef ObserveResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::RequirementObserver::ObserveResults::Builder {
public:
  typedef ObserveResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::RequirementObserver::ObserveResults::Pipeline {
public:
  typedef ObserveResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::RestoreParams::Reader {
public:
  typedef RestoreParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasToken() const;
  inline  ::capnp::Data::Reader getToken() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::RestoreParams::Builder {
public:
  typedef RestoreParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasToken();
  inline  ::capnp::Data::Builder getToken();
  inline void setToken( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownToken();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::RestoreParams::Pipeline {
public:
  typedef RestoreParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::RestoreResults::Reader {
public:
  typedef RestoreResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasCap() const;
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::RestoreResults::Builder {
public:
  typedef RestoreResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCap();
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap();
  inline void setCap( ::capnp::Capability::Client&& value);
  inline void setCap( ::capnp::Capability::Client& value);
  inline void adoptCap(::capnp::Orphan< ::capnp::Capability>&& value);
  inline ::capnp::Orphan< ::capnp::Capability> disownCap();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::RestoreResults::Pipeline {
public:
  typedef RestoreResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::Capability::Client getCap();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::MakeTokenParams::Reader {
public:
  typedef MakeTokenParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasRef() const;
  inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Reader getRef() const;

  inline bool hasOwner() const;
  inline  ::sandstorm::ApiTokenOwner::Reader getOwner() const;

  inline bool hasRequirements() const;
  inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Reader getRequirements() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::MakeTokenParams::Builder {
public:
  typedef MakeTokenParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRef();
  inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Builder getRef();
  inline void setRef( ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Reader value);
  inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Builder initRef();
  inline void adoptRef(::capnp::Orphan< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>&& value);
  inline ::capnp::Orphan< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>> disownRef();

  inline bool hasOwner();
  inline  ::sandstorm::ApiTokenOwner::Builder getOwner();
  inline void setOwner( ::sandstorm::ApiTokenOwner::Reader value);
  inline  ::sandstorm::ApiTokenOwner::Builder initOwner();
  inline void adoptOwner(::capnp::Orphan< ::sandstorm::ApiTokenOwner>&& value);
  inline ::capnp::Orphan< ::sandstorm::ApiTokenOwner> disownOwner();

  inline bool hasRequirements();
  inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder getRequirements();
  inline void setRequirements( ::capnp::List< ::sandstorm::MembraneRequirement>::Reader value);
  inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder initRequirements(unsigned int size);
  inline void adoptRequirements(::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>> disownRequirements();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::MakeTokenParams::Pipeline {
public:
  typedef MakeTokenParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Pipeline getRef();
  inline  ::sandstorm::ApiTokenOwner::Pipeline getOwner();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::MakeTokenResults::Reader {
public:
  typedef MakeTokenResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasToken() const;
  inline  ::capnp::Data::Reader getToken() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::MakeTokenResults::Builder {
public:
  typedef MakeTokenResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasToken();
  inline  ::capnp::Data::Builder getToken();
  inline void setToken( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownToken();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::MakeTokenResults::Pipeline {
public:
  typedef MakeTokenResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::GetOwnerNotificationTargetParams::Reader {
public:
  typedef GetOwnerNotificationTargetParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::GetOwnerNotificationTargetParams::Builder {
public:
  typedef GetOwnerNotificationTargetParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::GetOwnerNotificationTargetParams::Pipeline {
public:
  typedef GetOwnerNotificationTargetParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::GetOwnerNotificationTargetResults::Reader {
public:
  typedef GetOwnerNotificationTargetResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasOwner() const;
#if !CAPNP_LITE
  inline  ::sandstorm::NotificationTarget::Client getOwner() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::GetOwnerNotificationTargetResults::Builder {
public:
  typedef GetOwnerNotificationTargetResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOwner();
#if !CAPNP_LITE
  inline  ::sandstorm::NotificationTarget::Client getOwner();
  inline void setOwner( ::sandstorm::NotificationTarget::Client&& value);
  inline void setOwner( ::sandstorm::NotificationTarget::Client& value);
  inline void adoptOwner(::capnp::Orphan< ::sandstorm::NotificationTarget>&& value);
  inline ::capnp::Orphan< ::sandstorm::NotificationTarget> disownOwner();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::GetOwnerNotificationTargetResults::Pipeline {
public:
  typedef GetOwnerNotificationTargetResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::NotificationTarget::Client getOwner();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::DropParams::Reader {
public:
  typedef DropParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasToken() const;
  inline  ::capnp::Data::Reader getToken() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::DropParams::Builder {
public:
  typedef DropParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasToken();
  inline  ::capnp::Data::Builder getToken();
  inline void setToken( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownToken();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::DropParams::Pipeline {
public:
  typedef DropParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::DropResults::Reader {
public:
  typedef DropResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::DropResults::Builder {
public:
  typedef DropResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::DropResults::Pipeline {
public:
  typedef DropResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::CheckRequirementsParams::Reader {
public:
  typedef CheckRequirementsParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasRequirements() const;
  inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Reader getRequirements() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::CheckRequirementsParams::Builder {
public:
  typedef CheckRequirementsParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRequirements();
  inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder getRequirements();
  inline void setRequirements( ::capnp::List< ::sandstorm::MembraneRequirement>::Reader value);
  inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder initRequirements(unsigned int size);
  inline void adoptRequirements(::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>> disownRequirements();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::CheckRequirementsParams::Pipeline {
public:
  typedef CheckRequirementsParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::CheckRequirementsResults::Reader {
public:
  typedef CheckRequirementsResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasObserver() const;
#if !CAPNP_LITE
  inline  ::sandstorm::SandstormCore::RequirementObserver::Client getObserver() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::CheckRequirementsResults::Builder {
public:
  typedef CheckRequirementsResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasObserver();
#if !CAPNP_LITE
  inline  ::sandstorm::SandstormCore::RequirementObserver::Client getObserver();
  inline void setObserver( ::sandstorm::SandstormCore::RequirementObserver::Client&& value);
  inline void setObserver( ::sandstorm::SandstormCore::RequirementObserver::Client& value);
  inline void adoptObserver(::capnp::Orphan< ::sandstorm::SandstormCore::RequirementObserver>&& value);
  inline ::capnp::Orphan< ::sandstorm::SandstormCore::RequirementObserver> disownObserver();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::CheckRequirementsResults::Pipeline {
public:
  typedef CheckRequirementsResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::SandstormCore::RequirementObserver::Client getObserver();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::MakeChildTokenParams::Reader {
public:
  typedef MakeChildTokenParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasParent() const;
  inline  ::capnp::Data::Reader getParent() const;

  inline bool hasOwner() const;
  inline  ::sandstorm::ApiTokenOwner::Reader getOwner() const;

  inline bool hasRequirements() const;
  inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Reader getRequirements() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::MakeChildTokenParams::Builder {
public:
  typedef MakeChildTokenParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasParent();
  inline  ::capnp::Data::Builder getParent();
  inline void setParent( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initParent(unsigned int size);
  inline void adoptParent(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownParent();

  inline bool hasOwner();
  inline  ::sandstorm::ApiTokenOwner::Builder getOwner();
  inline void setOwner( ::sandstorm::ApiTokenOwner::Reader value);
  inline  ::sandstorm::ApiTokenOwner::Builder initOwner();
  inline void adoptOwner(::capnp::Orphan< ::sandstorm::ApiTokenOwner>&& value);
  inline ::capnp::Orphan< ::sandstorm::ApiTokenOwner> disownOwner();

  inline bool hasRequirements();
  inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder getRequirements();
  inline void setRequirements( ::capnp::List< ::sandstorm::MembraneRequirement>::Reader value);
  inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder initRequirements(unsigned int size);
  inline void adoptRequirements(::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>> disownRequirements();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::MakeChildTokenParams::Pipeline {
public:
  typedef MakeChildTokenParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::ApiTokenOwner::Pipeline getOwner();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::MakeChildTokenResults::Reader {
public:
  typedef MakeChildTokenResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasToken() const;
  inline  ::capnp::Data::Reader getToken() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::MakeChildTokenResults::Builder {
public:
  typedef MakeChildTokenResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasToken();
  inline  ::capnp::Data::Builder getToken();
  inline void setToken( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownToken();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::MakeChildTokenResults::Pipeline {
public:
  typedef MakeChildTokenResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::ClaimRequestParams::Reader {
public:
  typedef ClaimRequestParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasRequestToken() const;
  inline  ::capnp::Text::Reader getRequestToken() const;

  inline bool hasRequiredPermissions() const;
  inline  ::capnp::List<bool>::Reader getRequiredPermissions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::ClaimRequestParams::Builder {
public:
  typedef ClaimRequestParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRequestToken();
  inline  ::capnp::Text::Builder getRequestToken();
  inline void setRequestToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRequestToken(unsigned int size);
  inline void adoptRequestToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRequestToken();

  inline bool hasRequiredPermissions();
  inline  ::capnp::List<bool>::Builder getRequiredPermissions();
  inline void setRequiredPermissions( ::capnp::List<bool>::Reader value);
  inline void setRequiredPermissions(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initRequiredPermissions(unsigned int size);
  inline void adoptRequiredPermissions(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownRequiredPermissions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::ClaimRequestParams::Pipeline {
public:
  typedef ClaimRequestParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::ClaimRequestResults::Reader {
public:
  typedef ClaimRequestResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasCap() const;
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::ClaimRequestResults::Builder {
public:
  typedef ClaimRequestResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCap();
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap();
  inline void setCap( ::capnp::Capability::Client&& value);
  inline void setCap( ::capnp::Capability::Client& value);
  inline void adoptCap(::capnp::Orphan< ::capnp::Capability>&& value);
  inline ::capnp::Orphan< ::capnp::Capability> disownCap();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::ClaimRequestResults::Pipeline {
public:
  typedef ClaimRequestResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::Capability::Client getCap();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::BackgroundActivityParams::Reader {
public:
  typedef BackgroundActivityParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasEvent() const;
  inline  ::sandstorm::ActivityEvent::Reader getEvent() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::BackgroundActivityParams::Builder {
public:
  typedef BackgroundActivityParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEvent();
  inline  ::sandstorm::ActivityEvent::Builder getEvent();
  inline void setEvent( ::sandstorm::ActivityEvent::Reader value);
  inline  ::sandstorm::ActivityEvent::Builder initEvent();
  inline void adoptEvent(::capnp::Orphan< ::sandstorm::ActivityEvent>&& value);
  inline ::capnp::Orphan< ::sandstorm::ActivityEvent> disownEvent();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::BackgroundActivityParams::Pipeline {
public:
  typedef BackgroundActivityParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::ActivityEvent::Pipeline getEvent();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::BackgroundActivityResults::Reader {
public:
  typedef BackgroundActivityResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::BackgroundActivityResults::Builder {
public:
  typedef BackgroundActivityResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::BackgroundActivityResults::Pipeline {
public:
  typedef BackgroundActivityResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::ReportGrainSizeParams::Reader {
public:
  typedef ReportGrainSizeParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getBytes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::ReportGrainSizeParams::Builder {
public:
  typedef ReportGrainSizeParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getBytes();
  inline void setBytes( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::ReportGrainSizeParams::Pipeline {
public:
  typedef ReportGrainSizeParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SandstormCore::ReportGrainSizeResults::Reader {
public:
  typedef ReportGrainSizeResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SandstormCore::ReportGrainSizeResults::Builder {
public:
  typedef ReportGrainSizeResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SandstormCore::ReportGrainSizeResults::Pipeline {
public:
  typedef ReportGrainSizeResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MembraneRequirement::Reader {
public:
  typedef MembraneRequirement Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isTokenValid() const;
  inline bool hasTokenValid() const;
  inline  ::capnp::Text::Reader getTokenValid() const;

  inline bool isPermissionsHeld() const;
  inline typename PermissionsHeld::Reader getPermissionsHeld() const;

  inline bool isUserIsAdmin() const;
  inline bool hasUserIsAdmin() const;
  inline  ::capnp::Text::Reader getUserIsAdmin() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MembraneRequirement::Builder {
public:
  typedef MembraneRequirement Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isTokenValid();
  inline bool hasTokenValid();
  inline  ::capnp::Text::Builder getTokenValid();
  inline void setTokenValid( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTokenValid(unsigned int size);
  inline void adoptTokenValid(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTokenValid();

  inline bool isPermissionsHeld();
  inline typename PermissionsHeld::Builder getPermissionsHeld();
  inline typename PermissionsHeld::Builder initPermissionsHeld();

  inline bool isUserIsAdmin();
  inline bool hasUserIsAdmin();
  inline  ::capnp::Text::Builder getUserIsAdmin();
  inline void setUserIsAdmin( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUserIsAdmin(unsigned int size);
  inline void adoptUserIsAdmin(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUserIsAdmin();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MembraneRequirement::Pipeline {
public:
  typedef MembraneRequirement Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MembraneRequirement::PermissionsHeld::Reader {
public:
  typedef PermissionsHeld Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool hasUserId() const;
  inline  ::capnp::Text::Reader getUserId() const;

  inline bool hasGrainId() const;
  inline  ::capnp::Text::Reader getGrainId() const;

  inline bool hasPermissions() const;
  inline  ::capnp::List<bool>::Reader getPermissions() const;

  inline bool isIdentityId() const;
  inline bool hasIdentityId() const;
  inline  ::capnp::Text::Reader getIdentityId() const;

  inline bool isTokenId() const;
  inline bool hasTokenId() const;
  inline  ::capnp::Text::Reader getTokenId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MembraneRequirement::PermissionsHeld::Builder {
public:
  typedef PermissionsHeld Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool hasUserId();
  inline  ::capnp::Text::Builder getUserId();
  inline void setUserId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUserId(unsigned int size);
  inline void adoptUserId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUserId();

  inline bool hasGrainId();
  inline  ::capnp::Text::Builder getGrainId();
  inline void setGrainId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrainId(unsigned int size);
  inline void adoptGrainId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrainId();

  inline bool hasPermissions();
  inline  ::capnp::List<bool>::Builder getPermissions();
  inline void setPermissions( ::capnp::List<bool>::Reader value);
  inline void setPermissions(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initPermissions(unsigned int size);
  inline void adoptPermissions(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownPermissions();

  inline bool isIdentityId();
  inline bool hasIdentityId();
  inline  ::capnp::Text::Builder getIdentityId();
  inline void setIdentityId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initIdentityId(unsigned int size);
  inline void adoptIdentityId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownIdentityId();

  inline bool isTokenId();
  inline bool hasTokenId();
  inline  ::capnp::Text::Builder getTokenId();
  inline void setTokenId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTokenId(unsigned int size);
  inline void adoptTokenId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTokenId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MembraneRequirement::PermissionsHeld::Pipeline {
public:
  typedef PermissionsHeld Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class SystemPersistent::Client
    : public virtual ::capnp::Capability::Client,
      public virtual  ::capnp::Persistent< ::capnp::Data,  ::sandstorm::ApiTokenOwner>::Client {
public:
  typedef SystemPersistent Calls;
  typedef SystemPersistent Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::SystemPersistent::AddRequirementsParams,  ::sandstorm::SystemPersistent::AddRequirementsResults> addRequirementsRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class SystemPersistent::Server
    : public virtual ::capnp::Capability::Server,
      public virtual  ::capnp::Persistent< ::capnp::Data,  ::sandstorm::ApiTokenOwner>::Server {
public:
  typedef SystemPersistent Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::SystemPersistent::AddRequirementsParams AddRequirementsParams;
  typedef  ::sandstorm::SystemPersistent::AddRequirementsResults AddRequirementsResults;
  typedef ::capnp::CallContext<AddRequirementsParams, AddRequirementsResults> AddRequirementsContext;
  virtual ::kj::Promise<void> addRequirements(AddRequirementsContext context);

  inline  ::sandstorm::SystemPersistent::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::SystemPersistent>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class SystemPersistent::AddRequirementsParams::Reader {
public:
  typedef AddRequirementsParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasRequirements() const;
  inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Reader getRequirements() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SystemPersistent::AddRequirementsParams::Builder {
public:
  typedef AddRequirementsParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRequirements();
  inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder getRequirements();
  inline void setRequirements( ::capnp::List< ::sandstorm::MembraneRequirement>::Reader value);
  inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder initRequirements(unsigned int size);
  inline void adoptRequirements(::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>> disownRequirements();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SystemPersistent::AddRequirementsParams::Pipeline {
public:
  typedef AddRequirementsParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SystemPersistent::AddRequirementsResults::Reader {
public:
  typedef AddRequirementsResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasCap() const;
#if !CAPNP_LITE
  inline  ::sandstorm::SystemPersistent::Client getCap() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SystemPersistent::AddRequirementsResults::Builder {
public:
  typedef AddRequirementsResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCap();
#if !CAPNP_LITE
  inline  ::sandstorm::SystemPersistent::Client getCap();
  inline void setCap( ::sandstorm::SystemPersistent::Client&& value);
  inline void setCap( ::sandstorm::SystemPersistent::Client& value);
  inline void adoptCap(::capnp::Orphan< ::sandstorm::SystemPersistent>&& value);
  inline ::capnp::Orphan< ::sandstorm::SystemPersistent> disownCap();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SystemPersistent::AddRequirementsResults::Pipeline {
public:
  typedef AddRequirementsResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::SystemPersistent::Client getCap();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class PersistentHandle::Client
    : public virtual ::capnp::Capability::Client,
      public virtual  ::sandstorm::SystemPersistent::Client,
      public virtual  ::sandstorm::Handle::Client {
public:
  typedef PersistentHandle Calls;
  typedef PersistentHandle Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);


protected:
  Client() = default;
};

class PersistentHandle::Server
    : public virtual ::capnp::Capability::Server,
      public virtual  ::sandstorm::SystemPersistent::Server,
      public virtual  ::sandstorm::Handle::Server {
public:
  typedef PersistentHandle Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:

  inline  ::sandstorm::PersistentHandle::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::PersistentHandle>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class PersistentOngoingNotification::Client
    : public virtual ::capnp::Capability::Client,
      public virtual  ::sandstorm::SystemPersistent::Client,
      public virtual  ::sandstorm::OngoingNotification::Client {
public:
  typedef PersistentOngoingNotification Calls;
  typedef PersistentOngoingNotification Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);


protected:
  Client() = default;
};

class PersistentOngoingNotification::Server
    : public virtual ::capnp::Capability::Server,
      public virtual  ::sandstorm::SystemPersistent::Server,
      public virtual  ::sandstorm::OngoingNotification::Server {
public:
  typedef PersistentOngoingNotification Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:

  inline  ::sandstorm::PersistentOngoingNotification::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::PersistentOngoingNotification>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class DenormalizedGrainMetadata::Reader {
public:
  typedef DenormalizedGrainMetadata Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool hasAppTitle() const;
  inline  ::sandstorm::LocalizedText::Reader getAppTitle() const;

  inline bool isIcon() const;
  inline typename Icon::Reader getIcon() const;

  inline bool isAppId() const;
  inline bool hasAppId() const;
  inline  ::capnp::Text::Reader getAppId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DenormalizedGrainMetadata::Builder {
public:
  typedef DenormalizedGrainMetadata Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool hasAppTitle();
  inline  ::sandstorm::LocalizedText::Builder getAppTitle();
  inline void setAppTitle( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initAppTitle();
  inline void adoptAppTitle(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownAppTitle();

  inline bool isIcon();
  inline typename Icon::Builder getIcon();
  inline typename Icon::Builder initIcon();

  inline bool isAppId();
  inline bool hasAppId();
  inline  ::capnp::Text::Builder getAppId();
  inline void setAppId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppId(unsigned int size);
  inline void adoptAppId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DenormalizedGrainMetadata::Pipeline {
public:
  typedef DenormalizedGrainMetadata Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::LocalizedText::Pipeline getAppTitle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DenormalizedGrainMetadata::Icon::Reader {
public:
  typedef Icon Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasFormat() const;
  inline  ::capnp::Text::Reader getFormat() const;

  inline bool hasAssetId() const;
  inline  ::capnp::Text::Reader getAssetId() const;

  inline bool hasAssetId2xDpi() const;
  inline  ::capnp::Text::Reader getAssetId2xDpi() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DenormalizedGrainMetadata::Icon::Builder {
public:
  typedef Icon Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFormat();
  inline  ::capnp::Text::Builder getFormat();
  inline void setFormat( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFormat(unsigned int size);
  inline void adoptFormat(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFormat();

  inline bool hasAssetId();
  inline  ::capnp::Text::Builder getAssetId();
  inline void setAssetId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAssetId(unsigned int size);
  inline void adoptAssetId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAssetId();

  inline bool hasAssetId2xDpi();
  inline  ::capnp::Text::Builder getAssetId2xDpi();
  inline void setAssetId2xDpi( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAssetId2xDpi(unsigned int size);
  inline void adoptAssetId2xDpi(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAssetId2xDpi();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DenormalizedGrainMetadata::Icon::Pipeline {
public:
  typedef Icon Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ApiTokenOwner::Reader {
public:
  typedef ApiTokenOwner Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isWebkey() const;
  inline  ::capnp::Void getWebkey() const;

  inline bool isGrain() const;
  inline typename Grain::Reader getGrain() const;

  inline bool isInternet() const;
  inline bool hasInternet() const;
  inline ::capnp::AnyPointer::Reader getInternet() const;

  inline bool isFrontend() const;
  inline  ::capnp::Void getFrontend() const;

  inline bool isUser() const;
  inline typename User::Reader getUser() const;

  inline bool isClientPowerboxRequest() const;
  inline typename ClientPowerboxRequest::Reader getClientPowerboxRequest() const;

  inline bool isClientPowerboxOffer() const;
  inline typename ClientPowerboxOffer::Reader getClientPowerboxOffer() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ApiTokenOwner::Builder {
public:
  typedef ApiTokenOwner Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isWebkey();
  inline  ::capnp::Void getWebkey();
  inline void setWebkey( ::capnp::Void value = ::capnp::VOID);

  inline bool isGrain();
  inline typename Grain::Builder getGrain();
  inline typename Grain::Builder initGrain();

  inline bool isInternet();
  inline bool hasInternet();
  inline ::capnp::AnyPointer::Builder getInternet();
  inline ::capnp::AnyPointer::Builder initInternet();

  inline bool isFrontend();
  inline  ::capnp::Void getFrontend();
  inline void setFrontend( ::capnp::Void value = ::capnp::VOID);

  inline bool isUser();
  inline typename User::Builder getUser();
  inline typename User::Builder initUser();

  inline bool isClientPowerboxRequest();
  inline typename ClientPowerboxRequest::Builder getClientPowerboxRequest();
  inline typename ClientPowerboxRequest::Builder initClientPowerboxRequest();

  inline bool isClientPowerboxOffer();
  inline typename ClientPowerboxOffer::Builder getClientPowerboxOffer();
  inline typename ClientPowerboxOffer::Builder initClientPowerboxOffer();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ApiTokenOwner::Pipeline {
public:
  typedef ApiTokenOwner Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ApiTokenOwner::Grain::Reader {
public:
  typedef Grain Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasGrainId() const;
  inline  ::capnp::Text::Reader getGrainId() const;

  inline bool hasSaveLabel() const;
  inline  ::sandstorm::LocalizedText::Reader getSaveLabel() const;

  inline bool hasIntroducerUser() const;
  inline  ::capnp::Text::Reader getIntroducerUser() const;

  inline bool hasIntroducerIdentity() const;
  inline  ::capnp::Text::Reader getIntroducerIdentity() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ApiTokenOwner::Grain::Builder {
public:
  typedef Grain Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasGrainId();
  inline  ::capnp::Text::Builder getGrainId();
  inline void setGrainId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrainId(unsigned int size);
  inline void adoptGrainId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrainId();

  inline bool hasSaveLabel();
  inline  ::sandstorm::LocalizedText::Builder getSaveLabel();
  inline void setSaveLabel( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initSaveLabel();
  inline void adoptSaveLabel(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownSaveLabel();

  inline bool hasIntroducerUser();
  inline  ::capnp::Text::Builder getIntroducerUser();
  inline void setIntroducerUser( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initIntroducerUser(unsigned int size);
  inline void adoptIntroducerUser(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownIntroducerUser();

  inline bool hasIntroducerIdentity();
  inline  ::capnp::Text::Builder getIntroducerIdentity();
  inline void setIntroducerIdentity( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initIntroducerIdentity(unsigned int size);
  inline void adoptIntroducerIdentity(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownIntroducerIdentity();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ApiTokenOwner::Grain::Pipeline {
public:
  typedef Grain Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::LocalizedText::Pipeline getSaveLabel();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ApiTokenOwner::User::Reader {
public:
  typedef User Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasUserId() const;
  inline  ::capnp::Text::Reader getUserId() const;

  inline bool hasTitle() const;
  inline  ::capnp::Text::Reader getTitle() const;

  inline bool hasDenormalizedGrainMetadata() const;
  inline  ::sandstorm::DenormalizedGrainMetadata::Reader getDenormalizedGrainMetadata() const;

  inline bool hasIdentityId() const;
  inline  ::capnp::Text::Reader getIdentityId() const;

  inline bool hasUpstreamTitle() const;
  inline  ::capnp::Text::Reader getUpstreamTitle() const;

  inline bool getRenamed() const;

  inline bool getSeenAllActivity() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ApiTokenOwner::User::Builder {
public:
  typedef User Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUserId();
  inline  ::capnp::Text::Builder getUserId();
  inline void setUserId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUserId(unsigned int size);
  inline void adoptUserId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUserId();

  inline bool hasTitle();
  inline  ::capnp::Text::Builder getTitle();
  inline void setTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTitle(unsigned int size);
  inline void adoptTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTitle();

  inline bool hasDenormalizedGrainMetadata();
  inline  ::sandstorm::DenormalizedGrainMetadata::Builder getDenormalizedGrainMetadata();
  inline void setDenormalizedGrainMetadata( ::sandstorm::DenormalizedGrainMetadata::Reader value);
  inline  ::sandstorm::DenormalizedGrainMetadata::Builder initDenormalizedGrainMetadata();
  inline void adoptDenormalizedGrainMetadata(::capnp::Orphan< ::sandstorm::DenormalizedGrainMetadata>&& value);
  inline ::capnp::Orphan< ::sandstorm::DenormalizedGrainMetadata> disownDenormalizedGrainMetadata();

  inline bool hasIdentityId();
  inline  ::capnp::Text::Builder getIdentityId();
  inline void setIdentityId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initIdentityId(unsigned int size);
  inline void adoptIdentityId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownIdentityId();

  inline bool hasUpstreamTitle();
  inline  ::capnp::Text::Builder getUpstreamTitle();
  inline void setUpstreamTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUpstreamTitle(unsigned int size);
  inline void adoptUpstreamTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUpstreamTitle();

  inline bool getRenamed();
  inline void setRenamed(bool value);

  inline bool getSeenAllActivity();
  inline void setSeenAllActivity(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ApiTokenOwner::User::Pipeline {
public:
  typedef User Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::DenormalizedGrainMetadata::Pipeline getDenormalizedGrainMetadata();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ApiTokenOwner::ClientPowerboxRequest::Reader {
public:
  typedef ClientPowerboxRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasGrainId() const;
  inline  ::capnp::Text::Reader getGrainId() const;

  inline bool hasIntroducerIdentity() const;
  inline  ::capnp::Text::Reader getIntroducerIdentity() const;

  inline bool hasSessionId() const;
  inline  ::capnp::Text::Reader getSessionId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ApiTokenOwner::ClientPowerboxRequest::Builder {
public:
  typedef ClientPowerboxRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasGrainId();
  inline  ::capnp::Text::Builder getGrainId();
  inline void setGrainId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrainId(unsigned int size);
  inline void adoptGrainId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrainId();

  inline bool hasIntroducerIdentity();
  inline  ::capnp::Text::Builder getIntroducerIdentity();
  inline void setIntroducerIdentity( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initIntroducerIdentity(unsigned int size);
  inline void adoptIntroducerIdentity(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownIntroducerIdentity();

  inline bool hasSessionId();
  inline  ::capnp::Text::Builder getSessionId();
  inline void setSessionId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSessionId(unsigned int size);
  inline void adoptSessionId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSessionId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ApiTokenOwner::ClientPowerboxRequest::Pipeline {
public:
  typedef ClientPowerboxRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ApiTokenOwner::ClientPowerboxOffer::Reader {
public:
  typedef ClientPowerboxOffer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasSessionId() const;
  inline  ::capnp::Text::Reader getSessionId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ApiTokenOwner::ClientPowerboxOffer::Builder {
public:
  typedef ClientPowerboxOffer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSessionId();
  inline  ::capnp::Text::Builder getSessionId();
  inline void setSessionId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSessionId(unsigned int size);
  inline void adoptSessionId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSessionId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ApiTokenOwner::ClientPowerboxOffer::Pipeline {
public:
  typedef ClientPowerboxOffer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SupervisorObjectId<AppObjectId>::Reader {
public:
  typedef SupervisorObjectId Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SupervisorObjectId<AppObjectId2>::Reader asGeneric() {
    return typename SupervisorObjectId<AppObjectId2>::Reader(_reader);
  }

  inline Which which() const;
  inline bool isAppRef() const;
  inline bool hasAppRef() const;
  inline  ::capnp::ReaderFor<AppObjectId> getAppRef() const;

  inline bool isWakeLockNotification() const;
  inline  ::uint32_t getWakeLockNotification() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SupervisorObjectId<AppObjectId>::Builder {
public:
  typedef SupervisorObjectId Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SupervisorObjectId<AppObjectId2>::Builder asGeneric() {
    return typename SupervisorObjectId<AppObjectId2>::Builder(_builder);
  }

  inline Which which();
  inline bool isAppRef();
  inline bool hasAppRef();
  inline  ::capnp::BuilderFor<AppObjectId> getAppRef();
  inline void setAppRef( ::capnp::ReaderFor<AppObjectId> value);
  inline  ::capnp::BuilderFor<AppObjectId> initAppRef();
  inline  ::capnp::BuilderFor<AppObjectId> initAppRef(unsigned int size);
  inline void adoptAppRef(::capnp::Orphan<AppObjectId>&& value);
  inline ::capnp::Orphan<AppObjectId> disownAppRef();

  inline bool isWakeLockNotification();
  inline  ::uint32_t getWakeLockNotification();
  inline void setWakeLockNotification( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SupervisorObjectId<AppObjectId>::Pipeline {
public:
  typedef SupervisorObjectId Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
inline Supervisor::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline Supervisor::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline Supervisor::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline Supervisor::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline Supervisor::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::Supervisor::Client& Supervisor::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::Supervisor::Client& Supervisor::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool Supervisor::GetMainViewResults::Reader::hasView() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Supervisor::GetMainViewResults::Builder::hasView() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::UiView::Client Supervisor::GetMainViewResults::Reader::getView() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::UiView::Client Supervisor::GetMainViewResults::Builder::getView() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::UiView::Client Supervisor::GetMainViewResults::Pipeline::getView() {
  return  ::sandstorm::UiView::Client(_typeless.getPointerField(0).asCap());
}
inline void Supervisor::GetMainViewResults::Builder::setView( ::sandstorm::UiView::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void Supervisor::GetMainViewResults::Builder::setView( ::sandstorm::UiView::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void Supervisor::GetMainViewResults::Builder::adoptView(
    ::capnp::Orphan< ::sandstorm::UiView>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::UiView> Supervisor::GetMainViewResults::Builder::disownView() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool Supervisor::KeepAliveParams::Reader::hasCore() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Supervisor::KeepAliveParams::Builder::hasCore() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::SandstormCore::Client Supervisor::KeepAliveParams::Reader::getCore() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::SandstormCore::Client Supervisor::KeepAliveParams::Builder::getCore() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::SandstormCore::Client Supervisor::KeepAliveParams::Pipeline::getCore() {
  return  ::sandstorm::SandstormCore::Client(_typeless.getPointerField(0).asCap());
}
inline void Supervisor::KeepAliveParams::Builder::setCore( ::sandstorm::SandstormCore::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void Supervisor::KeepAliveParams::Builder::setCore( ::sandstorm::SandstormCore::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void Supervisor::KeepAliveParams::Builder::adoptCore(
    ::capnp::Orphan< ::sandstorm::SandstormCore>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::SandstormCore> Supervisor::KeepAliveParams::Builder::disownCore() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline  ::uint64_t Supervisor::ObsoleteGetGrainSizeResults::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Supervisor::ObsoleteGetGrainSizeResults::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Supervisor::ObsoleteGetGrainSizeResults::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Supervisor::ObsoloteGetGrainSizeWhenDifferentParams::Reader::getOldSize() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Supervisor::ObsoloteGetGrainSizeWhenDifferentParams::Builder::getOldSize() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Supervisor::ObsoloteGetGrainSizeWhenDifferentParams::Builder::setOldSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Supervisor::ObsoloteGetGrainSizeWhenDifferentResults::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Supervisor::ObsoloteGetGrainSizeWhenDifferentResults::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Supervisor::ObsoloteGetGrainSizeWhenDifferentResults::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Supervisor::RestoreParams::Reader::hasRef() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Supervisor::RestoreParams::Builder::hasRef() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Reader Supervisor::RestoreParams::Reader::getRef() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Builder Supervisor::RestoreParams::Builder::getRef() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Pipeline Supervisor::RestoreParams::Pipeline::getRef() {
  return  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Supervisor::RestoreParams::Builder::setRef( ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Builder Supervisor::RestoreParams::Builder::initRef() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Supervisor::RestoreParams::Builder::adoptRef(
    ::capnp::Orphan< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>> Supervisor::RestoreParams::Builder::disownRef() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Supervisor::RestoreParams::Reader::hasRequirements() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Supervisor::RestoreParams::Builder::hasRequirements() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Reader Supervisor::RestoreParams::Reader::getRequirements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder Supervisor::RestoreParams::Builder::getRequirements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Supervisor::RestoreParams::Builder::setRequirements( ::capnp::List< ::sandstorm::MembraneRequirement>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder Supervisor::RestoreParams::Builder::initRequirements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Supervisor::RestoreParams::Builder::adoptRequirements(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>> Supervisor::RestoreParams::Builder::disownRequirements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Supervisor::RestoreParams::Reader::hasParentToken() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Supervisor::RestoreParams::Builder::hasParentToken() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Supervisor::RestoreParams::Reader::getParentToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Supervisor::RestoreParams::Builder::getParentToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Supervisor::RestoreParams::Builder::setParentToken( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Supervisor::RestoreParams::Builder::initParentToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Supervisor::RestoreParams::Builder::adoptParentToken(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Supervisor::RestoreParams::Builder::disownParentToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Supervisor::RestoreResults::Reader::hasCap() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Supervisor::RestoreResults::Builder::hasCap() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::Capability::Client Supervisor::RestoreResults::Reader::getCap() const {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client Supervisor::RestoreResults::Builder::getCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client Supervisor::RestoreResults::Pipeline::getCap() {
  return  ::capnp::Capability::Client(_typeless.getPointerField(0).asCap());
}
inline void Supervisor::RestoreResults::Builder::setCap( ::capnp::Capability::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void Supervisor::RestoreResults::Builder::setCap( ::capnp::Capability::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void Supervisor::RestoreResults::Builder::adoptCap(
    ::capnp::Orphan< ::capnp::Capability>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Capability> Supervisor::RestoreResults::Builder::disownCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool Supervisor::DropParams::Reader::hasRef() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Supervisor::DropParams::Builder::hasRef() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Reader Supervisor::DropParams::Reader::getRef() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Builder Supervisor::DropParams::Builder::getRef() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Pipeline Supervisor::DropParams::Pipeline::getRef() {
  return  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Supervisor::DropParams::Builder::setRef( ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Builder Supervisor::DropParams::Builder::initRef() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Supervisor::DropParams::Builder::adoptRef(
    ::capnp::Orphan< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>> Supervisor::DropParams::Builder::disownRef() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t Supervisor::WatchLogParams::Reader::getBacklogAmount() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Supervisor::WatchLogParams::Builder::getBacklogAmount() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Supervisor::WatchLogParams::Builder::setBacklogAmount( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Supervisor::WatchLogParams::Reader::hasStream() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Supervisor::WatchLogParams::Builder::hasStream() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::ByteStream::Client Supervisor::WatchLogParams::Reader::getStream() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::ByteStream::Client Supervisor::WatchLogParams::Builder::getStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::ByteStream::Client Supervisor::WatchLogParams::Pipeline::getStream() {
  return  ::sandstorm::ByteStream::Client(_typeless.getPointerField(0).asCap());
}
inline void Supervisor::WatchLogParams::Builder::setStream( ::sandstorm::ByteStream::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void Supervisor::WatchLogParams::Builder::setStream( ::sandstorm::ByteStream::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void Supervisor::WatchLogParams::Builder::adoptStream(
    ::capnp::Orphan< ::sandstorm::ByteStream>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::ByteStream> Supervisor::WatchLogParams::Builder::disownStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool Supervisor::WatchLogResults::Reader::hasHandle() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Supervisor::WatchLogResults::Builder::hasHandle() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Handle::Client Supervisor::WatchLogResults::Reader::getHandle() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Handle::Client Supervisor::WatchLogResults::Builder::getHandle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Handle::Client Supervisor::WatchLogResults::Pipeline::getHandle() {
  return  ::sandstorm::Handle::Client(_typeless.getPointerField(0).asCap());
}
inline void Supervisor::WatchLogResults::Builder::setHandle( ::sandstorm::Handle::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void Supervisor::WatchLogResults::Builder::setHandle( ::sandstorm::Handle::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void Supervisor::WatchLogResults::Builder::adoptHandle(
    ::capnp::Orphan< ::sandstorm::Handle>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Handle> Supervisor::WatchLogResults::Builder::disownHandle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool Supervisor::GetWwwFileHackParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Supervisor::GetWwwFileHackParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Supervisor::GetWwwFileHackParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Supervisor::GetWwwFileHackParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Supervisor::GetWwwFileHackParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Supervisor::GetWwwFileHackParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Supervisor::GetWwwFileHackParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Supervisor::GetWwwFileHackParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Supervisor::GetWwwFileHackParams::Reader::hasStream() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Supervisor::GetWwwFileHackParams::Builder::hasStream() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::ByteStream::Client Supervisor::GetWwwFileHackParams::Reader::getStream() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::ByteStream::Client Supervisor::GetWwwFileHackParams::Builder::getStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::ByteStream::Client Supervisor::GetWwwFileHackParams::Pipeline::getStream() {
  return  ::sandstorm::ByteStream::Client(_typeless.getPointerField(1).asCap());
}
inline void Supervisor::GetWwwFileHackParams::Builder::setStream( ::sandstorm::ByteStream::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(cap));
}
inline void Supervisor::GetWwwFileHackParams::Builder::setStream( ::sandstorm::ByteStream::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), cap);
}
inline void Supervisor::GetWwwFileHackParams::Builder::adoptStream(
    ::capnp::Orphan< ::sandstorm::ByteStream>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::ByteStream> Supervisor::GetWwwFileHackParams::Builder::disownStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline  ::sandstorm::Supervisor::WwwFileStatus Supervisor::GetWwwFileHackResults::Reader::getStatus() const {
  return _reader.getDataField< ::sandstorm::Supervisor::WwwFileStatus>(
      0 * ::capnp::ELEMENTS);
}

inline  ::sandstorm::Supervisor::WwwFileStatus Supervisor::GetWwwFileHackResults::Builder::getStatus() {
  return _builder.getDataField< ::sandstorm::Supervisor::WwwFileStatus>(
      0 * ::capnp::ELEMENTS);
}
inline void Supervisor::GetWwwFileHackResults::Builder::setStatus( ::sandstorm::Supervisor::WwwFileStatus value) {
  _builder.setDataField< ::sandstorm::Supervisor::WwwFileStatus>(
      0 * ::capnp::ELEMENTS, value);
}

#if !CAPNP_LITE
inline SandstormCore::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline SandstormCore::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline SandstormCore::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline SandstormCore::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline SandstormCore::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::SandstormCore::Client& SandstormCore::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::SandstormCore::Client& SandstormCore::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
#if !CAPNP_LITE
inline SandstormCore::RequirementObserver::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline SandstormCore::RequirementObserver::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline SandstormCore::RequirementObserver::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline SandstormCore::RequirementObserver::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline SandstormCore::RequirementObserver::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::SandstormCore::RequirementObserver::Client& SandstormCore::RequirementObserver::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::SandstormCore::RequirementObserver::Client& SandstormCore::RequirementObserver::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool SandstormCore::RestoreParams::Reader::hasToken() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::RestoreParams::Builder::hasToken() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader SandstormCore::RestoreParams::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder SandstormCore::RestoreParams::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SandstormCore::RestoreParams::Builder::setToken( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder SandstormCore::RestoreParams::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SandstormCore::RestoreParams::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> SandstormCore::RestoreParams::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SandstormCore::RestoreResults::Reader::hasCap() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::RestoreResults::Builder::hasCap() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::Capability::Client SandstormCore::RestoreResults::Reader::getCap() const {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client SandstormCore::RestoreResults::Builder::getCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client SandstormCore::RestoreResults::Pipeline::getCap() {
  return  ::capnp::Capability::Client(_typeless.getPointerField(0).asCap());
}
inline void SandstormCore::RestoreResults::Builder::setCap( ::capnp::Capability::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SandstormCore::RestoreResults::Builder::setCap( ::capnp::Capability::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SandstormCore::RestoreResults::Builder::adoptCap(
    ::capnp::Orphan< ::capnp::Capability>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Capability> SandstormCore::RestoreResults::Builder::disownCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool SandstormCore::MakeTokenParams::Reader::hasRef() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::MakeTokenParams::Builder::hasRef() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Reader SandstormCore::MakeTokenParams::Reader::getRef() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Builder SandstormCore::MakeTokenParams::Builder::getRef() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Pipeline SandstormCore::MakeTokenParams::Pipeline::getRef() {
  return  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SandstormCore::MakeTokenParams::Builder::setRef( ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>::Builder SandstormCore::MakeTokenParams::Builder::initRef() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SandstormCore::MakeTokenParams::Builder::adoptRef(
    ::capnp::Orphan< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>> SandstormCore::MakeTokenParams::Builder::disownRef() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SupervisorObjectId< ::capnp::AnyPointer>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SandstormCore::MakeTokenParams::Reader::hasOwner() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::MakeTokenParams::Builder::hasOwner() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::ApiTokenOwner::Reader SandstormCore::MakeTokenParams::Reader::getOwner() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::ApiTokenOwner>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::ApiTokenOwner::Builder SandstormCore::MakeTokenParams::Builder::getOwner() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ApiTokenOwner>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::ApiTokenOwner::Pipeline SandstormCore::MakeTokenParams::Pipeline::getOwner() {
  return  ::sandstorm::ApiTokenOwner::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void SandstormCore::MakeTokenParams::Builder::setOwner( ::sandstorm::ApiTokenOwner::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ApiTokenOwner>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::ApiTokenOwner::Builder SandstormCore::MakeTokenParams::Builder::initOwner() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ApiTokenOwner>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void SandstormCore::MakeTokenParams::Builder::adoptOwner(
    ::capnp::Orphan< ::sandstorm::ApiTokenOwner>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ApiTokenOwner>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::ApiTokenOwner> SandstormCore::MakeTokenParams::Builder::disownOwner() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ApiTokenOwner>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool SandstormCore::MakeTokenParams::Reader::hasRequirements() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::MakeTokenParams::Builder::hasRequirements() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Reader SandstormCore::MakeTokenParams::Reader::getRequirements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder SandstormCore::MakeTokenParams::Builder::getRequirements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void SandstormCore::MakeTokenParams::Builder::setRequirements( ::capnp::List< ::sandstorm::MembraneRequirement>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder SandstormCore::MakeTokenParams::Builder::initRequirements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void SandstormCore::MakeTokenParams::Builder::adoptRequirements(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>> SandstormCore::MakeTokenParams::Builder::disownRequirements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool SandstormCore::MakeTokenResults::Reader::hasToken() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::MakeTokenResults::Builder::hasToken() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader SandstormCore::MakeTokenResults::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder SandstormCore::MakeTokenResults::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SandstormCore::MakeTokenResults::Builder::setToken( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder SandstormCore::MakeTokenResults::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SandstormCore::MakeTokenResults::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> SandstormCore::MakeTokenResults::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SandstormCore::GetOwnerNotificationTargetResults::Reader::hasOwner() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::GetOwnerNotificationTargetResults::Builder::hasOwner() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::NotificationTarget::Client SandstormCore::GetOwnerNotificationTargetResults::Reader::getOwner() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::NotificationTarget>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::NotificationTarget::Client SandstormCore::GetOwnerNotificationTargetResults::Builder::getOwner() {
  return ::capnp::_::PointerHelpers< ::sandstorm::NotificationTarget>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::NotificationTarget::Client SandstormCore::GetOwnerNotificationTargetResults::Pipeline::getOwner() {
  return  ::sandstorm::NotificationTarget::Client(_typeless.getPointerField(0).asCap());
}
inline void SandstormCore::GetOwnerNotificationTargetResults::Builder::setOwner( ::sandstorm::NotificationTarget::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::NotificationTarget>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SandstormCore::GetOwnerNotificationTargetResults::Builder::setOwner( ::sandstorm::NotificationTarget::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::NotificationTarget>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SandstormCore::GetOwnerNotificationTargetResults::Builder::adoptOwner(
    ::capnp::Orphan< ::sandstorm::NotificationTarget>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::NotificationTarget>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::NotificationTarget> SandstormCore::GetOwnerNotificationTargetResults::Builder::disownOwner() {
  return ::capnp::_::PointerHelpers< ::sandstorm::NotificationTarget>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool SandstormCore::DropParams::Reader::hasToken() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::DropParams::Builder::hasToken() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader SandstormCore::DropParams::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder SandstormCore::DropParams::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SandstormCore::DropParams::Builder::setToken( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder SandstormCore::DropParams::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SandstormCore::DropParams::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> SandstormCore::DropParams::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SandstormCore::CheckRequirementsParams::Reader::hasRequirements() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::CheckRequirementsParams::Builder::hasRequirements() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Reader SandstormCore::CheckRequirementsParams::Reader::getRequirements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder SandstormCore::CheckRequirementsParams::Builder::getRequirements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SandstormCore::CheckRequirementsParams::Builder::setRequirements( ::capnp::List< ::sandstorm::MembraneRequirement>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder SandstormCore::CheckRequirementsParams::Builder::initRequirements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SandstormCore::CheckRequirementsParams::Builder::adoptRequirements(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>> SandstormCore::CheckRequirementsParams::Builder::disownRequirements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SandstormCore::CheckRequirementsResults::Reader::hasObserver() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::CheckRequirementsResults::Builder::hasObserver() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::SandstormCore::RequirementObserver::Client SandstormCore::CheckRequirementsResults::Reader::getObserver() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore::RequirementObserver>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::SandstormCore::RequirementObserver::Client SandstormCore::CheckRequirementsResults::Builder::getObserver() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore::RequirementObserver>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::SandstormCore::RequirementObserver::Client SandstormCore::CheckRequirementsResults::Pipeline::getObserver() {
  return  ::sandstorm::SandstormCore::RequirementObserver::Client(_typeless.getPointerField(0).asCap());
}
inline void SandstormCore::CheckRequirementsResults::Builder::setObserver( ::sandstorm::SandstormCore::RequirementObserver::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore::RequirementObserver>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SandstormCore::CheckRequirementsResults::Builder::setObserver( ::sandstorm::SandstormCore::RequirementObserver::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore::RequirementObserver>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SandstormCore::CheckRequirementsResults::Builder::adoptObserver(
    ::capnp::Orphan< ::sandstorm::SandstormCore::RequirementObserver>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore::RequirementObserver>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::SandstormCore::RequirementObserver> SandstormCore::CheckRequirementsResults::Builder::disownObserver() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SandstormCore::RequirementObserver>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool SandstormCore::MakeChildTokenParams::Reader::hasParent() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::MakeChildTokenParams::Builder::hasParent() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader SandstormCore::MakeChildTokenParams::Reader::getParent() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder SandstormCore::MakeChildTokenParams::Builder::getParent() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SandstormCore::MakeChildTokenParams::Builder::setParent( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder SandstormCore::MakeChildTokenParams::Builder::initParent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SandstormCore::MakeChildTokenParams::Builder::adoptParent(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> SandstormCore::MakeChildTokenParams::Builder::disownParent() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SandstormCore::MakeChildTokenParams::Reader::hasOwner() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::MakeChildTokenParams::Builder::hasOwner() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::ApiTokenOwner::Reader SandstormCore::MakeChildTokenParams::Reader::getOwner() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::ApiTokenOwner>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::ApiTokenOwner::Builder SandstormCore::MakeChildTokenParams::Builder::getOwner() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ApiTokenOwner>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::ApiTokenOwner::Pipeline SandstormCore::MakeChildTokenParams::Pipeline::getOwner() {
  return  ::sandstorm::ApiTokenOwner::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void SandstormCore::MakeChildTokenParams::Builder::setOwner( ::sandstorm::ApiTokenOwner::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ApiTokenOwner>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::ApiTokenOwner::Builder SandstormCore::MakeChildTokenParams::Builder::initOwner() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ApiTokenOwner>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void SandstormCore::MakeChildTokenParams::Builder::adoptOwner(
    ::capnp::Orphan< ::sandstorm::ApiTokenOwner>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ApiTokenOwner>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::ApiTokenOwner> SandstormCore::MakeChildTokenParams::Builder::disownOwner() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ApiTokenOwner>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool SandstormCore::MakeChildTokenParams::Reader::hasRequirements() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::MakeChildTokenParams::Builder::hasRequirements() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Reader SandstormCore::MakeChildTokenParams::Reader::getRequirements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder SandstormCore::MakeChildTokenParams::Builder::getRequirements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void SandstormCore::MakeChildTokenParams::Builder::setRequirements( ::capnp::List< ::sandstorm::MembraneRequirement>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder SandstormCore::MakeChildTokenParams::Builder::initRequirements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void SandstormCore::MakeChildTokenParams::Builder::adoptRequirements(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>> SandstormCore::MakeChildTokenParams::Builder::disownRequirements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool SandstormCore::MakeChildTokenResults::Reader::hasToken() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::MakeChildTokenResults::Builder::hasToken() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader SandstormCore::MakeChildTokenResults::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder SandstormCore::MakeChildTokenResults::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SandstormCore::MakeChildTokenResults::Builder::setToken( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder SandstormCore::MakeChildTokenResults::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SandstormCore::MakeChildTokenResults::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> SandstormCore::MakeChildTokenResults::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SandstormCore::ClaimRequestParams::Reader::hasRequestToken() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::ClaimRequestParams::Builder::hasRequestToken() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SandstormCore::ClaimRequestParams::Reader::getRequestToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SandstormCore::ClaimRequestParams::Builder::getRequestToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SandstormCore::ClaimRequestParams::Builder::setRequestToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SandstormCore::ClaimRequestParams::Builder::initRequestToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SandstormCore::ClaimRequestParams::Builder::adoptRequestToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SandstormCore::ClaimRequestParams::Builder::disownRequestToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SandstormCore::ClaimRequestParams::Reader::hasRequiredPermissions() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::ClaimRequestParams::Builder::hasRequiredPermissions() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader SandstormCore::ClaimRequestParams::Reader::getRequiredPermissions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder SandstormCore::ClaimRequestParams::Builder::getRequiredPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void SandstormCore::ClaimRequestParams::Builder::setRequiredPermissions( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void SandstormCore::ClaimRequestParams::Builder::setRequiredPermissions(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder SandstormCore::ClaimRequestParams::Builder::initRequiredPermissions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void SandstormCore::ClaimRequestParams::Builder::adoptRequiredPermissions(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> SandstormCore::ClaimRequestParams::Builder::disownRequiredPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool SandstormCore::ClaimRequestResults::Reader::hasCap() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::ClaimRequestResults::Builder::hasCap() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::Capability::Client SandstormCore::ClaimRequestResults::Reader::getCap() const {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client SandstormCore::ClaimRequestResults::Builder::getCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client SandstormCore::ClaimRequestResults::Pipeline::getCap() {
  return  ::capnp::Capability::Client(_typeless.getPointerField(0).asCap());
}
inline void SandstormCore::ClaimRequestResults::Builder::setCap( ::capnp::Capability::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SandstormCore::ClaimRequestResults::Builder::setCap( ::capnp::Capability::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SandstormCore::ClaimRequestResults::Builder::adoptCap(
    ::capnp::Orphan< ::capnp::Capability>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Capability> SandstormCore::ClaimRequestResults::Builder::disownCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool SandstormCore::BackgroundActivityParams::Reader::hasEvent() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SandstormCore::BackgroundActivityParams::Builder::hasEvent() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::ActivityEvent::Reader SandstormCore::BackgroundActivityParams::Reader::getEvent() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::ActivityEvent::Builder SandstormCore::BackgroundActivityParams::Builder::getEvent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::ActivityEvent::Pipeline SandstormCore::BackgroundActivityParams::Pipeline::getEvent() {
  return  ::sandstorm::ActivityEvent::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SandstormCore::BackgroundActivityParams::Builder::setEvent( ::sandstorm::ActivityEvent::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::ActivityEvent::Builder SandstormCore::BackgroundActivityParams::Builder::initEvent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SandstormCore::BackgroundActivityParams::Builder::adoptEvent(
    ::capnp::Orphan< ::sandstorm::ActivityEvent>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::ActivityEvent> SandstormCore::BackgroundActivityParams::Builder::disownEvent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t SandstormCore::ReportGrainSizeParams::Reader::getBytes() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t SandstormCore::ReportGrainSizeParams::Builder::getBytes() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void SandstormCore::ReportGrainSizeParams::Builder::setBytes( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::sandstorm::MembraneRequirement::Which MembraneRequirement::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::MembraneRequirement::Which MembraneRequirement::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool MembraneRequirement::Reader::isTokenValid() const {
  return which() == MembraneRequirement::TOKEN_VALID;
}
inline bool MembraneRequirement::Builder::isTokenValid() {
  return which() == MembraneRequirement::TOKEN_VALID;
}
inline bool MembraneRequirement::Reader::hasTokenValid() const {
  if (which() != MembraneRequirement::TOKEN_VALID) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MembraneRequirement::Builder::hasTokenValid() {
  if (which() != MembraneRequirement::TOKEN_VALID) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MembraneRequirement::Reader::getTokenValid() const {
  KJ_IREQUIRE((which() == MembraneRequirement::TOKEN_VALID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MembraneRequirement::Builder::getTokenValid() {
  KJ_IREQUIRE((which() == MembraneRequirement::TOKEN_VALID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MembraneRequirement::Builder::setTokenValid( ::capnp::Text::Reader value) {
  _builder.setDataField<MembraneRequirement::Which>(
      0 * ::capnp::ELEMENTS, MembraneRequirement::TOKEN_VALID);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MembraneRequirement::Builder::initTokenValid(unsigned int size) {
  _builder.setDataField<MembraneRequirement::Which>(
      0 * ::capnp::ELEMENTS, MembraneRequirement::TOKEN_VALID);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void MembraneRequirement::Builder::adoptTokenValid(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<MembraneRequirement::Which>(
      0 * ::capnp::ELEMENTS, MembraneRequirement::TOKEN_VALID);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MembraneRequirement::Builder::disownTokenValid() {
  KJ_IREQUIRE((which() == MembraneRequirement::TOKEN_VALID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool MembraneRequirement::Reader::isPermissionsHeld() const {
  return which() == MembraneRequirement::PERMISSIONS_HELD;
}
inline bool MembraneRequirement::Builder::isPermissionsHeld() {
  return which() == MembraneRequirement::PERMISSIONS_HELD;
}
inline typename MembraneRequirement::PermissionsHeld::Reader MembraneRequirement::Reader::getPermissionsHeld() const {
  KJ_IREQUIRE((which() == MembraneRequirement::PERMISSIONS_HELD),
              "Must check which() before get()ing a union member.");
  return typename MembraneRequirement::PermissionsHeld::Reader(_reader);
}
inline typename MembraneRequirement::PermissionsHeld::Builder MembraneRequirement::Builder::getPermissionsHeld() {
  KJ_IREQUIRE((which() == MembraneRequirement::PERMISSIONS_HELD),
              "Must check which() before get()ing a union member.");
  return typename MembraneRequirement::PermissionsHeld::Builder(_builder);
}
inline typename MembraneRequirement::PermissionsHeld::Builder MembraneRequirement::Builder::initPermissionsHeld() {
  _builder.setDataField<MembraneRequirement::Which>(
      0 * ::capnp::ELEMENTS, MembraneRequirement::PERMISSIONS_HELD);
  _builder.setDataField< ::uint16_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  _builder.getPointerField(2 * ::capnp::POINTERS).clear();
  _builder.getPointerField(3 * ::capnp::POINTERS).clear();
  return typename MembraneRequirement::PermissionsHeld::Builder(_builder);
}
inline bool MembraneRequirement::Reader::isUserIsAdmin() const {
  return which() == MembraneRequirement::USER_IS_ADMIN;
}
inline bool MembraneRequirement::Builder::isUserIsAdmin() {
  return which() == MembraneRequirement::USER_IS_ADMIN;
}
inline bool MembraneRequirement::Reader::hasUserIsAdmin() const {
  if (which() != MembraneRequirement::USER_IS_ADMIN) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MembraneRequirement::Builder::hasUserIsAdmin() {
  if (which() != MembraneRequirement::USER_IS_ADMIN) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MembraneRequirement::Reader::getUserIsAdmin() const {
  KJ_IREQUIRE((which() == MembraneRequirement::USER_IS_ADMIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MembraneRequirement::Builder::getUserIsAdmin() {
  KJ_IREQUIRE((which() == MembraneRequirement::USER_IS_ADMIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MembraneRequirement::Builder::setUserIsAdmin( ::capnp::Text::Reader value) {
  _builder.setDataField<MembraneRequirement::Which>(
      0 * ::capnp::ELEMENTS, MembraneRequirement::USER_IS_ADMIN);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MembraneRequirement::Builder::initUserIsAdmin(unsigned int size) {
  _builder.setDataField<MembraneRequirement::Which>(
      0 * ::capnp::ELEMENTS, MembraneRequirement::USER_IS_ADMIN);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void MembraneRequirement::Builder::adoptUserIsAdmin(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<MembraneRequirement::Which>(
      0 * ::capnp::ELEMENTS, MembraneRequirement::USER_IS_ADMIN);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MembraneRequirement::Builder::disownUserIsAdmin() {
  KJ_IREQUIRE((which() == MembraneRequirement::USER_IS_ADMIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::sandstorm::MembraneRequirement::PermissionsHeld::Which MembraneRequirement::PermissionsHeld::Reader::which() const {
  return _reader.getDataField<Which>(1 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::MembraneRequirement::PermissionsHeld::Which MembraneRequirement::PermissionsHeld::Builder::which() {
  return _builder.getDataField<Which>(1 * ::capnp::ELEMENTS);
}

inline bool MembraneRequirement::PermissionsHeld::Reader::hasUserId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MembraneRequirement::PermissionsHeld::Builder::hasUserId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MembraneRequirement::PermissionsHeld::Reader::getUserId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MembraneRequirement::PermissionsHeld::Builder::getUserId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MembraneRequirement::PermissionsHeld::Builder::setUserId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MembraneRequirement::PermissionsHeld::Builder::initUserId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void MembraneRequirement::PermissionsHeld::Builder::adoptUserId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MembraneRequirement::PermissionsHeld::Builder::disownUserId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool MembraneRequirement::PermissionsHeld::Reader::hasGrainId() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool MembraneRequirement::PermissionsHeld::Builder::hasGrainId() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MembraneRequirement::PermissionsHeld::Reader::getGrainId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MembraneRequirement::PermissionsHeld::Builder::getGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void MembraneRequirement::PermissionsHeld::Builder::setGrainId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MembraneRequirement::PermissionsHeld::Builder::initGrainId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void MembraneRequirement::PermissionsHeld::Builder::adoptGrainId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MembraneRequirement::PermissionsHeld::Builder::disownGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool MembraneRequirement::PermissionsHeld::Reader::hasPermissions() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool MembraneRequirement::PermissionsHeld::Builder::hasPermissions() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader MembraneRequirement::PermissionsHeld::Reader::getPermissions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder MembraneRequirement::PermissionsHeld::Builder::getPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void MembraneRequirement::PermissionsHeld::Builder::setPermissions( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void MembraneRequirement::PermissionsHeld::Builder::setPermissions(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder MembraneRequirement::PermissionsHeld::Builder::initPermissions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void MembraneRequirement::PermissionsHeld::Builder::adoptPermissions(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> MembraneRequirement::PermissionsHeld::Builder::disownPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool MembraneRequirement::PermissionsHeld::Reader::isIdentityId() const {
  return which() == MembraneRequirement::PermissionsHeld::IDENTITY_ID;
}
inline bool MembraneRequirement::PermissionsHeld::Builder::isIdentityId() {
  return which() == MembraneRequirement::PermissionsHeld::IDENTITY_ID;
}
inline bool MembraneRequirement::PermissionsHeld::Reader::hasIdentityId() const {
  if (which() != MembraneRequirement::PermissionsHeld::IDENTITY_ID) return false;
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool MembraneRequirement::PermissionsHeld::Builder::hasIdentityId() {
  if (which() != MembraneRequirement::PermissionsHeld::IDENTITY_ID) return false;
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MembraneRequirement::PermissionsHeld::Reader::getIdentityId() const {
  KJ_IREQUIRE((which() == MembraneRequirement::PermissionsHeld::IDENTITY_ID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MembraneRequirement::PermissionsHeld::Builder::getIdentityId() {
  KJ_IREQUIRE((which() == MembraneRequirement::PermissionsHeld::IDENTITY_ID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void MembraneRequirement::PermissionsHeld::Builder::setIdentityId( ::capnp::Text::Reader value) {
  _builder.setDataField<MembraneRequirement::PermissionsHeld::Which>(
      1 * ::capnp::ELEMENTS, MembraneRequirement::PermissionsHeld::IDENTITY_ID);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MembraneRequirement::PermissionsHeld::Builder::initIdentityId(unsigned int size) {
  _builder.setDataField<MembraneRequirement::PermissionsHeld::Which>(
      1 * ::capnp::ELEMENTS, MembraneRequirement::PermissionsHeld::IDENTITY_ID);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void MembraneRequirement::PermissionsHeld::Builder::adoptIdentityId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<MembraneRequirement::PermissionsHeld::Which>(
      1 * ::capnp::ELEMENTS, MembraneRequirement::PermissionsHeld::IDENTITY_ID);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MembraneRequirement::PermissionsHeld::Builder::disownIdentityId() {
  KJ_IREQUIRE((which() == MembraneRequirement::PermissionsHeld::IDENTITY_ID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool MembraneRequirement::PermissionsHeld::Reader::isTokenId() const {
  return which() == MembraneRequirement::PermissionsHeld::TOKEN_ID;
}
inline bool MembraneRequirement::PermissionsHeld::Builder::isTokenId() {
  return which() == MembraneRequirement::PermissionsHeld::TOKEN_ID;
}
inline bool MembraneRequirement::PermissionsHeld::Reader::hasTokenId() const {
  if (which() != MembraneRequirement::PermissionsHeld::TOKEN_ID) return false;
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool MembraneRequirement::PermissionsHeld::Builder::hasTokenId() {
  if (which() != MembraneRequirement::PermissionsHeld::TOKEN_ID) return false;
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MembraneRequirement::PermissionsHeld::Reader::getTokenId() const {
  KJ_IREQUIRE((which() == MembraneRequirement::PermissionsHeld::TOKEN_ID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MembraneRequirement::PermissionsHeld::Builder::getTokenId() {
  KJ_IREQUIRE((which() == MembraneRequirement::PermissionsHeld::TOKEN_ID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void MembraneRequirement::PermissionsHeld::Builder::setTokenId( ::capnp::Text::Reader value) {
  _builder.setDataField<MembraneRequirement::PermissionsHeld::Which>(
      1 * ::capnp::ELEMENTS, MembraneRequirement::PermissionsHeld::TOKEN_ID);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MembraneRequirement::PermissionsHeld::Builder::initTokenId(unsigned int size) {
  _builder.setDataField<MembraneRequirement::PermissionsHeld::Which>(
      1 * ::capnp::ELEMENTS, MembraneRequirement::PermissionsHeld::TOKEN_ID);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void MembraneRequirement::PermissionsHeld::Builder::adoptTokenId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<MembraneRequirement::PermissionsHeld::Which>(
      1 * ::capnp::ELEMENTS, MembraneRequirement::PermissionsHeld::TOKEN_ID);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MembraneRequirement::PermissionsHeld::Builder::disownTokenId() {
  KJ_IREQUIRE((which() == MembraneRequirement::PermissionsHeld::TOKEN_ID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

#if !CAPNP_LITE
inline SystemPersistent::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline SystemPersistent::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline SystemPersistent::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline SystemPersistent::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline SystemPersistent::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::SystemPersistent::Client& SystemPersistent::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::SystemPersistent::Client& SystemPersistent::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool SystemPersistent::AddRequirementsParams::Reader::hasRequirements() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SystemPersistent::AddRequirementsParams::Builder::hasRequirements() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Reader SystemPersistent::AddRequirementsParams::Reader::getRequirements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder SystemPersistent::AddRequirementsParams::Builder::getRequirements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SystemPersistent::AddRequirementsParams::Builder::setRequirements( ::capnp::List< ::sandstorm::MembraneRequirement>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::MembraneRequirement>::Builder SystemPersistent::AddRequirementsParams::Builder::initRequirements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SystemPersistent::AddRequirementsParams::Builder::adoptRequirements(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::MembraneRequirement>> SystemPersistent::AddRequirementsParams::Builder::disownRequirements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::MembraneRequirement>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SystemPersistent::AddRequirementsResults::Reader::hasCap() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SystemPersistent::AddRequirementsResults::Builder::hasCap() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::SystemPersistent::Client SystemPersistent::AddRequirementsResults::Reader::getCap() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::SystemPersistent>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::SystemPersistent::Client SystemPersistent::AddRequirementsResults::Builder::getCap() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SystemPersistent>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::SystemPersistent::Client SystemPersistent::AddRequirementsResults::Pipeline::getCap() {
  return  ::sandstorm::SystemPersistent::Client(_typeless.getPointerField(0).asCap());
}
inline void SystemPersistent::AddRequirementsResults::Builder::setCap( ::sandstorm::SystemPersistent::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SystemPersistent>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SystemPersistent::AddRequirementsResults::Builder::setCap( ::sandstorm::SystemPersistent::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SystemPersistent>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SystemPersistent::AddRequirementsResults::Builder::adoptCap(
    ::capnp::Orphan< ::sandstorm::SystemPersistent>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::SystemPersistent>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::SystemPersistent> SystemPersistent::AddRequirementsResults::Builder::disownCap() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SystemPersistent>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
inline PersistentHandle::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline PersistentHandle::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline PersistentHandle::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline PersistentHandle::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline PersistentHandle::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::PersistentHandle::Client& PersistentHandle::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::PersistentHandle::Client& PersistentHandle::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
#if !CAPNP_LITE
inline PersistentOngoingNotification::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline PersistentOngoingNotification::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline PersistentOngoingNotification::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline PersistentOngoingNotification::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline PersistentOngoingNotification::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::PersistentOngoingNotification::Client& PersistentOngoingNotification::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::PersistentOngoingNotification::Client& PersistentOngoingNotification::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline  ::sandstorm::DenormalizedGrainMetadata::Which DenormalizedGrainMetadata::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::DenormalizedGrainMetadata::Which DenormalizedGrainMetadata::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool DenormalizedGrainMetadata::Reader::hasAppTitle() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DenormalizedGrainMetadata::Builder::hasAppTitle() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader DenormalizedGrainMetadata::Reader::getAppTitle() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder DenormalizedGrainMetadata::Builder::getAppTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline DenormalizedGrainMetadata::Pipeline::getAppTitle() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DenormalizedGrainMetadata::Builder::setAppTitle( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder DenormalizedGrainMetadata::Builder::initAppTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DenormalizedGrainMetadata::Builder::adoptAppTitle(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> DenormalizedGrainMetadata::Builder::disownAppTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DenormalizedGrainMetadata::Reader::isIcon() const {
  return which() == DenormalizedGrainMetadata::ICON;
}
inline bool DenormalizedGrainMetadata::Builder::isIcon() {
  return which() == DenormalizedGrainMetadata::ICON;
}
inline typename DenormalizedGrainMetadata::Icon::Reader DenormalizedGrainMetadata::Reader::getIcon() const {
  KJ_IREQUIRE((which() == DenormalizedGrainMetadata::ICON),
              "Must check which() before get()ing a union member.");
  return typename DenormalizedGrainMetadata::Icon::Reader(_reader);
}
inline typename DenormalizedGrainMetadata::Icon::Builder DenormalizedGrainMetadata::Builder::getIcon() {
  KJ_IREQUIRE((which() == DenormalizedGrainMetadata::ICON),
              "Must check which() before get()ing a union member.");
  return typename DenormalizedGrainMetadata::Icon::Builder(_builder);
}
inline typename DenormalizedGrainMetadata::Icon::Builder DenormalizedGrainMetadata::Builder::initIcon() {
  _builder.setDataField<DenormalizedGrainMetadata::Which>(
      0 * ::capnp::ELEMENTS, DenormalizedGrainMetadata::ICON);
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  _builder.getPointerField(2 * ::capnp::POINTERS).clear();
  _builder.getPointerField(3 * ::capnp::POINTERS).clear();
  return typename DenormalizedGrainMetadata::Icon::Builder(_builder);
}
inline bool DenormalizedGrainMetadata::Reader::isAppId() const {
  return which() == DenormalizedGrainMetadata::APP_ID;
}
inline bool DenormalizedGrainMetadata::Builder::isAppId() {
  return which() == DenormalizedGrainMetadata::APP_ID;
}
inline bool DenormalizedGrainMetadata::Reader::hasAppId() const {
  if (which() != DenormalizedGrainMetadata::APP_ID) return false;
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool DenormalizedGrainMetadata::Builder::hasAppId() {
  if (which() != DenormalizedGrainMetadata::APP_ID) return false;
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DenormalizedGrainMetadata::Reader::getAppId() const {
  KJ_IREQUIRE((which() == DenormalizedGrainMetadata::APP_ID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DenormalizedGrainMetadata::Builder::getAppId() {
  KJ_IREQUIRE((which() == DenormalizedGrainMetadata::APP_ID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void DenormalizedGrainMetadata::Builder::setAppId( ::capnp::Text::Reader value) {
  _builder.setDataField<DenormalizedGrainMetadata::Which>(
      0 * ::capnp::ELEMENTS, DenormalizedGrainMetadata::APP_ID);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DenormalizedGrainMetadata::Builder::initAppId(unsigned int size) {
  _builder.setDataField<DenormalizedGrainMetadata::Which>(
      0 * ::capnp::ELEMENTS, DenormalizedGrainMetadata::APP_ID);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void DenormalizedGrainMetadata::Builder::adoptAppId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<DenormalizedGrainMetadata::Which>(
      0 * ::capnp::ELEMENTS, DenormalizedGrainMetadata::APP_ID);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DenormalizedGrainMetadata::Builder::disownAppId() {
  KJ_IREQUIRE((which() == DenormalizedGrainMetadata::APP_ID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool DenormalizedGrainMetadata::Icon::Reader::hasFormat() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool DenormalizedGrainMetadata::Icon::Builder::hasFormat() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DenormalizedGrainMetadata::Icon::Reader::getFormat() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DenormalizedGrainMetadata::Icon::Builder::getFormat() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void DenormalizedGrainMetadata::Icon::Builder::setFormat( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DenormalizedGrainMetadata::Icon::Builder::initFormat(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void DenormalizedGrainMetadata::Icon::Builder::adoptFormat(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DenormalizedGrainMetadata::Icon::Builder::disownFormat() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool DenormalizedGrainMetadata::Icon::Reader::hasAssetId() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool DenormalizedGrainMetadata::Icon::Builder::hasAssetId() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DenormalizedGrainMetadata::Icon::Reader::getAssetId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DenormalizedGrainMetadata::Icon::Builder::getAssetId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void DenormalizedGrainMetadata::Icon::Builder::setAssetId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DenormalizedGrainMetadata::Icon::Builder::initAssetId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void DenormalizedGrainMetadata::Icon::Builder::adoptAssetId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DenormalizedGrainMetadata::Icon::Builder::disownAssetId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool DenormalizedGrainMetadata::Icon::Reader::hasAssetId2xDpi() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool DenormalizedGrainMetadata::Icon::Builder::hasAssetId2xDpi() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DenormalizedGrainMetadata::Icon::Reader::getAssetId2xDpi() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DenormalizedGrainMetadata::Icon::Builder::getAssetId2xDpi() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void DenormalizedGrainMetadata::Icon::Builder::setAssetId2xDpi( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DenormalizedGrainMetadata::Icon::Builder::initAssetId2xDpi(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void DenormalizedGrainMetadata::Icon::Builder::adoptAssetId2xDpi(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DenormalizedGrainMetadata::Icon::Builder::disownAssetId2xDpi() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::sandstorm::ApiTokenOwner::Which ApiTokenOwner::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::ApiTokenOwner::Which ApiTokenOwner::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool ApiTokenOwner::Reader::isWebkey() const {
  return which() == ApiTokenOwner::WEBKEY;
}
inline bool ApiTokenOwner::Builder::isWebkey() {
  return which() == ApiTokenOwner::WEBKEY;
}
inline  ::capnp::Void ApiTokenOwner::Reader::getWebkey() const {
  KJ_IREQUIRE((which() == ApiTokenOwner::WEBKEY),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void ApiTokenOwner::Builder::getWebkey() {
  KJ_IREQUIRE((which() == ApiTokenOwner::WEBKEY),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void ApiTokenOwner::Builder::setWebkey( ::capnp::Void value) {
  _builder.setDataField<ApiTokenOwner::Which>(
      0 * ::capnp::ELEMENTS, ApiTokenOwner::WEBKEY);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ApiTokenOwner::Reader::isGrain() const {
  return which() == ApiTokenOwner::GRAIN;
}
inline bool ApiTokenOwner::Builder::isGrain() {
  return which() == ApiTokenOwner::GRAIN;
}
inline typename ApiTokenOwner::Grain::Reader ApiTokenOwner::Reader::getGrain() const {
  KJ_IREQUIRE((which() == ApiTokenOwner::GRAIN),
              "Must check which() before get()ing a union member.");
  return typename ApiTokenOwner::Grain::Reader(_reader);
}
inline typename ApiTokenOwner::Grain::Builder ApiTokenOwner::Builder::getGrain() {
  KJ_IREQUIRE((which() == ApiTokenOwner::GRAIN),
              "Must check which() before get()ing a union member.");
  return typename ApiTokenOwner::Grain::Builder(_builder);
}
inline typename ApiTokenOwner::Grain::Builder ApiTokenOwner::Builder::initGrain() {
  _builder.setDataField<ApiTokenOwner::Which>(
      0 * ::capnp::ELEMENTS, ApiTokenOwner::GRAIN);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  _builder.getPointerField(2 * ::capnp::POINTERS).clear();
  _builder.getPointerField(3 * ::capnp::POINTERS).clear();
  return typename ApiTokenOwner::Grain::Builder(_builder);
}
inline bool ApiTokenOwner::Reader::isInternet() const {
  return which() == ApiTokenOwner::INTERNET;
}
inline bool ApiTokenOwner::Builder::isInternet() {
  return which() == ApiTokenOwner::INTERNET;
}
inline bool ApiTokenOwner::Reader::hasInternet() const {
  if (which() != ApiTokenOwner::INTERNET) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ApiTokenOwner::Builder::hasInternet() {
  if (which() != ApiTokenOwner::INTERNET) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline ::capnp::AnyPointer::Reader ApiTokenOwner::Reader::getInternet() const {
  KJ_IREQUIRE((which() == ApiTokenOwner::INTERNET),
              "Must check which() before get()ing a union member.");
  return ::capnp::AnyPointer::Reader(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder ApiTokenOwner::Builder::getInternet() {
  KJ_IREQUIRE((which() == ApiTokenOwner::INTERNET),
              "Must check which() before get()ing a union member.");
  return ::capnp::AnyPointer::Builder(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder ApiTokenOwner::Builder::initInternet() {
  _builder.setDataField<ApiTokenOwner::Which>(
      0 * ::capnp::ELEMENTS, ApiTokenOwner::INTERNET);
  auto result = ::capnp::AnyPointer::Builder(
      _builder.getPointerField(0 * ::capnp::POINTERS));
  result.clear();
  return result;
}

inline bool ApiTokenOwner::Reader::isFrontend() const {
  return which() == ApiTokenOwner::FRONTEND;
}
inline bool ApiTokenOwner::Builder::isFrontend() {
  return which() == ApiTokenOwner::FRONTEND;
}
inline  ::capnp::Void ApiTokenOwner::Reader::getFrontend() const {
  KJ_IREQUIRE((which() == ApiTokenOwner::FRONTEND),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void ApiTokenOwner::Builder::getFrontend() {
  KJ_IREQUIRE((which() == ApiTokenOwner::FRONTEND),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void ApiTokenOwner::Builder::setFrontend( ::capnp::Void value) {
  _builder.setDataField<ApiTokenOwner::Which>(
      0 * ::capnp::ELEMENTS, ApiTokenOwner::FRONTEND);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ApiTokenOwner::Reader::isUser() const {
  return which() == ApiTokenOwner::USER;
}
inline bool ApiTokenOwner::Builder::isUser() {
  return which() == ApiTokenOwner::USER;
}
inline typename ApiTokenOwner::User::Reader ApiTokenOwner::Reader::getUser() const {
  KJ_IREQUIRE((which() == ApiTokenOwner::USER),
              "Must check which() before get()ing a union member.");
  return typename ApiTokenOwner::User::Reader(_reader);
}
inline typename ApiTokenOwner::User::Builder ApiTokenOwner::Builder::getUser() {
  KJ_IREQUIRE((which() == ApiTokenOwner::USER),
              "Must check which() before get()ing a union member.");
  return typename ApiTokenOwner::User::Builder(_builder);
}
inline typename ApiTokenOwner::User::Builder ApiTokenOwner::Builder::initUser() {
  _builder.setDataField<ApiTokenOwner::Which>(
      0 * ::capnp::ELEMENTS, ApiTokenOwner::USER);
  _builder.setDataField<bool>(16 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(17 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  _builder.getPointerField(2 * ::capnp::POINTERS).clear();
  _builder.getPointerField(3 * ::capnp::POINTERS).clear();
  _builder.getPointerField(4 * ::capnp::POINTERS).clear();
  return typename ApiTokenOwner::User::Builder(_builder);
}
inline bool ApiTokenOwner::Reader::isClientPowerboxRequest() const {
  return which() == ApiTokenOwner::CLIENT_POWERBOX_REQUEST;
}
inline bool ApiTokenOwner::Builder::isClientPowerboxRequest() {
  return which() == ApiTokenOwner::CLIENT_POWERBOX_REQUEST;
}
inline typename ApiTokenOwner::ClientPowerboxRequest::Reader ApiTokenOwner::Reader::getClientPowerboxRequest() const {
  KJ_IREQUIRE((which() == ApiTokenOwner::CLIENT_POWERBOX_REQUEST),
              "Must check which() before get()ing a union member.");
  return typename ApiTokenOwner::ClientPowerboxRequest::Reader(_reader);
}
inline typename ApiTokenOwner::ClientPowerboxRequest::Builder ApiTokenOwner::Builder::getClientPowerboxRequest() {
  KJ_IREQUIRE((which() == ApiTokenOwner::CLIENT_POWERBOX_REQUEST),
              "Must check which() before get()ing a union member.");
  return typename ApiTokenOwner::ClientPowerboxRequest::Builder(_builder);
}
inline typename ApiTokenOwner::ClientPowerboxRequest::Builder ApiTokenOwner::Builder::initClientPowerboxRequest() {
  _builder.setDataField<ApiTokenOwner::Which>(
      0 * ::capnp::ELEMENTS, ApiTokenOwner::CLIENT_POWERBOX_REQUEST);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  _builder.getPointerField(2 * ::capnp::POINTERS).clear();
  return typename ApiTokenOwner::ClientPowerboxRequest::Builder(_builder);
}
inline bool ApiTokenOwner::Reader::isClientPowerboxOffer() const {
  return which() == ApiTokenOwner::CLIENT_POWERBOX_OFFER;
}
inline bool ApiTokenOwner::Builder::isClientPowerboxOffer() {
  return which() == ApiTokenOwner::CLIENT_POWERBOX_OFFER;
}
inline typename ApiTokenOwner::ClientPowerboxOffer::Reader ApiTokenOwner::Reader::getClientPowerboxOffer() const {
  KJ_IREQUIRE((which() == ApiTokenOwner::CLIENT_POWERBOX_OFFER),
              "Must check which() before get()ing a union member.");
  return typename ApiTokenOwner::ClientPowerboxOffer::Reader(_reader);
}
inline typename ApiTokenOwner::ClientPowerboxOffer::Builder ApiTokenOwner::Builder::getClientPowerboxOffer() {
  KJ_IREQUIRE((which() == ApiTokenOwner::CLIENT_POWERBOX_OFFER),
              "Must check which() before get()ing a union member.");
  return typename ApiTokenOwner::ClientPowerboxOffer::Builder(_builder);
}
inline typename ApiTokenOwner::ClientPowerboxOffer::Builder ApiTokenOwner::Builder::initClientPowerboxOffer() {
  _builder.setDataField<ApiTokenOwner::Which>(
      0 * ::capnp::ELEMENTS, ApiTokenOwner::CLIENT_POWERBOX_OFFER);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  return typename ApiTokenOwner::ClientPowerboxOffer::Builder(_builder);
}
inline bool ApiTokenOwner::Grain::Reader::hasGrainId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ApiTokenOwner::Grain::Builder::hasGrainId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ApiTokenOwner::Grain::Reader::getGrainId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ApiTokenOwner::Grain::Builder::getGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ApiTokenOwner::Grain::Builder::setGrainId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ApiTokenOwner::Grain::Builder::initGrainId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ApiTokenOwner::Grain::Builder::adoptGrainId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ApiTokenOwner::Grain::Builder::disownGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ApiTokenOwner::Grain::Reader::hasSaveLabel() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ApiTokenOwner::Grain::Builder::hasSaveLabel() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader ApiTokenOwner::Grain::Reader::getSaveLabel() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder ApiTokenOwner::Grain::Builder::getSaveLabel() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline ApiTokenOwner::Grain::Pipeline::getSaveLabel() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ApiTokenOwner::Grain::Builder::setSaveLabel( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder ApiTokenOwner::Grain::Builder::initSaveLabel() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ApiTokenOwner::Grain::Builder::adoptSaveLabel(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> ApiTokenOwner::Grain::Builder::disownSaveLabel() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ApiTokenOwner::Grain::Reader::hasIntroducerUser() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool ApiTokenOwner::Grain::Builder::hasIntroducerUser() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ApiTokenOwner::Grain::Reader::getIntroducerUser() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ApiTokenOwner::Grain::Builder::getIntroducerUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void ApiTokenOwner::Grain::Builder::setIntroducerUser( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ApiTokenOwner::Grain::Builder::initIntroducerUser(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void ApiTokenOwner::Grain::Builder::adoptIntroducerUser(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ApiTokenOwner::Grain::Builder::disownIntroducerUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool ApiTokenOwner::Grain::Reader::hasIntroducerIdentity() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool ApiTokenOwner::Grain::Builder::hasIntroducerIdentity() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ApiTokenOwner::Grain::Reader::getIntroducerIdentity() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ApiTokenOwner::Grain::Builder::getIntroducerIdentity() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void ApiTokenOwner::Grain::Builder::setIntroducerIdentity( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ApiTokenOwner::Grain::Builder::initIntroducerIdentity(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void ApiTokenOwner::Grain::Builder::adoptIntroducerIdentity(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ApiTokenOwner::Grain::Builder::disownIntroducerIdentity() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool ApiTokenOwner::User::Reader::hasUserId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ApiTokenOwner::User::Builder::hasUserId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ApiTokenOwner::User::Reader::getUserId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ApiTokenOwner::User::Builder::getUserId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ApiTokenOwner::User::Builder::setUserId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ApiTokenOwner::User::Builder::initUserId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ApiTokenOwner::User::Builder::adoptUserId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ApiTokenOwner::User::Builder::disownUserId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ApiTokenOwner::User::Reader::hasTitle() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ApiTokenOwner::User::Builder::hasTitle() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ApiTokenOwner::User::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ApiTokenOwner::User::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ApiTokenOwner::User::Builder::setTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ApiTokenOwner::User::Builder::initTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void ApiTokenOwner::User::Builder::adoptTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ApiTokenOwner::User::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ApiTokenOwner::User::Reader::hasDenormalizedGrainMetadata() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool ApiTokenOwner::User::Builder::hasDenormalizedGrainMetadata() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::DenormalizedGrainMetadata::Reader ApiTokenOwner::User::Reader::getDenormalizedGrainMetadata() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::DenormalizedGrainMetadata>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::DenormalizedGrainMetadata::Builder ApiTokenOwner::User::Builder::getDenormalizedGrainMetadata() {
  return ::capnp::_::PointerHelpers< ::sandstorm::DenormalizedGrainMetadata>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::DenormalizedGrainMetadata::Pipeline ApiTokenOwner::User::Pipeline::getDenormalizedGrainMetadata() {
  return  ::sandstorm::DenormalizedGrainMetadata::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ApiTokenOwner::User::Builder::setDenormalizedGrainMetadata( ::sandstorm::DenormalizedGrainMetadata::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::DenormalizedGrainMetadata>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::DenormalizedGrainMetadata::Builder ApiTokenOwner::User::Builder::initDenormalizedGrainMetadata() {
  return ::capnp::_::PointerHelpers< ::sandstorm::DenormalizedGrainMetadata>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void ApiTokenOwner::User::Builder::adoptDenormalizedGrainMetadata(
    ::capnp::Orphan< ::sandstorm::DenormalizedGrainMetadata>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::DenormalizedGrainMetadata>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::DenormalizedGrainMetadata> ApiTokenOwner::User::Builder::disownDenormalizedGrainMetadata() {
  return ::capnp::_::PointerHelpers< ::sandstorm::DenormalizedGrainMetadata>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool ApiTokenOwner::User::Reader::hasIdentityId() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool ApiTokenOwner::User::Builder::hasIdentityId() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ApiTokenOwner::User::Reader::getIdentityId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ApiTokenOwner::User::Builder::getIdentityId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void ApiTokenOwner::User::Builder::setIdentityId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ApiTokenOwner::User::Builder::initIdentityId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void ApiTokenOwner::User::Builder::adoptIdentityId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ApiTokenOwner::User::Builder::disownIdentityId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool ApiTokenOwner::User::Reader::hasUpstreamTitle() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool ApiTokenOwner::User::Builder::hasUpstreamTitle() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ApiTokenOwner::User::Reader::getUpstreamTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ApiTokenOwner::User::Builder::getUpstreamTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void ApiTokenOwner::User::Builder::setUpstreamTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ApiTokenOwner::User::Builder::initUpstreamTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void ApiTokenOwner::User::Builder::adoptUpstreamTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ApiTokenOwner::User::Builder::disownUpstreamTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool ApiTokenOwner::User::Reader::getRenamed() const {
  return _reader.getDataField<bool>(
      16 * ::capnp::ELEMENTS);
}

inline bool ApiTokenOwner::User::Builder::getRenamed() {
  return _builder.getDataField<bool>(
      16 * ::capnp::ELEMENTS);
}
inline void ApiTokenOwner::User::Builder::setRenamed(bool value) {
  _builder.setDataField<bool>(
      16 * ::capnp::ELEMENTS, value);
}

inline bool ApiTokenOwner::User::Reader::getSeenAllActivity() const {
  return _reader.getDataField<bool>(
      17 * ::capnp::ELEMENTS);
}

inline bool ApiTokenOwner::User::Builder::getSeenAllActivity() {
  return _builder.getDataField<bool>(
      17 * ::capnp::ELEMENTS);
}
inline void ApiTokenOwner::User::Builder::setSeenAllActivity(bool value) {
  _builder.setDataField<bool>(
      17 * ::capnp::ELEMENTS, value);
}

inline bool ApiTokenOwner::ClientPowerboxRequest::Reader::hasGrainId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ApiTokenOwner::ClientPowerboxRequest::Builder::hasGrainId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ApiTokenOwner::ClientPowerboxRequest::Reader::getGrainId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ApiTokenOwner::ClientPowerboxRequest::Builder::getGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ApiTokenOwner::ClientPowerboxRequest::Builder::setGrainId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ApiTokenOwner::ClientPowerboxRequest::Builder::initGrainId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ApiTokenOwner::ClientPowerboxRequest::Builder::adoptGrainId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ApiTokenOwner::ClientPowerboxRequest::Builder::disownGrainId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ApiTokenOwner::ClientPowerboxRequest::Reader::hasIntroducerIdentity() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ApiTokenOwner::ClientPowerboxRequest::Builder::hasIntroducerIdentity() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ApiTokenOwner::ClientPowerboxRequest::Reader::getIntroducerIdentity() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ApiTokenOwner::ClientPowerboxRequest::Builder::getIntroducerIdentity() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ApiTokenOwner::ClientPowerboxRequest::Builder::setIntroducerIdentity( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ApiTokenOwner::ClientPowerboxRequest::Builder::initIntroducerIdentity(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void ApiTokenOwner::ClientPowerboxRequest::Builder::adoptIntroducerIdentity(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ApiTokenOwner::ClientPowerboxRequest::Builder::disownIntroducerIdentity() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ApiTokenOwner::ClientPowerboxRequest::Reader::hasSessionId() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool ApiTokenOwner::ClientPowerboxRequest::Builder::hasSessionId() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ApiTokenOwner::ClientPowerboxRequest::Reader::getSessionId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ApiTokenOwner::ClientPowerboxRequest::Builder::getSessionId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void ApiTokenOwner::ClientPowerboxRequest::Builder::setSessionId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ApiTokenOwner::ClientPowerboxRequest::Builder::initSessionId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void ApiTokenOwner::ClientPowerboxRequest::Builder::adoptSessionId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ApiTokenOwner::ClientPowerboxRequest::Builder::disownSessionId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool ApiTokenOwner::ClientPowerboxOffer::Reader::hasSessionId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ApiTokenOwner::ClientPowerboxOffer::Builder::hasSessionId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ApiTokenOwner::ClientPowerboxOffer::Reader::getSessionId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ApiTokenOwner::ClientPowerboxOffer::Builder::getSessionId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ApiTokenOwner::ClientPowerboxOffer::Builder::setSessionId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ApiTokenOwner::ClientPowerboxOffer::Builder::initSessionId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ApiTokenOwner::ClientPowerboxOffer::Builder::adoptSessionId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ApiTokenOwner::ClientPowerboxOffer::Builder::disownSessionId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

template <typename AppObjectId>
inline typename  ::sandstorm::SupervisorObjectId<AppObjectId>::Which SupervisorObjectId<AppObjectId>::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
template <typename AppObjectId>
inline typename  ::sandstorm::SupervisorObjectId<AppObjectId>::Which SupervisorObjectId<AppObjectId>::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

template <typename AppObjectId>
inline bool SupervisorObjectId<AppObjectId>::Reader::isAppRef() const {
  return which() == SupervisorObjectId<AppObjectId>::APP_REF;
}
template <typename AppObjectId>
inline bool SupervisorObjectId<AppObjectId>::Builder::isAppRef() {
  return which() == SupervisorObjectId<AppObjectId>::APP_REF;
}
template <typename AppObjectId>
inline bool SupervisorObjectId<AppObjectId>::Reader::hasAppRef() const {
  if (which() != SupervisorObjectId<AppObjectId>::APP_REF) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SupervisorObjectId<AppObjectId>::Builder::hasAppRef() {
  if (which() != SupervisorObjectId<AppObjectId>::APP_REF) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline  ::capnp::ReaderFor<AppObjectId> SupervisorObjectId<AppObjectId>::Reader::getAppRef() const {
  KJ_IREQUIRE((which() == SupervisorObjectId<AppObjectId>::APP_REF),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<AppObjectId>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::BuilderFor<AppObjectId> SupervisorObjectId<AppObjectId>::Builder::getAppRef() {
  KJ_IREQUIRE((which() == SupervisorObjectId<AppObjectId>::APP_REF),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<AppObjectId>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline void SupervisorObjectId<AppObjectId>::Builder::setAppRef( ::capnp::ReaderFor<AppObjectId> value) {
  _builder.setDataField<SupervisorObjectId<AppObjectId>::Which>(
      0 * ::capnp::ELEMENTS, SupervisorObjectId<AppObjectId>::APP_REF);
  ::capnp::_::PointerHelpers<AppObjectId>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename AppObjectId>
inline  ::capnp::BuilderFor<AppObjectId> SupervisorObjectId<AppObjectId>::Builder::initAppRef() {
  _builder.setDataField<SupervisorObjectId<AppObjectId>::Which>(
      0 * ::capnp::ELEMENTS, SupervisorObjectId<AppObjectId>::APP_REF);
  return ::capnp::_::PointerHelpers<AppObjectId>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::BuilderFor<AppObjectId> SupervisorObjectId<AppObjectId>::Builder::initAppRef(unsigned int size) {
  _builder.setDataField<SupervisorObjectId<AppObjectId>::Which>(
      0 * ::capnp::ELEMENTS, SupervisorObjectId<AppObjectId>::APP_REF);
  return ::capnp::_::PointerHelpers<AppObjectId>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename AppObjectId>
inline void SupervisorObjectId<AppObjectId>::Builder::adoptAppRef(
    ::capnp::Orphan<AppObjectId>&& value) {
  _builder.setDataField<SupervisorObjectId<AppObjectId>::Which>(
      0 * ::capnp::ELEMENTS, SupervisorObjectId<AppObjectId>::APP_REF);
  ::capnp::_::PointerHelpers<AppObjectId>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan<AppObjectId> SupervisorObjectId<AppObjectId>::Builder::disownAppRef() {
  KJ_IREQUIRE((which() == SupervisorObjectId<AppObjectId>::APP_REF),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<AppObjectId>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

template <typename AppObjectId>
inline bool SupervisorObjectId<AppObjectId>::Reader::isWakeLockNotification() const {
  return which() == SupervisorObjectId<AppObjectId>::WAKE_LOCK_NOTIFICATION;
}
template <typename AppObjectId>
inline bool SupervisorObjectId<AppObjectId>::Builder::isWakeLockNotification() {
  return which() == SupervisorObjectId<AppObjectId>::WAKE_LOCK_NOTIFICATION;
}
template <typename AppObjectId>
inline  ::uint32_t SupervisorObjectId<AppObjectId>::Reader::getWakeLockNotification() const {
  KJ_IREQUIRE((which() == SupervisorObjectId<AppObjectId>::WAKE_LOCK_NOTIFICATION),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

template <typename AppObjectId>
inline  ::uint32_t SupervisorObjectId<AppObjectId>::Builder::getWakeLockNotification() {
  KJ_IREQUIRE((which() == SupervisorObjectId<AppObjectId>::WAKE_LOCK_NOTIFICATION),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
template <typename AppObjectId>
inline void SupervisorObjectId<AppObjectId>::Builder::setWakeLockNotification( ::uint32_t value) {
  _builder.setDataField<SupervisorObjectId<AppObjectId>::Which>(
      0 * ::capnp::ELEMENTS, SupervisorObjectId<AppObjectId>::WAKE_LOCK_NOTIFICATION);
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

// SupervisorObjectId<AppObjectId>
template <typename AppObjectId>
constexpr uint16_t SupervisorObjectId<AppObjectId>::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SupervisorObjectId<AppObjectId>::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SupervisorObjectId<AppObjectId>::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SupervisorObjectId<AppObjectId>::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SupervisorObjectId<AppObjectId>::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SupervisorObjectId<AppObjectId>::_capnpPrivate::brandScopes[] = {
  { 0x8e74650737dbb840, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SupervisorObjectId<AppObjectId>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SupervisorObjectId<AppObjectId>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_8e74650737dbb840, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

}  // namespace

#endif  // CAPNP_INCLUDED_c7205d6d32c7b040_
