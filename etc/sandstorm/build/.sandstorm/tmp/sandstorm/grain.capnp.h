// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: grain.capnp

#ifndef CAPNP_INCLUDED_c8d91463cfc4fb4a_
#define CAPNP_INCLUDED_c8d91463cfc4fb4a_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "activity.capnp.h"
#include "identity.capnp.h"
#include "powerbox.capnp.h"
#include "util.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d2654fcf2a7002cb);
CAPNP_DECLARE_SCHEMA(a2873a59df6d885c);
CAPNP_DECLARE_SCHEMA(b42ccfaaf45a3f7a);
CAPNP_DECLARE_SCHEMA(d271034eec62b43b);
CAPNP_DECLARE_SCHEMA(b9d62f4beefefc29);
CAPNP_DECLARE_SCHEMA(eb3c29aff080ec3e);
CAPNP_DECLARE_SCHEMA(b96fc5fb8137a705);
CAPNP_DECLARE_SCHEMA(b1e3f6ac609eb4d7);
CAPNP_DECLARE_SCHEMA(e6abbf843a84f35d);
CAPNP_DECLARE_SCHEMA(d29e9db5843719f0);
CAPNP_DECLARE_SCHEMA(ecf1f14c4209c731);
CAPNP_DECLARE_SCHEMA(adac227f85285c65);
CAPNP_DECLARE_SCHEMA(fbbc20367c72bc59);
CAPNP_DECLARE_SCHEMA(87d94955ce3c61dd);
CAPNP_DECLARE_SCHEMA(f8fe6b4e94a960f7);
CAPNP_DECLARE_SCHEMA(b469e5d523b89e1b);
CAPNP_DECLARE_SCHEMA(9fd40f92e1eb5d21);
CAPNP_DECLARE_SCHEMA(d692a643ba8a1f58);
CAPNP_DECLARE_SCHEMA(9206caa8d3e3cc7e);
CAPNP_DECLARE_SCHEMA(ec8866df56873858);
CAPNP_DECLARE_SCHEMA(a535ac09456b2870);
CAPNP_DECLARE_SCHEMA(dbb4d798ea67e2e7);
CAPNP_DECLARE_SCHEMA(bc5e354741a8e665);
CAPNP_DECLARE_SCHEMA(982790c08b1958ec);
CAPNP_DECLARE_SCHEMA(8f2ef49549d64e86);
CAPNP_DECLARE_SCHEMA(f87a2c5a9f996828);
CAPNP_DECLARE_SCHEMA(a8f4ff97289294c7);
CAPNP_DECLARE_SCHEMA(bc193a4219598bcb);
CAPNP_DECLARE_SCHEMA(a22a2d1cf9579778);
CAPNP_DECLARE_SCHEMA(a53aedb3ce8994df);
CAPNP_DECLARE_SCHEMA(9eb6708c01ec2079);
CAPNP_DECLARE_SCHEMA(f63241ee58b5166f);
CAPNP_DECLARE_SCHEMA(bf3e401d5a63f336);
CAPNP_DECLARE_SCHEMA(e96859cf77da6e6b);
CAPNP_DECLARE_SCHEMA(b70bd877cecb7b88);
CAPNP_DECLARE_SCHEMA(c41e71e8d893086c);
CAPNP_DECLARE_SCHEMA(f6f911c4804ba7e5);
CAPNP_DECLARE_SCHEMA(fb3d38da0c9eaee6);
CAPNP_DECLARE_SCHEMA(fe7135f15d39bd5b);
CAPNP_DECLARE_SCHEMA(f63b8546288ee8e1);
CAPNP_DECLARE_SCHEMA(d42684f756e09afd);
CAPNP_DECLARE_SCHEMA(9f6c36ef490dfd92);
CAPNP_DECLARE_SCHEMA(b4ecd69ac97e2de8);
CAPNP_DECLARE_SCHEMA(f12c60ebc67984d4);
CAPNP_DECLARE_SCHEMA(9d4102fadb4f069c);
CAPNP_DECLARE_SCHEMA(f37f5e08534c68aa);
CAPNP_DECLARE_SCHEMA(f9d6c8c6d207c123);
CAPNP_DECLARE_SCHEMA(da13a4f2919ce2cf);
CAPNP_DECLARE_SCHEMA(efea656d4b56b756);
CAPNP_DECLARE_SCHEMA(85e320f14a5d23e0);
CAPNP_DECLARE_SCHEMA(a93eadc9671ea08b);
CAPNP_DECLARE_SCHEMA(f144a5e58889dafb);
CAPNP_DECLARE_SCHEMA(cb3f7064eae4dc5a);
CAPNP_DECLARE_SCHEMA(c05520c9b0994ad3);
CAPNP_DECLARE_SCHEMA(f0931856093654c1);
CAPNP_DECLARE_SCHEMA(9ad927034671cad1);
CAPNP_DECLARE_SCHEMA(a4f82f764dc3fee8);
CAPNP_DECLARE_SCHEMA(f020f2be35e8e2b5);
CAPNP_DECLARE_SCHEMA(b8083dd65a24c770);
CAPNP_DECLARE_SCHEMA(9d159666de73f39d);
CAPNP_DECLARE_SCHEMA(b5fcc0e153671d68);
CAPNP_DECLARE_SCHEMA(affa789add8747b8);
CAPNP_DECLARE_SCHEMA(f0136e14d8019d3c);
CAPNP_DECLARE_SCHEMA(ba36a34b4eeb483f);
CAPNP_DECLARE_SCHEMA(c277e9822ae2c8fc);
CAPNP_DECLARE_SCHEMA(9ad62de07dfc6419);
CAPNP_DECLARE_SCHEMA(99efcebf23bbae35);
CAPNP_DECLARE_SCHEMA(8c519e0dedc17d73);
CAPNP_DECLARE_SCHEMA(9210d9e69d14fa35);

}  // namespace schemas
}  // namespace capnp

namespace sandstorm {

template <typename AppObjectId = ::capnp::AnyPointer>
struct SandstormApi {
  SandstormApi() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct DeprecatedPublishParams;
  struct DeprecatedPublishResults;
  struct DeprecatedRegisterActionParams;
  struct DeprecatedRegisterActionResults;
  struct ShareCapParams;
  struct ShareCapResults;
  struct ShareViewParams;
  struct ShareViewResults;
  struct RestoreParams;
  struct RestoreResults;
  struct DropParams;
  struct DropResults;
  struct DeletedParams;
  struct DeletedResults;
  struct StayAwakeParams;
  struct StayAwakeResults;
  struct SaveParams;
  struct SaveResults;
  struct BackgroundActivityParams;
  struct BackgroundActivityResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(d2654fcf2a7002cb)
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
  };
  #endif  // !CAPNP_LITE
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::DeprecatedPublishParams {
  DeprecatedPublishParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2873a59df6d885c, 0, 0)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::DeprecatedPublishResults {
  DeprecatedPublishResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b42ccfaaf45a3f7a, 0, 0)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::DeprecatedRegisterActionParams {
  DeprecatedRegisterActionParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d271034eec62b43b, 0, 0)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::DeprecatedRegisterActionResults {
  DeprecatedRegisterActionResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b9d62f4beefefc29, 0, 0)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::ShareCapParams {
  ShareCapParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eb3c29aff080ec3e, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::ShareCapResults {
  ShareCapResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b96fc5fb8137a705, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::ShareViewParams {
  ShareViewParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b1e3f6ac609eb4d7, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::ShareViewResults {
  ShareViewResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e6abbf843a84f35d, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::RestoreParams {
  RestoreParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d29e9db5843719f0, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::RestoreResults {
  RestoreResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ecf1f14c4209c731, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::DropParams {
  DropParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(adac227f85285c65, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::DropResults {
  DropResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fbbc20367c72bc59, 0, 0)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::DeletedParams {
  DeletedParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(87d94955ce3c61dd, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::DeletedResults {
  DeletedResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8fe6b4e94a960f7, 0, 0)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::StayAwakeParams {
  StayAwakeParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b469e5d523b89e1b, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::StayAwakeResults {
  StayAwakeResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9fd40f92e1eb5d21, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::SaveParams {
  SaveParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d692a643ba8a1f58, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::SaveResults {
  SaveResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9206caa8d3e3cc7e, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::BackgroundActivityParams {
  BackgroundActivityParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ec8866df56873858, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct SandstormApi<AppObjectId>::BackgroundActivityResults {
  BackgroundActivityResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a535ac09456b2870, 0, 0)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

struct UiView {
  UiView() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct ViewInfo;
  struct PowerboxTag;
  struct GetViewInfoParams;
  struct NewSessionParams;
  struct NewSessionResults;
  struct NewRequestSessionParams;
  struct NewRequestSessionResults;
  struct NewOfferSessionParams;
  struct NewOfferSessionResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(dbb4d798ea67e2e7)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct UiView::ViewInfo {
  ViewInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc5e354741a8e665, 0, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct UiView::PowerboxTag {
  PowerboxTag() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(982790c08b1958ec, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct UiView::GetViewInfoParams {
  GetViewInfoParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8f2ef49549d64e86, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct UiView::NewSessionParams {
  NewSessionParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f87a2c5a9f996828, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct UiView::NewSessionResults {
  NewSessionResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a8f4ff97289294c7, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct UiView::NewRequestSessionParams {
  NewRequestSessionParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc193a4219598bcb, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct UiView::NewRequestSessionResults {
  NewRequestSessionResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a22a2d1cf9579778, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct UiView::NewOfferSessionParams {
  NewOfferSessionParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a53aedb3ce8994df, 1, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct UiView::NewOfferSessionResults {
  NewOfferSessionResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9eb6708c01ec2079, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct UiSession {
  UiSession() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE


  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(f63241ee58b5166f)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct SessionContext {
  SessionContext() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct GetSharedPermissionsParams;
  struct GetSharedPermissionsResults;
  struct TieToUserParams;
  struct TieToUserResults;
  struct OfferParams;
  struct OfferResults;
  struct RequestParams;
  struct RequestResults;
  struct FulfillRequestParams;
  struct FulfillRequestResults;
  struct CloseParams;
  struct CloseResults;
  struct OpenViewParams;
  struct OpenViewResults;
  struct ClaimRequestParams;
  struct ClaimRequestResults;
  struct ActivityParams;
  struct ActivityResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(bf3e401d5a63f336)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct SessionContext::GetSharedPermissionsParams {
  GetSharedPermissionsParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e96859cf77da6e6b, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::GetSharedPermissionsResults {
  GetSharedPermissionsResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b70bd877cecb7b88, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::TieToUserParams {
  TieToUserParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c41e71e8d893086c, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::TieToUserResults {
  TieToUserResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f6f911c4804ba7e5, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::OfferParams {
  OfferParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fb3d38da0c9eaee6, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::OfferResults {
  OfferResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fe7135f15d39bd5b, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::RequestParams {
  RequestParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f63b8546288ee8e1, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::RequestResults {
  RequestResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d42684f756e09afd, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::FulfillRequestParams {
  FulfillRequestParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f6c36ef490dfd92, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::FulfillRequestResults {
  FulfillRequestResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b4ecd69ac97e2de8, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::CloseParams {
  CloseParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f12c60ebc67984d4, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::CloseResults {
  CloseResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9d4102fadb4f069c, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::OpenViewParams {
  OpenViewParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f37f5e08534c68aa, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::OpenViewResults {
  OpenViewResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f9d6c8c6d207c123, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::ClaimRequestParams {
  ClaimRequestParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(da13a4f2919ce2cf, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::ClaimRequestResults {
  ClaimRequestResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(efea656d4b56b756, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::ActivityParams {
  ActivityParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(85e320f14a5d23e0, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SessionContext::ActivityResults {
  ActivityResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a93eadc9671ea08b, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct PermissionDef {
  PermissionDef() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f144a5e58889dafb, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct RoleDef {
  RoleDef() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb3f7064eae4dc5a, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SharingLink {
  SharingLink() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct GetPetnameParams;
  struct GetPetnameResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(c05520c9b0994ad3)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct SharingLink::GetPetnameParams {
  GetPetnameParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f0931856093654c1, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SharingLink::GetPetnameResults {
  GetPetnameResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ad927034671cad1, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ViewSharingLink {
  ViewSharingLink() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct RoleAssignment;
  struct GetRoleAssignmentParams;
  struct GetRoleAssignmentResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(a4f82f764dc3fee8)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct ViewSharingLink::RoleAssignment {
  RoleAssignment() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NONE,
    ALL_ACCESS,
    ROLE_ID,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f020f2be35e8e2b5, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ViewSharingLink::GetRoleAssignmentParams {
  GetRoleAssignmentParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8083dd65a24c770, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ViewSharingLink::GetRoleAssignmentResults {
  GetRoleAssignmentResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9d159666de73f39d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct GrainInfo {
  GrainInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b5fcc0e153671d68, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId = ::capnp::AnyPointer>
struct AppPersistent {
  AppPersistent() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct SaveParams;
  struct SaveResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(affa789add8747b8)
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
  };
  #endif  // !CAPNP_LITE
};

template <typename AppObjectId>
struct AppPersistent<AppObjectId>::SaveParams {
  SaveParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f0136e14d8019d3c, 0, 0)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct AppPersistent<AppObjectId>::SaveResults {
  SaveResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba36a34b4eeb483f, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId = ::capnp::AnyPointer>
struct MainView {
  MainView() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct RestoreParams;
  struct RestoreResults;
  struct DropParams;
  struct DropResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(c277e9822ae2c8fc)
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
  };
  #endif  // !CAPNP_LITE
};

template <typename AppObjectId>
struct MainView<AppObjectId>::RestoreParams {
  RestoreParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ad62de07dfc6419, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct MainView<AppObjectId>::RestoreResults {
  RestoreResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(99efcebf23bbae35, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct MainView<AppObjectId>::DropParams {
  DropParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c519e0dedc17d73, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename AppObjectId>
struct MainView<AppObjectId>::DropResults {
  DropResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9210d9e69d14fa35, 0, 0)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, AppObjectId>::brand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef SandstormApi<AppObjectId> Calls;
  typedef SandstormApi<AppObjectId> Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::Client asGeneric() {
    return castAs<SandstormApi<AppObjectId2>>();
  }

  ::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedPublishParams, typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedPublishResults> deprecatedPublishRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedRegisterActionParams, typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedRegisterActionResults> deprecatedRegisterActionRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::ShareCapParams, typename  ::sandstorm::SandstormApi<AppObjectId>::ShareCapResults> shareCapRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::ShareViewParams, typename  ::sandstorm::SandstormApi<AppObjectId>::ShareViewResults> shareViewRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::RestoreParams, typename  ::sandstorm::SandstormApi<AppObjectId>::RestoreResults> restoreRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::DropParams, typename  ::sandstorm::SandstormApi<AppObjectId>::DropResults> dropRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::DeletedParams, typename  ::sandstorm::SandstormApi<AppObjectId>::DeletedResults> deletedRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::StayAwakeParams, typename  ::sandstorm::SandstormApi<AppObjectId>::StayAwakeResults> stayAwakeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::SaveParams, typename  ::sandstorm::SandstormApi<AppObjectId>::SaveResults> saveRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::BackgroundActivityParams, typename  ::sandstorm::SandstormApi<AppObjectId>::BackgroundActivityResults> backgroundActivityRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef SandstormApi<AppObjectId> Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedPublishParams DeprecatedPublishParams;
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedPublishResults DeprecatedPublishResults;
  typedef ::capnp::CallContext<DeprecatedPublishParams, DeprecatedPublishResults> DeprecatedPublishContext;
  virtual ::kj::Promise<void> deprecatedPublish(DeprecatedPublishContext context);
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedRegisterActionParams DeprecatedRegisterActionParams;
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedRegisterActionResults DeprecatedRegisterActionResults;
  typedef ::capnp::CallContext<DeprecatedRegisterActionParams, DeprecatedRegisterActionResults> DeprecatedRegisterActionContext;
  virtual ::kj::Promise<void> deprecatedRegisterAction(DeprecatedRegisterActionContext context);
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::ShareCapParams ShareCapParams;
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::ShareCapResults ShareCapResults;
  typedef ::capnp::CallContext<ShareCapParams, ShareCapResults> ShareCapContext;
  virtual ::kj::Promise<void> shareCap(ShareCapContext context);
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::ShareViewParams ShareViewParams;
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::ShareViewResults ShareViewResults;
  typedef ::capnp::CallContext<ShareViewParams, ShareViewResults> ShareViewContext;
  virtual ::kj::Promise<void> shareView(ShareViewContext context);
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::RestoreParams RestoreParams;
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::RestoreResults RestoreResults;
  typedef ::capnp::CallContext<RestoreParams, RestoreResults> RestoreContext;
  virtual ::kj::Promise<void> restore(RestoreContext context);
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::DropParams DropParams;
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::DropResults DropResults;
  typedef ::capnp::CallContext<DropParams, DropResults> DropContext;
  virtual ::kj::Promise<void> drop(DropContext context);
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::DeletedParams DeletedParams;
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::DeletedResults DeletedResults;
  typedef ::capnp::CallContext<DeletedParams, DeletedResults> DeletedContext;
  virtual ::kj::Promise<void> deleted(DeletedContext context);
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::StayAwakeParams StayAwakeParams;
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::StayAwakeResults StayAwakeResults;
  typedef ::capnp::CallContext<StayAwakeParams, StayAwakeResults> StayAwakeContext;
  virtual ::kj::Promise<void> stayAwake(StayAwakeContext context);
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::SaveParams SaveParams;
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::SaveResults SaveResults;
  typedef ::capnp::CallContext<SaveParams, SaveResults> SaveContext;
  virtual ::kj::Promise<void> save(SaveContext context);
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::BackgroundActivityParams BackgroundActivityParams;
  typedef typename  ::sandstorm::SandstormApi<AppObjectId>::BackgroundActivityResults BackgroundActivityResults;
  typedef ::capnp::CallContext<BackgroundActivityParams, BackgroundActivityResults> BackgroundActivityContext;
  virtual ::kj::Promise<void> backgroundActivity(BackgroundActivityContext context);

  inline typename  ::sandstorm::SandstormApi<AppObjectId>::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::SandstormApi<AppObjectId>>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeprecatedPublishParams::Reader {
public:
  typedef DeprecatedPublishParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::DeprecatedPublishParams::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::DeprecatedPublishParams::Reader(_reader);
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeprecatedPublishParams::Builder {
public:
  typedef DeprecatedPublishParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::DeprecatedPublishParams::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::DeprecatedPublishParams::Builder(_builder);
  }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeprecatedPublishParams::Pipeline {
public:
  typedef DeprecatedPublishParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeprecatedPublishResults::Reader {
public:
  typedef DeprecatedPublishResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::DeprecatedPublishResults::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::DeprecatedPublishResults::Reader(_reader);
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeprecatedPublishResults::Builder {
public:
  typedef DeprecatedPublishResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::DeprecatedPublishResults::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::DeprecatedPublishResults::Builder(_builder);
  }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeprecatedPublishResults::Pipeline {
public:
  typedef DeprecatedPublishResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeprecatedRegisterActionParams::Reader {
public:
  typedef DeprecatedRegisterActionParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::DeprecatedRegisterActionParams::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::DeprecatedRegisterActionParams::Reader(_reader);
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeprecatedRegisterActionParams::Builder {
public:
  typedef DeprecatedRegisterActionParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::DeprecatedRegisterActionParams::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::DeprecatedRegisterActionParams::Builder(_builder);
  }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeprecatedRegisterActionParams::Pipeline {
public:
  typedef DeprecatedRegisterActionParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeprecatedRegisterActionResults::Reader {
public:
  typedef DeprecatedRegisterActionResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::DeprecatedRegisterActionResults::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::DeprecatedRegisterActionResults::Reader(_reader);
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeprecatedRegisterActionResults::Builder {
public:
  typedef DeprecatedRegisterActionResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::DeprecatedRegisterActionResults::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::DeprecatedRegisterActionResults::Builder(_builder);
  }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeprecatedRegisterActionResults::Pipeline {
public:
  typedef DeprecatedRegisterActionResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::ShareCapParams::Reader {
public:
  typedef ShareCapParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::ShareCapParams::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::ShareCapParams::Reader(_reader);
  }

  inline bool hasCap() const;
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap() const;
#endif  // !CAPNP_LITE

  inline bool hasDisplayInfo() const;
  inline  ::sandstorm::PowerboxDisplayInfo::Reader getDisplayInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::ShareCapParams::Builder {
public:
  typedef ShareCapParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::ShareCapParams::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::ShareCapParams::Builder(_builder);
  }

  inline bool hasCap();
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap();
  inline void setCap( ::capnp::Capability::Client&& value);
  inline void setCap( ::capnp::Capability::Client& value);
  inline void adoptCap(::capnp::Orphan< ::capnp::Capability>&& value);
  inline ::capnp::Orphan< ::capnp::Capability> disownCap();
#endif  // !CAPNP_LITE

  inline bool hasDisplayInfo();
  inline  ::sandstorm::PowerboxDisplayInfo::Builder getDisplayInfo();
  inline void setDisplayInfo( ::sandstorm::PowerboxDisplayInfo::Reader value);
  inline  ::sandstorm::PowerboxDisplayInfo::Builder initDisplayInfo();
  inline void adoptDisplayInfo(::capnp::Orphan< ::sandstorm::PowerboxDisplayInfo>&& value);
  inline ::capnp::Orphan< ::sandstorm::PowerboxDisplayInfo> disownDisplayInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::ShareCapParams::Pipeline {
public:
  typedef ShareCapParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::Capability::Client getCap();
  inline  ::sandstorm::PowerboxDisplayInfo::Pipeline getDisplayInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::ShareCapResults::Reader {
public:
  typedef ShareCapResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::ShareCapResults::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::ShareCapResults::Reader(_reader);
  }

  inline bool hasSharedCap() const;
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getSharedCap() const;
#endif  // !CAPNP_LITE

  inline bool hasLink() const;
#if !CAPNP_LITE
  inline  ::sandstorm::SharingLink::Client getLink() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::ShareCapResults::Builder {
public:
  typedef ShareCapResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::ShareCapResults::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::ShareCapResults::Builder(_builder);
  }

  inline bool hasSharedCap();
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getSharedCap();
  inline void setSharedCap( ::capnp::Capability::Client&& value);
  inline void setSharedCap( ::capnp::Capability::Client& value);
  inline void adoptSharedCap(::capnp::Orphan< ::capnp::Capability>&& value);
  inline ::capnp::Orphan< ::capnp::Capability> disownSharedCap();
#endif  // !CAPNP_LITE

  inline bool hasLink();
#if !CAPNP_LITE
  inline  ::sandstorm::SharingLink::Client getLink();
  inline void setLink( ::sandstorm::SharingLink::Client&& value);
  inline void setLink( ::sandstorm::SharingLink::Client& value);
  inline void adoptLink(::capnp::Orphan< ::sandstorm::SharingLink>&& value);
  inline ::capnp::Orphan< ::sandstorm::SharingLink> disownLink();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::ShareCapResults::Pipeline {
public:
  typedef ShareCapResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::Capability::Client getSharedCap();
  inline  ::sandstorm::SharingLink::Client getLink();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::ShareViewParams::Reader {
public:
  typedef ShareViewParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::ShareViewParams::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::ShareViewParams::Reader(_reader);
  }

  inline bool hasView() const;
#if !CAPNP_LITE
  inline  ::sandstorm::UiView::Client getView() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::ShareViewParams::Builder {
public:
  typedef ShareViewParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::ShareViewParams::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::ShareViewParams::Builder(_builder);
  }

  inline bool hasView();
#if !CAPNP_LITE
  inline  ::sandstorm::UiView::Client getView();
  inline void setView( ::sandstorm::UiView::Client&& value);
  inline void setView( ::sandstorm::UiView::Client& value);
  inline void adoptView(::capnp::Orphan< ::sandstorm::UiView>&& value);
  inline ::capnp::Orphan< ::sandstorm::UiView> disownView();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::ShareViewParams::Pipeline {
public:
  typedef ShareViewParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::UiView::Client getView();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::ShareViewResults::Reader {
public:
  typedef ShareViewResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::ShareViewResults::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::ShareViewResults::Reader(_reader);
  }

  inline bool hasSharedView() const;
#if !CAPNP_LITE
  inline  ::sandstorm::UiView::Client getSharedView() const;
#endif  // !CAPNP_LITE

  inline bool hasLink() const;
#if !CAPNP_LITE
  inline  ::sandstorm::ViewSharingLink::Client getLink() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::ShareViewResults::Builder {
public:
  typedef ShareViewResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::ShareViewResults::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::ShareViewResults::Builder(_builder);
  }

  inline bool hasSharedView();
#if !CAPNP_LITE
  inline  ::sandstorm::UiView::Client getSharedView();
  inline void setSharedView( ::sandstorm::UiView::Client&& value);
  inline void setSharedView( ::sandstorm::UiView::Client& value);
  inline void adoptSharedView(::capnp::Orphan< ::sandstorm::UiView>&& value);
  inline ::capnp::Orphan< ::sandstorm::UiView> disownSharedView();
#endif  // !CAPNP_LITE

  inline bool hasLink();
#if !CAPNP_LITE
  inline  ::sandstorm::ViewSharingLink::Client getLink();
  inline void setLink( ::sandstorm::ViewSharingLink::Client&& value);
  inline void setLink( ::sandstorm::ViewSharingLink::Client& value);
  inline void adoptLink(::capnp::Orphan< ::sandstorm::ViewSharingLink>&& value);
  inline ::capnp::Orphan< ::sandstorm::ViewSharingLink> disownLink();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::ShareViewResults::Pipeline {
public:
  typedef ShareViewResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::UiView::Client getSharedView();
  inline  ::sandstorm::ViewSharingLink::Client getLink();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::RestoreParams::Reader {
public:
  typedef RestoreParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::RestoreParams::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::RestoreParams::Reader(_reader);
  }

  inline bool hasToken() const;
  inline  ::capnp::Data::Reader getToken() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::RestoreParams::Builder {
public:
  typedef RestoreParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::RestoreParams::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::RestoreParams::Builder(_builder);
  }

  inline bool hasToken();
  inline  ::capnp::Data::Builder getToken();
  inline void setToken( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownToken();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::RestoreParams::Pipeline {
public:
  typedef RestoreParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::RestoreResults::Reader {
public:
  typedef RestoreResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::RestoreResults::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::RestoreResults::Reader(_reader);
  }

  inline bool hasCap() const;
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::RestoreResults::Builder {
public:
  typedef RestoreResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::RestoreResults::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::RestoreResults::Builder(_builder);
  }

  inline bool hasCap();
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap();
  inline void setCap( ::capnp::Capability::Client&& value);
  inline void setCap( ::capnp::Capability::Client& value);
  inline void adoptCap(::capnp::Orphan< ::capnp::Capability>&& value);
  inline ::capnp::Orphan< ::capnp::Capability> disownCap();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::RestoreResults::Pipeline {
public:
  typedef RestoreResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::Capability::Client getCap();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::DropParams::Reader {
public:
  typedef DropParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::DropParams::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::DropParams::Reader(_reader);
  }

  inline bool hasToken() const;
  inline  ::capnp::Data::Reader getToken() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::DropParams::Builder {
public:
  typedef DropParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::DropParams::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::DropParams::Builder(_builder);
  }

  inline bool hasToken();
  inline  ::capnp::Data::Builder getToken();
  inline void setToken( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownToken();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::DropParams::Pipeline {
public:
  typedef DropParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::DropResults::Reader {
public:
  typedef DropResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::DropResults::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::DropResults::Reader(_reader);
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::DropResults::Builder {
public:
  typedef DropResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::DropResults::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::DropResults::Builder(_builder);
  }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::DropResults::Pipeline {
public:
  typedef DropResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeletedParams::Reader {
public:
  typedef DeletedParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::DeletedParams::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::DeletedParams::Reader(_reader);
  }

  inline bool hasRef() const;
  inline  ::capnp::ReaderFor<AppObjectId> getRef() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeletedParams::Builder {
public:
  typedef DeletedParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::DeletedParams::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::DeletedParams::Builder(_builder);
  }

  inline bool hasRef();
  inline  ::capnp::BuilderFor<AppObjectId> getRef();
  inline void setRef( ::capnp::ReaderFor<AppObjectId> value);
  inline  ::capnp::BuilderFor<AppObjectId> initRef();
  inline  ::capnp::BuilderFor<AppObjectId> initRef(unsigned int size);
  inline void adoptRef(::capnp::Orphan<AppObjectId>&& value);
  inline ::capnp::Orphan<AppObjectId> disownRef();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeletedParams::Pipeline {
public:
  typedef DeletedParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<AppObjectId> getRef();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeletedResults::Reader {
public:
  typedef DeletedResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::DeletedResults::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::DeletedResults::Reader(_reader);
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeletedResults::Builder {
public:
  typedef DeletedResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::DeletedResults::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::DeletedResults::Builder(_builder);
  }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::DeletedResults::Pipeline {
public:
  typedef DeletedResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::StayAwakeParams::Reader {
public:
  typedef StayAwakeParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::StayAwakeParams::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::StayAwakeParams::Reader(_reader);
  }

  inline bool hasDisplayInfo() const;
  inline  ::sandstorm::NotificationDisplayInfo::Reader getDisplayInfo() const;

  inline bool hasNotification() const;
#if !CAPNP_LITE
  inline  ::sandstorm::OngoingNotification::Client getNotification() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::StayAwakeParams::Builder {
public:
  typedef StayAwakeParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::StayAwakeParams::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::StayAwakeParams::Builder(_builder);
  }

  inline bool hasDisplayInfo();
  inline  ::sandstorm::NotificationDisplayInfo::Builder getDisplayInfo();
  inline void setDisplayInfo( ::sandstorm::NotificationDisplayInfo::Reader value);
  inline  ::sandstorm::NotificationDisplayInfo::Builder initDisplayInfo();
  inline void adoptDisplayInfo(::capnp::Orphan< ::sandstorm::NotificationDisplayInfo>&& value);
  inline ::capnp::Orphan< ::sandstorm::NotificationDisplayInfo> disownDisplayInfo();

  inline bool hasNotification();
#if !CAPNP_LITE
  inline  ::sandstorm::OngoingNotification::Client getNotification();
  inline void setNotification( ::sandstorm::OngoingNotification::Client&& value);
  inline void setNotification( ::sandstorm::OngoingNotification::Client& value);
  inline void adoptNotification(::capnp::Orphan< ::sandstorm::OngoingNotification>&& value);
  inline ::capnp::Orphan< ::sandstorm::OngoingNotification> disownNotification();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::StayAwakeParams::Pipeline {
public:
  typedef StayAwakeParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::NotificationDisplayInfo::Pipeline getDisplayInfo();
  inline  ::sandstorm::OngoingNotification::Client getNotification();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::StayAwakeResults::Reader {
public:
  typedef StayAwakeResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::StayAwakeResults::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::StayAwakeResults::Reader(_reader);
  }

  inline bool hasHandle() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Handle::Client getHandle() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::StayAwakeResults::Builder {
public:
  typedef StayAwakeResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::StayAwakeResults::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::StayAwakeResults::Builder(_builder);
  }

  inline bool hasHandle();
#if !CAPNP_LITE
  inline  ::sandstorm::Handle::Client getHandle();
  inline void setHandle( ::sandstorm::Handle::Client&& value);
  inline void setHandle( ::sandstorm::Handle::Client& value);
  inline void adoptHandle(::capnp::Orphan< ::sandstorm::Handle>&& value);
  inline ::capnp::Orphan< ::sandstorm::Handle> disownHandle();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::StayAwakeResults::Pipeline {
public:
  typedef StayAwakeResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Handle::Client getHandle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::SaveParams::Reader {
public:
  typedef SaveParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::SaveParams::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::SaveParams::Reader(_reader);
  }

  inline bool hasCap() const;
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap() const;
#endif  // !CAPNP_LITE

  inline bool hasLabel() const;
  inline  ::sandstorm::LocalizedText::Reader getLabel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::SaveParams::Builder {
public:
  typedef SaveParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::SaveParams::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::SaveParams::Builder(_builder);
  }

  inline bool hasCap();
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap();
  inline void setCap( ::capnp::Capability::Client&& value);
  inline void setCap( ::capnp::Capability::Client& value);
  inline void adoptCap(::capnp::Orphan< ::capnp::Capability>&& value);
  inline ::capnp::Orphan< ::capnp::Capability> disownCap();
#endif  // !CAPNP_LITE

  inline bool hasLabel();
  inline  ::sandstorm::LocalizedText::Builder getLabel();
  inline void setLabel( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initLabel();
  inline void adoptLabel(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownLabel();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::SaveParams::Pipeline {
public:
  typedef SaveParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::Capability::Client getCap();
  inline  ::sandstorm::LocalizedText::Pipeline getLabel();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::SaveResults::Reader {
public:
  typedef SaveResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::SaveResults::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::SaveResults::Reader(_reader);
  }

  inline bool hasToken() const;
  inline  ::capnp::Data::Reader getToken() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::SaveResults::Builder {
public:
  typedef SaveResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::SaveResults::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::SaveResults::Builder(_builder);
  }

  inline bool hasToken();
  inline  ::capnp::Data::Builder getToken();
  inline void setToken( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownToken();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::SaveResults::Pipeline {
public:
  typedef SaveResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::BackgroundActivityParams::Reader {
public:
  typedef BackgroundActivityParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::BackgroundActivityParams::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::BackgroundActivityParams::Reader(_reader);
  }

  inline bool hasEvent() const;
  inline  ::sandstorm::ActivityEvent::Reader getEvent() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::BackgroundActivityParams::Builder {
public:
  typedef BackgroundActivityParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::BackgroundActivityParams::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::BackgroundActivityParams::Builder(_builder);
  }

  inline bool hasEvent();
  inline  ::sandstorm::ActivityEvent::Builder getEvent();
  inline void setEvent( ::sandstorm::ActivityEvent::Reader value);
  inline  ::sandstorm::ActivityEvent::Builder initEvent();
  inline void adoptEvent(::capnp::Orphan< ::sandstorm::ActivityEvent>&& value);
  inline ::capnp::Orphan< ::sandstorm::ActivityEvent> disownEvent();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::BackgroundActivityParams::Pipeline {
public:
  typedef BackgroundActivityParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::ActivityEvent::Pipeline getEvent();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class SandstormApi<AppObjectId>::BackgroundActivityResults::Reader {
public:
  typedef BackgroundActivityResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::BackgroundActivityResults::Reader asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::BackgroundActivityResults::Reader(_reader);
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class SandstormApi<AppObjectId>::BackgroundActivityResults::Builder {
public:
  typedef BackgroundActivityResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename SandstormApi<AppObjectId2>::BackgroundActivityResults::Builder asSandstormApiGeneric() {
    return typename SandstormApi<AppObjectId2>::BackgroundActivityResults::Builder(_builder);
  }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class SandstormApi<AppObjectId>::BackgroundActivityResults::Pipeline {
public:
  typedef BackgroundActivityResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class UiView::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef UiView Calls;
  typedef UiView Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::UiView::GetViewInfoParams,  ::sandstorm::UiView::ViewInfo> getViewInfoRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::UiView::NewSessionParams,  ::sandstorm::UiView::NewSessionResults> newSessionRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::UiView::NewRequestSessionParams,  ::sandstorm::UiView::NewRequestSessionResults> newRequestSessionRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::UiView::NewOfferSessionParams,  ::sandstorm::UiView::NewOfferSessionResults> newOfferSessionRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class UiView::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef UiView Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::UiView::GetViewInfoParams GetViewInfoParams;
  typedef ::capnp::CallContext<GetViewInfoParams,  ::sandstorm::UiView::ViewInfo> GetViewInfoContext;
  virtual ::kj::Promise<void> getViewInfo(GetViewInfoContext context);
  typedef  ::sandstorm::UiView::NewSessionParams NewSessionParams;
  typedef  ::sandstorm::UiView::NewSessionResults NewSessionResults;
  typedef ::capnp::CallContext<NewSessionParams, NewSessionResults> NewSessionContext;
  virtual ::kj::Promise<void> newSession(NewSessionContext context);
  typedef  ::sandstorm::UiView::NewRequestSessionParams NewRequestSessionParams;
  typedef  ::sandstorm::UiView::NewRequestSessionResults NewRequestSessionResults;
  typedef ::capnp::CallContext<NewRequestSessionParams, NewRequestSessionResults> NewRequestSessionContext;
  virtual ::kj::Promise<void> newRequestSession(NewRequestSessionContext context);
  typedef  ::sandstorm::UiView::NewOfferSessionParams NewOfferSessionParams;
  typedef  ::sandstorm::UiView::NewOfferSessionResults NewOfferSessionResults;
  typedef ::capnp::CallContext<NewOfferSessionParams, NewOfferSessionResults> NewOfferSessionContext;
  virtual ::kj::Promise<void> newOfferSession(NewOfferSessionContext context);

  inline  ::sandstorm::UiView::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::UiView>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class UiView::ViewInfo::Reader {
public:
  typedef ViewInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPermissions() const;
  inline  ::capnp::List< ::sandstorm::PermissionDef>::Reader getPermissions() const;

  inline bool hasRoles() const;
  inline  ::capnp::List< ::sandstorm::RoleDef>::Reader getRoles() const;

  inline bool hasDeniedPermissions() const;
  inline  ::capnp::List<bool>::Reader getDeniedPermissions() const;

  inline bool hasMatchRequests() const;
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader getMatchRequests() const;

  inline bool hasMatchOffers() const;
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader getMatchOffers() const;

  inline bool hasAppTitle() const;
  inline  ::sandstorm::LocalizedText::Reader getAppTitle() const;

  inline bool hasGrainIcon() const;
#if !CAPNP_LITE
  inline  ::sandstorm::StaticAsset::Client getGrainIcon() const;
#endif  // !CAPNP_LITE

  inline bool hasEventTypes() const;
  inline  ::capnp::List< ::sandstorm::ActivityTypeDef>::Reader getEventTypes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UiView::ViewInfo::Builder {
public:
  typedef ViewInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPermissions();
  inline  ::capnp::List< ::sandstorm::PermissionDef>::Builder getPermissions();
  inline void setPermissions( ::capnp::List< ::sandstorm::PermissionDef>::Reader value);
  inline  ::capnp::List< ::sandstorm::PermissionDef>::Builder initPermissions(unsigned int size);
  inline void adoptPermissions(::capnp::Orphan< ::capnp::List< ::sandstorm::PermissionDef>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::PermissionDef>> disownPermissions();

  inline bool hasRoles();
  inline  ::capnp::List< ::sandstorm::RoleDef>::Builder getRoles();
  inline void setRoles( ::capnp::List< ::sandstorm::RoleDef>::Reader value);
  inline  ::capnp::List< ::sandstorm::RoleDef>::Builder initRoles(unsigned int size);
  inline void adoptRoles(::capnp::Orphan< ::capnp::List< ::sandstorm::RoleDef>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::RoleDef>> disownRoles();

  inline bool hasDeniedPermissions();
  inline  ::capnp::List<bool>::Builder getDeniedPermissions();
  inline void setDeniedPermissions( ::capnp::List<bool>::Reader value);
  inline void setDeniedPermissions(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initDeniedPermissions(unsigned int size);
  inline void adoptDeniedPermissions(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownDeniedPermissions();

  inline bool hasMatchRequests();
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder getMatchRequests();
  inline void setMatchRequests( ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader value);
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder initMatchRequests(unsigned int size);
  inline void adoptMatchRequests(::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>> disownMatchRequests();

  inline bool hasMatchOffers();
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder getMatchOffers();
  inline void setMatchOffers( ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader value);
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder initMatchOffers(unsigned int size);
  inline void adoptMatchOffers(::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>> disownMatchOffers();

  inline bool hasAppTitle();
  inline  ::sandstorm::LocalizedText::Builder getAppTitle();
  inline void setAppTitle( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initAppTitle();
  inline void adoptAppTitle(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownAppTitle();

  inline bool hasGrainIcon();
#if !CAPNP_LITE
  inline  ::sandstorm::StaticAsset::Client getGrainIcon();
  inline void setGrainIcon( ::sandstorm::StaticAsset::Client&& value);
  inline void setGrainIcon( ::sandstorm::StaticAsset::Client& value);
  inline void adoptGrainIcon(::capnp::Orphan< ::sandstorm::StaticAsset>&& value);
  inline ::capnp::Orphan< ::sandstorm::StaticAsset> disownGrainIcon();
#endif  // !CAPNP_LITE

  inline bool hasEventTypes();
  inline  ::capnp::List< ::sandstorm::ActivityTypeDef>::Builder getEventTypes();
  inline void setEventTypes( ::capnp::List< ::sandstorm::ActivityTypeDef>::Reader value);
  inline  ::capnp::List< ::sandstorm::ActivityTypeDef>::Builder initEventTypes(unsigned int size);
  inline void adoptEventTypes(::capnp::Orphan< ::capnp::List< ::sandstorm::ActivityTypeDef>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::ActivityTypeDef>> disownEventTypes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UiView::ViewInfo::Pipeline {
public:
  typedef ViewInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::LocalizedText::Pipeline getAppTitle();
  inline  ::sandstorm::StaticAsset::Client getGrainIcon();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UiView::PowerboxTag::Reader {
public:
  typedef PowerboxTag Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasTitle() const;
  inline  ::capnp::Text::Reader getTitle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UiView::PowerboxTag::Builder {
public:
  typedef PowerboxTag Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTitle();
  inline  ::capnp::Text::Builder getTitle();
  inline void setTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTitle(unsigned int size);
  inline void adoptTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTitle();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UiView::PowerboxTag::Pipeline {
public:
  typedef PowerboxTag Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UiView::GetViewInfoParams::Reader {
public:
  typedef GetViewInfoParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UiView::GetViewInfoParams::Builder {
public:
  typedef GetViewInfoParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UiView::GetViewInfoParams::Pipeline {
public:
  typedef GetViewInfoParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UiView::NewSessionParams::Reader {
public:
  typedef NewSessionParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasUserInfo() const;
  inline  ::sandstorm::UserInfo::Reader getUserInfo() const;

  inline bool hasContext() const;
#if !CAPNP_LITE
  inline  ::sandstorm::SessionContext::Client getContext() const;
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionType() const;

  inline bool hasSessionParams() const;
  inline ::capnp::AnyPointer::Reader getSessionParams() const;

  inline bool hasTabId() const;
  inline  ::capnp::Data::Reader getTabId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UiView::NewSessionParams::Builder {
public:
  typedef NewSessionParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUserInfo();
  inline  ::sandstorm::UserInfo::Builder getUserInfo();
  inline void setUserInfo( ::sandstorm::UserInfo::Reader value);
  inline  ::sandstorm::UserInfo::Builder initUserInfo();
  inline void adoptUserInfo(::capnp::Orphan< ::sandstorm::UserInfo>&& value);
  inline ::capnp::Orphan< ::sandstorm::UserInfo> disownUserInfo();

  inline bool hasContext();
#if !CAPNP_LITE
  inline  ::sandstorm::SessionContext::Client getContext();
  inline void setContext( ::sandstorm::SessionContext::Client&& value);
  inline void setContext( ::sandstorm::SessionContext::Client& value);
  inline void adoptContext(::capnp::Orphan< ::sandstorm::SessionContext>&& value);
  inline ::capnp::Orphan< ::sandstorm::SessionContext> disownContext();
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionType();
  inline void setSessionType( ::uint64_t value);

  inline bool hasSessionParams();
  inline ::capnp::AnyPointer::Builder getSessionParams();
  inline ::capnp::AnyPointer::Builder initSessionParams();

  inline bool hasTabId();
  inline  ::capnp::Data::Builder getTabId();
  inline void setTabId( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initTabId(unsigned int size);
  inline void adoptTabId(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownTabId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UiView::NewSessionParams::Pipeline {
public:
  typedef NewSessionParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::UserInfo::Pipeline getUserInfo();
  inline  ::sandstorm::SessionContext::Client getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UiView::NewSessionResults::Reader {
public:
  typedef NewSessionResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasSession() const;
#if !CAPNP_LITE
  inline  ::sandstorm::UiSession::Client getSession() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UiView::NewSessionResults::Builder {
public:
  typedef NewSessionResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSession();
#if !CAPNP_LITE
  inline  ::sandstorm::UiSession::Client getSession();
  inline void setSession( ::sandstorm::UiSession::Client&& value);
  inline void setSession( ::sandstorm::UiSession::Client& value);
  inline void adoptSession(::capnp::Orphan< ::sandstorm::UiSession>&& value);
  inline ::capnp::Orphan< ::sandstorm::UiSession> disownSession();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UiView::NewSessionResults::Pipeline {
public:
  typedef NewSessionResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::UiSession::Client getSession();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UiView::NewRequestSessionParams::Reader {
public:
  typedef NewRequestSessionParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasUserInfo() const;
  inline  ::sandstorm::UserInfo::Reader getUserInfo() const;

  inline bool hasContext() const;
#if !CAPNP_LITE
  inline  ::sandstorm::SessionContext::Client getContext() const;
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionType() const;

  inline bool hasSessionParams() const;
  inline ::capnp::AnyPointer::Reader getSessionParams() const;

  inline bool hasRequestInfo() const;
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader getRequestInfo() const;

  inline bool hasTabId() const;
  inline  ::capnp::Data::Reader getTabId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UiView::NewRequestSessionParams::Builder {
public:
  typedef NewRequestSessionParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUserInfo();
  inline  ::sandstorm::UserInfo::Builder getUserInfo();
  inline void setUserInfo( ::sandstorm::UserInfo::Reader value);
  inline  ::sandstorm::UserInfo::Builder initUserInfo();
  inline void adoptUserInfo(::capnp::Orphan< ::sandstorm::UserInfo>&& value);
  inline ::capnp::Orphan< ::sandstorm::UserInfo> disownUserInfo();

  inline bool hasContext();
#if !CAPNP_LITE
  inline  ::sandstorm::SessionContext::Client getContext();
  inline void setContext( ::sandstorm::SessionContext::Client&& value);
  inline void setContext( ::sandstorm::SessionContext::Client& value);
  inline void adoptContext(::capnp::Orphan< ::sandstorm::SessionContext>&& value);
  inline ::capnp::Orphan< ::sandstorm::SessionContext> disownContext();
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionType();
  inline void setSessionType( ::uint64_t value);

  inline bool hasSessionParams();
  inline ::capnp::AnyPointer::Builder getSessionParams();
  inline ::capnp::AnyPointer::Builder initSessionParams();

  inline bool hasRequestInfo();
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder getRequestInfo();
  inline void setRequestInfo( ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader value);
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder initRequestInfo(unsigned int size);
  inline void adoptRequestInfo(::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>> disownRequestInfo();

  inline bool hasTabId();
  inline  ::capnp::Data::Builder getTabId();
  inline void setTabId( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initTabId(unsigned int size);
  inline void adoptTabId(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownTabId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UiView::NewRequestSessionParams::Pipeline {
public:
  typedef NewRequestSessionParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::UserInfo::Pipeline getUserInfo();
  inline  ::sandstorm::SessionContext::Client getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UiView::NewRequestSessionResults::Reader {
public:
  typedef NewRequestSessionResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasSession() const;
#if !CAPNP_LITE
  inline  ::sandstorm::UiSession::Client getSession() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UiView::NewRequestSessionResults::Builder {
public:
  typedef NewRequestSessionResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSession();
#if !CAPNP_LITE
  inline  ::sandstorm::UiSession::Client getSession();
  inline void setSession( ::sandstorm::UiSession::Client&& value);
  inline void setSession( ::sandstorm::UiSession::Client& value);
  inline void adoptSession(::capnp::Orphan< ::sandstorm::UiSession>&& value);
  inline ::capnp::Orphan< ::sandstorm::UiSession> disownSession();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UiView::NewRequestSessionResults::Pipeline {
public:
  typedef NewRequestSessionResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::UiSession::Client getSession();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UiView::NewOfferSessionParams::Reader {
public:
  typedef NewOfferSessionParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasUserInfo() const;
  inline  ::sandstorm::UserInfo::Reader getUserInfo() const;

  inline bool hasContext() const;
#if !CAPNP_LITE
  inline  ::sandstorm::SessionContext::Client getContext() const;
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionType() const;

  inline bool hasSessionParams() const;
  inline ::capnp::AnyPointer::Reader getSessionParams() const;

  inline bool hasOffer() const;
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getOffer() const;
#endif  // !CAPNP_LITE

  inline bool hasDescriptor() const;
  inline  ::sandstorm::PowerboxDescriptor::Reader getDescriptor() const;

  inline bool hasTabId() const;
  inline  ::capnp::Data::Reader getTabId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UiView::NewOfferSessionParams::Builder {
public:
  typedef NewOfferSessionParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUserInfo();
  inline  ::sandstorm::UserInfo::Builder getUserInfo();
  inline void setUserInfo( ::sandstorm::UserInfo::Reader value);
  inline  ::sandstorm::UserInfo::Builder initUserInfo();
  inline void adoptUserInfo(::capnp::Orphan< ::sandstorm::UserInfo>&& value);
  inline ::capnp::Orphan< ::sandstorm::UserInfo> disownUserInfo();

  inline bool hasContext();
#if !CAPNP_LITE
  inline  ::sandstorm::SessionContext::Client getContext();
  inline void setContext( ::sandstorm::SessionContext::Client&& value);
  inline void setContext( ::sandstorm::SessionContext::Client& value);
  inline void adoptContext(::capnp::Orphan< ::sandstorm::SessionContext>&& value);
  inline ::capnp::Orphan< ::sandstorm::SessionContext> disownContext();
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionType();
  inline void setSessionType( ::uint64_t value);

  inline bool hasSessionParams();
  inline ::capnp::AnyPointer::Builder getSessionParams();
  inline ::capnp::AnyPointer::Builder initSessionParams();

  inline bool hasOffer();
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getOffer();
  inline void setOffer( ::capnp::Capability::Client&& value);
  inline void setOffer( ::capnp::Capability::Client& value);
  inline void adoptOffer(::capnp::Orphan< ::capnp::Capability>&& value);
  inline ::capnp::Orphan< ::capnp::Capability> disownOffer();
#endif  // !CAPNP_LITE

  inline bool hasDescriptor();
  inline  ::sandstorm::PowerboxDescriptor::Builder getDescriptor();
  inline void setDescriptor( ::sandstorm::PowerboxDescriptor::Reader value);
  inline  ::sandstorm::PowerboxDescriptor::Builder initDescriptor();
  inline void adoptDescriptor(::capnp::Orphan< ::sandstorm::PowerboxDescriptor>&& value);
  inline ::capnp::Orphan< ::sandstorm::PowerboxDescriptor> disownDescriptor();

  inline bool hasTabId();
  inline  ::capnp::Data::Builder getTabId();
  inline void setTabId( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initTabId(unsigned int size);
  inline void adoptTabId(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownTabId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UiView::NewOfferSessionParams::Pipeline {
public:
  typedef NewOfferSessionParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::UserInfo::Pipeline getUserInfo();
  inline  ::sandstorm::SessionContext::Client getContext();
  inline  ::capnp::Capability::Client getOffer();
  inline  ::sandstorm::PowerboxDescriptor::Pipeline getDescriptor();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UiView::NewOfferSessionResults::Reader {
public:
  typedef NewOfferSessionResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasSession() const;
#if !CAPNP_LITE
  inline  ::sandstorm::UiSession::Client getSession() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UiView::NewOfferSessionResults::Builder {
public:
  typedef NewOfferSessionResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSession();
#if !CAPNP_LITE
  inline  ::sandstorm::UiSession::Client getSession();
  inline void setSession( ::sandstorm::UiSession::Client&& value);
  inline void setSession( ::sandstorm::UiSession::Client& value);
  inline void adoptSession(::capnp::Orphan< ::sandstorm::UiSession>&& value);
  inline ::capnp::Orphan< ::sandstorm::UiSession> disownSession();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UiView::NewOfferSessionResults::Pipeline {
public:
  typedef NewOfferSessionResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::UiSession::Client getSession();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class UiSession::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef UiSession Calls;
  typedef UiSession Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);


protected:
  Client() = default;
};

class UiSession::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef UiSession Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:

  inline  ::sandstorm::UiSession::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::UiSession>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class SessionContext::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef SessionContext Calls;
  typedef SessionContext Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::SessionContext::GetSharedPermissionsParams,  ::sandstorm::SessionContext::GetSharedPermissionsResults> getSharedPermissionsRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SessionContext::TieToUserParams,  ::sandstorm::SessionContext::TieToUserResults> tieToUserRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SessionContext::OfferParams,  ::sandstorm::SessionContext::OfferResults> offerRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SessionContext::RequestParams,  ::sandstorm::SessionContext::RequestResults> requestRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SessionContext::FulfillRequestParams,  ::sandstorm::SessionContext::FulfillRequestResults> fulfillRequestRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SessionContext::CloseParams,  ::sandstorm::SessionContext::CloseResults> closeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SessionContext::OpenViewParams,  ::sandstorm::SessionContext::OpenViewResults> openViewRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SessionContext::ClaimRequestParams,  ::sandstorm::SessionContext::ClaimRequestResults> claimRequestRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::SessionContext::ActivityParams,  ::sandstorm::SessionContext::ActivityResults> activityRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class SessionContext::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef SessionContext Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::SessionContext::GetSharedPermissionsParams GetSharedPermissionsParams;
  typedef  ::sandstorm::SessionContext::GetSharedPermissionsResults GetSharedPermissionsResults;
  typedef ::capnp::CallContext<GetSharedPermissionsParams, GetSharedPermissionsResults> GetSharedPermissionsContext;
  virtual ::kj::Promise<void> getSharedPermissions(GetSharedPermissionsContext context);
  typedef  ::sandstorm::SessionContext::TieToUserParams TieToUserParams;
  typedef  ::sandstorm::SessionContext::TieToUserResults TieToUserResults;
  typedef ::capnp::CallContext<TieToUserParams, TieToUserResults> TieToUserContext;
  virtual ::kj::Promise<void> tieToUser(TieToUserContext context);
  typedef  ::sandstorm::SessionContext::OfferParams OfferParams;
  typedef  ::sandstorm::SessionContext::OfferResults OfferResults;
  typedef ::capnp::CallContext<OfferParams, OfferResults> OfferContext;
  virtual ::kj::Promise<void> offer(OfferContext context);
  typedef  ::sandstorm::SessionContext::RequestParams RequestParams;
  typedef  ::sandstorm::SessionContext::RequestResults RequestResults;
  typedef ::capnp::CallContext<RequestParams, RequestResults> RequestContext;
  virtual ::kj::Promise<void> request(RequestContext context);
  typedef  ::sandstorm::SessionContext::FulfillRequestParams FulfillRequestParams;
  typedef  ::sandstorm::SessionContext::FulfillRequestResults FulfillRequestResults;
  typedef ::capnp::CallContext<FulfillRequestParams, FulfillRequestResults> FulfillRequestContext;
  virtual ::kj::Promise<void> fulfillRequest(FulfillRequestContext context);
  typedef  ::sandstorm::SessionContext::CloseParams CloseParams;
  typedef  ::sandstorm::SessionContext::CloseResults CloseResults;
  typedef ::capnp::CallContext<CloseParams, CloseResults> CloseContext;
  virtual ::kj::Promise<void> close(CloseContext context);
  typedef  ::sandstorm::SessionContext::OpenViewParams OpenViewParams;
  typedef  ::sandstorm::SessionContext::OpenViewResults OpenViewResults;
  typedef ::capnp::CallContext<OpenViewParams, OpenViewResults> OpenViewContext;
  virtual ::kj::Promise<void> openView(OpenViewContext context);
  typedef  ::sandstorm::SessionContext::ClaimRequestParams ClaimRequestParams;
  typedef  ::sandstorm::SessionContext::ClaimRequestResults ClaimRequestResults;
  typedef ::capnp::CallContext<ClaimRequestParams, ClaimRequestResults> ClaimRequestContext;
  virtual ::kj::Promise<void> claimRequest(ClaimRequestContext context);
  typedef  ::sandstorm::SessionContext::ActivityParams ActivityParams;
  typedef  ::sandstorm::SessionContext::ActivityResults ActivityResults;
  typedef ::capnp::CallContext<ActivityParams, ActivityResults> ActivityContext;
  virtual ::kj::Promise<void> activity(ActivityContext context);

  inline  ::sandstorm::SessionContext::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::SessionContext>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class SessionContext::GetSharedPermissionsParams::Reader {
public:
  typedef GetSharedPermissionsParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::GetSharedPermissionsParams::Builder {
public:
  typedef GetSharedPermissionsParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::GetSharedPermissionsParams::Pipeline {
public:
  typedef GetSharedPermissionsParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::GetSharedPermissionsResults::Reader {
public:
  typedef GetSharedPermissionsResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasVar() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Assignable< ::capnp::List<bool>>::Getter::Client getVar() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::GetSharedPermissionsResults::Builder {
public:
  typedef GetSharedPermissionsResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasVar();
#if !CAPNP_LITE
  inline  ::sandstorm::Assignable< ::capnp::List<bool>>::Getter::Client getVar();
  inline void setVar( ::sandstorm::Assignable< ::capnp::List<bool>>::Getter::Client&& value);
  inline void setVar( ::sandstorm::Assignable< ::capnp::List<bool>>::Getter::Client& value);
  inline void adoptVar(::capnp::Orphan< ::sandstorm::Assignable< ::capnp::List<bool>>::Getter>&& value);
  inline ::capnp::Orphan< ::sandstorm::Assignable< ::capnp::List<bool>>::Getter> disownVar();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::GetSharedPermissionsResults::Pipeline {
public:
  typedef GetSharedPermissionsResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Assignable< ::capnp::List<bool>>::Getter::Client getVar();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::TieToUserParams::Reader {
public:
  typedef TieToUserParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasCap() const;
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap() const;
#endif  // !CAPNP_LITE

  inline bool hasRequiredPermissions() const;
  inline  ::capnp::List<bool>::Reader getRequiredPermissions() const;

  inline bool hasDisplayInfo() const;
  inline  ::sandstorm::PowerboxDisplayInfo::Reader getDisplayInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::TieToUserParams::Builder {
public:
  typedef TieToUserParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCap();
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap();
  inline void setCap( ::capnp::Capability::Client&& value);
  inline void setCap( ::capnp::Capability::Client& value);
  inline void adoptCap(::capnp::Orphan< ::capnp::Capability>&& value);
  inline ::capnp::Orphan< ::capnp::Capability> disownCap();
#endif  // !CAPNP_LITE

  inline bool hasRequiredPermissions();
  inline  ::capnp::List<bool>::Builder getRequiredPermissions();
  inline void setRequiredPermissions( ::capnp::List<bool>::Reader value);
  inline void setRequiredPermissions(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initRequiredPermissions(unsigned int size);
  inline void adoptRequiredPermissions(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownRequiredPermissions();

  inline bool hasDisplayInfo();
  inline  ::sandstorm::PowerboxDisplayInfo::Builder getDisplayInfo();
  inline void setDisplayInfo( ::sandstorm::PowerboxDisplayInfo::Reader value);
  inline  ::sandstorm::PowerboxDisplayInfo::Builder initDisplayInfo();
  inline void adoptDisplayInfo(::capnp::Orphan< ::sandstorm::PowerboxDisplayInfo>&& value);
  inline ::capnp::Orphan< ::sandstorm::PowerboxDisplayInfo> disownDisplayInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::TieToUserParams::Pipeline {
public:
  typedef TieToUserParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::Capability::Client getCap();
  inline  ::sandstorm::PowerboxDisplayInfo::Pipeline getDisplayInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::TieToUserResults::Reader {
public:
  typedef TieToUserResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasTiedCap() const;
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getTiedCap() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::TieToUserResults::Builder {
public:
  typedef TieToUserResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTiedCap();
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getTiedCap();
  inline void setTiedCap( ::capnp::Capability::Client&& value);
  inline void setTiedCap( ::capnp::Capability::Client& value);
  inline void adoptTiedCap(::capnp::Orphan< ::capnp::Capability>&& value);
  inline ::capnp::Orphan< ::capnp::Capability> disownTiedCap();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::TieToUserResults::Pipeline {
public:
  typedef TieToUserResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::Capability::Client getTiedCap();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::OfferParams::Reader {
public:
  typedef OfferParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasCap() const;
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap() const;
#endif  // !CAPNP_LITE

  inline bool hasRequiredPermissions() const;
  inline  ::capnp::List<bool>::Reader getRequiredPermissions() const;

  inline bool hasDescriptor() const;
  inline  ::sandstorm::PowerboxDescriptor::Reader getDescriptor() const;

  inline bool hasDisplayInfo() const;
  inline  ::sandstorm::PowerboxDisplayInfo::Reader getDisplayInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::OfferParams::Builder {
public:
  typedef OfferParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCap();
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap();
  inline void setCap( ::capnp::Capability::Client&& value);
  inline void setCap( ::capnp::Capability::Client& value);
  inline void adoptCap(::capnp::Orphan< ::capnp::Capability>&& value);
  inline ::capnp::Orphan< ::capnp::Capability> disownCap();
#endif  // !CAPNP_LITE

  inline bool hasRequiredPermissions();
  inline  ::capnp::List<bool>::Builder getRequiredPermissions();
  inline void setRequiredPermissions( ::capnp::List<bool>::Reader value);
  inline void setRequiredPermissions(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initRequiredPermissions(unsigned int size);
  inline void adoptRequiredPermissions(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownRequiredPermissions();

  inline bool hasDescriptor();
  inline  ::sandstorm::PowerboxDescriptor::Builder getDescriptor();
  inline void setDescriptor( ::sandstorm::PowerboxDescriptor::Reader value);
  inline  ::sandstorm::PowerboxDescriptor::Builder initDescriptor();
  inline void adoptDescriptor(::capnp::Orphan< ::sandstorm::PowerboxDescriptor>&& value);
  inline ::capnp::Orphan< ::sandstorm::PowerboxDescriptor> disownDescriptor();

  inline bool hasDisplayInfo();
  inline  ::sandstorm::PowerboxDisplayInfo::Builder getDisplayInfo();
  inline void setDisplayInfo( ::sandstorm::PowerboxDisplayInfo::Reader value);
  inline  ::sandstorm::PowerboxDisplayInfo::Builder initDisplayInfo();
  inline void adoptDisplayInfo(::capnp::Orphan< ::sandstorm::PowerboxDisplayInfo>&& value);
  inline ::capnp::Orphan< ::sandstorm::PowerboxDisplayInfo> disownDisplayInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::OfferParams::Pipeline {
public:
  typedef OfferParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::Capability::Client getCap();
  inline  ::sandstorm::PowerboxDescriptor::Pipeline getDescriptor();
  inline  ::sandstorm::PowerboxDisplayInfo::Pipeline getDisplayInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::OfferResults::Reader {
public:
  typedef OfferResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::OfferResults::Builder {
public:
  typedef OfferResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::OfferResults::Pipeline {
public:
  typedef OfferResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::RequestParams::Reader {
public:
  typedef RequestParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasQuery() const;
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader getQuery() const;

  inline bool hasRequiredPermissions() const;
  inline  ::capnp::List<bool>::Reader getRequiredPermissions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::RequestParams::Builder {
public:
  typedef RequestParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasQuery();
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder getQuery();
  inline void setQuery( ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader value);
  inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder initQuery(unsigned int size);
  inline void adoptQuery(::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>> disownQuery();

  inline bool hasRequiredPermissions();
  inline  ::capnp::List<bool>::Builder getRequiredPermissions();
  inline void setRequiredPermissions( ::capnp::List<bool>::Reader value);
  inline void setRequiredPermissions(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initRequiredPermissions(unsigned int size);
  inline void adoptRequiredPermissions(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownRequiredPermissions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::RequestParams::Pipeline {
public:
  typedef RequestParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::RequestResults::Reader {
public:
  typedef RequestResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasCap() const;
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap() const;
#endif  // !CAPNP_LITE

  inline bool hasDescriptor() const;
  inline  ::sandstorm::PowerboxDescriptor::Reader getDescriptor() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::RequestResults::Builder {
public:
  typedef RequestResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCap();
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap();
  inline void setCap( ::capnp::Capability::Client&& value);
  inline void setCap( ::capnp::Capability::Client& value);
  inline void adoptCap(::capnp::Orphan< ::capnp::Capability>&& value);
  inline ::capnp::Orphan< ::capnp::Capability> disownCap();
#endif  // !CAPNP_LITE

  inline bool hasDescriptor();
  inline  ::sandstorm::PowerboxDescriptor::Builder getDescriptor();
  inline void setDescriptor( ::sandstorm::PowerboxDescriptor::Reader value);
  inline  ::sandstorm::PowerboxDescriptor::Builder initDescriptor();
  inline void adoptDescriptor(::capnp::Orphan< ::sandstorm::PowerboxDescriptor>&& value);
  inline ::capnp::Orphan< ::sandstorm::PowerboxDescriptor> disownDescriptor();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::RequestResults::Pipeline {
public:
  typedef RequestResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::Capability::Client getCap();
  inline  ::sandstorm::PowerboxDescriptor::Pipeline getDescriptor();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::FulfillRequestParams::Reader {
public:
  typedef FulfillRequestParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasCap() const;
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap() const;
#endif  // !CAPNP_LITE

  inline bool hasRequiredPermissions() const;
  inline  ::capnp::List<bool>::Reader getRequiredPermissions() const;

  inline bool hasDescriptor() const;
  inline  ::sandstorm::PowerboxDescriptor::Reader getDescriptor() const;

  inline bool hasDisplayInfo() const;
  inline  ::sandstorm::PowerboxDisplayInfo::Reader getDisplayInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::FulfillRequestParams::Builder {
public:
  typedef FulfillRequestParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCap();
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap();
  inline void setCap( ::capnp::Capability::Client&& value);
  inline void setCap( ::capnp::Capability::Client& value);
  inline void adoptCap(::capnp::Orphan< ::capnp::Capability>&& value);
  inline ::capnp::Orphan< ::capnp::Capability> disownCap();
#endif  // !CAPNP_LITE

  inline bool hasRequiredPermissions();
  inline  ::capnp::List<bool>::Builder getRequiredPermissions();
  inline void setRequiredPermissions( ::capnp::List<bool>::Reader value);
  inline void setRequiredPermissions(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initRequiredPermissions(unsigned int size);
  inline void adoptRequiredPermissions(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownRequiredPermissions();

  inline bool hasDescriptor();
  inline  ::sandstorm::PowerboxDescriptor::Builder getDescriptor();
  inline void setDescriptor( ::sandstorm::PowerboxDescriptor::Reader value);
  inline  ::sandstorm::PowerboxDescriptor::Builder initDescriptor();
  inline void adoptDescriptor(::capnp::Orphan< ::sandstorm::PowerboxDescriptor>&& value);
  inline ::capnp::Orphan< ::sandstorm::PowerboxDescriptor> disownDescriptor();

  inline bool hasDisplayInfo();
  inline  ::sandstorm::PowerboxDisplayInfo::Builder getDisplayInfo();
  inline void setDisplayInfo( ::sandstorm::PowerboxDisplayInfo::Reader value);
  inline  ::sandstorm::PowerboxDisplayInfo::Builder initDisplayInfo();
  inline void adoptDisplayInfo(::capnp::Orphan< ::sandstorm::PowerboxDisplayInfo>&& value);
  inline ::capnp::Orphan< ::sandstorm::PowerboxDisplayInfo> disownDisplayInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::FulfillRequestParams::Pipeline {
public:
  typedef FulfillRequestParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::Capability::Client getCap();
  inline  ::sandstorm::PowerboxDescriptor::Pipeline getDescriptor();
  inline  ::sandstorm::PowerboxDisplayInfo::Pipeline getDisplayInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::FulfillRequestResults::Reader {
public:
  typedef FulfillRequestResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::FulfillRequestResults::Builder {
public:
  typedef FulfillRequestResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::FulfillRequestResults::Pipeline {
public:
  typedef FulfillRequestResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::CloseParams::Reader {
public:
  typedef CloseParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::CloseParams::Builder {
public:
  typedef CloseParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::CloseParams::Pipeline {
public:
  typedef CloseParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::CloseResults::Reader {
public:
  typedef CloseResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::CloseResults::Builder {
public:
  typedef CloseResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::CloseResults::Pipeline {
public:
  typedef CloseResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::OpenViewParams::Reader {
public:
  typedef OpenViewParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasView() const;
#if !CAPNP_LITE
  inline  ::sandstorm::UiView::Client getView() const;
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool getNewTab() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::OpenViewParams::Builder {
public:
  typedef OpenViewParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasView();
#if !CAPNP_LITE
  inline  ::sandstorm::UiView::Client getView();
  inline void setView( ::sandstorm::UiView::Client&& value);
  inline void setView( ::sandstorm::UiView::Client& value);
  inline void adoptView(::capnp::Orphan< ::sandstorm::UiView>&& value);
  inline ::capnp::Orphan< ::sandstorm::UiView> disownView();
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool getNewTab();
  inline void setNewTab(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::OpenViewParams::Pipeline {
public:
  typedef OpenViewParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::UiView::Client getView();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::OpenViewResults::Reader {
public:
  typedef OpenViewResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::OpenViewResults::Builder {
public:
  typedef OpenViewResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::OpenViewResults::Pipeline {
public:
  typedef OpenViewResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::ClaimRequestParams::Reader {
public:
  typedef ClaimRequestParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasRequestToken() const;
  inline  ::capnp::Text::Reader getRequestToken() const;

  inline bool hasRequiredPermissions() const;
  inline  ::capnp::List<bool>::Reader getRequiredPermissions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::ClaimRequestParams::Builder {
public:
  typedef ClaimRequestParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRequestToken();
  inline  ::capnp::Text::Builder getRequestToken();
  inline void setRequestToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRequestToken(unsigned int size);
  inline void adoptRequestToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRequestToken();

  inline bool hasRequiredPermissions();
  inline  ::capnp::List<bool>::Builder getRequiredPermissions();
  inline void setRequiredPermissions( ::capnp::List<bool>::Reader value);
  inline void setRequiredPermissions(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initRequiredPermissions(unsigned int size);
  inline void adoptRequiredPermissions(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownRequiredPermissions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::ClaimRequestParams::Pipeline {
public:
  typedef ClaimRequestParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::ClaimRequestResults::Reader {
public:
  typedef ClaimRequestResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasCap() const;
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::ClaimRequestResults::Builder {
public:
  typedef ClaimRequestResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCap();
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap();
  inline void setCap( ::capnp::Capability::Client&& value);
  inline void setCap( ::capnp::Capability::Client& value);
  inline void adoptCap(::capnp::Orphan< ::capnp::Capability>&& value);
  inline ::capnp::Orphan< ::capnp::Capability> disownCap();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::ClaimRequestResults::Pipeline {
public:
  typedef ClaimRequestResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::Capability::Client getCap();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::ActivityParams::Reader {
public:
  typedef ActivityParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasEvent() const;
  inline  ::sandstorm::ActivityEvent::Reader getEvent() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::ActivityParams::Builder {
public:
  typedef ActivityParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEvent();
  inline  ::sandstorm::ActivityEvent::Builder getEvent();
  inline void setEvent( ::sandstorm::ActivityEvent::Reader value);
  inline  ::sandstorm::ActivityEvent::Builder initEvent();
  inline void adoptEvent(::capnp::Orphan< ::sandstorm::ActivityEvent>&& value);
  inline ::capnp::Orphan< ::sandstorm::ActivityEvent> disownEvent();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::ActivityParams::Pipeline {
public:
  typedef ActivityParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::ActivityEvent::Pipeline getEvent();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SessionContext::ActivityResults::Reader {
public:
  typedef ActivityResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SessionContext::ActivityResults::Builder {
public:
  typedef ActivityResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SessionContext::ActivityResults::Pipeline {
public:
  typedef ActivityResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PermissionDef::Reader {
public:
  typedef PermissionDef Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasTitle() const;
  inline  ::sandstorm::LocalizedText::Reader getTitle() const;

  inline bool hasDescription() const;
  inline  ::sandstorm::LocalizedText::Reader getDescription() const;

  inline bool getObsolete() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PermissionDef::Builder {
public:
  typedef PermissionDef Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTitle();
  inline  ::sandstorm::LocalizedText::Builder getTitle();
  inline void setTitle( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initTitle();
  inline void adoptTitle(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownTitle();

  inline bool hasDescription();
  inline  ::sandstorm::LocalizedText::Builder getDescription();
  inline void setDescription( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initDescription();
  inline void adoptDescription(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownDescription();

  inline bool getObsolete();
  inline void setObsolete(bool value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PermissionDef::Pipeline {
public:
  typedef PermissionDef Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::LocalizedText::Pipeline getTitle();
  inline  ::sandstorm::LocalizedText::Pipeline getDescription();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoleDef::Reader {
public:
  typedef RoleDef Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasTitle() const;
  inline  ::sandstorm::LocalizedText::Reader getTitle() const;

  inline bool hasVerbPhrase() const;
  inline  ::sandstorm::LocalizedText::Reader getVerbPhrase() const;

  inline bool hasDescription() const;
  inline  ::sandstorm::LocalizedText::Reader getDescription() const;

  inline bool hasPermissions() const;
  inline  ::capnp::List<bool>::Reader getPermissions() const;

  inline bool getObsolete() const;

  inline bool getDefault() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoleDef::Builder {
public:
  typedef RoleDef Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTitle();
  inline  ::sandstorm::LocalizedText::Builder getTitle();
  inline void setTitle( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initTitle();
  inline void adoptTitle(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownTitle();

  inline bool hasVerbPhrase();
  inline  ::sandstorm::LocalizedText::Builder getVerbPhrase();
  inline void setVerbPhrase( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initVerbPhrase();
  inline void adoptVerbPhrase(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownVerbPhrase();

  inline bool hasDescription();
  inline  ::sandstorm::LocalizedText::Builder getDescription();
  inline void setDescription( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initDescription();
  inline void adoptDescription(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownDescription();

  inline bool hasPermissions();
  inline  ::capnp::List<bool>::Builder getPermissions();
  inline void setPermissions( ::capnp::List<bool>::Reader value);
  inline void setPermissions(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initPermissions(unsigned int size);
  inline void adoptPermissions(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownPermissions();

  inline bool getObsolete();
  inline void setObsolete(bool value);

  inline bool getDefault();
  inline void setDefault(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoleDef::Pipeline {
public:
  typedef RoleDef Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::LocalizedText::Pipeline getTitle();
  inline  ::sandstorm::LocalizedText::Pipeline getVerbPhrase();
  inline  ::sandstorm::LocalizedText::Pipeline getDescription();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class SharingLink::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef SharingLink Calls;
  typedef SharingLink Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::SharingLink::GetPetnameParams,  ::sandstorm::SharingLink::GetPetnameResults> getPetnameRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class SharingLink::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef SharingLink Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::SharingLink::GetPetnameParams GetPetnameParams;
  typedef  ::sandstorm::SharingLink::GetPetnameResults GetPetnameResults;
  typedef ::capnp::CallContext<GetPetnameParams, GetPetnameResults> GetPetnameContext;
  virtual ::kj::Promise<void> getPetname(GetPetnameContext context);

  inline  ::sandstorm::SharingLink::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::SharingLink>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class SharingLink::GetPetnameParams::Reader {
public:
  typedef GetPetnameParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SharingLink::GetPetnameParams::Builder {
public:
  typedef GetPetnameParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SharingLink::GetPetnameParams::Pipeline {
public:
  typedef GetPetnameParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SharingLink::GetPetnameResults::Reader {
public:
  typedef GetPetnameResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Assignable< ::sandstorm::LocalizedText>::Client getName() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SharingLink::GetPetnameResults::Builder {
public:
  typedef GetPetnameResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
#if !CAPNP_LITE
  inline  ::sandstorm::Assignable< ::sandstorm::LocalizedText>::Client getName();
  inline void setName( ::sandstorm::Assignable< ::sandstorm::LocalizedText>::Client&& value);
  inline void setName( ::sandstorm::Assignable< ::sandstorm::LocalizedText>::Client& value);
  inline void adoptName(::capnp::Orphan< ::sandstorm::Assignable< ::sandstorm::LocalizedText>>&& value);
  inline ::capnp::Orphan< ::sandstorm::Assignable< ::sandstorm::LocalizedText>> disownName();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SharingLink::GetPetnameResults::Pipeline {
public:
  typedef GetPetnameResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Assignable< ::sandstorm::LocalizedText>::Client getName();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class ViewSharingLink::Client
    : public virtual ::capnp::Capability::Client,
      public virtual  ::sandstorm::SharingLink::Client {
public:
  typedef ViewSharingLink Calls;
  typedef ViewSharingLink Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::ViewSharingLink::GetRoleAssignmentParams,  ::sandstorm::ViewSharingLink::GetRoleAssignmentResults> getRoleAssignmentRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class ViewSharingLink::Server
    : public virtual ::capnp::Capability::Server,
      public virtual  ::sandstorm::SharingLink::Server {
public:
  typedef ViewSharingLink Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::ViewSharingLink::GetRoleAssignmentParams GetRoleAssignmentParams;
  typedef  ::sandstorm::ViewSharingLink::GetRoleAssignmentResults GetRoleAssignmentResults;
  typedef ::capnp::CallContext<GetRoleAssignmentParams, GetRoleAssignmentResults> GetRoleAssignmentContext;
  virtual ::kj::Promise<void> getRoleAssignment(GetRoleAssignmentContext context);

  inline  ::sandstorm::ViewSharingLink::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::ViewSharingLink>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class ViewSharingLink::RoleAssignment::Reader {
public:
  typedef RoleAssignment Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool isAllAccess() const;
  inline  ::capnp::Void getAllAccess() const;

  inline bool isRoleId() const;
  inline  ::uint16_t getRoleId() const;

  inline bool hasAddPermissions() const;
  inline  ::capnp::List<bool>::Reader getAddPermissions() const;

  inline bool hasRemovePermissions() const;
  inline  ::capnp::List<bool>::Reader getRemovePermissions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ViewSharingLink::RoleAssignment::Builder {
public:
  typedef RoleAssignment Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::VOID);

  inline bool isAllAccess();
  inline  ::capnp::Void getAllAccess();
  inline void setAllAccess( ::capnp::Void value = ::capnp::VOID);

  inline bool isRoleId();
  inline  ::uint16_t getRoleId();
  inline void setRoleId( ::uint16_t value);

  inline bool hasAddPermissions();
  inline  ::capnp::List<bool>::Builder getAddPermissions();
  inline void setAddPermissions( ::capnp::List<bool>::Reader value);
  inline void setAddPermissions(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initAddPermissions(unsigned int size);
  inline void adoptAddPermissions(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownAddPermissions();

  inline bool hasRemovePermissions();
  inline  ::capnp::List<bool>::Builder getRemovePermissions();
  inline void setRemovePermissions( ::capnp::List<bool>::Reader value);
  inline void setRemovePermissions(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initRemovePermissions(unsigned int size);
  inline void adoptRemovePermissions(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownRemovePermissions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ViewSharingLink::RoleAssignment::Pipeline {
public:
  typedef RoleAssignment Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ViewSharingLink::GetRoleAssignmentParams::Reader {
public:
  typedef GetRoleAssignmentParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ViewSharingLink::GetRoleAssignmentParams::Builder {
public:
  typedef GetRoleAssignmentParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ViewSharingLink::GetRoleAssignmentParams::Pipeline {
public:
  typedef GetRoleAssignmentParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ViewSharingLink::GetRoleAssignmentResults::Reader {
public:
  typedef GetRoleAssignmentResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasVar() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>::Client getVar() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ViewSharingLink::GetRoleAssignmentResults::Builder {
public:
  typedef GetRoleAssignmentResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasVar();
#if !CAPNP_LITE
  inline  ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>::Client getVar();
  inline void setVar( ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>::Client&& value);
  inline void setVar( ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>::Client& value);
  inline void adoptVar(::capnp::Orphan< ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>>&& value);
  inline ::capnp::Orphan< ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>> disownVar();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ViewSharingLink::GetRoleAssignmentResults::Pipeline {
public:
  typedef GetRoleAssignmentResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>::Client getVar();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GrainInfo::Reader {
public:
  typedef GrainInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAppId() const;
  inline  ::capnp::Text::Reader getAppId() const;

  inline  ::uint32_t getAppVersion() const;

  inline bool hasTitle() const;
  inline  ::capnp::Text::Reader getTitle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GrainInfo::Builder {
public:
  typedef GrainInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppId();
  inline  ::capnp::Text::Builder getAppId();
  inline void setAppId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppId(unsigned int size);
  inline void adoptAppId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppId();

  inline  ::uint32_t getAppVersion();
  inline void setAppVersion( ::uint32_t value);

  inline bool hasTitle();
  inline  ::capnp::Text::Builder getTitle();
  inline void setTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTitle(unsigned int size);
  inline void adoptTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTitle();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GrainInfo::Pipeline {
public:
  typedef GrainInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
template <typename AppObjectId>
class AppPersistent<AppObjectId>::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef AppPersistent<AppObjectId> Calls;
  typedef AppPersistent<AppObjectId> Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename AppPersistent<AppObjectId2>::Client asGeneric() {
    return castAs<AppPersistent<AppObjectId2>>();
  }

  ::capnp::Request<typename  ::sandstorm::AppPersistent<AppObjectId>::SaveParams, typename  ::sandstorm::AppPersistent<AppObjectId>::SaveResults> saveRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

template <typename AppObjectId>
class AppPersistent<AppObjectId>::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef AppPersistent<AppObjectId> Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef typename  ::sandstorm::AppPersistent<AppObjectId>::SaveParams SaveParams;
  typedef typename  ::sandstorm::AppPersistent<AppObjectId>::SaveResults SaveResults;
  typedef ::capnp::CallContext<SaveParams, SaveResults> SaveContext;
  virtual ::kj::Promise<void> save(SaveContext context);

  inline typename  ::sandstorm::AppPersistent<AppObjectId>::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::AppPersistent<AppObjectId>>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class AppPersistent<AppObjectId>::SaveParams::Reader {
public:
  typedef SaveParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename AppPersistent<AppObjectId2>::SaveParams::Reader asAppPersistentGeneric() {
    return typename AppPersistent<AppObjectId2>::SaveParams::Reader(_reader);
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class AppPersistent<AppObjectId>::SaveParams::Builder {
public:
  typedef SaveParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename AppPersistent<AppObjectId2>::SaveParams::Builder asAppPersistentGeneric() {
    return typename AppPersistent<AppObjectId2>::SaveParams::Builder(_builder);
  }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class AppPersistent<AppObjectId>::SaveParams::Pipeline {
public:
  typedef SaveParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class AppPersistent<AppObjectId>::SaveResults::Reader {
public:
  typedef SaveResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename AppPersistent<AppObjectId2>::SaveResults::Reader asAppPersistentGeneric() {
    return typename AppPersistent<AppObjectId2>::SaveResults::Reader(_reader);
  }

  inline bool hasObjectId() const;
  inline  ::capnp::ReaderFor<AppObjectId> getObjectId() const;

  inline bool hasLabel() const;
  inline  ::sandstorm::LocalizedText::Reader getLabel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class AppPersistent<AppObjectId>::SaveResults::Builder {
public:
  typedef SaveResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename AppPersistent<AppObjectId2>::SaveResults::Builder asAppPersistentGeneric() {
    return typename AppPersistent<AppObjectId2>::SaveResults::Builder(_builder);
  }

  inline bool hasObjectId();
  inline  ::capnp::BuilderFor<AppObjectId> getObjectId();
  inline void setObjectId( ::capnp::ReaderFor<AppObjectId> value);
  inline  ::capnp::BuilderFor<AppObjectId> initObjectId();
  inline  ::capnp::BuilderFor<AppObjectId> initObjectId(unsigned int size);
  inline void adoptObjectId(::capnp::Orphan<AppObjectId>&& value);
  inline ::capnp::Orphan<AppObjectId> disownObjectId();

  inline bool hasLabel();
  inline  ::sandstorm::LocalizedText::Builder getLabel();
  inline void setLabel( ::sandstorm::LocalizedText::Reader value);
  inline  ::sandstorm::LocalizedText::Builder initLabel();
  inline void adoptLabel(::capnp::Orphan< ::sandstorm::LocalizedText>&& value);
  inline ::capnp::Orphan< ::sandstorm::LocalizedText> disownLabel();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class AppPersistent<AppObjectId>::SaveResults::Pipeline {
public:
  typedef SaveResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<AppObjectId> getObjectId();
  inline  ::sandstorm::LocalizedText::Pipeline getLabel();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
template <typename AppObjectId>
class MainView<AppObjectId>::Client
    : public virtual ::capnp::Capability::Client,
      public virtual  ::sandstorm::UiView::Client {
public:
  typedef MainView<AppObjectId> Calls;
  typedef MainView<AppObjectId> Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename MainView<AppObjectId2>::Client asGeneric() {
    return castAs<MainView<AppObjectId2>>();
  }

  ::capnp::Request<typename  ::sandstorm::MainView<AppObjectId>::RestoreParams, typename  ::sandstorm::MainView<AppObjectId>::RestoreResults> restoreRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request<typename  ::sandstorm::MainView<AppObjectId>::DropParams, typename  ::sandstorm::MainView<AppObjectId>::DropResults> dropRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

template <typename AppObjectId>
class MainView<AppObjectId>::Server
    : public virtual ::capnp::Capability::Server,
      public virtual  ::sandstorm::UiView::Server {
public:
  typedef MainView<AppObjectId> Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef typename  ::sandstorm::MainView<AppObjectId>::RestoreParams RestoreParams;
  typedef typename  ::sandstorm::MainView<AppObjectId>::RestoreResults RestoreResults;
  typedef ::capnp::CallContext<RestoreParams, RestoreResults> RestoreContext;
  virtual ::kj::Promise<void> restore(RestoreContext context);
  typedef typename  ::sandstorm::MainView<AppObjectId>::DropParams DropParams;
  typedef typename  ::sandstorm::MainView<AppObjectId>::DropResults DropResults;
  typedef ::capnp::CallContext<DropParams, DropResults> DropContext;
  virtual ::kj::Promise<void> drop(DropContext context);

  inline typename  ::sandstorm::MainView<AppObjectId>::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::MainView<AppObjectId>>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class MainView<AppObjectId>::RestoreParams::Reader {
public:
  typedef RestoreParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename MainView<AppObjectId2>::RestoreParams::Reader asMainViewGeneric() {
    return typename MainView<AppObjectId2>::RestoreParams::Reader(_reader);
  }

  inline bool hasObjectId() const;
  inline  ::capnp::ReaderFor<AppObjectId> getObjectId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class MainView<AppObjectId>::RestoreParams::Builder {
public:
  typedef RestoreParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename MainView<AppObjectId2>::RestoreParams::Builder asMainViewGeneric() {
    return typename MainView<AppObjectId2>::RestoreParams::Builder(_builder);
  }

  inline bool hasObjectId();
  inline  ::capnp::BuilderFor<AppObjectId> getObjectId();
  inline void setObjectId( ::capnp::ReaderFor<AppObjectId> value);
  inline  ::capnp::BuilderFor<AppObjectId> initObjectId();
  inline  ::capnp::BuilderFor<AppObjectId> initObjectId(unsigned int size);
  inline void adoptObjectId(::capnp::Orphan<AppObjectId>&& value);
  inline ::capnp::Orphan<AppObjectId> disownObjectId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class MainView<AppObjectId>::RestoreParams::Pipeline {
public:
  typedef RestoreParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<AppObjectId> getObjectId();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class MainView<AppObjectId>::RestoreResults::Reader {
public:
  typedef RestoreResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename MainView<AppObjectId2>::RestoreResults::Reader asMainViewGeneric() {
    return typename MainView<AppObjectId2>::RestoreResults::Reader(_reader);
  }

  inline bool hasCap() const;
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class MainView<AppObjectId>::RestoreResults::Builder {
public:
  typedef RestoreResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename MainView<AppObjectId2>::RestoreResults::Builder asMainViewGeneric() {
    return typename MainView<AppObjectId2>::RestoreResults::Builder(_builder);
  }

  inline bool hasCap();
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap();
  inline void setCap( ::capnp::Capability::Client&& value);
  inline void setCap( ::capnp::Capability::Client& value);
  inline void adoptCap(::capnp::Orphan< ::capnp::Capability>&& value);
  inline ::capnp::Orphan< ::capnp::Capability> disownCap();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class MainView<AppObjectId>::RestoreResults::Pipeline {
public:
  typedef RestoreResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::Capability::Client getCap();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class MainView<AppObjectId>::DropParams::Reader {
public:
  typedef DropParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename MainView<AppObjectId2>::DropParams::Reader asMainViewGeneric() {
    return typename MainView<AppObjectId2>::DropParams::Reader(_reader);
  }

  inline bool hasObjectId() const;
  inline  ::capnp::ReaderFor<AppObjectId> getObjectId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class MainView<AppObjectId>::DropParams::Builder {
public:
  typedef DropParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename MainView<AppObjectId2>::DropParams::Builder asMainViewGeneric() {
    return typename MainView<AppObjectId2>::DropParams::Builder(_builder);
  }

  inline bool hasObjectId();
  inline  ::capnp::BuilderFor<AppObjectId> getObjectId();
  inline void setObjectId( ::capnp::ReaderFor<AppObjectId> value);
  inline  ::capnp::BuilderFor<AppObjectId> initObjectId();
  inline  ::capnp::BuilderFor<AppObjectId> initObjectId(unsigned int size);
  inline void adoptObjectId(::capnp::Orphan<AppObjectId>&& value);
  inline ::capnp::Orphan<AppObjectId> disownObjectId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class MainView<AppObjectId>::DropParams::Pipeline {
public:
  typedef DropParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<AppObjectId> getObjectId();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
class MainView<AppObjectId>::DropResults::Reader {
public:
  typedef DropResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename MainView<AppObjectId2>::DropResults::Reader asMainViewGeneric() {
    return typename MainView<AppObjectId2>::DropResults::Reader(_reader);
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename AppObjectId>
class MainView<AppObjectId>::DropResults::Builder {
public:
  typedef DropResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename AppObjectId2 = ::capnp::AnyPointer>
  typename MainView<AppObjectId2>::DropResults::Builder asMainViewGeneric() {
    return typename MainView<AppObjectId2>::DropResults::Builder(_builder);
  }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename AppObjectId>
class MainView<AppObjectId>::DropResults::Pipeline {
public:
  typedef DropResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
template <typename AppObjectId>
inline SandstormApi<AppObjectId>::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
template <typename AppObjectId>
inline SandstormApi<AppObjectId>::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename AppObjectId>
template <typename _t, typename>
inline SandstormApi<AppObjectId>::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename AppObjectId>
template <typename _t, typename>
inline SandstormApi<AppObjectId>::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
template <typename AppObjectId>
inline SandstormApi<AppObjectId>::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
template <typename AppObjectId>
inline typename  ::sandstorm::SandstormApi<AppObjectId>::Client& SandstormApi<AppObjectId>::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
template <typename AppObjectId>
inline typename  ::sandstorm::SandstormApi<AppObjectId>::Client& SandstormApi<AppObjectId>::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
// SandstormApi<AppObjectId>::DeprecatedPublishParams
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::DeprecatedPublishParams::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::DeprecatedPublishParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::DeprecatedPublishParams::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::DeprecatedPublishParams::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::DeprecatedPublishParams::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::DeprecatedPublishParams::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::DeprecatedPublishParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::DeprecatedPublishParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_a2873a59df6d885c, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

// SandstormApi<AppObjectId>::DeprecatedPublishResults
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::DeprecatedPublishResults::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::DeprecatedPublishResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::DeprecatedPublishResults::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::DeprecatedPublishResults::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::DeprecatedPublishResults::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::DeprecatedPublishResults::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::DeprecatedPublishResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::DeprecatedPublishResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_b42ccfaaf45a3f7a, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

// SandstormApi<AppObjectId>::DeprecatedRegisterActionParams
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::DeprecatedRegisterActionParams::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::DeprecatedRegisterActionParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::DeprecatedRegisterActionParams::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::DeprecatedRegisterActionParams::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::DeprecatedRegisterActionParams::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::DeprecatedRegisterActionParams::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::DeprecatedRegisterActionParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::DeprecatedRegisterActionParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_d271034eec62b43b, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

// SandstormApi<AppObjectId>::DeprecatedRegisterActionResults
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::DeprecatedRegisterActionResults::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::DeprecatedRegisterActionResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::DeprecatedRegisterActionResults::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::DeprecatedRegisterActionResults::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::DeprecatedRegisterActionResults::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::DeprecatedRegisterActionResults::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::DeprecatedRegisterActionResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::DeprecatedRegisterActionResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_b9d62f4beefefc29, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::ShareCapParams::Reader::hasCap() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::ShareCapParams::Builder::hasCap() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::capnp::Capability::Client SandstormApi<AppObjectId>::ShareCapParams::Reader::getCap() const {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::Capability::Client SandstormApi<AppObjectId>::ShareCapParams::Builder::getCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::Capability::Client SandstormApi<AppObjectId>::ShareCapParams::Pipeline::getCap() {
  return  ::capnp::Capability::Client(_typeless.getPointerField(0).asCap());
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareCapParams::Builder::setCap( ::capnp::Capability::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareCapParams::Builder::setCap( ::capnp::Capability::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareCapParams::Builder::adoptCap(
    ::capnp::Orphan< ::capnp::Capability>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::capnp::Capability> SandstormApi<AppObjectId>::ShareCapParams::Builder::disownCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::ShareCapParams::Reader::hasDisplayInfo() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::ShareCapParams::Builder::hasDisplayInfo() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline  ::sandstorm::PowerboxDisplayInfo::Reader SandstormApi<AppObjectId>::ShareCapParams::Reader::getDisplayInfo() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::PowerboxDisplayInfo::Builder SandstormApi<AppObjectId>::ShareCapParams::Builder::getDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::sandstorm::PowerboxDisplayInfo::Pipeline SandstormApi<AppObjectId>::ShareCapParams::Pipeline::getDisplayInfo() {
  return  ::sandstorm::PowerboxDisplayInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareCapParams::Builder::setDisplayInfo( ::sandstorm::PowerboxDisplayInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
template <typename AppObjectId>
inline  ::sandstorm::PowerboxDisplayInfo::Builder SandstormApi<AppObjectId>::ShareCapParams::Builder::initDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareCapParams::Builder::adoptDisplayInfo(
    ::capnp::Orphan< ::sandstorm::PowerboxDisplayInfo>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::sandstorm::PowerboxDisplayInfo> SandstormApi<AppObjectId>::ShareCapParams::Builder::disownDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

// SandstormApi<AppObjectId>::ShareCapParams
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::ShareCapParams::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::ShareCapParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::ShareCapParams::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::ShareCapParams::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::ShareCapParams::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::ShareCapParams::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::ShareCapParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::ShareCapParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_eb3c29aff080ec3e, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::ShareCapResults::Reader::hasSharedCap() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::ShareCapResults::Builder::hasSharedCap() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::capnp::Capability::Client SandstormApi<AppObjectId>::ShareCapResults::Reader::getSharedCap() const {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::Capability::Client SandstormApi<AppObjectId>::ShareCapResults::Builder::getSharedCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::Capability::Client SandstormApi<AppObjectId>::ShareCapResults::Pipeline::getSharedCap() {
  return  ::capnp::Capability::Client(_typeless.getPointerField(0).asCap());
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareCapResults::Builder::setSharedCap( ::capnp::Capability::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareCapResults::Builder::setSharedCap( ::capnp::Capability::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareCapResults::Builder::adoptSharedCap(
    ::capnp::Orphan< ::capnp::Capability>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::capnp::Capability> SandstormApi<AppObjectId>::ShareCapResults::Builder::disownSharedCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::ShareCapResults::Reader::hasLink() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::ShareCapResults::Builder::hasLink() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::sandstorm::SharingLink::Client SandstormApi<AppObjectId>::ShareCapResults::Reader::getLink() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::SharingLink>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::SharingLink::Client SandstormApi<AppObjectId>::ShareCapResults::Builder::getLink() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SharingLink>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::SharingLink::Client SandstormApi<AppObjectId>::ShareCapResults::Pipeline::getLink() {
  return  ::sandstorm::SharingLink::Client(_typeless.getPointerField(1).asCap());
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareCapResults::Builder::setLink( ::sandstorm::SharingLink::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SharingLink>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(cap));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareCapResults::Builder::setLink( ::sandstorm::SharingLink::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SharingLink>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), cap);
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareCapResults::Builder::adoptLink(
    ::capnp::Orphan< ::sandstorm::SharingLink>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::SharingLink>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::sandstorm::SharingLink> SandstormApi<AppObjectId>::ShareCapResults::Builder::disownLink() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SharingLink>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

// SandstormApi<AppObjectId>::ShareCapResults
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::ShareCapResults::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::ShareCapResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::ShareCapResults::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::ShareCapResults::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::ShareCapResults::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::ShareCapResults::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::ShareCapResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::ShareCapResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_b96fc5fb8137a705, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::ShareViewParams::Reader::hasView() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::ShareViewParams::Builder::hasView() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::sandstorm::UiView::Client SandstormApi<AppObjectId>::ShareViewParams::Reader::getView() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::UiView::Client SandstormApi<AppObjectId>::ShareViewParams::Builder::getView() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::UiView::Client SandstormApi<AppObjectId>::ShareViewParams::Pipeline::getView() {
  return  ::sandstorm::UiView::Client(_typeless.getPointerField(0).asCap());
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareViewParams::Builder::setView( ::sandstorm::UiView::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareViewParams::Builder::setView( ::sandstorm::UiView::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareViewParams::Builder::adoptView(
    ::capnp::Orphan< ::sandstorm::UiView>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::sandstorm::UiView> SandstormApi<AppObjectId>::ShareViewParams::Builder::disownView() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

// SandstormApi<AppObjectId>::ShareViewParams
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::ShareViewParams::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::ShareViewParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::ShareViewParams::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::ShareViewParams::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::ShareViewParams::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::ShareViewParams::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::ShareViewParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::ShareViewParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_b1e3f6ac609eb4d7, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::ShareViewResults::Reader::hasSharedView() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::ShareViewResults::Builder::hasSharedView() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::sandstorm::UiView::Client SandstormApi<AppObjectId>::ShareViewResults::Reader::getSharedView() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::UiView::Client SandstormApi<AppObjectId>::ShareViewResults::Builder::getSharedView() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::UiView::Client SandstormApi<AppObjectId>::ShareViewResults::Pipeline::getSharedView() {
  return  ::sandstorm::UiView::Client(_typeless.getPointerField(0).asCap());
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareViewResults::Builder::setSharedView( ::sandstorm::UiView::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareViewResults::Builder::setSharedView( ::sandstorm::UiView::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareViewResults::Builder::adoptSharedView(
    ::capnp::Orphan< ::sandstorm::UiView>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::sandstorm::UiView> SandstormApi<AppObjectId>::ShareViewResults::Builder::disownSharedView() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::ShareViewResults::Reader::hasLink() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::ShareViewResults::Builder::hasLink() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::sandstorm::ViewSharingLink::Client SandstormApi<AppObjectId>::ShareViewResults::Reader::getLink() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::ViewSharingLink>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::ViewSharingLink::Client SandstormApi<AppObjectId>::ShareViewResults::Builder::getLink() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ViewSharingLink>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::ViewSharingLink::Client SandstormApi<AppObjectId>::ShareViewResults::Pipeline::getLink() {
  return  ::sandstorm::ViewSharingLink::Client(_typeless.getPointerField(1).asCap());
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareViewResults::Builder::setLink( ::sandstorm::ViewSharingLink::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::ViewSharingLink>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(cap));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareViewResults::Builder::setLink( ::sandstorm::ViewSharingLink::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::ViewSharingLink>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), cap);
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::ShareViewResults::Builder::adoptLink(
    ::capnp::Orphan< ::sandstorm::ViewSharingLink>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ViewSharingLink>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::sandstorm::ViewSharingLink> SandstormApi<AppObjectId>::ShareViewResults::Builder::disownLink() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ViewSharingLink>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

// SandstormApi<AppObjectId>::ShareViewResults
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::ShareViewResults::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::ShareViewResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::ShareViewResults::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::ShareViewResults::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::ShareViewResults::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::ShareViewResults::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::ShareViewResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::ShareViewResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_e6abbf843a84f35d, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::RestoreParams::Reader::hasToken() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::RestoreParams::Builder::hasToken() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline  ::capnp::Data::Reader SandstormApi<AppObjectId>::RestoreParams::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::Data::Builder SandstormApi<AppObjectId>::RestoreParams::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::RestoreParams::Builder::setToken( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename AppObjectId>
inline  ::capnp::Data::Builder SandstormApi<AppObjectId>::RestoreParams::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::RestoreParams::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::capnp::Data> SandstormApi<AppObjectId>::RestoreParams::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

// SandstormApi<AppObjectId>::RestoreParams
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::RestoreParams::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::RestoreParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::RestoreParams::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::RestoreParams::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::RestoreParams::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::RestoreParams::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::RestoreParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::RestoreParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_d29e9db5843719f0, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::RestoreResults::Reader::hasCap() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::RestoreResults::Builder::hasCap() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::capnp::Capability::Client SandstormApi<AppObjectId>::RestoreResults::Reader::getCap() const {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::Capability::Client SandstormApi<AppObjectId>::RestoreResults::Builder::getCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::Capability::Client SandstormApi<AppObjectId>::RestoreResults::Pipeline::getCap() {
  return  ::capnp::Capability::Client(_typeless.getPointerField(0).asCap());
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::RestoreResults::Builder::setCap( ::capnp::Capability::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::RestoreResults::Builder::setCap( ::capnp::Capability::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::RestoreResults::Builder::adoptCap(
    ::capnp::Orphan< ::capnp::Capability>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::capnp::Capability> SandstormApi<AppObjectId>::RestoreResults::Builder::disownCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

// SandstormApi<AppObjectId>::RestoreResults
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::RestoreResults::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::RestoreResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::RestoreResults::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::RestoreResults::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::RestoreResults::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::RestoreResults::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::RestoreResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::RestoreResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_ecf1f14c4209c731, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::DropParams::Reader::hasToken() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::DropParams::Builder::hasToken() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline  ::capnp::Data::Reader SandstormApi<AppObjectId>::DropParams::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::Data::Builder SandstormApi<AppObjectId>::DropParams::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::DropParams::Builder::setToken( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename AppObjectId>
inline  ::capnp::Data::Builder SandstormApi<AppObjectId>::DropParams::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::DropParams::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::capnp::Data> SandstormApi<AppObjectId>::DropParams::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

// SandstormApi<AppObjectId>::DropParams
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::DropParams::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::DropParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::DropParams::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::DropParams::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::DropParams::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::DropParams::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::DropParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::DropParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_adac227f85285c65, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

// SandstormApi<AppObjectId>::DropResults
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::DropResults::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::DropResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::DropResults::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::DropResults::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::DropResults::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::DropResults::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::DropResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::DropResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_fbbc20367c72bc59, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::DeletedParams::Reader::hasRef() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::DeletedParams::Builder::hasRef() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline  ::capnp::ReaderFor<AppObjectId> SandstormApi<AppObjectId>::DeletedParams::Reader::getRef() const {
  return ::capnp::_::PointerHelpers<AppObjectId>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::BuilderFor<AppObjectId> SandstormApi<AppObjectId>::DeletedParams::Builder::getRef() {
  return ::capnp::_::PointerHelpers<AppObjectId>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::capnp::PipelineFor<AppObjectId> SandstormApi<AppObjectId>::DeletedParams::Pipeline::getRef() {
  return  ::capnp::PipelineFor<AppObjectId>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::DeletedParams::Builder::setRef( ::capnp::ReaderFor<AppObjectId> value) {
  ::capnp::_::PointerHelpers<AppObjectId>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename AppObjectId>
inline  ::capnp::BuilderFor<AppObjectId> SandstormApi<AppObjectId>::DeletedParams::Builder::initRef() {
  return ::capnp::_::PointerHelpers<AppObjectId>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::BuilderFor<AppObjectId> SandstormApi<AppObjectId>::DeletedParams::Builder::initRef(unsigned int size) {
  return ::capnp::_::PointerHelpers<AppObjectId>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::DeletedParams::Builder::adoptRef(
    ::capnp::Orphan<AppObjectId>&& value) {
  ::capnp::_::PointerHelpers<AppObjectId>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan<AppObjectId> SandstormApi<AppObjectId>::DeletedParams::Builder::disownRef() {
  return ::capnp::_::PointerHelpers<AppObjectId>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

// SandstormApi<AppObjectId>::DeletedParams
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::DeletedParams::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::DeletedParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::DeletedParams::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::DeletedParams::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::DeletedParams::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::DeletedParams::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::DeletedParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::DeletedParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_87d94955ce3c61dd, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

// SandstormApi<AppObjectId>::DeletedResults
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::DeletedResults::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::DeletedResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::DeletedResults::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::DeletedResults::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::DeletedResults::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::DeletedResults::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::DeletedResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::DeletedResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_f8fe6b4e94a960f7, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::StayAwakeParams::Reader::hasDisplayInfo() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::StayAwakeParams::Builder::hasDisplayInfo() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline  ::sandstorm::NotificationDisplayInfo::Reader SandstormApi<AppObjectId>::StayAwakeParams::Reader::getDisplayInfo() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::NotificationDisplayInfo::Builder SandstormApi<AppObjectId>::StayAwakeParams::Builder::getDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::sandstorm::NotificationDisplayInfo::Pipeline SandstormApi<AppObjectId>::StayAwakeParams::Pipeline::getDisplayInfo() {
  return  ::sandstorm::NotificationDisplayInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::StayAwakeParams::Builder::setDisplayInfo( ::sandstorm::NotificationDisplayInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename AppObjectId>
inline  ::sandstorm::NotificationDisplayInfo::Builder SandstormApi<AppObjectId>::StayAwakeParams::Builder::initDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::StayAwakeParams::Builder::adoptDisplayInfo(
    ::capnp::Orphan< ::sandstorm::NotificationDisplayInfo>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::sandstorm::NotificationDisplayInfo> SandstormApi<AppObjectId>::StayAwakeParams::Builder::disownDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::NotificationDisplayInfo>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::StayAwakeParams::Reader::hasNotification() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::StayAwakeParams::Builder::hasNotification() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::sandstorm::OngoingNotification::Client SandstormApi<AppObjectId>::StayAwakeParams::Reader::getNotification() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::OngoingNotification>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::OngoingNotification::Client SandstormApi<AppObjectId>::StayAwakeParams::Builder::getNotification() {
  return ::capnp::_::PointerHelpers< ::sandstorm::OngoingNotification>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::OngoingNotification::Client SandstormApi<AppObjectId>::StayAwakeParams::Pipeline::getNotification() {
  return  ::sandstorm::OngoingNotification::Client(_typeless.getPointerField(1).asCap());
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::StayAwakeParams::Builder::setNotification( ::sandstorm::OngoingNotification::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::OngoingNotification>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(cap));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::StayAwakeParams::Builder::setNotification( ::sandstorm::OngoingNotification::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::OngoingNotification>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), cap);
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::StayAwakeParams::Builder::adoptNotification(
    ::capnp::Orphan< ::sandstorm::OngoingNotification>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::OngoingNotification>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::sandstorm::OngoingNotification> SandstormApi<AppObjectId>::StayAwakeParams::Builder::disownNotification() {
  return ::capnp::_::PointerHelpers< ::sandstorm::OngoingNotification>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

// SandstormApi<AppObjectId>::StayAwakeParams
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::StayAwakeParams::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::StayAwakeParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::StayAwakeParams::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::StayAwakeParams::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::StayAwakeParams::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::StayAwakeParams::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::StayAwakeParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::StayAwakeParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_b469e5d523b89e1b, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::StayAwakeResults::Reader::hasHandle() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::StayAwakeResults::Builder::hasHandle() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::sandstorm::Handle::Client SandstormApi<AppObjectId>::StayAwakeResults::Reader::getHandle() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::Handle::Client SandstormApi<AppObjectId>::StayAwakeResults::Builder::getHandle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::Handle::Client SandstormApi<AppObjectId>::StayAwakeResults::Pipeline::getHandle() {
  return  ::sandstorm::Handle::Client(_typeless.getPointerField(0).asCap());
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::StayAwakeResults::Builder::setHandle( ::sandstorm::Handle::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::StayAwakeResults::Builder::setHandle( ::sandstorm::Handle::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::StayAwakeResults::Builder::adoptHandle(
    ::capnp::Orphan< ::sandstorm::Handle>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::sandstorm::Handle> SandstormApi<AppObjectId>::StayAwakeResults::Builder::disownHandle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

// SandstormApi<AppObjectId>::StayAwakeResults
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::StayAwakeResults::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::StayAwakeResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::StayAwakeResults::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::StayAwakeResults::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::StayAwakeResults::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::StayAwakeResults::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::StayAwakeResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::StayAwakeResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_9fd40f92e1eb5d21, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::SaveParams::Reader::hasCap() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::SaveParams::Builder::hasCap() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::capnp::Capability::Client SandstormApi<AppObjectId>::SaveParams::Reader::getCap() const {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::Capability::Client SandstormApi<AppObjectId>::SaveParams::Builder::getCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::Capability::Client SandstormApi<AppObjectId>::SaveParams::Pipeline::getCap() {
  return  ::capnp::Capability::Client(_typeless.getPointerField(0).asCap());
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::SaveParams::Builder::setCap( ::capnp::Capability::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::SaveParams::Builder::setCap( ::capnp::Capability::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::SaveParams::Builder::adoptCap(
    ::capnp::Orphan< ::capnp::Capability>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::capnp::Capability> SandstormApi<AppObjectId>::SaveParams::Builder::disownCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::SaveParams::Reader::hasLabel() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::SaveParams::Builder::hasLabel() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline  ::sandstorm::LocalizedText::Reader SandstormApi<AppObjectId>::SaveParams::Reader::getLabel() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::LocalizedText::Builder SandstormApi<AppObjectId>::SaveParams::Builder::getLabel() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::sandstorm::LocalizedText::Pipeline SandstormApi<AppObjectId>::SaveParams::Pipeline::getLabel() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::SaveParams::Builder::setLabel( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
template <typename AppObjectId>
inline  ::sandstorm::LocalizedText::Builder SandstormApi<AppObjectId>::SaveParams::Builder::initLabel() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::SaveParams::Builder::adoptLabel(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::sandstorm::LocalizedText> SandstormApi<AppObjectId>::SaveParams::Builder::disownLabel() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

// SandstormApi<AppObjectId>::SaveParams
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::SaveParams::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::SaveParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::SaveParams::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::SaveParams::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::SaveParams::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::SaveParams::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::SaveParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::SaveParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_d692a643ba8a1f58, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::SaveResults::Reader::hasToken() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::SaveResults::Builder::hasToken() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline  ::capnp::Data::Reader SandstormApi<AppObjectId>::SaveResults::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::Data::Builder SandstormApi<AppObjectId>::SaveResults::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::SaveResults::Builder::setToken( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename AppObjectId>
inline  ::capnp::Data::Builder SandstormApi<AppObjectId>::SaveResults::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::SaveResults::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::capnp::Data> SandstormApi<AppObjectId>::SaveResults::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

// SandstormApi<AppObjectId>::SaveResults
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::SaveResults::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::SaveResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::SaveResults::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::SaveResults::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::SaveResults::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::SaveResults::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::SaveResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::SaveResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_9206caa8d3e3cc7e, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::BackgroundActivityParams::Reader::hasEvent() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool SandstormApi<AppObjectId>::BackgroundActivityParams::Builder::hasEvent() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline  ::sandstorm::ActivityEvent::Reader SandstormApi<AppObjectId>::BackgroundActivityParams::Reader::getEvent() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::ActivityEvent::Builder SandstormApi<AppObjectId>::BackgroundActivityParams::Builder::getEvent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::sandstorm::ActivityEvent::Pipeline SandstormApi<AppObjectId>::BackgroundActivityParams::Pipeline::getEvent() {
  return  ::sandstorm::ActivityEvent::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::BackgroundActivityParams::Builder::setEvent( ::sandstorm::ActivityEvent::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename AppObjectId>
inline  ::sandstorm::ActivityEvent::Builder SandstormApi<AppObjectId>::BackgroundActivityParams::Builder::initEvent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline void SandstormApi<AppObjectId>::BackgroundActivityParams::Builder::adoptEvent(
    ::capnp::Orphan< ::sandstorm::ActivityEvent>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::sandstorm::ActivityEvent> SandstormApi<AppObjectId>::BackgroundActivityParams::Builder::disownEvent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

// SandstormApi<AppObjectId>::BackgroundActivityParams
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::BackgroundActivityParams::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::BackgroundActivityParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::BackgroundActivityParams::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::BackgroundActivityParams::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::BackgroundActivityParams::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::BackgroundActivityParams::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::BackgroundActivityParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::BackgroundActivityParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_ec8866df56873858, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

// SandstormApi<AppObjectId>::BackgroundActivityResults
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::BackgroundActivityResults::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t SandstormApi<AppObjectId>::BackgroundActivityResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::BackgroundActivityResults::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::BackgroundActivityResults::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::BackgroundActivityResults::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::BackgroundActivityResults::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::BackgroundActivityResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::BackgroundActivityResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_a535ac09456b2870, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
template <typename AppObjectId>
::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedPublishParams, typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedPublishResults>
SandstormApi<AppObjectId>::Client::deprecatedPublishRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedPublishParams, typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedPublishResults>(
      0xd2654fcf2a7002cbull, 0, sizeHint);
}
template <typename AppObjectId>
::kj::Promise<void> SandstormApi<AppObjectId>::Server::deprecatedPublish(DeprecatedPublishContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/grain.capnp:SandstormApi", "deprecatedPublish",
      0xd2654fcf2a7002cbull, 0);
}
template <typename AppObjectId>
::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedRegisterActionParams, typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedRegisterActionResults>
SandstormApi<AppObjectId>::Client::deprecatedRegisterActionRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedRegisterActionParams, typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedRegisterActionResults>(
      0xd2654fcf2a7002cbull, 1, sizeHint);
}
template <typename AppObjectId>
::kj::Promise<void> SandstormApi<AppObjectId>::Server::deprecatedRegisterAction(DeprecatedRegisterActionContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/grain.capnp:SandstormApi", "deprecatedRegisterAction",
      0xd2654fcf2a7002cbull, 1);
}
template <typename AppObjectId>
::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::ShareCapParams, typename  ::sandstorm::SandstormApi<AppObjectId>::ShareCapResults>
SandstormApi<AppObjectId>::Client::shareCapRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::SandstormApi<AppObjectId>::ShareCapParams, typename  ::sandstorm::SandstormApi<AppObjectId>::ShareCapResults>(
      0xd2654fcf2a7002cbull, 2, sizeHint);
}
template <typename AppObjectId>
::kj::Promise<void> SandstormApi<AppObjectId>::Server::shareCap(ShareCapContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/grain.capnp:SandstormApi", "shareCap",
      0xd2654fcf2a7002cbull, 2);
}
template <typename AppObjectId>
::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::ShareViewParams, typename  ::sandstorm::SandstormApi<AppObjectId>::ShareViewResults>
SandstormApi<AppObjectId>::Client::shareViewRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::SandstormApi<AppObjectId>::ShareViewParams, typename  ::sandstorm::SandstormApi<AppObjectId>::ShareViewResults>(
      0xd2654fcf2a7002cbull, 3, sizeHint);
}
template <typename AppObjectId>
::kj::Promise<void> SandstormApi<AppObjectId>::Server::shareView(ShareViewContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/grain.capnp:SandstormApi", "shareView",
      0xd2654fcf2a7002cbull, 3);
}
template <typename AppObjectId>
::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::RestoreParams, typename  ::sandstorm::SandstormApi<AppObjectId>::RestoreResults>
SandstormApi<AppObjectId>::Client::restoreRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::SandstormApi<AppObjectId>::RestoreParams, typename  ::sandstorm::SandstormApi<AppObjectId>::RestoreResults>(
      0xd2654fcf2a7002cbull, 4, sizeHint);
}
template <typename AppObjectId>
::kj::Promise<void> SandstormApi<AppObjectId>::Server::restore(RestoreContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/grain.capnp:SandstormApi", "restore",
      0xd2654fcf2a7002cbull, 4);
}
template <typename AppObjectId>
::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::DropParams, typename  ::sandstorm::SandstormApi<AppObjectId>::DropResults>
SandstormApi<AppObjectId>::Client::dropRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::SandstormApi<AppObjectId>::DropParams, typename  ::sandstorm::SandstormApi<AppObjectId>::DropResults>(
      0xd2654fcf2a7002cbull, 5, sizeHint);
}
template <typename AppObjectId>
::kj::Promise<void> SandstormApi<AppObjectId>::Server::drop(DropContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/grain.capnp:SandstormApi", "drop",
      0xd2654fcf2a7002cbull, 5);
}
template <typename AppObjectId>
::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::DeletedParams, typename  ::sandstorm::SandstormApi<AppObjectId>::DeletedResults>
SandstormApi<AppObjectId>::Client::deletedRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::SandstormApi<AppObjectId>::DeletedParams, typename  ::sandstorm::SandstormApi<AppObjectId>::DeletedResults>(
      0xd2654fcf2a7002cbull, 6, sizeHint);
}
template <typename AppObjectId>
::kj::Promise<void> SandstormApi<AppObjectId>::Server::deleted(DeletedContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/grain.capnp:SandstormApi", "deleted",
      0xd2654fcf2a7002cbull, 6);
}
template <typename AppObjectId>
::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::StayAwakeParams, typename  ::sandstorm::SandstormApi<AppObjectId>::StayAwakeResults>
SandstormApi<AppObjectId>::Client::stayAwakeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::SandstormApi<AppObjectId>::StayAwakeParams, typename  ::sandstorm::SandstormApi<AppObjectId>::StayAwakeResults>(
      0xd2654fcf2a7002cbull, 7, sizeHint);
}
template <typename AppObjectId>
::kj::Promise<void> SandstormApi<AppObjectId>::Server::stayAwake(StayAwakeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/grain.capnp:SandstormApi", "stayAwake",
      0xd2654fcf2a7002cbull, 7);
}
template <typename AppObjectId>
::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::SaveParams, typename  ::sandstorm::SandstormApi<AppObjectId>::SaveResults>
SandstormApi<AppObjectId>::Client::saveRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::SandstormApi<AppObjectId>::SaveParams, typename  ::sandstorm::SandstormApi<AppObjectId>::SaveResults>(
      0xd2654fcf2a7002cbull, 8, sizeHint);
}
template <typename AppObjectId>
::kj::Promise<void> SandstormApi<AppObjectId>::Server::save(SaveContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/grain.capnp:SandstormApi", "save",
      0xd2654fcf2a7002cbull, 8);
}
template <typename AppObjectId>
::capnp::Request<typename  ::sandstorm::SandstormApi<AppObjectId>::BackgroundActivityParams, typename  ::sandstorm::SandstormApi<AppObjectId>::BackgroundActivityResults>
SandstormApi<AppObjectId>::Client::backgroundActivityRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::SandstormApi<AppObjectId>::BackgroundActivityParams, typename  ::sandstorm::SandstormApi<AppObjectId>::BackgroundActivityResults>(
      0xd2654fcf2a7002cbull, 9, sizeHint);
}
template <typename AppObjectId>
::kj::Promise<void> SandstormApi<AppObjectId>::Server::backgroundActivity(BackgroundActivityContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/grain.capnp:SandstormApi", "backgroundActivity",
      0xd2654fcf2a7002cbull, 9);
}
template <typename AppObjectId>
::kj::Promise<void> SandstormApi<AppObjectId>::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd2654fcf2a7002cbull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/grain.capnp:SandstormApi", interfaceId);
  }
}
template <typename AppObjectId>
::kj::Promise<void> SandstormApi<AppObjectId>::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return deprecatedPublish(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedPublishParams, typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedPublishResults>(context));
    case 1:
      return deprecatedRegisterAction(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedRegisterActionParams, typename  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedRegisterActionResults>(context));
    case 2:
      return shareCap(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::SandstormApi<AppObjectId>::ShareCapParams, typename  ::sandstorm::SandstormApi<AppObjectId>::ShareCapResults>(context));
    case 3:
      return shareView(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::SandstormApi<AppObjectId>::ShareViewParams, typename  ::sandstorm::SandstormApi<AppObjectId>::ShareViewResults>(context));
    case 4:
      return restore(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::SandstormApi<AppObjectId>::RestoreParams, typename  ::sandstorm::SandstormApi<AppObjectId>::RestoreResults>(context));
    case 5:
      return drop(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::SandstormApi<AppObjectId>::DropParams, typename  ::sandstorm::SandstormApi<AppObjectId>::DropResults>(context));
    case 6:
      return deleted(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::SandstormApi<AppObjectId>::DeletedParams, typename  ::sandstorm::SandstormApi<AppObjectId>::DeletedResults>(context));
    case 7:
      return stayAwake(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::SandstormApi<AppObjectId>::StayAwakeParams, typename  ::sandstorm::SandstormApi<AppObjectId>::StayAwakeResults>(context));
    case 8:
      return save(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::SandstormApi<AppObjectId>::SaveParams, typename  ::sandstorm::SandstormApi<AppObjectId>::SaveResults>(context));
    case 9:
      return backgroundActivity(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::SandstormApi<AppObjectId>::BackgroundActivityParams, typename  ::sandstorm::SandstormApi<AppObjectId>::BackgroundActivityResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/grain.capnp:SandstormApi",
          0xd2654fcf2a7002cbull, methodId);
  }
}
#endif  // !CAPNP_LITE

// SandstormApi<AppObjectId>
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind SandstormApi<AppObjectId>::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* SandstormApi<AppObjectId>::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* SandstormApi<AppObjectId>::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope SandstormApi<AppObjectId>::_capnpPrivate::brandScopes[] = {
  { 0xd2654fcf2a7002cb, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding SandstormApi<AppObjectId>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Dependency SandstormApi<AppObjectId>::_capnpPrivate::brandDependencies[] = {
  { 33554432,  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedPublishParams::_capnpPrivate::brand },
  { 33554433,  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedRegisterActionParams::_capnpPrivate::brand },
  { 33554434,  ::sandstorm::SandstormApi<AppObjectId>::ShareCapParams::_capnpPrivate::brand },
  { 33554435,  ::sandstorm::SandstormApi<AppObjectId>::ShareViewParams::_capnpPrivate::brand },
  { 33554436,  ::sandstorm::SandstormApi<AppObjectId>::RestoreParams::_capnpPrivate::brand },
  { 33554437,  ::sandstorm::SandstormApi<AppObjectId>::DropParams::_capnpPrivate::brand },
  { 33554438,  ::sandstorm::SandstormApi<AppObjectId>::DeletedParams::_capnpPrivate::brand },
  { 33554439,  ::sandstorm::SandstormApi<AppObjectId>::StayAwakeParams::_capnpPrivate::brand },
  { 33554440,  ::sandstorm::SandstormApi<AppObjectId>::SaveParams::_capnpPrivate::brand },
  { 33554441,  ::sandstorm::SandstormApi<AppObjectId>::BackgroundActivityParams::_capnpPrivate::brand },
  { 50331648,  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedPublishResults::_capnpPrivate::brand },
  { 50331649,  ::sandstorm::SandstormApi<AppObjectId>::DeprecatedRegisterActionResults::_capnpPrivate::brand },
  { 50331650,  ::sandstorm::SandstormApi<AppObjectId>::ShareCapResults::_capnpPrivate::brand },
  { 50331651,  ::sandstorm::SandstormApi<AppObjectId>::ShareViewResults::_capnpPrivate::brand },
  { 50331652,  ::sandstorm::SandstormApi<AppObjectId>::RestoreResults::_capnpPrivate::brand },
  { 50331653,  ::sandstorm::SandstormApi<AppObjectId>::DropResults::_capnpPrivate::brand },
  { 50331654,  ::sandstorm::SandstormApi<AppObjectId>::DeletedResults::_capnpPrivate::brand },
  { 50331655,  ::sandstorm::SandstormApi<AppObjectId>::StayAwakeResults::_capnpPrivate::brand },
  { 50331656,  ::sandstorm::SandstormApi<AppObjectId>::SaveResults::_capnpPrivate::brand },
  { 50331657,  ::sandstorm::SandstormApi<AppObjectId>::BackgroundActivityResults::_capnpPrivate::brand },
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema SandstormApi<AppObjectId>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_d2654fcf2a7002cb, brandScopes, brandDependencies,
  sizeof(brandScopes) / sizeof(brandScopes[0]), sizeof(brandDependencies) / sizeof(brandDependencies[0]), nullptr
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
inline UiView::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline UiView::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline UiView::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline UiView::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline UiView::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::UiView::Client& UiView::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::UiView::Client& UiView::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool UiView::ViewInfo::Reader::hasPermissions() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool UiView::ViewInfo::Builder::hasPermissions() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::PermissionDef>::Reader UiView::ViewInfo::Reader::getPermissions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PermissionDef>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::PermissionDef>::Builder UiView::ViewInfo::Builder::getPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PermissionDef>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void UiView::ViewInfo::Builder::setPermissions( ::capnp::List< ::sandstorm::PermissionDef>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PermissionDef>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::PermissionDef>::Builder UiView::ViewInfo::Builder::initPermissions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PermissionDef>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void UiView::ViewInfo::Builder::adoptPermissions(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::PermissionDef>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PermissionDef>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::PermissionDef>> UiView::ViewInfo::Builder::disownPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PermissionDef>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool UiView::ViewInfo::Reader::hasRoles() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool UiView::ViewInfo::Builder::hasRoles() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::RoleDef>::Reader UiView::ViewInfo::Reader::getRoles() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::RoleDef>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::RoleDef>::Builder UiView::ViewInfo::Builder::getRoles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::RoleDef>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void UiView::ViewInfo::Builder::setRoles( ::capnp::List< ::sandstorm::RoleDef>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::RoleDef>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::RoleDef>::Builder UiView::ViewInfo::Builder::initRoles(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::RoleDef>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void UiView::ViewInfo::Builder::adoptRoles(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::RoleDef>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::RoleDef>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::RoleDef>> UiView::ViewInfo::Builder::disownRoles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::RoleDef>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool UiView::ViewInfo::Reader::hasDeniedPermissions() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool UiView::ViewInfo::Builder::hasDeniedPermissions() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader UiView::ViewInfo::Reader::getDeniedPermissions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder UiView::ViewInfo::Builder::getDeniedPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void UiView::ViewInfo::Builder::setDeniedPermissions( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void UiView::ViewInfo::Builder::setDeniedPermissions(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder UiView::ViewInfo::Builder::initDeniedPermissions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void UiView::ViewInfo::Builder::adoptDeniedPermissions(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> UiView::ViewInfo::Builder::disownDeniedPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool UiView::ViewInfo::Reader::hasMatchRequests() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool UiView::ViewInfo::Builder::hasMatchRequests() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader UiView::ViewInfo::Reader::getMatchRequests() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder UiView::ViewInfo::Builder::getMatchRequests() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void UiView::ViewInfo::Builder::setMatchRequests( ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder UiView::ViewInfo::Builder::initMatchRequests(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void UiView::ViewInfo::Builder::adoptMatchRequests(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>> UiView::ViewInfo::Builder::disownMatchRequests() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool UiView::ViewInfo::Reader::hasMatchOffers() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool UiView::ViewInfo::Builder::hasMatchOffers() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader UiView::ViewInfo::Reader::getMatchOffers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder UiView::ViewInfo::Builder::getMatchOffers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void UiView::ViewInfo::Builder::setMatchOffers( ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder UiView::ViewInfo::Builder::initMatchOffers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void UiView::ViewInfo::Builder::adoptMatchOffers(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>> UiView::ViewInfo::Builder::disownMatchOffers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool UiView::ViewInfo::Reader::hasAppTitle() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool UiView::ViewInfo::Builder::hasAppTitle() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader UiView::ViewInfo::Reader::getAppTitle() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder UiView::ViewInfo::Builder::getAppTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline UiView::ViewInfo::Pipeline::getAppTitle() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void UiView::ViewInfo::Builder::setAppTitle( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder UiView::ViewInfo::Builder::initAppTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void UiView::ViewInfo::Builder::adoptAppTitle(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> UiView::ViewInfo::Builder::disownAppTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool UiView::ViewInfo::Reader::hasGrainIcon() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool UiView::ViewInfo::Builder::hasGrainIcon() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::StaticAsset::Client UiView::ViewInfo::Reader::getGrainIcon() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::StaticAsset>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::sandstorm::StaticAsset::Client UiView::ViewInfo::Builder::getGrainIcon() {
  return ::capnp::_::PointerHelpers< ::sandstorm::StaticAsset>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::sandstorm::StaticAsset::Client UiView::ViewInfo::Pipeline::getGrainIcon() {
  return  ::sandstorm::StaticAsset::Client(_typeless.getPointerField(6).asCap());
}
inline void UiView::ViewInfo::Builder::setGrainIcon( ::sandstorm::StaticAsset::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::StaticAsset>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(cap));
}
inline void UiView::ViewInfo::Builder::setGrainIcon( ::sandstorm::StaticAsset::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::StaticAsset>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), cap);
}
inline void UiView::ViewInfo::Builder::adoptGrainIcon(
    ::capnp::Orphan< ::sandstorm::StaticAsset>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::StaticAsset>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::StaticAsset> UiView::ViewInfo::Builder::disownGrainIcon() {
  return ::capnp::_::PointerHelpers< ::sandstorm::StaticAsset>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool UiView::ViewInfo::Reader::hasEventTypes() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool UiView::ViewInfo::Builder::hasEventTypes() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::ActivityTypeDef>::Reader UiView::ViewInfo::Reader::getEventTypes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::ActivityTypeDef>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::ActivityTypeDef>::Builder UiView::ViewInfo::Builder::getEventTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::ActivityTypeDef>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void UiView::ViewInfo::Builder::setEventTypes( ::capnp::List< ::sandstorm::ActivityTypeDef>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::ActivityTypeDef>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::ActivityTypeDef>::Builder UiView::ViewInfo::Builder::initEventTypes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::ActivityTypeDef>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void UiView::ViewInfo::Builder::adoptEventTypes(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::ActivityTypeDef>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::ActivityTypeDef>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::ActivityTypeDef>> UiView::ViewInfo::Builder::disownEventTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::ActivityTypeDef>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool UiView::PowerboxTag::Reader::hasTitle() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool UiView::PowerboxTag::Builder::hasTitle() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UiView::PowerboxTag::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UiView::PowerboxTag::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void UiView::PowerboxTag::Builder::setTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UiView::PowerboxTag::Builder::initTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void UiView::PowerboxTag::Builder::adoptTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UiView::PowerboxTag::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool UiView::NewSessionParams::Reader::hasUserInfo() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewSessionParams::Builder::hasUserInfo() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::UserInfo::Reader UiView::NewSessionParams::Reader::getUserInfo() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::UserInfo::Builder UiView::NewSessionParams::Builder::getUserInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::UserInfo::Pipeline UiView::NewSessionParams::Pipeline::getUserInfo() {
  return  ::sandstorm::UserInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UiView::NewSessionParams::Builder::setUserInfo( ::sandstorm::UserInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::UserInfo::Builder UiView::NewSessionParams::Builder::initUserInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void UiView::NewSessionParams::Builder::adoptUserInfo(
    ::capnp::Orphan< ::sandstorm::UserInfo>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::UserInfo> UiView::NewSessionParams::Builder::disownUserInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool UiView::NewSessionParams::Reader::hasContext() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewSessionParams::Builder::hasContext() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::SessionContext::Client UiView::NewSessionParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::SessionContext::Client UiView::NewSessionParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::SessionContext::Client UiView::NewSessionParams::Pipeline::getContext() {
  return  ::sandstorm::SessionContext::Client(_typeless.getPointerField(1).asCap());
}
inline void UiView::NewSessionParams::Builder::setContext( ::sandstorm::SessionContext::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(cap));
}
inline void UiView::NewSessionParams::Builder::setContext( ::sandstorm::SessionContext::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), cap);
}
inline void UiView::NewSessionParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::SessionContext>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::SessionContext> UiView::NewSessionParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline  ::uint64_t UiView::NewSessionParams::Reader::getSessionType() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t UiView::NewSessionParams::Builder::getSessionType() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void UiView::NewSessionParams::Builder::setSessionType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool UiView::NewSessionParams::Reader::hasSessionParams() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewSessionParams::Builder::hasSessionParams() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline ::capnp::AnyPointer::Reader UiView::NewSessionParams::Reader::getSessionParams() const {
  return ::capnp::AnyPointer::Reader(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder UiView::NewSessionParams::Builder::getSessionParams() {
  return ::capnp::AnyPointer::Builder(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder UiView::NewSessionParams::Builder::initSessionParams() {
  auto result = ::capnp::AnyPointer::Builder(
      _builder.getPointerField(2 * ::capnp::POINTERS));
  result.clear();
  return result;
}

inline bool UiView::NewSessionParams::Reader::hasTabId() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewSessionParams::Builder::hasTabId() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader UiView::NewSessionParams::Reader::getTabId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder UiView::NewSessionParams::Builder::getTabId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void UiView::NewSessionParams::Builder::setTabId( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder UiView::NewSessionParams::Builder::initTabId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void UiView::NewSessionParams::Builder::adoptTabId(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> UiView::NewSessionParams::Builder::disownTabId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool UiView::NewSessionResults::Reader::hasSession() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewSessionResults::Builder::hasSession() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::UiSession::Client UiView::NewSessionResults::Reader::getSession() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::UiSession::Client UiView::NewSessionResults::Builder::getSession() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::UiSession::Client UiView::NewSessionResults::Pipeline::getSession() {
  return  ::sandstorm::UiSession::Client(_typeless.getPointerField(0).asCap());
}
inline void UiView::NewSessionResults::Builder::setSession( ::sandstorm::UiSession::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void UiView::NewSessionResults::Builder::setSession( ::sandstorm::UiSession::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void UiView::NewSessionResults::Builder::adoptSession(
    ::capnp::Orphan< ::sandstorm::UiSession>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::UiSession> UiView::NewSessionResults::Builder::disownSession() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool UiView::NewRequestSessionParams::Reader::hasUserInfo() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewRequestSessionParams::Builder::hasUserInfo() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::UserInfo::Reader UiView::NewRequestSessionParams::Reader::getUserInfo() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::UserInfo::Builder UiView::NewRequestSessionParams::Builder::getUserInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::UserInfo::Pipeline UiView::NewRequestSessionParams::Pipeline::getUserInfo() {
  return  ::sandstorm::UserInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UiView::NewRequestSessionParams::Builder::setUserInfo( ::sandstorm::UserInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::UserInfo::Builder UiView::NewRequestSessionParams::Builder::initUserInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void UiView::NewRequestSessionParams::Builder::adoptUserInfo(
    ::capnp::Orphan< ::sandstorm::UserInfo>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::UserInfo> UiView::NewRequestSessionParams::Builder::disownUserInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool UiView::NewRequestSessionParams::Reader::hasContext() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewRequestSessionParams::Builder::hasContext() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::SessionContext::Client UiView::NewRequestSessionParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::SessionContext::Client UiView::NewRequestSessionParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::SessionContext::Client UiView::NewRequestSessionParams::Pipeline::getContext() {
  return  ::sandstorm::SessionContext::Client(_typeless.getPointerField(1).asCap());
}
inline void UiView::NewRequestSessionParams::Builder::setContext( ::sandstorm::SessionContext::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(cap));
}
inline void UiView::NewRequestSessionParams::Builder::setContext( ::sandstorm::SessionContext::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), cap);
}
inline void UiView::NewRequestSessionParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::SessionContext>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::SessionContext> UiView::NewRequestSessionParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline  ::uint64_t UiView::NewRequestSessionParams::Reader::getSessionType() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t UiView::NewRequestSessionParams::Builder::getSessionType() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void UiView::NewRequestSessionParams::Builder::setSessionType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool UiView::NewRequestSessionParams::Reader::hasSessionParams() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewRequestSessionParams::Builder::hasSessionParams() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline ::capnp::AnyPointer::Reader UiView::NewRequestSessionParams::Reader::getSessionParams() const {
  return ::capnp::AnyPointer::Reader(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder UiView::NewRequestSessionParams::Builder::getSessionParams() {
  return ::capnp::AnyPointer::Builder(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder UiView::NewRequestSessionParams::Builder::initSessionParams() {
  auto result = ::capnp::AnyPointer::Builder(
      _builder.getPointerField(2 * ::capnp::POINTERS));
  result.clear();
  return result;
}

inline bool UiView::NewRequestSessionParams::Reader::hasRequestInfo() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewRequestSessionParams::Builder::hasRequestInfo() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader UiView::NewRequestSessionParams::Reader::getRequestInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder UiView::NewRequestSessionParams::Builder::getRequestInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void UiView::NewRequestSessionParams::Builder::setRequestInfo( ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder UiView::NewRequestSessionParams::Builder::initRequestInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void UiView::NewRequestSessionParams::Builder::adoptRequestInfo(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>> UiView::NewRequestSessionParams::Builder::disownRequestInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool UiView::NewRequestSessionParams::Reader::hasTabId() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewRequestSessionParams::Builder::hasTabId() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader UiView::NewRequestSessionParams::Reader::getTabId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder UiView::NewRequestSessionParams::Builder::getTabId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void UiView::NewRequestSessionParams::Builder::setTabId( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder UiView::NewRequestSessionParams::Builder::initTabId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void UiView::NewRequestSessionParams::Builder::adoptTabId(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> UiView::NewRequestSessionParams::Builder::disownTabId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool UiView::NewRequestSessionResults::Reader::hasSession() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewRequestSessionResults::Builder::hasSession() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::UiSession::Client UiView::NewRequestSessionResults::Reader::getSession() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::UiSession::Client UiView::NewRequestSessionResults::Builder::getSession() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::UiSession::Client UiView::NewRequestSessionResults::Pipeline::getSession() {
  return  ::sandstorm::UiSession::Client(_typeless.getPointerField(0).asCap());
}
inline void UiView::NewRequestSessionResults::Builder::setSession( ::sandstorm::UiSession::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void UiView::NewRequestSessionResults::Builder::setSession( ::sandstorm::UiSession::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void UiView::NewRequestSessionResults::Builder::adoptSession(
    ::capnp::Orphan< ::sandstorm::UiSession>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::UiSession> UiView::NewRequestSessionResults::Builder::disownSession() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool UiView::NewOfferSessionParams::Reader::hasUserInfo() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewOfferSessionParams::Builder::hasUserInfo() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::UserInfo::Reader UiView::NewOfferSessionParams::Reader::getUserInfo() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::UserInfo::Builder UiView::NewOfferSessionParams::Builder::getUserInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::UserInfo::Pipeline UiView::NewOfferSessionParams::Pipeline::getUserInfo() {
  return  ::sandstorm::UserInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UiView::NewOfferSessionParams::Builder::setUserInfo( ::sandstorm::UserInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::UserInfo::Builder UiView::NewOfferSessionParams::Builder::initUserInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void UiView::NewOfferSessionParams::Builder::adoptUserInfo(
    ::capnp::Orphan< ::sandstorm::UserInfo>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::UserInfo> UiView::NewOfferSessionParams::Builder::disownUserInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool UiView::NewOfferSessionParams::Reader::hasContext() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewOfferSessionParams::Builder::hasContext() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::SessionContext::Client UiView::NewOfferSessionParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::SessionContext::Client UiView::NewOfferSessionParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::SessionContext::Client UiView::NewOfferSessionParams::Pipeline::getContext() {
  return  ::sandstorm::SessionContext::Client(_typeless.getPointerField(1).asCap());
}
inline void UiView::NewOfferSessionParams::Builder::setContext( ::sandstorm::SessionContext::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(cap));
}
inline void UiView::NewOfferSessionParams::Builder::setContext( ::sandstorm::SessionContext::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), cap);
}
inline void UiView::NewOfferSessionParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::SessionContext>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::SessionContext> UiView::NewOfferSessionParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::SessionContext>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline  ::uint64_t UiView::NewOfferSessionParams::Reader::getSessionType() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t UiView::NewOfferSessionParams::Builder::getSessionType() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void UiView::NewOfferSessionParams::Builder::setSessionType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool UiView::NewOfferSessionParams::Reader::hasSessionParams() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewOfferSessionParams::Builder::hasSessionParams() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline ::capnp::AnyPointer::Reader UiView::NewOfferSessionParams::Reader::getSessionParams() const {
  return ::capnp::AnyPointer::Reader(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder UiView::NewOfferSessionParams::Builder::getSessionParams() {
  return ::capnp::AnyPointer::Builder(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder UiView::NewOfferSessionParams::Builder::initSessionParams() {
  auto result = ::capnp::AnyPointer::Builder(
      _builder.getPointerField(2 * ::capnp::POINTERS));
  result.clear();
  return result;
}

inline bool UiView::NewOfferSessionParams::Reader::hasOffer() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewOfferSessionParams::Builder::hasOffer() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::Capability::Client UiView::NewOfferSessionParams::Reader::getOffer() const {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client UiView::NewOfferSessionParams::Builder::getOffer() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client UiView::NewOfferSessionParams::Pipeline::getOffer() {
  return  ::capnp::Capability::Client(_typeless.getPointerField(3).asCap());
}
inline void UiView::NewOfferSessionParams::Builder::setOffer( ::capnp::Capability::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(cap));
}
inline void UiView::NewOfferSessionParams::Builder::setOffer( ::capnp::Capability::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), cap);
}
inline void UiView::NewOfferSessionParams::Builder::adoptOffer(
    ::capnp::Orphan< ::capnp::Capability>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Capability> UiView::NewOfferSessionParams::Builder::disownOffer() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool UiView::NewOfferSessionParams::Reader::hasDescriptor() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewOfferSessionParams::Builder::hasDescriptor() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::PowerboxDescriptor::Reader UiView::NewOfferSessionParams::Reader::getDescriptor() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::sandstorm::PowerboxDescriptor::Builder UiView::NewOfferSessionParams::Builder::getDescriptor() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::PowerboxDescriptor::Pipeline UiView::NewOfferSessionParams::Pipeline::getDescriptor() {
  return  ::sandstorm::PowerboxDescriptor::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void UiView::NewOfferSessionParams::Builder::setDescriptor( ::sandstorm::PowerboxDescriptor::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::PowerboxDescriptor::Builder UiView::NewOfferSessionParams::Builder::initDescriptor() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void UiView::NewOfferSessionParams::Builder::adoptDescriptor(
    ::capnp::Orphan< ::sandstorm::PowerboxDescriptor>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::PowerboxDescriptor> UiView::NewOfferSessionParams::Builder::disownDescriptor() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool UiView::NewOfferSessionParams::Reader::hasTabId() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewOfferSessionParams::Builder::hasTabId() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader UiView::NewOfferSessionParams::Reader::getTabId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder UiView::NewOfferSessionParams::Builder::getTabId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void UiView::NewOfferSessionParams::Builder::setTabId( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder UiView::NewOfferSessionParams::Builder::initTabId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void UiView::NewOfferSessionParams::Builder::adoptTabId(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> UiView::NewOfferSessionParams::Builder::disownTabId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool UiView::NewOfferSessionResults::Reader::hasSession() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool UiView::NewOfferSessionResults::Builder::hasSession() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::UiSession::Client UiView::NewOfferSessionResults::Reader::getSession() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::UiSession::Client UiView::NewOfferSessionResults::Builder::getSession() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::UiSession::Client UiView::NewOfferSessionResults::Pipeline::getSession() {
  return  ::sandstorm::UiSession::Client(_typeless.getPointerField(0).asCap());
}
inline void UiView::NewOfferSessionResults::Builder::setSession( ::sandstorm::UiSession::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void UiView::NewOfferSessionResults::Builder::setSession( ::sandstorm::UiSession::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void UiView::NewOfferSessionResults::Builder::adoptSession(
    ::capnp::Orphan< ::sandstorm::UiSession>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::UiSession> UiView::NewOfferSessionResults::Builder::disownSession() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiSession>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
inline UiSession::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline UiSession::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline UiSession::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline UiSession::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline UiSession::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::UiSession::Client& UiSession::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::UiSession::Client& UiSession::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
#if !CAPNP_LITE
inline SessionContext::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline SessionContext::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline SessionContext::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline SessionContext::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline SessionContext::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::SessionContext::Client& SessionContext::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::SessionContext::Client& SessionContext::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool SessionContext::GetSharedPermissionsResults::Reader::hasVar() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::GetSharedPermissionsResults::Builder::hasVar() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Assignable< ::capnp::List<bool>>::Getter::Client SessionContext::GetSharedPermissionsResults::Reader::getVar() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List<bool>>::Getter>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Assignable< ::capnp::List<bool>>::Getter::Client SessionContext::GetSharedPermissionsResults::Builder::getVar() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List<bool>>::Getter>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Assignable< ::capnp::List<bool>>::Getter::Client SessionContext::GetSharedPermissionsResults::Pipeline::getVar() {
  return  ::sandstorm::Assignable< ::capnp::List<bool>>::Getter::Client(_typeless.getPointerField(0).asCap());
}
inline void SessionContext::GetSharedPermissionsResults::Builder::setVar( ::sandstorm::Assignable< ::capnp::List<bool>>::Getter::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List<bool>>::Getter>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SessionContext::GetSharedPermissionsResults::Builder::setVar( ::sandstorm::Assignable< ::capnp::List<bool>>::Getter::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List<bool>>::Getter>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SessionContext::GetSharedPermissionsResults::Builder::adoptVar(
    ::capnp::Orphan< ::sandstorm::Assignable< ::capnp::List<bool>>::Getter>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List<bool>>::Getter>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Assignable< ::capnp::List<bool>>::Getter> SessionContext::GetSharedPermissionsResults::Builder::disownVar() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::capnp::List<bool>>::Getter>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool SessionContext::TieToUserParams::Reader::hasCap() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::TieToUserParams::Builder::hasCap() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::Capability::Client SessionContext::TieToUserParams::Reader::getCap() const {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client SessionContext::TieToUserParams::Builder::getCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client SessionContext::TieToUserParams::Pipeline::getCap() {
  return  ::capnp::Capability::Client(_typeless.getPointerField(0).asCap());
}
inline void SessionContext::TieToUserParams::Builder::setCap( ::capnp::Capability::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SessionContext::TieToUserParams::Builder::setCap( ::capnp::Capability::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SessionContext::TieToUserParams::Builder::adoptCap(
    ::capnp::Orphan< ::capnp::Capability>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Capability> SessionContext::TieToUserParams::Builder::disownCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool SessionContext::TieToUserParams::Reader::hasRequiredPermissions() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::TieToUserParams::Builder::hasRequiredPermissions() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader SessionContext::TieToUserParams::Reader::getRequiredPermissions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder SessionContext::TieToUserParams::Builder::getRequiredPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void SessionContext::TieToUserParams::Builder::setRequiredPermissions( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void SessionContext::TieToUserParams::Builder::setRequiredPermissions(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder SessionContext::TieToUserParams::Builder::initRequiredPermissions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void SessionContext::TieToUserParams::Builder::adoptRequiredPermissions(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> SessionContext::TieToUserParams::Builder::disownRequiredPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool SessionContext::TieToUserParams::Reader::hasDisplayInfo() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::TieToUserParams::Builder::hasDisplayInfo() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::PowerboxDisplayInfo::Reader SessionContext::TieToUserParams::Reader::getDisplayInfo() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::PowerboxDisplayInfo::Builder SessionContext::TieToUserParams::Builder::getDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::PowerboxDisplayInfo::Pipeline SessionContext::TieToUserParams::Pipeline::getDisplayInfo() {
  return  ::sandstorm::PowerboxDisplayInfo::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void SessionContext::TieToUserParams::Builder::setDisplayInfo( ::sandstorm::PowerboxDisplayInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::PowerboxDisplayInfo::Builder SessionContext::TieToUserParams::Builder::initDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void SessionContext::TieToUserParams::Builder::adoptDisplayInfo(
    ::capnp::Orphan< ::sandstorm::PowerboxDisplayInfo>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::PowerboxDisplayInfo> SessionContext::TieToUserParams::Builder::disownDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool SessionContext::TieToUserResults::Reader::hasTiedCap() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::TieToUserResults::Builder::hasTiedCap() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::Capability::Client SessionContext::TieToUserResults::Reader::getTiedCap() const {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client SessionContext::TieToUserResults::Builder::getTiedCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client SessionContext::TieToUserResults::Pipeline::getTiedCap() {
  return  ::capnp::Capability::Client(_typeless.getPointerField(0).asCap());
}
inline void SessionContext::TieToUserResults::Builder::setTiedCap( ::capnp::Capability::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SessionContext::TieToUserResults::Builder::setTiedCap( ::capnp::Capability::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SessionContext::TieToUserResults::Builder::adoptTiedCap(
    ::capnp::Orphan< ::capnp::Capability>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Capability> SessionContext::TieToUserResults::Builder::disownTiedCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool SessionContext::OfferParams::Reader::hasCap() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::OfferParams::Builder::hasCap() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::Capability::Client SessionContext::OfferParams::Reader::getCap() const {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client SessionContext::OfferParams::Builder::getCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client SessionContext::OfferParams::Pipeline::getCap() {
  return  ::capnp::Capability::Client(_typeless.getPointerField(0).asCap());
}
inline void SessionContext::OfferParams::Builder::setCap( ::capnp::Capability::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SessionContext::OfferParams::Builder::setCap( ::capnp::Capability::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SessionContext::OfferParams::Builder::adoptCap(
    ::capnp::Orphan< ::capnp::Capability>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Capability> SessionContext::OfferParams::Builder::disownCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool SessionContext::OfferParams::Reader::hasRequiredPermissions() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::OfferParams::Builder::hasRequiredPermissions() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader SessionContext::OfferParams::Reader::getRequiredPermissions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder SessionContext::OfferParams::Builder::getRequiredPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void SessionContext::OfferParams::Builder::setRequiredPermissions( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void SessionContext::OfferParams::Builder::setRequiredPermissions(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder SessionContext::OfferParams::Builder::initRequiredPermissions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void SessionContext::OfferParams::Builder::adoptRequiredPermissions(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> SessionContext::OfferParams::Builder::disownRequiredPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool SessionContext::OfferParams::Reader::hasDescriptor() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::OfferParams::Builder::hasDescriptor() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::PowerboxDescriptor::Reader SessionContext::OfferParams::Reader::getDescriptor() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::PowerboxDescriptor::Builder SessionContext::OfferParams::Builder::getDescriptor() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::PowerboxDescriptor::Pipeline SessionContext::OfferParams::Pipeline::getDescriptor() {
  return  ::sandstorm::PowerboxDescriptor::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void SessionContext::OfferParams::Builder::setDescriptor( ::sandstorm::PowerboxDescriptor::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::PowerboxDescriptor::Builder SessionContext::OfferParams::Builder::initDescriptor() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void SessionContext::OfferParams::Builder::adoptDescriptor(
    ::capnp::Orphan< ::sandstorm::PowerboxDescriptor>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::PowerboxDescriptor> SessionContext::OfferParams::Builder::disownDescriptor() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool SessionContext::OfferParams::Reader::hasDisplayInfo() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::OfferParams::Builder::hasDisplayInfo() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::PowerboxDisplayInfo::Reader SessionContext::OfferParams::Reader::getDisplayInfo() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::sandstorm::PowerboxDisplayInfo::Builder SessionContext::OfferParams::Builder::getDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::PowerboxDisplayInfo::Pipeline SessionContext::OfferParams::Pipeline::getDisplayInfo() {
  return  ::sandstorm::PowerboxDisplayInfo::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void SessionContext::OfferParams::Builder::setDisplayInfo( ::sandstorm::PowerboxDisplayInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::PowerboxDisplayInfo::Builder SessionContext::OfferParams::Builder::initDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void SessionContext::OfferParams::Builder::adoptDisplayInfo(
    ::capnp::Orphan< ::sandstorm::PowerboxDisplayInfo>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::PowerboxDisplayInfo> SessionContext::OfferParams::Builder::disownDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool SessionContext::RequestParams::Reader::hasQuery() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::RequestParams::Builder::hasQuery() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader SessionContext::RequestParams::Reader::getQuery() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder SessionContext::RequestParams::Builder::getQuery() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SessionContext::RequestParams::Builder::setQuery( ::capnp::List< ::sandstorm::PowerboxDescriptor>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::PowerboxDescriptor>::Builder SessionContext::RequestParams::Builder::initQuery(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SessionContext::RequestParams::Builder::adoptQuery(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::PowerboxDescriptor>> SessionContext::RequestParams::Builder::disownQuery() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::PowerboxDescriptor>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SessionContext::RequestParams::Reader::hasRequiredPermissions() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::RequestParams::Builder::hasRequiredPermissions() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader SessionContext::RequestParams::Reader::getRequiredPermissions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder SessionContext::RequestParams::Builder::getRequiredPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void SessionContext::RequestParams::Builder::setRequiredPermissions( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void SessionContext::RequestParams::Builder::setRequiredPermissions(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder SessionContext::RequestParams::Builder::initRequiredPermissions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void SessionContext::RequestParams::Builder::adoptRequiredPermissions(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> SessionContext::RequestParams::Builder::disownRequiredPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool SessionContext::RequestResults::Reader::hasCap() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::RequestResults::Builder::hasCap() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::Capability::Client SessionContext::RequestResults::Reader::getCap() const {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client SessionContext::RequestResults::Builder::getCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client SessionContext::RequestResults::Pipeline::getCap() {
  return  ::capnp::Capability::Client(_typeless.getPointerField(0).asCap());
}
inline void SessionContext::RequestResults::Builder::setCap( ::capnp::Capability::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SessionContext::RequestResults::Builder::setCap( ::capnp::Capability::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SessionContext::RequestResults::Builder::adoptCap(
    ::capnp::Orphan< ::capnp::Capability>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Capability> SessionContext::RequestResults::Builder::disownCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool SessionContext::RequestResults::Reader::hasDescriptor() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::RequestResults::Builder::hasDescriptor() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::PowerboxDescriptor::Reader SessionContext::RequestResults::Reader::getDescriptor() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::PowerboxDescriptor::Builder SessionContext::RequestResults::Builder::getDescriptor() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::PowerboxDescriptor::Pipeline SessionContext::RequestResults::Pipeline::getDescriptor() {
  return  ::sandstorm::PowerboxDescriptor::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void SessionContext::RequestResults::Builder::setDescriptor( ::sandstorm::PowerboxDescriptor::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::PowerboxDescriptor::Builder SessionContext::RequestResults::Builder::initDescriptor() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void SessionContext::RequestResults::Builder::adoptDescriptor(
    ::capnp::Orphan< ::sandstorm::PowerboxDescriptor>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::PowerboxDescriptor> SessionContext::RequestResults::Builder::disownDescriptor() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool SessionContext::FulfillRequestParams::Reader::hasCap() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::FulfillRequestParams::Builder::hasCap() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::Capability::Client SessionContext::FulfillRequestParams::Reader::getCap() const {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client SessionContext::FulfillRequestParams::Builder::getCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client SessionContext::FulfillRequestParams::Pipeline::getCap() {
  return  ::capnp::Capability::Client(_typeless.getPointerField(0).asCap());
}
inline void SessionContext::FulfillRequestParams::Builder::setCap( ::capnp::Capability::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SessionContext::FulfillRequestParams::Builder::setCap( ::capnp::Capability::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SessionContext::FulfillRequestParams::Builder::adoptCap(
    ::capnp::Orphan< ::capnp::Capability>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Capability> SessionContext::FulfillRequestParams::Builder::disownCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool SessionContext::FulfillRequestParams::Reader::hasRequiredPermissions() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::FulfillRequestParams::Builder::hasRequiredPermissions() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader SessionContext::FulfillRequestParams::Reader::getRequiredPermissions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder SessionContext::FulfillRequestParams::Builder::getRequiredPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void SessionContext::FulfillRequestParams::Builder::setRequiredPermissions( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void SessionContext::FulfillRequestParams::Builder::setRequiredPermissions(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder SessionContext::FulfillRequestParams::Builder::initRequiredPermissions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void SessionContext::FulfillRequestParams::Builder::adoptRequiredPermissions(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> SessionContext::FulfillRequestParams::Builder::disownRequiredPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool SessionContext::FulfillRequestParams::Reader::hasDescriptor() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::FulfillRequestParams::Builder::hasDescriptor() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::PowerboxDescriptor::Reader SessionContext::FulfillRequestParams::Reader::getDescriptor() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::PowerboxDescriptor::Builder SessionContext::FulfillRequestParams::Builder::getDescriptor() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::PowerboxDescriptor::Pipeline SessionContext::FulfillRequestParams::Pipeline::getDescriptor() {
  return  ::sandstorm::PowerboxDescriptor::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void SessionContext::FulfillRequestParams::Builder::setDescriptor( ::sandstorm::PowerboxDescriptor::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::PowerboxDescriptor::Builder SessionContext::FulfillRequestParams::Builder::initDescriptor() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void SessionContext::FulfillRequestParams::Builder::adoptDescriptor(
    ::capnp::Orphan< ::sandstorm::PowerboxDescriptor>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::PowerboxDescriptor> SessionContext::FulfillRequestParams::Builder::disownDescriptor() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDescriptor>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool SessionContext::FulfillRequestParams::Reader::hasDisplayInfo() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::FulfillRequestParams::Builder::hasDisplayInfo() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::PowerboxDisplayInfo::Reader SessionContext::FulfillRequestParams::Reader::getDisplayInfo() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::sandstorm::PowerboxDisplayInfo::Builder SessionContext::FulfillRequestParams::Builder::getDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::PowerboxDisplayInfo::Pipeline SessionContext::FulfillRequestParams::Pipeline::getDisplayInfo() {
  return  ::sandstorm::PowerboxDisplayInfo::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void SessionContext::FulfillRequestParams::Builder::setDisplayInfo( ::sandstorm::PowerboxDisplayInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::PowerboxDisplayInfo::Builder SessionContext::FulfillRequestParams::Builder::initDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void SessionContext::FulfillRequestParams::Builder::adoptDisplayInfo(
    ::capnp::Orphan< ::sandstorm::PowerboxDisplayInfo>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::PowerboxDisplayInfo> SessionContext::FulfillRequestParams::Builder::disownDisplayInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::PowerboxDisplayInfo>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool SessionContext::OpenViewParams::Reader::hasView() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::OpenViewParams::Builder::hasView() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::UiView::Client SessionContext::OpenViewParams::Reader::getView() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::UiView::Client SessionContext::OpenViewParams::Builder::getView() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::UiView::Client SessionContext::OpenViewParams::Pipeline::getView() {
  return  ::sandstorm::UiView::Client(_typeless.getPointerField(0).asCap());
}
inline void SessionContext::OpenViewParams::Builder::setView( ::sandstorm::UiView::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SessionContext::OpenViewParams::Builder::setView( ::sandstorm::UiView::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SessionContext::OpenViewParams::Builder::adoptView(
    ::capnp::Orphan< ::sandstorm::UiView>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::UiView> SessionContext::OpenViewParams::Builder::disownView() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool SessionContext::OpenViewParams::Reader::hasPath() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::OpenViewParams::Builder::hasPath() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SessionContext::OpenViewParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS),
        ::capnp::schemas::bp_f37f5e08534c68aa + 57);
}
inline  ::capnp::Text::Builder SessionContext::OpenViewParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS),
        ::capnp::schemas::bp_f37f5e08534c68aa + 57);
}
inline void SessionContext::OpenViewParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SessionContext::OpenViewParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void SessionContext::OpenViewParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SessionContext::OpenViewParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool SessionContext::OpenViewParams::Reader::getNewTab() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool SessionContext::OpenViewParams::Builder::getNewTab() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void SessionContext::OpenViewParams::Builder::setNewTab(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool SessionContext::ClaimRequestParams::Reader::hasRequestToken() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::ClaimRequestParams::Builder::hasRequestToken() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SessionContext::ClaimRequestParams::Reader::getRequestToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SessionContext::ClaimRequestParams::Builder::getRequestToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SessionContext::ClaimRequestParams::Builder::setRequestToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SessionContext::ClaimRequestParams::Builder::initRequestToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SessionContext::ClaimRequestParams::Builder::adoptRequestToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SessionContext::ClaimRequestParams::Builder::disownRequestToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SessionContext::ClaimRequestParams::Reader::hasRequiredPermissions() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::ClaimRequestParams::Builder::hasRequiredPermissions() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader SessionContext::ClaimRequestParams::Reader::getRequiredPermissions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder SessionContext::ClaimRequestParams::Builder::getRequiredPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void SessionContext::ClaimRequestParams::Builder::setRequiredPermissions( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void SessionContext::ClaimRequestParams::Builder::setRequiredPermissions(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder SessionContext::ClaimRequestParams::Builder::initRequiredPermissions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void SessionContext::ClaimRequestParams::Builder::adoptRequiredPermissions(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> SessionContext::ClaimRequestParams::Builder::disownRequiredPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool SessionContext::ClaimRequestResults::Reader::hasCap() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::ClaimRequestResults::Builder::hasCap() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::Capability::Client SessionContext::ClaimRequestResults::Reader::getCap() const {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client SessionContext::ClaimRequestResults::Builder::getCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client SessionContext::ClaimRequestResults::Pipeline::getCap() {
  return  ::capnp::Capability::Client(_typeless.getPointerField(0).asCap());
}
inline void SessionContext::ClaimRequestResults::Builder::setCap( ::capnp::Capability::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SessionContext::ClaimRequestResults::Builder::setCap( ::capnp::Capability::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SessionContext::ClaimRequestResults::Builder::adoptCap(
    ::capnp::Orphan< ::capnp::Capability>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Capability> SessionContext::ClaimRequestResults::Builder::disownCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool SessionContext::ActivityParams::Reader::hasEvent() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SessionContext::ActivityParams::Builder::hasEvent() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::ActivityEvent::Reader SessionContext::ActivityParams::Reader::getEvent() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::ActivityEvent::Builder SessionContext::ActivityParams::Builder::getEvent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::ActivityEvent::Pipeline SessionContext::ActivityParams::Pipeline::getEvent() {
  return  ::sandstorm::ActivityEvent::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SessionContext::ActivityParams::Builder::setEvent( ::sandstorm::ActivityEvent::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::ActivityEvent::Builder SessionContext::ActivityParams::Builder::initEvent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SessionContext::ActivityParams::Builder::adoptEvent(
    ::capnp::Orphan< ::sandstorm::ActivityEvent>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::ActivityEvent> SessionContext::ActivityParams::Builder::disownEvent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ActivityEvent>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool PermissionDef::Reader::hasTitle() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool PermissionDef::Builder::hasTitle() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader PermissionDef::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder PermissionDef::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline PermissionDef::Pipeline::getTitle() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PermissionDef::Builder::setTitle( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder PermissionDef::Builder::initTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void PermissionDef::Builder::adoptTitle(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> PermissionDef::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool PermissionDef::Reader::hasDescription() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool PermissionDef::Builder::hasDescription() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader PermissionDef::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder PermissionDef::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline PermissionDef::Pipeline::getDescription() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void PermissionDef::Builder::setDescription( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder PermissionDef::Builder::initDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void PermissionDef::Builder::adoptDescription(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> PermissionDef::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool PermissionDef::Reader::getObsolete() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool PermissionDef::Builder::getObsolete() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void PermissionDef::Builder::setObsolete(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool PermissionDef::Reader::hasName() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool PermissionDef::Builder::hasName() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PermissionDef::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PermissionDef::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void PermissionDef::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PermissionDef::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void PermissionDef::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PermissionDef::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool RoleDef::Reader::hasTitle() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RoleDef::Builder::hasTitle() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader RoleDef::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder RoleDef::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline RoleDef::Pipeline::getTitle() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RoleDef::Builder::setTitle( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder RoleDef::Builder::initTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RoleDef::Builder::adoptTitle(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> RoleDef::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool RoleDef::Reader::hasVerbPhrase() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool RoleDef::Builder::hasVerbPhrase() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader RoleDef::Reader::getVerbPhrase() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder RoleDef::Builder::getVerbPhrase() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline RoleDef::Pipeline::getVerbPhrase() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void RoleDef::Builder::setVerbPhrase( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder RoleDef::Builder::initVerbPhrase() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void RoleDef::Builder::adoptVerbPhrase(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> RoleDef::Builder::disownVerbPhrase() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool RoleDef::Reader::hasDescription() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool RoleDef::Builder::hasDescription() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::LocalizedText::Reader RoleDef::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::LocalizedText::Builder RoleDef::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::LocalizedText::Pipeline RoleDef::Pipeline::getDescription() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void RoleDef::Builder::setDescription( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::LocalizedText::Builder RoleDef::Builder::initDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void RoleDef::Builder::adoptDescription(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::LocalizedText> RoleDef::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool RoleDef::Reader::hasPermissions() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool RoleDef::Builder::hasPermissions() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader RoleDef::Reader::getPermissions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder RoleDef::Builder::getPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void RoleDef::Builder::setPermissions( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void RoleDef::Builder::setPermissions(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder RoleDef::Builder::initPermissions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void RoleDef::Builder::adoptPermissions(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> RoleDef::Builder::disownPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool RoleDef::Reader::getObsolete() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool RoleDef::Builder::getObsolete() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void RoleDef::Builder::setObsolete(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool RoleDef::Reader::getDefault() const {
  return _reader.getDataField<bool>(
      1 * ::capnp::ELEMENTS);
}

inline bool RoleDef::Builder::getDefault() {
  return _builder.getDataField<bool>(
      1 * ::capnp::ELEMENTS);
}
inline void RoleDef::Builder::setDefault(bool value) {
  _builder.setDataField<bool>(
      1 * ::capnp::ELEMENTS, value);
}

#if !CAPNP_LITE
inline SharingLink::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline SharingLink::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline SharingLink::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline SharingLink::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline SharingLink::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::SharingLink::Client& SharingLink::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::SharingLink::Client& SharingLink::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool SharingLink::GetPetnameResults::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SharingLink::GetPetnameResults::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Assignable< ::sandstorm::LocalizedText>::Client SharingLink::GetPetnameResults::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::sandstorm::LocalizedText>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Assignable< ::sandstorm::LocalizedText>::Client SharingLink::GetPetnameResults::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::sandstorm::LocalizedText>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Assignable< ::sandstorm::LocalizedText>::Client SharingLink::GetPetnameResults::Pipeline::getName() {
  return  ::sandstorm::Assignable< ::sandstorm::LocalizedText>::Client(_typeless.getPointerField(0).asCap());
}
inline void SharingLink::GetPetnameResults::Builder::setName( ::sandstorm::Assignable< ::sandstorm::LocalizedText>::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::sandstorm::LocalizedText>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void SharingLink::GetPetnameResults::Builder::setName( ::sandstorm::Assignable< ::sandstorm::LocalizedText>::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::sandstorm::LocalizedText>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void SharingLink::GetPetnameResults::Builder::adoptName(
    ::capnp::Orphan< ::sandstorm::Assignable< ::sandstorm::LocalizedText>>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::sandstorm::LocalizedText>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Assignable< ::sandstorm::LocalizedText>> SharingLink::GetPetnameResults::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::sandstorm::LocalizedText>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
inline ViewSharingLink::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline ViewSharingLink::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline ViewSharingLink::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline ViewSharingLink::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline ViewSharingLink::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::ViewSharingLink::Client& ViewSharingLink::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::ViewSharingLink::Client& ViewSharingLink::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline  ::sandstorm::ViewSharingLink::RoleAssignment::Which ViewSharingLink::RoleAssignment::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::ViewSharingLink::RoleAssignment::Which ViewSharingLink::RoleAssignment::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool ViewSharingLink::RoleAssignment::Reader::isNone() const {
  return which() == ViewSharingLink::RoleAssignment::NONE;
}
inline bool ViewSharingLink::RoleAssignment::Builder::isNone() {
  return which() == ViewSharingLink::RoleAssignment::NONE;
}
inline  ::capnp::Void ViewSharingLink::RoleAssignment::Reader::getNone() const {
  KJ_IREQUIRE((which() == ViewSharingLink::RoleAssignment::NONE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void ViewSharingLink::RoleAssignment::Builder::getNone() {
  KJ_IREQUIRE((which() == ViewSharingLink::RoleAssignment::NONE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void ViewSharingLink::RoleAssignment::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<ViewSharingLink::RoleAssignment::Which>(
      0 * ::capnp::ELEMENTS, ViewSharingLink::RoleAssignment::NONE);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ViewSharingLink::RoleAssignment::Reader::isAllAccess() const {
  return which() == ViewSharingLink::RoleAssignment::ALL_ACCESS;
}
inline bool ViewSharingLink::RoleAssignment::Builder::isAllAccess() {
  return which() == ViewSharingLink::RoleAssignment::ALL_ACCESS;
}
inline  ::capnp::Void ViewSharingLink::RoleAssignment::Reader::getAllAccess() const {
  KJ_IREQUIRE((which() == ViewSharingLink::RoleAssignment::ALL_ACCESS),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void ViewSharingLink::RoleAssignment::Builder::getAllAccess() {
  KJ_IREQUIRE((which() == ViewSharingLink::RoleAssignment::ALL_ACCESS),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void ViewSharingLink::RoleAssignment::Builder::setAllAccess( ::capnp::Void value) {
  _builder.setDataField<ViewSharingLink::RoleAssignment::Which>(
      0 * ::capnp::ELEMENTS, ViewSharingLink::RoleAssignment::ALL_ACCESS);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ViewSharingLink::RoleAssignment::Reader::isRoleId() const {
  return which() == ViewSharingLink::RoleAssignment::ROLE_ID;
}
inline bool ViewSharingLink::RoleAssignment::Builder::isRoleId() {
  return which() == ViewSharingLink::RoleAssignment::ROLE_ID;
}
inline  ::uint16_t ViewSharingLink::RoleAssignment::Reader::getRoleId() const {
  KJ_IREQUIRE((which() == ViewSharingLink::RoleAssignment::ROLE_ID),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint16_t ViewSharingLink::RoleAssignment::Builder::getRoleId() {
  KJ_IREQUIRE((which() == ViewSharingLink::RoleAssignment::ROLE_ID),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}
inline void ViewSharingLink::RoleAssignment::Builder::setRoleId( ::uint16_t value) {
  _builder.setDataField<ViewSharingLink::RoleAssignment::Which>(
      0 * ::capnp::ELEMENTS, ViewSharingLink::RoleAssignment::ROLE_ID);
  _builder.setDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool ViewSharingLink::RoleAssignment::Reader::hasAddPermissions() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ViewSharingLink::RoleAssignment::Builder::hasAddPermissions() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader ViewSharingLink::RoleAssignment::Reader::getAddPermissions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder ViewSharingLink::RoleAssignment::Builder::getAddPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ViewSharingLink::RoleAssignment::Builder::setAddPermissions( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void ViewSharingLink::RoleAssignment::Builder::setAddPermissions(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder ViewSharingLink::RoleAssignment::Builder::initAddPermissions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ViewSharingLink::RoleAssignment::Builder::adoptAddPermissions(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> ViewSharingLink::RoleAssignment::Builder::disownAddPermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ViewSharingLink::RoleAssignment::Reader::hasRemovePermissions() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ViewSharingLink::RoleAssignment::Builder::hasRemovePermissions() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader ViewSharingLink::RoleAssignment::Reader::getRemovePermissions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder ViewSharingLink::RoleAssignment::Builder::getRemovePermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ViewSharingLink::RoleAssignment::Builder::setRemovePermissions( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void ViewSharingLink::RoleAssignment::Builder::setRemovePermissions(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder ViewSharingLink::RoleAssignment::Builder::initRemovePermissions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void ViewSharingLink::RoleAssignment::Builder::adoptRemovePermissions(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> ViewSharingLink::RoleAssignment::Builder::disownRemovePermissions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ViewSharingLink::GetRoleAssignmentResults::Reader::hasVar() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ViewSharingLink::GetRoleAssignmentResults::Builder::hasVar() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>::Client ViewSharingLink::GetRoleAssignmentResults::Reader::getVar() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>::Client ViewSharingLink::GetRoleAssignmentResults::Builder::getVar() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>::Client ViewSharingLink::GetRoleAssignmentResults::Pipeline::getVar() {
  return  ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>::Client(_typeless.getPointerField(0).asCap());
}
inline void ViewSharingLink::GetRoleAssignmentResults::Builder::setVar( ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void ViewSharingLink::GetRoleAssignmentResults::Builder::setVar( ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void ViewSharingLink::GetRoleAssignmentResults::Builder::adoptVar(
    ::capnp::Orphan< ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>> ViewSharingLink::GetRoleAssignmentResults::Builder::disownVar() {
  return ::capnp::_::PointerHelpers< ::sandstorm::Assignable< ::sandstorm::ViewSharingLink::RoleAssignment>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool GrainInfo::Reader::hasAppId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool GrainInfo::Builder::hasAppId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GrainInfo::Reader::getAppId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GrainInfo::Builder::getAppId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void GrainInfo::Builder::setAppId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GrainInfo::Builder::initAppId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void GrainInfo::Builder::adoptAppId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GrainInfo::Builder::disownAppId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint32_t GrainInfo::Reader::getAppVersion() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t GrainInfo::Builder::getAppVersion() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void GrainInfo::Builder::setAppVersion( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool GrainInfo::Reader::hasTitle() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool GrainInfo::Builder::hasTitle() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GrainInfo::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GrainInfo::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void GrainInfo::Builder::setTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GrainInfo::Builder::initTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void GrainInfo::Builder::adoptTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GrainInfo::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

#if !CAPNP_LITE
template <typename AppObjectId>
inline AppPersistent<AppObjectId>::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
template <typename AppObjectId>
inline AppPersistent<AppObjectId>::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename AppObjectId>
template <typename _t, typename>
inline AppPersistent<AppObjectId>::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename AppObjectId>
template <typename _t, typename>
inline AppPersistent<AppObjectId>::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
template <typename AppObjectId>
inline AppPersistent<AppObjectId>::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
template <typename AppObjectId>
inline typename  ::sandstorm::AppPersistent<AppObjectId>::Client& AppPersistent<AppObjectId>::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
template <typename AppObjectId>
inline typename  ::sandstorm::AppPersistent<AppObjectId>::Client& AppPersistent<AppObjectId>::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
// AppPersistent<AppObjectId>::SaveParams
template <typename AppObjectId>
constexpr uint16_t AppPersistent<AppObjectId>::SaveParams::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t AppPersistent<AppObjectId>::SaveParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind AppPersistent<AppObjectId>::SaveParams::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* AppPersistent<AppObjectId>::SaveParams::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* AppPersistent<AppObjectId>::SaveParams::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope AppPersistent<AppObjectId>::SaveParams::_capnpPrivate::brandScopes[] = {
  { 0xaffa789add8747b8, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding AppPersistent<AppObjectId>::SaveParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema AppPersistent<AppObjectId>::SaveParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_f0136e14d8019d3c, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool AppPersistent<AppObjectId>::SaveResults::Reader::hasObjectId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool AppPersistent<AppObjectId>::SaveResults::Builder::hasObjectId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline  ::capnp::ReaderFor<AppObjectId> AppPersistent<AppObjectId>::SaveResults::Reader::getObjectId() const {
  return ::capnp::_::PointerHelpers<AppObjectId>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::BuilderFor<AppObjectId> AppPersistent<AppObjectId>::SaveResults::Builder::getObjectId() {
  return ::capnp::_::PointerHelpers<AppObjectId>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::capnp::PipelineFor<AppObjectId> AppPersistent<AppObjectId>::SaveResults::Pipeline::getObjectId() {
  return  ::capnp::PipelineFor<AppObjectId>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename AppObjectId>
inline void AppPersistent<AppObjectId>::SaveResults::Builder::setObjectId( ::capnp::ReaderFor<AppObjectId> value) {
  ::capnp::_::PointerHelpers<AppObjectId>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename AppObjectId>
inline  ::capnp::BuilderFor<AppObjectId> AppPersistent<AppObjectId>::SaveResults::Builder::initObjectId() {
  return ::capnp::_::PointerHelpers<AppObjectId>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::BuilderFor<AppObjectId> AppPersistent<AppObjectId>::SaveResults::Builder::initObjectId(unsigned int size) {
  return ::capnp::_::PointerHelpers<AppObjectId>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename AppObjectId>
inline void AppPersistent<AppObjectId>::SaveResults::Builder::adoptObjectId(
    ::capnp::Orphan<AppObjectId>&& value) {
  ::capnp::_::PointerHelpers<AppObjectId>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan<AppObjectId> AppPersistent<AppObjectId>::SaveResults::Builder::disownObjectId() {
  return ::capnp::_::PointerHelpers<AppObjectId>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

template <typename AppObjectId>
inline bool AppPersistent<AppObjectId>::SaveResults::Reader::hasLabel() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool AppPersistent<AppObjectId>::SaveResults::Builder::hasLabel() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline  ::sandstorm::LocalizedText::Reader AppPersistent<AppObjectId>::SaveResults::Reader::getLabel() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::sandstorm::LocalizedText::Builder AppPersistent<AppObjectId>::SaveResults::Builder::getLabel() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::sandstorm::LocalizedText::Pipeline AppPersistent<AppObjectId>::SaveResults::Pipeline::getLabel() {
  return  ::sandstorm::LocalizedText::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename AppObjectId>
inline void AppPersistent<AppObjectId>::SaveResults::Builder::setLabel( ::sandstorm::LocalizedText::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
template <typename AppObjectId>
inline  ::sandstorm::LocalizedText::Builder AppPersistent<AppObjectId>::SaveResults::Builder::initLabel() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline void AppPersistent<AppObjectId>::SaveResults::Builder::adoptLabel(
    ::capnp::Orphan< ::sandstorm::LocalizedText>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::sandstorm::LocalizedText> AppPersistent<AppObjectId>::SaveResults::Builder::disownLabel() {
  return ::capnp::_::PointerHelpers< ::sandstorm::LocalizedText>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

// AppPersistent<AppObjectId>::SaveResults
template <typename AppObjectId>
constexpr uint16_t AppPersistent<AppObjectId>::SaveResults::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t AppPersistent<AppObjectId>::SaveResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind AppPersistent<AppObjectId>::SaveResults::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* AppPersistent<AppObjectId>::SaveResults::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* AppPersistent<AppObjectId>::SaveResults::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope AppPersistent<AppObjectId>::SaveResults::_capnpPrivate::brandScopes[] = {
  { 0xaffa789add8747b8, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding AppPersistent<AppObjectId>::SaveResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema AppPersistent<AppObjectId>::SaveResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_ba36a34b4eeb483f, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
template <typename AppObjectId>
::capnp::Request<typename  ::sandstorm::AppPersistent<AppObjectId>::SaveParams, typename  ::sandstorm::AppPersistent<AppObjectId>::SaveResults>
AppPersistent<AppObjectId>::Client::saveRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::AppPersistent<AppObjectId>::SaveParams, typename  ::sandstorm::AppPersistent<AppObjectId>::SaveResults>(
      0xaffa789add8747b8ull, 0, sizeHint);
}
template <typename AppObjectId>
::kj::Promise<void> AppPersistent<AppObjectId>::Server::save(SaveContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/grain.capnp:AppPersistent", "save",
      0xaffa789add8747b8ull, 0);
}
template <typename AppObjectId>
::kj::Promise<void> AppPersistent<AppObjectId>::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xaffa789add8747b8ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/grain.capnp:AppPersistent", interfaceId);
  }
}
template <typename AppObjectId>
::kj::Promise<void> AppPersistent<AppObjectId>::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return save(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::AppPersistent<AppObjectId>::SaveParams, typename  ::sandstorm::AppPersistent<AppObjectId>::SaveResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/grain.capnp:AppPersistent",
          0xaffa789add8747b8ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// AppPersistent<AppObjectId>
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind AppPersistent<AppObjectId>::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* AppPersistent<AppObjectId>::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* AppPersistent<AppObjectId>::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope AppPersistent<AppObjectId>::_capnpPrivate::brandScopes[] = {
  { 0xaffa789add8747b8, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding AppPersistent<AppObjectId>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Dependency AppPersistent<AppObjectId>::_capnpPrivate::brandDependencies[] = {
  { 33554432,  ::sandstorm::AppPersistent<AppObjectId>::SaveParams::_capnpPrivate::brand },
  { 50331648,  ::sandstorm::AppPersistent<AppObjectId>::SaveResults::_capnpPrivate::brand },
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema AppPersistent<AppObjectId>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_affa789add8747b8, brandScopes, brandDependencies,
  sizeof(brandScopes) / sizeof(brandScopes[0]), sizeof(brandDependencies) / sizeof(brandDependencies[0]), nullptr
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
template <typename AppObjectId>
inline MainView<AppObjectId>::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
template <typename AppObjectId>
inline MainView<AppObjectId>::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename AppObjectId>
template <typename _t, typename>
inline MainView<AppObjectId>::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename AppObjectId>
template <typename _t, typename>
inline MainView<AppObjectId>::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
template <typename AppObjectId>
inline MainView<AppObjectId>::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
template <typename AppObjectId>
inline typename  ::sandstorm::MainView<AppObjectId>::Client& MainView<AppObjectId>::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
template <typename AppObjectId>
inline typename  ::sandstorm::MainView<AppObjectId>::Client& MainView<AppObjectId>::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
template <typename AppObjectId>
inline bool MainView<AppObjectId>::RestoreParams::Reader::hasObjectId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool MainView<AppObjectId>::RestoreParams::Builder::hasObjectId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline  ::capnp::ReaderFor<AppObjectId> MainView<AppObjectId>::RestoreParams::Reader::getObjectId() const {
  return ::capnp::_::PointerHelpers<AppObjectId>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::BuilderFor<AppObjectId> MainView<AppObjectId>::RestoreParams::Builder::getObjectId() {
  return ::capnp::_::PointerHelpers<AppObjectId>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::capnp::PipelineFor<AppObjectId> MainView<AppObjectId>::RestoreParams::Pipeline::getObjectId() {
  return  ::capnp::PipelineFor<AppObjectId>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename AppObjectId>
inline void MainView<AppObjectId>::RestoreParams::Builder::setObjectId( ::capnp::ReaderFor<AppObjectId> value) {
  ::capnp::_::PointerHelpers<AppObjectId>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename AppObjectId>
inline  ::capnp::BuilderFor<AppObjectId> MainView<AppObjectId>::RestoreParams::Builder::initObjectId() {
  return ::capnp::_::PointerHelpers<AppObjectId>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::BuilderFor<AppObjectId> MainView<AppObjectId>::RestoreParams::Builder::initObjectId(unsigned int size) {
  return ::capnp::_::PointerHelpers<AppObjectId>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename AppObjectId>
inline void MainView<AppObjectId>::RestoreParams::Builder::adoptObjectId(
    ::capnp::Orphan<AppObjectId>&& value) {
  ::capnp::_::PointerHelpers<AppObjectId>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan<AppObjectId> MainView<AppObjectId>::RestoreParams::Builder::disownObjectId() {
  return ::capnp::_::PointerHelpers<AppObjectId>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

// MainView<AppObjectId>::RestoreParams
template <typename AppObjectId>
constexpr uint16_t MainView<AppObjectId>::RestoreParams::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t MainView<AppObjectId>::RestoreParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind MainView<AppObjectId>::RestoreParams::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* MainView<AppObjectId>::RestoreParams::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* MainView<AppObjectId>::RestoreParams::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope MainView<AppObjectId>::RestoreParams::_capnpPrivate::brandScopes[] = {
  { 0xc277e9822ae2c8fc, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding MainView<AppObjectId>::RestoreParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema MainView<AppObjectId>::RestoreParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_9ad62de07dfc6419, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool MainView<AppObjectId>::RestoreResults::Reader::hasCap() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool MainView<AppObjectId>::RestoreResults::Builder::hasCap() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::capnp::Capability::Client MainView<AppObjectId>::RestoreResults::Reader::getCap() const {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::Capability::Client MainView<AppObjectId>::RestoreResults::Builder::getCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::Capability::Client MainView<AppObjectId>::RestoreResults::Pipeline::getCap() {
  return  ::capnp::Capability::Client(_typeless.getPointerField(0).asCap());
}
template <typename AppObjectId>
inline void MainView<AppObjectId>::RestoreResults::Builder::setCap( ::capnp::Capability::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
template <typename AppObjectId>
inline void MainView<AppObjectId>::RestoreResults::Builder::setCap( ::capnp::Capability::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
template <typename AppObjectId>
inline void MainView<AppObjectId>::RestoreResults::Builder::adoptCap(
    ::capnp::Orphan< ::capnp::Capability>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Capability>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan< ::capnp::Capability> MainView<AppObjectId>::RestoreResults::Builder::disownCap() {
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

// MainView<AppObjectId>::RestoreResults
template <typename AppObjectId>
constexpr uint16_t MainView<AppObjectId>::RestoreResults::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t MainView<AppObjectId>::RestoreResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind MainView<AppObjectId>::RestoreResults::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* MainView<AppObjectId>::RestoreResults::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* MainView<AppObjectId>::RestoreResults::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope MainView<AppObjectId>::RestoreResults::_capnpPrivate::brandScopes[] = {
  { 0xc277e9822ae2c8fc, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding MainView<AppObjectId>::RestoreResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema MainView<AppObjectId>::RestoreResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_99efcebf23bbae35, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename AppObjectId>
inline bool MainView<AppObjectId>::DropParams::Reader::hasObjectId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline bool MainView<AppObjectId>::DropParams::Builder::hasObjectId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename AppObjectId>
inline  ::capnp::ReaderFor<AppObjectId> MainView<AppObjectId>::DropParams::Reader::getObjectId() const {
  return ::capnp::_::PointerHelpers<AppObjectId>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::BuilderFor<AppObjectId> MainView<AppObjectId>::DropParams::Builder::getObjectId() {
  return ::capnp::_::PointerHelpers<AppObjectId>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename AppObjectId>
inline  ::capnp::PipelineFor<AppObjectId> MainView<AppObjectId>::DropParams::Pipeline::getObjectId() {
  return  ::capnp::PipelineFor<AppObjectId>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename AppObjectId>
inline void MainView<AppObjectId>::DropParams::Builder::setObjectId( ::capnp::ReaderFor<AppObjectId> value) {
  ::capnp::_::PointerHelpers<AppObjectId>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename AppObjectId>
inline  ::capnp::BuilderFor<AppObjectId> MainView<AppObjectId>::DropParams::Builder::initObjectId() {
  return ::capnp::_::PointerHelpers<AppObjectId>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename AppObjectId>
inline  ::capnp::BuilderFor<AppObjectId> MainView<AppObjectId>::DropParams::Builder::initObjectId(unsigned int size) {
  return ::capnp::_::PointerHelpers<AppObjectId>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename AppObjectId>
inline void MainView<AppObjectId>::DropParams::Builder::adoptObjectId(
    ::capnp::Orphan<AppObjectId>&& value) {
  ::capnp::_::PointerHelpers<AppObjectId>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename AppObjectId>
inline ::capnp::Orphan<AppObjectId> MainView<AppObjectId>::DropParams::Builder::disownObjectId() {
  return ::capnp::_::PointerHelpers<AppObjectId>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

// MainView<AppObjectId>::DropParams
template <typename AppObjectId>
constexpr uint16_t MainView<AppObjectId>::DropParams::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t MainView<AppObjectId>::DropParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind MainView<AppObjectId>::DropParams::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* MainView<AppObjectId>::DropParams::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* MainView<AppObjectId>::DropParams::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope MainView<AppObjectId>::DropParams::_capnpPrivate::brandScopes[] = {
  { 0xc277e9822ae2c8fc, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding MainView<AppObjectId>::DropParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema MainView<AppObjectId>::DropParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_8c519e0dedc17d73, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

// MainView<AppObjectId>::DropResults
template <typename AppObjectId>
constexpr uint16_t MainView<AppObjectId>::DropResults::_capnpPrivate::dataWordSize;
template <typename AppObjectId>
constexpr uint16_t MainView<AppObjectId>::DropResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind MainView<AppObjectId>::DropResults::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* MainView<AppObjectId>::DropResults::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* MainView<AppObjectId>::DropResults::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope MainView<AppObjectId>::DropResults::_capnpPrivate::brandScopes[] = {
  { 0xc277e9822ae2c8fc, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding MainView<AppObjectId>::DropResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema MainView<AppObjectId>::DropResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_9210d9e69d14fa35, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
template <typename AppObjectId>
::capnp::Request<typename  ::sandstorm::MainView<AppObjectId>::RestoreParams, typename  ::sandstorm::MainView<AppObjectId>::RestoreResults>
MainView<AppObjectId>::Client::restoreRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::MainView<AppObjectId>::RestoreParams, typename  ::sandstorm::MainView<AppObjectId>::RestoreResults>(
      0xc277e9822ae2c8fcull, 0, sizeHint);
}
template <typename AppObjectId>
::kj::Promise<void> MainView<AppObjectId>::Server::restore(RestoreContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/grain.capnp:MainView", "restore",
      0xc277e9822ae2c8fcull, 0);
}
template <typename AppObjectId>
::capnp::Request<typename  ::sandstorm::MainView<AppObjectId>::DropParams, typename  ::sandstorm::MainView<AppObjectId>::DropResults>
MainView<AppObjectId>::Client::dropRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::sandstorm::MainView<AppObjectId>::DropParams, typename  ::sandstorm::MainView<AppObjectId>::DropResults>(
      0xc277e9822ae2c8fcull, 1, sizeHint);
}
template <typename AppObjectId>
::kj::Promise<void> MainView<AppObjectId>::Server::drop(DropContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/grain.capnp:MainView", "drop",
      0xc277e9822ae2c8fcull, 1);
}
template <typename AppObjectId>
::kj::Promise<void> MainView<AppObjectId>::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xc277e9822ae2c8fcull:
      return dispatchCallInternal(methodId, context);
    case 0xdbb4d798ea67e2e7ull:
      return  ::sandstorm::UiView::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/grain.capnp:MainView", interfaceId);
  }
}
template <typename AppObjectId>
::kj::Promise<void> MainView<AppObjectId>::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return restore(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::MainView<AppObjectId>::RestoreParams, typename  ::sandstorm::MainView<AppObjectId>::RestoreResults>(context));
    case 1:
      return drop(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::sandstorm::MainView<AppObjectId>::DropParams, typename  ::sandstorm::MainView<AppObjectId>::DropResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/grain.capnp:MainView",
          0xc277e9822ae2c8fcull, methodId);
  }
}
#endif  // !CAPNP_LITE

// MainView<AppObjectId>
#if !CAPNP_LITE
template <typename AppObjectId>
constexpr ::capnp::Kind MainView<AppObjectId>::_capnpPrivate::kind;
template <typename AppObjectId>
constexpr ::capnp::_::RawSchema const* MainView<AppObjectId>::_capnpPrivate::schema;
template <typename AppObjectId>
constexpr ::capnp::_::RawBrandedSchema const* MainView<AppObjectId>::_capnpPrivate::brand;
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Scope MainView<AppObjectId>::_capnpPrivate::brandScopes[] = {
  { 0xc277e9822ae2c8fc, brandBindings + 0, 1, false},
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Binding MainView<AppObjectId>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<AppObjectId>(),
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema::Dependency MainView<AppObjectId>::_capnpPrivate::brandDependencies[] = {
  { 33554432,  ::sandstorm::MainView<AppObjectId>::RestoreParams::_capnpPrivate::brand },
  { 33554433,  ::sandstorm::MainView<AppObjectId>::DropParams::_capnpPrivate::brand },
  { 50331648,  ::sandstorm::MainView<AppObjectId>::RestoreResults::_capnpPrivate::brand },
  { 50331649,  ::sandstorm::MainView<AppObjectId>::DropResults::_capnpPrivate::brand },
};
template <typename AppObjectId>
const ::capnp::_::RawBrandedSchema MainView<AppObjectId>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_c277e9822ae2c8fc, brandScopes, brandDependencies,
  sizeof(brandScopes) / sizeof(brandScopes[0]), sizeof(brandDependencies) / sizeof(brandDependencies[0]), nullptr
};
#endif  // !CAPNP_LITE

}  // namespace

#endif  // CAPNP_INCLUDED_c8d91463cfc4fb4a_
