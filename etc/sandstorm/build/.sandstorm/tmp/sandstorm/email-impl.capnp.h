// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: email-impl.capnp

#ifndef CAPNP_INCLUDED_92829022d203a580_
#define CAPNP_INCLUDED_92829022d203a580_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "email.capnp.h"
#include "supervisor.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d76bb6182f0aece3);
CAPNP_DECLARE_SCHEMA(e536db3eed324f9b);

}  // namespace schemas
}  // namespace capnp

namespace sandstorm {

struct PersistentEmailVerifier {
  PersistentEmailVerifier() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE


  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(d76bb6182f0aece3)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct PersistentVerifiedEmail {
  PersistentVerifiedEmail() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE


  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(e536db3eed324f9b)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

// =======================================================================================

#if !CAPNP_LITE
class PersistentEmailVerifier::Client
    : public virtual ::capnp::Capability::Client,
      public virtual  ::sandstorm::EmailVerifier::Client,
      public virtual  ::sandstorm::SystemPersistent::Client {
public:
  typedef PersistentEmailVerifier Calls;
  typedef PersistentEmailVerifier Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);


protected:
  Client() = default;
};

class PersistentEmailVerifier::Server
    : public virtual ::capnp::Capability::Server,
      public virtual  ::sandstorm::EmailVerifier::Server,
      public virtual  ::sandstorm::SystemPersistent::Server {
public:
  typedef PersistentEmailVerifier Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:

  inline  ::sandstorm::PersistentEmailVerifier::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::PersistentEmailVerifier>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class PersistentVerifiedEmail::Client
    : public virtual ::capnp::Capability::Client,
      public virtual  ::sandstorm::VerifiedEmail::Client,
      public virtual  ::sandstorm::SystemPersistent::Client {
public:
  typedef PersistentVerifiedEmail Calls;
  typedef PersistentVerifiedEmail Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);


protected:
  Client() = default;
};

class PersistentVerifiedEmail::Server
    : public virtual ::capnp::Capability::Server,
      public virtual  ::sandstorm::VerifiedEmail::Server,
      public virtual  ::sandstorm::SystemPersistent::Server {
public:
  typedef PersistentVerifiedEmail Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:

  inline  ::sandstorm::PersistentVerifiedEmail::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::PersistentVerifiedEmail>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
inline PersistentEmailVerifier::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline PersistentEmailVerifier::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline PersistentEmailVerifier::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline PersistentEmailVerifier::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline PersistentEmailVerifier::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::PersistentEmailVerifier::Client& PersistentEmailVerifier::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::PersistentEmailVerifier::Client& PersistentEmailVerifier::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
#if !CAPNP_LITE
inline PersistentVerifiedEmail::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline PersistentVerifiedEmail::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline PersistentVerifiedEmail::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline PersistentVerifiedEmail::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline PersistentVerifiedEmail::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::PersistentVerifiedEmail::Client& PersistentVerifiedEmail::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::PersistentVerifiedEmail::Client& PersistentVerifiedEmail::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
}  // namespace

#endif  // CAPNP_INCLUDED_92829022d203a580_
