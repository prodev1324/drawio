// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: web-session.capnp

#ifndef CAPNP_INCLUDED_a8cb0f2f1a756b32_
#define CAPNP_INCLUDED_a8cb0f2f1a756b32_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "grain.capnp.h"
#include "util.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(bc353583a3731ade);
CAPNP_DECLARE_SCHEMA(af480a0c6cab8887);
CAPNP_DECLARE_SCHEMA(9ea7265092c11606);
CAPNP_DECLARE_SCHEMA(a50711a14d35a8ce);
CAPNP_DECLARE_SCHEMA(d7051b9757f6b096);
CAPNP_DECLARE_SCHEMA(f5cae52becabc767);
CAPNP_DECLARE_SCHEMA(b4e5f4cccb748429);
CAPNP_DECLARE_SCHEMA(baace870544663eb);
CAPNP_DECLARE_SCHEMA(974fa7d7260b143e);
CAPNP_DECLARE_SCHEMA(b7d82eac416ab63e);
CAPNP_DECLARE_SCHEMA(d7aff1fe39659132);
CAPNP_DECLARE_SCHEMA(d22c0be5b9c16558);
CAPNP_DECLARE_SCHEMA(a87d65bed9b60243);
CAPNP_DECLARE_SCHEMA(bd6b5bb69c784877);
CAPNP_DECLARE_SCHEMA(aaf9021b627cc1f9);
CAPNP_DECLARE_SCHEMA(8193ac6cb5429c83);
CAPNP_DECLARE_SCHEMA(82130007ccd2888f);
enum class SuccessCode_82130007ccd2888f: uint16_t {
  OK,
  CREATED,
  ACCEPTED,
  NO_CONTENT,
  PARTIAL_CONTENT,
  MULTI_STATUS,
  NOT_MODIFIED,
};
CAPNP_DECLARE_ENUM(SuccessCode, 82130007ccd2888f);
CAPNP_DECLARE_SCHEMA(8ea31bdb4c044f01);
enum class ClientErrorCode_8ea31bdb4c044f01: uint16_t {
  BAD_REQUEST,
  FORBIDDEN,
  NOT_FOUND,
  METHOD_NOT_ALLOWED,
  NOT_ACCEPTABLE,
  CONFLICT,
  GONE,
  REQUEST_ENTITY_TOO_LARGE,
  REQUEST_URI_TOO_LONG,
  UNSUPPORTED_MEDIA_TYPE,
  IM_A_TEAPOT,
  PRECONDITION_FAILED,
  UNPROCESSABLE_ENTITY,
};
CAPNP_DECLARE_ENUM(ClientErrorCode, 8ea31bdb4c044f01);
CAPNP_DECLARE_SCHEMA(b4b873147ab5ce5e);
CAPNP_DECLARE_SCHEMA(ef174541b62cac82);
CAPNP_DECLARE_SCHEMA(8becd48bdafc1e45);
CAPNP_DECLARE_SCHEMA(abc45cb0fd79fba8);
CAPNP_DECLARE_SCHEMA(ed8a0ae9139c89c2);
CAPNP_DECLARE_SCHEMA(f72d33f93d1ebb59);
CAPNP_DECLARE_SCHEMA(d97fb0647c80b844);
CAPNP_DECLARE_SCHEMA(f0475101099acdc9);
CAPNP_DECLARE_SCHEMA(8374b67102f894cf);
CAPNP_DECLARE_SCHEMA(f405ef1c8e600f0f);
CAPNP_DECLARE_SCHEMA(99ffc2f3f69a6a9f);
CAPNP_DECLARE_SCHEMA(e9a02a3219bdbd70);
CAPNP_DECLARE_SCHEMA(f001fc1d5e574a07);
CAPNP_DECLARE_SCHEMA(9a712ce3fcad8cd8);
CAPNP_DECLARE_SCHEMA(82a3ee23aa0ae3a3);
CAPNP_DECLARE_SCHEMA(b37b21e300864885);
CAPNP_DECLARE_SCHEMA(81535505f60de028);
enum class Scope_81535505f60de028: uint16_t {
  NONE,
  PER_SESSION,
  PER_USER,
  PER_APP_VERSION,
  UNIVERSAL,
};
CAPNP_DECLARE_ENUM(Scope, 81535505f60de028);
CAPNP_DECLARE_SCHEMA(e9ff06beec4e73d6);
CAPNP_DECLARE_SCHEMA(b39cc44599b3a41b);
enum class PropfindDepth_b39cc44599b3a41b: uint16_t {
  INFINITY_,
  ZERO,
  ONE,
};
CAPNP_DECLARE_ENUM(PropfindDepth, b39cc44599b3a41b);
CAPNP_DECLARE_SCHEMA(cd94acddf4778328);
CAPNP_DECLARE_SCHEMA(aa6ef20a62c1cafd);
CAPNP_DECLARE_SCHEMA(c7c9c9b19d935e79);
CAPNP_DECLARE_SCHEMA(cc561276d31b392b);
CAPNP_DECLARE_SCHEMA(f1c587295608596e);
CAPNP_DECLARE_SCHEMA(eba76bffb27b1975);
CAPNP_DECLARE_SCHEMA(d26a7affce43b1c0);
CAPNP_DECLARE_SCHEMA(bf0e0653dc266205);
CAPNP_DECLARE_SCHEMA(a1ece076a7105939);
CAPNP_DECLARE_SCHEMA(c60d14bf989d4454);
CAPNP_DECLARE_SCHEMA(ca2d58de88f0b32e);
CAPNP_DECLARE_SCHEMA(9e582e7e054088ae);
CAPNP_DECLARE_SCHEMA(f64da2416445f8b6);
CAPNP_DECLARE_SCHEMA(8139673a82bfe07d);
CAPNP_DECLARE_SCHEMA(81f5066b5576a609);
CAPNP_DECLARE_SCHEMA(9398280f1359570a);
CAPNP_DECLARE_SCHEMA(d684c6a791b97dbc);
CAPNP_DECLARE_SCHEMA(9f79c33e20119e8d);
CAPNP_DECLARE_SCHEMA(c0643ea68efc60ae);
CAPNP_DECLARE_SCHEMA(d2e47e8eac54ea7e);
CAPNP_DECLARE_SCHEMA(adef95edc22ca880);

}  // namespace schemas
}  // namespace capnp

namespace sandstorm {

struct HttpStatusDescriptor {
  HttpStatusDescriptor() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc353583a3731ade, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

static constexpr  ::uint64_t HTTP_STATUS_ANNOTATION_ID = 12630356203439622279llu;
struct WebSession {
  WebSession() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct Params;
  struct Context;
  struct PostContent;
  struct PutContent;
  struct ETag;
  struct Cookie;
  struct AcceptedType;
  struct Response;
  struct RequestStream;
  struct WebSocketStream;
  struct CachePolicy;
  struct Options;
  typedef ::capnp::schemas::PropfindDepth_b39cc44599b3a41b PropfindDepth;

  struct GetParams;
  struct PostParams;
  struct OpenWebSocketParams;
  struct OpenWebSocketResults;
  struct PutParams;
  struct DeleteParams;
  struct PostStreamingParams;
  struct PostStreamingResults;
  struct PutStreamingParams;
  struct PutStreamingResults;
  struct PropfindParams;
  struct ProppatchParams;
  struct MkcolParams;
  struct CopyParams;
  struct MoveParams;
  struct LockParams;
  struct UnlockParams;
  struct AclParams;
  struct ReportParams;
  struct OptionsParams;
  struct PatchParams;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(a50711a14d35a8ce)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct WebSession::Params {
  Params() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d7051b9757f6b096, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::Context {
  Context() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Header;
  static const ::capnp::_::ConstList< ::capnp::Text> HEADER_WHITELIST;
  struct ETagPrecondition;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f5cae52becabc767, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::Context::Header {
  Header() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b4e5f4cccb748429, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::Context::ETagPrecondition {
  ETagPrecondition() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NONE,
    EXISTS,
    MATCHES_ONE_OF,
    MATCHES_NONE_OF,
    DOESNT_EXIST,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(974fa7d7260b143e, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::PostContent {
  PostContent() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b7d82eac416ab63e, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::PutContent {
  PutContent() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d7aff1fe39659132, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::ETag {
  ETag() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d22c0be5b9c16558, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::Cookie {
  Cookie() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Expires;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a87d65bed9b60243, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::Cookie::Expires {
  Expires() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NONE,
    ABSOLUTE,
    RELATIVE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd6b5bb69c784877, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::AcceptedType {
  AcceptedType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aaf9021b627cc1f9, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::Response {
  Response() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    REDIRECT,
    CONTENT,
    CLIENT_ERROR,
    SERVER_ERROR,
    NO_CONTENT,
    PRECONDITION_FAILED,
  };
  typedef ::capnp::schemas::SuccessCode_82130007ccd2888f SuccessCode;

  typedef ::capnp::schemas::ClientErrorCode_8ea31bdb4c044f01 ClientErrorCode;

  struct Header;
  static const ::capnp::_::ConstList< ::capnp::Text> HEADER_WHITELIST;
  struct Redirect;
  struct Content;
  struct ClientError;
  struct ServerError;
  struct NoContent;
  struct PreconditionFailed;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8193ac6cb5429c83, 1, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::Response::Header {
  Header() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b4b873147ab5ce5e, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::Response::Redirect {
  Redirect() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8becd48bdafc1e45, 1, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::Response::Content {
  Content() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Body;
  struct Disposition;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(abc45cb0fd79fba8, 1, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::Response::Content::Body {
  Body() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    BYTES,
    STREAM,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ed8a0ae9139c89c2, 1, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::Response::Content::Disposition {
  Disposition() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NORMAL,
    DOWNLOAD,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f72d33f93d1ebb59, 1, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::Response::ClientError {
  ClientError() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d97fb0647c80b844, 1, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::Response::ServerError {
  ServerError() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f0475101099acdc9, 1, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::Response::NoContent {
  NoContent() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8374b67102f894cf, 1, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::Response::PreconditionFailed {
  PreconditionFailed() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f405ef1c8e600f0f, 1, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::RequestStream {
  RequestStream() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct GetResponseParams;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(99ffc2f3f69a6a9f)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct WebSession::RequestStream::GetResponseParams {
  GetResponseParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e9a02a3219bdbd70, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::WebSocketStream {
  WebSocketStream() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct SendBytesParams;
  struct SendBytesResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(f001fc1d5e574a07)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct WebSession::WebSocketStream::SendBytesParams {
  SendBytesParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9a712ce3fcad8cd8, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::WebSocketStream::SendBytesResults {
  SendBytesResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(82a3ee23aa0ae3a3, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::CachePolicy {
  CachePolicy() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Scope_81535505f60de028 Scope;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b37b21e300864885, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::Options {
  Options() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e9ff06beec4e73d6, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::GetParams {
  GetParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd94acddf4778328, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::PostParams {
  PostParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aa6ef20a62c1cafd, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::OpenWebSocketParams {
  OpenWebSocketParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c7c9c9b19d935e79, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::OpenWebSocketResults {
  OpenWebSocketResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cc561276d31b392b, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::PutParams {
  PutParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f1c587295608596e, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::DeleteParams {
  DeleteParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eba76bffb27b1975, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::PostStreamingParams {
  PostStreamingParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d26a7affce43b1c0, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::PostStreamingResults {
  PostStreamingResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bf0e0653dc266205, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::PutStreamingParams {
  PutStreamingParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1ece076a7105939, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::PutStreamingResults {
  PutStreamingResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c60d14bf989d4454, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::PropfindParams {
  PropfindParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca2d58de88f0b32e, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::ProppatchParams {
  ProppatchParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9e582e7e054088ae, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::MkcolParams {
  MkcolParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f64da2416445f8b6, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::CopyParams {
  CopyParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8139673a82bfe07d, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::MoveParams {
  MoveParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(81f5066b5576a609, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::LockParams {
  LockParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9398280f1359570a, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::UnlockParams {
  UnlockParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d684c6a791b97dbc, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::AclParams {
  AclParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f79c33e20119e8d, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::ReportParams {
  ReportParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c0643ea68efc60ae, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::OptionsParams {
  OptionsParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d2e47e8eac54ea7e, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct WebSession::PatchParams {
  PatchParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(adef95edc22ca880, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class HttpStatusDescriptor::Reader {
public:
  typedef HttpStatusDescriptor Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getId() const;

  inline bool hasTitle() const;
  inline  ::capnp::Text::Reader getTitle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HttpStatusDescriptor::Builder {
public:
  typedef HttpStatusDescriptor Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getId();
  inline void setId( ::uint16_t value);

  inline bool hasTitle();
  inline  ::capnp::Text::Builder getTitle();
  inline void setTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTitle(unsigned int size);
  inline void adoptTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTitle();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HttpStatusDescriptor::Pipeline {
public:
  typedef HttpStatusDescriptor Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class WebSession::Client
    : public virtual ::capnp::Capability::Client,
      public virtual  ::sandstorm::UiSession::Client {
public:
  typedef WebSession Calls;
  typedef WebSession Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::WebSession::GetParams,  ::sandstorm::WebSession::Response> getRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::PostParams,  ::sandstorm::WebSession::Response> postRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::OpenWebSocketParams,  ::sandstorm::WebSession::OpenWebSocketResults> openWebSocketRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::PutParams,  ::sandstorm::WebSession::Response> putRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::DeleteParams,  ::sandstorm::WebSession::Response> deleteRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::PostStreamingParams,  ::sandstorm::WebSession::PostStreamingResults> postStreamingRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::PutStreamingParams,  ::sandstorm::WebSession::PutStreamingResults> putStreamingRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::PropfindParams,  ::sandstorm::WebSession::Response> propfindRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::ProppatchParams,  ::sandstorm::WebSession::Response> proppatchRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::MkcolParams,  ::sandstorm::WebSession::Response> mkcolRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::CopyParams,  ::sandstorm::WebSession::Response> copyRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::MoveParams,  ::sandstorm::WebSession::Response> moveRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::LockParams,  ::sandstorm::WebSession::Response> lockRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::UnlockParams,  ::sandstorm::WebSession::Response> unlockRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::AclParams,  ::sandstorm::WebSession::Response> aclRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::ReportParams,  ::sandstorm::WebSession::Response> reportRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::OptionsParams,  ::sandstorm::WebSession::Options> optionsRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::WebSession::PatchParams,  ::sandstorm::WebSession::Response> patchRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class WebSession::Server
    : public virtual ::capnp::Capability::Server,
      public virtual  ::sandstorm::UiSession::Server {
public:
  typedef WebSession Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::WebSession::GetParams GetParams;
  typedef ::capnp::CallContext<GetParams,  ::sandstorm::WebSession::Response> GetContext;
  virtual ::kj::Promise<void> get(GetContext context);
  typedef  ::sandstorm::WebSession::PostParams PostParams;
  typedef ::capnp::CallContext<PostParams,  ::sandstorm::WebSession::Response> PostContext;
  virtual ::kj::Promise<void> post(PostContext context);
  typedef  ::sandstorm::WebSession::OpenWebSocketParams OpenWebSocketParams;
  typedef  ::sandstorm::WebSession::OpenWebSocketResults OpenWebSocketResults;
  typedef ::capnp::CallContext<OpenWebSocketParams, OpenWebSocketResults> OpenWebSocketContext;
  virtual ::kj::Promise<void> openWebSocket(OpenWebSocketContext context);
  typedef  ::sandstorm::WebSession::PutParams PutParams;
  typedef ::capnp::CallContext<PutParams,  ::sandstorm::WebSession::Response> PutContext;
  virtual ::kj::Promise<void> put(PutContext context);
  typedef  ::sandstorm::WebSession::DeleteParams DeleteParams;
  typedef ::capnp::CallContext<DeleteParams,  ::sandstorm::WebSession::Response> DeleteContext;
  virtual ::kj::Promise<void> delete_(DeleteContext context);
  typedef  ::sandstorm::WebSession::PostStreamingParams PostStreamingParams;
  typedef  ::sandstorm::WebSession::PostStreamingResults PostStreamingResults;
  typedef ::capnp::CallContext<PostStreamingParams, PostStreamingResults> PostStreamingContext;
  virtual ::kj::Promise<void> postStreaming(PostStreamingContext context);
  typedef  ::sandstorm::WebSession::PutStreamingParams PutStreamingParams;
  typedef  ::sandstorm::WebSession::PutStreamingResults PutStreamingResults;
  typedef ::capnp::CallContext<PutStreamingParams, PutStreamingResults> PutStreamingContext;
  virtual ::kj::Promise<void> putStreaming(PutStreamingContext context);
  typedef  ::sandstorm::WebSession::PropfindParams PropfindParams;
  typedef ::capnp::CallContext<PropfindParams,  ::sandstorm::WebSession::Response> PropfindContext;
  virtual ::kj::Promise<void> propfind(PropfindContext context);
  typedef  ::sandstorm::WebSession::ProppatchParams ProppatchParams;
  typedef ::capnp::CallContext<ProppatchParams,  ::sandstorm::WebSession::Response> ProppatchContext;
  virtual ::kj::Promise<void> proppatch(ProppatchContext context);
  typedef  ::sandstorm::WebSession::MkcolParams MkcolParams;
  typedef ::capnp::CallContext<MkcolParams,  ::sandstorm::WebSession::Response> MkcolContext;
  virtual ::kj::Promise<void> mkcol(MkcolContext context);
  typedef  ::sandstorm::WebSession::CopyParams CopyParams;
  typedef ::capnp::CallContext<CopyParams,  ::sandstorm::WebSession::Response> CopyContext;
  virtual ::kj::Promise<void> copy(CopyContext context);
  typedef  ::sandstorm::WebSession::MoveParams MoveParams;
  typedef ::capnp::CallContext<MoveParams,  ::sandstorm::WebSession::Response> MoveContext;
  virtual ::kj::Promise<void> move(MoveContext context);
  typedef  ::sandstorm::WebSession::LockParams LockParams;
  typedef ::capnp::CallContext<LockParams,  ::sandstorm::WebSession::Response> LockContext;
  virtual ::kj::Promise<void> lock(LockContext context);
  typedef  ::sandstorm::WebSession::UnlockParams UnlockParams;
  typedef ::capnp::CallContext<UnlockParams,  ::sandstorm::WebSession::Response> UnlockContext;
  virtual ::kj::Promise<void> unlock(UnlockContext context);
  typedef  ::sandstorm::WebSession::AclParams AclParams;
  typedef ::capnp::CallContext<AclParams,  ::sandstorm::WebSession::Response> AclContext;
  virtual ::kj::Promise<void> acl(AclContext context);
  typedef  ::sandstorm::WebSession::ReportParams ReportParams;
  typedef ::capnp::CallContext<ReportParams,  ::sandstorm::WebSession::Response> ReportContext;
  virtual ::kj::Promise<void> report(ReportContext context);
  typedef  ::sandstorm::WebSession::OptionsParams OptionsParams;
  typedef ::capnp::CallContext<OptionsParams,  ::sandstorm::WebSession::Options> OptionsContext;
  virtual ::kj::Promise<void> options(OptionsContext context);
  typedef  ::sandstorm::WebSession::PatchParams PatchParams;
  typedef ::capnp::CallContext<PatchParams,  ::sandstorm::WebSession::Response> PatchContext;
  virtual ::kj::Promise<void> patch(PatchContext context);

  inline  ::sandstorm::WebSession::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::WebSession>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class WebSession::Params::Reader {
public:
  typedef Params Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasBasePath() const;
  inline  ::capnp::Text::Reader getBasePath() const;

  inline bool hasUserAgent() const;
  inline  ::capnp::Text::Reader getUserAgent() const;

  inline bool hasAcceptableLanguages() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getAcceptableLanguages() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Params::Builder {
public:
  typedef Params Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBasePath();
  inline  ::capnp::Text::Builder getBasePath();
  inline void setBasePath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBasePath(unsigned int size);
  inline void adoptBasePath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBasePath();

  inline bool hasUserAgent();
  inline  ::capnp::Text::Builder getUserAgent();
  inline void setUserAgent( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUserAgent(unsigned int size);
  inline void adoptUserAgent(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUserAgent();

  inline bool hasAcceptableLanguages();
  inline  ::capnp::List< ::capnp::Text>::Builder getAcceptableLanguages();
  inline void setAcceptableLanguages( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setAcceptableLanguages(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initAcceptableLanguages(unsigned int size);
  inline void adoptAcceptableLanguages(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownAcceptableLanguages();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Params::Pipeline {
public:
  typedef Params Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::Context::Reader {
public:
  typedef Context Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasCookies() const;
  inline  ::capnp::List< ::sandstorm::KeyValue>::Reader getCookies() const;

  inline bool hasResponseStream() const;
#if !CAPNP_LITE
  inline  ::sandstorm::ByteStream::Client getResponseStream() const;
#endif  // !CAPNP_LITE

  inline bool hasAccept() const;
  inline  ::capnp::List< ::sandstorm::WebSession::AcceptedType>::Reader getAccept() const;

  inline bool hasAdditionalHeaders() const;
  inline  ::capnp::List< ::sandstorm::WebSession::Context::Header>::Reader getAdditionalHeaders() const;

  inline typename ETagPrecondition::Reader getETagPrecondition() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Context::Builder {
public:
  typedef Context Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCookies();
  inline  ::capnp::List< ::sandstorm::KeyValue>::Builder getCookies();
  inline void setCookies( ::capnp::List< ::sandstorm::KeyValue>::Reader value);
  inline  ::capnp::List< ::sandstorm::KeyValue>::Builder initCookies(unsigned int size);
  inline void adoptCookies(::capnp::Orphan< ::capnp::List< ::sandstorm::KeyValue>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::KeyValue>> disownCookies();

  inline bool hasResponseStream();
#if !CAPNP_LITE
  inline  ::sandstorm::ByteStream::Client getResponseStream();
  inline void setResponseStream( ::sandstorm::ByteStream::Client&& value);
  inline void setResponseStream( ::sandstorm::ByteStream::Client& value);
  inline void adoptResponseStream(::capnp::Orphan< ::sandstorm::ByteStream>&& value);
  inline ::capnp::Orphan< ::sandstorm::ByteStream> disownResponseStream();
#endif  // !CAPNP_LITE

  inline bool hasAccept();
  inline  ::capnp::List< ::sandstorm::WebSession::AcceptedType>::Builder getAccept();
  inline void setAccept( ::capnp::List< ::sandstorm::WebSession::AcceptedType>::Reader value);
  inline  ::capnp::List< ::sandstorm::WebSession::AcceptedType>::Builder initAccept(unsigned int size);
  inline void adoptAccept(::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::AcceptedType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::AcceptedType>> disownAccept();

  inline bool hasAdditionalHeaders();
  inline  ::capnp::List< ::sandstorm::WebSession::Context::Header>::Builder getAdditionalHeaders();
  inline void setAdditionalHeaders( ::capnp::List< ::sandstorm::WebSession::Context::Header>::Reader value);
  inline  ::capnp::List< ::sandstorm::WebSession::Context::Header>::Builder initAdditionalHeaders(unsigned int size);
  inline void adoptAdditionalHeaders(::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::Context::Header>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::Context::Header>> disownAdditionalHeaders();

  inline typename ETagPrecondition::Builder getETagPrecondition();
  inline typename ETagPrecondition::Builder initETagPrecondition();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Context::Pipeline {
public:
  typedef Context Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::ByteStream::Client getResponseStream();
  inline typename ETagPrecondition::Pipeline getETagPrecondition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::Context::Header::Reader {
public:
  typedef Header Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Context::Header::Builder {
public:
  typedef Header Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Context::Header::Pipeline {
public:
  typedef Header Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::Context::ETagPrecondition::Reader {
public:
  typedef ETagPrecondition Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool isExists() const;
  inline  ::capnp::Void getExists() const;

  inline bool isMatchesOneOf() const;
  inline bool hasMatchesOneOf() const;
  inline  ::capnp::List< ::sandstorm::WebSession::ETag>::Reader getMatchesOneOf() const;

  inline bool isMatchesNoneOf() const;
  inline bool hasMatchesNoneOf() const;
  inline  ::capnp::List< ::sandstorm::WebSession::ETag>::Reader getMatchesNoneOf() const;

  inline bool isDoesntExist() const;
  inline  ::capnp::Void getDoesntExist() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Context::ETagPrecondition::Builder {
public:
  typedef ETagPrecondition Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::VOID);

  inline bool isExists();
  inline  ::capnp::Void getExists();
  inline void setExists( ::capnp::Void value = ::capnp::VOID);

  inline bool isMatchesOneOf();
  inline bool hasMatchesOneOf();
  inline  ::capnp::List< ::sandstorm::WebSession::ETag>::Builder getMatchesOneOf();
  inline void setMatchesOneOf( ::capnp::List< ::sandstorm::WebSession::ETag>::Reader value);
  inline  ::capnp::List< ::sandstorm::WebSession::ETag>::Builder initMatchesOneOf(unsigned int size);
  inline void adoptMatchesOneOf(::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::ETag>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::ETag>> disownMatchesOneOf();

  inline bool isMatchesNoneOf();
  inline bool hasMatchesNoneOf();
  inline  ::capnp::List< ::sandstorm::WebSession::ETag>::Builder getMatchesNoneOf();
  inline void setMatchesNoneOf( ::capnp::List< ::sandstorm::WebSession::ETag>::Reader value);
  inline  ::capnp::List< ::sandstorm::WebSession::ETag>::Builder initMatchesNoneOf(unsigned int size);
  inline void adoptMatchesNoneOf(::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::ETag>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::ETag>> disownMatchesNoneOf();

  inline bool isDoesntExist();
  inline  ::capnp::Void getDoesntExist();
  inline void setDoesntExist( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Context::ETagPrecondition::Pipeline {
public:
  typedef ETagPrecondition Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::PostContent::Reader {
public:
  typedef PostContent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMimeType() const;
  inline  ::capnp::Text::Reader getMimeType() const;

  inline bool hasContent() const;
  inline  ::capnp::Data::Reader getContent() const;

  inline bool hasEncoding() const;
  inline  ::capnp::Text::Reader getEncoding() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::PostContent::Builder {
public:
  typedef PostContent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMimeType();
  inline  ::capnp::Text::Builder getMimeType();
  inline void setMimeType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMimeType(unsigned int size);
  inline void adoptMimeType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMimeType();

  inline bool hasContent();
  inline  ::capnp::Data::Builder getContent();
  inline void setContent( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initContent(unsigned int size);
  inline void adoptContent(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownContent();

  inline bool hasEncoding();
  inline  ::capnp::Text::Builder getEncoding();
  inline void setEncoding( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEncoding(unsigned int size);
  inline void adoptEncoding(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEncoding();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::PostContent::Pipeline {
public:
  typedef PostContent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::PutContent::Reader {
public:
  typedef PutContent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMimeType() const;
  inline  ::capnp::Text::Reader getMimeType() const;

  inline bool hasContent() const;
  inline  ::capnp::Data::Reader getContent() const;

  inline bool hasEncoding() const;
  inline  ::capnp::Text::Reader getEncoding() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::PutContent::Builder {
public:
  typedef PutContent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMimeType();
  inline  ::capnp::Text::Builder getMimeType();
  inline void setMimeType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMimeType(unsigned int size);
  inline void adoptMimeType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMimeType();

  inline bool hasContent();
  inline  ::capnp::Data::Builder getContent();
  inline void setContent( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initContent(unsigned int size);
  inline void adoptContent(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownContent();

  inline bool hasEncoding();
  inline  ::capnp::Text::Builder getEncoding();
  inline void setEncoding( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEncoding(unsigned int size);
  inline void adoptEncoding(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEncoding();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::PutContent::Pipeline {
public:
  typedef PutContent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::ETag::Reader {
public:
  typedef ETag Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

  inline bool getWeak() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::ETag::Builder {
public:
  typedef ETag Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

  inline bool getWeak();
  inline void setWeak(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::ETag::Pipeline {
public:
  typedef ETag Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::Cookie::Reader {
public:
  typedef Cookie Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

  inline typename Expires::Reader getExpires() const;

  inline bool getHttpOnly() const;

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Cookie::Builder {
public:
  typedef Cookie Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

  inline typename Expires::Builder getExpires();
  inline typename Expires::Builder initExpires();

  inline bool getHttpOnly();
  inline void setHttpOnly(bool value);

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Cookie::Pipeline {
public:
  typedef Cookie Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Expires::Pipeline getExpires();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::Cookie::Expires::Reader {
public:
  typedef Expires Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool isAbsolute() const;
  inline  ::int64_t getAbsolute() const;

  inline bool isRelative() const;
  inline  ::uint64_t getRelative() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Cookie::Expires::Builder {
public:
  typedef Expires Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::VOID);

  inline bool isAbsolute();
  inline  ::int64_t getAbsolute();
  inline void setAbsolute( ::int64_t value);

  inline bool isRelative();
  inline  ::uint64_t getRelative();
  inline void setRelative( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Cookie::Expires::Pipeline {
public:
  typedef Expires Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::AcceptedType::Reader {
public:
  typedef AcceptedType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMimeType() const;
  inline  ::capnp::Text::Reader getMimeType() const;

  inline float getQValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::AcceptedType::Builder {
public:
  typedef AcceptedType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMimeType();
  inline  ::capnp::Text::Builder getMimeType();
  inline void setMimeType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMimeType(unsigned int size);
  inline void adoptMimeType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMimeType();

  inline float getQValue();
  inline void setQValue(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::AcceptedType::Pipeline {
public:
  typedef AcceptedType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::Response::Reader {
public:
  typedef Response Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool hasSetCookies() const;
  inline  ::capnp::List< ::sandstorm::WebSession::Cookie>::Reader getSetCookies() const;

  inline bool isRedirect() const;
  inline typename Redirect::Reader getRedirect() const;

  inline bool isContent() const;
  inline typename Content::Reader getContent() const;

  inline bool isClientError() const;
  inline typename ClientError::Reader getClientError() const;

  inline bool isServerError() const;
  inline typename ServerError::Reader getServerError() const;

  inline bool isNoContent() const;
  inline typename NoContent::Reader getNoContent() const;

  inline bool hasCachePolicy() const;
  inline  ::sandstorm::WebSession::CachePolicy::Reader getCachePolicy() const;

  inline bool isPreconditionFailed() const;
  inline typename PreconditionFailed::Reader getPreconditionFailed() const;

  inline bool hasAdditionalHeaders() const;
  inline  ::capnp::List< ::sandstorm::WebSession::Response::Header>::Reader getAdditionalHeaders() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Response::Builder {
public:
  typedef Response Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool hasSetCookies();
  inline  ::capnp::List< ::sandstorm::WebSession::Cookie>::Builder getSetCookies();
  inline void setSetCookies( ::capnp::List< ::sandstorm::WebSession::Cookie>::Reader value);
  inline  ::capnp::List< ::sandstorm::WebSession::Cookie>::Builder initSetCookies(unsigned int size);
  inline void adoptSetCookies(::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::Cookie>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::Cookie>> disownSetCookies();

  inline bool isRedirect();
  inline typename Redirect::Builder getRedirect();
  inline typename Redirect::Builder initRedirect();

  inline bool isContent();
  inline typename Content::Builder getContent();
  inline typename Content::Builder initContent();

  inline bool isClientError();
  inline typename ClientError::Builder getClientError();
  inline typename ClientError::Builder initClientError();

  inline bool isServerError();
  inline typename ServerError::Builder getServerError();
  inline typename ServerError::Builder initServerError();

  inline bool isNoContent();
  inline typename NoContent::Builder getNoContent();
  inline typename NoContent::Builder initNoContent();

  inline bool hasCachePolicy();
  inline  ::sandstorm::WebSession::CachePolicy::Builder getCachePolicy();
  inline void setCachePolicy( ::sandstorm::WebSession::CachePolicy::Reader value);
  inline  ::sandstorm::WebSession::CachePolicy::Builder initCachePolicy();
  inline void adoptCachePolicy(::capnp::Orphan< ::sandstorm::WebSession::CachePolicy>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::CachePolicy> disownCachePolicy();

  inline bool isPreconditionFailed();
  inline typename PreconditionFailed::Builder getPreconditionFailed();
  inline typename PreconditionFailed::Builder initPreconditionFailed();

  inline bool hasAdditionalHeaders();
  inline  ::capnp::List< ::sandstorm::WebSession::Response::Header>::Builder getAdditionalHeaders();
  inline void setAdditionalHeaders( ::capnp::List< ::sandstorm::WebSession::Response::Header>::Reader value);
  inline  ::capnp::List< ::sandstorm::WebSession::Response::Header>::Builder initAdditionalHeaders(unsigned int size);
  inline void adoptAdditionalHeaders(::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::Response::Header>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::Response::Header>> disownAdditionalHeaders();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Response::Pipeline {
public:
  typedef Response Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::CachePolicy::Pipeline getCachePolicy();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::Response::Header::Reader {
public:
  typedef Header Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Response::Header::Builder {
public:
  typedef Header Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Response::Header::Pipeline {
public:
  typedef Header Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::Response::Redirect::Reader {
public:
  typedef Redirect Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool getIsPermanent() const;

  inline bool hasLocation() const;
  inline  ::capnp::Text::Reader getLocation() const;

  inline bool getSwitchToGet() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Response::Redirect::Builder {
public:
  typedef Redirect Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsPermanent();
  inline void setIsPermanent(bool value);

  inline bool hasLocation();
  inline  ::capnp::Text::Builder getLocation();
  inline void setLocation( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLocation(unsigned int size);
  inline void adoptLocation(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLocation();

  inline bool getSwitchToGet();
  inline void setSwitchToGet(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Response::Redirect::Pipeline {
public:
  typedef Redirect Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::Response::Content::Reader {
public:
  typedef Content Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasEncoding() const;
  inline  ::capnp::Text::Reader getEncoding() const;

  inline bool hasLanguage() const;
  inline  ::capnp::Text::Reader getLanguage() const;

  inline bool hasMimeType() const;
  inline  ::capnp::Text::Reader getMimeType() const;

  inline typename Body::Reader getBody() const;

  inline  ::sandstorm::WebSession::Response::SuccessCode getStatusCode() const;

  inline typename Disposition::Reader getDisposition() const;

  inline bool hasETag() const;
  inline  ::sandstorm::WebSession::ETag::Reader getETag() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Response::Content::Builder {
public:
  typedef Content Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEncoding();
  inline  ::capnp::Text::Builder getEncoding();
  inline void setEncoding( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEncoding(unsigned int size);
  inline void adoptEncoding(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEncoding();

  inline bool hasLanguage();
  inline  ::capnp::Text::Builder getLanguage();
  inline void setLanguage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLanguage(unsigned int size);
  inline void adoptLanguage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLanguage();

  inline bool hasMimeType();
  inline  ::capnp::Text::Builder getMimeType();
  inline void setMimeType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMimeType(unsigned int size);
  inline void adoptMimeType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMimeType();

  inline typename Body::Builder getBody();
  inline typename Body::Builder initBody();

  inline  ::sandstorm::WebSession::Response::SuccessCode getStatusCode();
  inline void setStatusCode( ::sandstorm::WebSession::Response::SuccessCode value);

  inline typename Disposition::Builder getDisposition();
  inline typename Disposition::Builder initDisposition();

  inline bool hasETag();
  inline  ::sandstorm::WebSession::ETag::Builder getETag();
  inline void setETag( ::sandstorm::WebSession::ETag::Reader value);
  inline  ::sandstorm::WebSession::ETag::Builder initETag();
  inline void adoptETag(::capnp::Orphan< ::sandstorm::WebSession::ETag>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::ETag> disownETag();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Response::Content::Pipeline {
public:
  typedef Content Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Body::Pipeline getBody();
  inline typename Disposition::Pipeline getDisposition();
  inline  ::sandstorm::WebSession::ETag::Pipeline getETag();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::Response::Content::Body::Reader {
public:
  typedef Body Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isBytes() const;
  inline bool hasBytes() const;
  inline  ::capnp::Data::Reader getBytes() const;

  inline bool isStream() const;
  inline bool hasStream() const;
#if !CAPNP_LITE
  inline  ::sandstorm::Handle::Client getStream() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Response::Content::Body::Builder {
public:
  typedef Body Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isBytes();
  inline bool hasBytes();
  inline  ::capnp::Data::Builder getBytes();
  inline void setBytes( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initBytes(unsigned int size);
  inline void adoptBytes(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownBytes();

  inline bool isStream();
  inline bool hasStream();
#if !CAPNP_LITE
  inline  ::sandstorm::Handle::Client getStream();
  inline void setStream( ::sandstorm::Handle::Client&& value);
  inline void setStream( ::sandstorm::Handle::Client& value);
  inline void adoptStream(::capnp::Orphan< ::sandstorm::Handle>&& value);
  inline ::capnp::Orphan< ::sandstorm::Handle> disownStream();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Response::Content::Body::Pipeline {
public:
  typedef Body Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::Response::Content::Disposition::Reader {
public:
  typedef Disposition Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNormal() const;
  inline  ::capnp::Void getNormal() const;

  inline bool isDownload() const;
  inline bool hasDownload() const;
  inline  ::capnp::Text::Reader getDownload() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Response::Content::Disposition::Builder {
public:
  typedef Disposition Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNormal();
  inline  ::capnp::Void getNormal();
  inline void setNormal( ::capnp::Void value = ::capnp::VOID);

  inline bool isDownload();
  inline bool hasDownload();
  inline  ::capnp::Text::Builder getDownload();
  inline void setDownload( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDownload(unsigned int size);
  inline void adoptDownload(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDownload();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Response::Content::Disposition::Pipeline {
public:
  typedef Disposition Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::Response::ClientError::Reader {
public:
  typedef ClientError Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::sandstorm::WebSession::Response::ClientErrorCode getStatusCode() const;

  inline bool hasDescriptionHtml() const;
  inline  ::capnp::Text::Reader getDescriptionHtml() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Response::ClientError::Builder {
public:
  typedef ClientError Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::sandstorm::WebSession::Response::ClientErrorCode getStatusCode();
  inline void setStatusCode( ::sandstorm::WebSession::Response::ClientErrorCode value);

  inline bool hasDescriptionHtml();
  inline  ::capnp::Text::Builder getDescriptionHtml();
  inline void setDescriptionHtml( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDescriptionHtml(unsigned int size);
  inline void adoptDescriptionHtml(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDescriptionHtml();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Response::ClientError::Pipeline {
public:
  typedef ClientError Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::Response::ServerError::Reader {
public:
  typedef ServerError Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasDescriptionHtml() const;
  inline  ::capnp::Text::Reader getDescriptionHtml() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Response::ServerError::Builder {
public:
  typedef ServerError Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDescriptionHtml();
  inline  ::capnp::Text::Builder getDescriptionHtml();
  inline void setDescriptionHtml( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDescriptionHtml(unsigned int size);
  inline void adoptDescriptionHtml(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDescriptionHtml();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Response::ServerError::Pipeline {
public:
  typedef ServerError Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::Response::NoContent::Reader {
public:
  typedef NoContent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool getShouldResetForm() const;

  inline bool hasETag() const;
  inline  ::sandstorm::WebSession::ETag::Reader getETag() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Response::NoContent::Builder {
public:
  typedef NoContent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getShouldResetForm();
  inline void setShouldResetForm(bool value);

  inline bool hasETag();
  inline  ::sandstorm::WebSession::ETag::Builder getETag();
  inline void setETag( ::sandstorm::WebSession::ETag::Reader value);
  inline  ::sandstorm::WebSession::ETag::Builder initETag();
  inline void adoptETag(::capnp::Orphan< ::sandstorm::WebSession::ETag>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::ETag> disownETag();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Response::NoContent::Pipeline {
public:
  typedef NoContent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::ETag::Pipeline getETag();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::Response::PreconditionFailed::Reader {
public:
  typedef PreconditionFailed Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMatchingETag() const;
  inline  ::sandstorm::WebSession::ETag::Reader getMatchingETag() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Response::PreconditionFailed::Builder {
public:
  typedef PreconditionFailed Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMatchingETag();
  inline  ::sandstorm::WebSession::ETag::Builder getMatchingETag();
  inline void setMatchingETag( ::sandstorm::WebSession::ETag::Reader value);
  inline  ::sandstorm::WebSession::ETag::Builder initMatchingETag();
  inline void adoptMatchingETag(::capnp::Orphan< ::sandstorm::WebSession::ETag>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::ETag> disownMatchingETag();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Response::PreconditionFailed::Pipeline {
public:
  typedef PreconditionFailed Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::ETag::Pipeline getMatchingETag();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class WebSession::RequestStream::Client
    : public virtual ::capnp::Capability::Client,
      public virtual  ::sandstorm::ByteStream::Client {
public:
  typedef WebSession::RequestStream Calls;
  typedef WebSession::RequestStream Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::WebSession::RequestStream::GetResponseParams,  ::sandstorm::WebSession::Response> getResponseRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class WebSession::RequestStream::Server
    : public virtual ::capnp::Capability::Server,
      public virtual  ::sandstorm::ByteStream::Server {
public:
  typedef WebSession::RequestStream Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::WebSession::RequestStream::GetResponseParams GetResponseParams;
  typedef ::capnp::CallContext<GetResponseParams,  ::sandstorm::WebSession::Response> GetResponseContext;
  virtual ::kj::Promise<void> getResponse(GetResponseContext context);

  inline  ::sandstorm::WebSession::RequestStream::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::WebSession::RequestStream>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class WebSession::RequestStream::GetResponseParams::Reader {
public:
  typedef GetResponseParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::RequestStream::GetResponseParams::Builder {
public:
  typedef GetResponseParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::RequestStream::GetResponseParams::Pipeline {
public:
  typedef GetResponseParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class WebSession::WebSocketStream::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef WebSession::WebSocketStream Calls;
  typedef WebSession::WebSocketStream Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::WebSession::WebSocketStream::SendBytesParams,  ::sandstorm::WebSession::WebSocketStream::SendBytesResults> sendBytesRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class WebSession::WebSocketStream::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef WebSession::WebSocketStream Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::WebSession::WebSocketStream::SendBytesParams SendBytesParams;
  typedef  ::sandstorm::WebSession::WebSocketStream::SendBytesResults SendBytesResults;
  typedef ::capnp::CallContext<SendBytesParams, SendBytesResults> SendBytesContext;
  virtual ::kj::Promise<void> sendBytes(SendBytesContext context);

  inline  ::sandstorm::WebSession::WebSocketStream::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::WebSession::WebSocketStream>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class WebSession::WebSocketStream::SendBytesParams::Reader {
public:
  typedef SendBytesParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMessage() const;
  inline  ::capnp::Data::Reader getMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::WebSocketStream::SendBytesParams::Builder {
public:
  typedef SendBytesParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMessage();
  inline  ::capnp::Data::Builder getMessage();
  inline void setMessage( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::WebSocketStream::SendBytesParams::Pipeline {
public:
  typedef SendBytesParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::WebSocketStream::SendBytesResults::Reader {
public:
  typedef SendBytesResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::WebSocketStream::SendBytesResults::Builder {
public:
  typedef SendBytesResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::WebSocketStream::SendBytesResults::Pipeline {
public:
  typedef SendBytesResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::CachePolicy::Reader {
public:
  typedef CachePolicy Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::sandstorm::WebSession::CachePolicy::Scope getWithCheck() const;

  inline  ::sandstorm::WebSession::CachePolicy::Scope getPermanent() const;

  inline bool getVariesOnCookie() const;

  inline bool getVariesOnAccept() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::CachePolicy::Builder {
public:
  typedef CachePolicy Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::sandstorm::WebSession::CachePolicy::Scope getWithCheck();
  inline void setWithCheck( ::sandstorm::WebSession::CachePolicy::Scope value);

  inline  ::sandstorm::WebSession::CachePolicy::Scope getPermanent();
  inline void setPermanent( ::sandstorm::WebSession::CachePolicy::Scope value);

  inline bool getVariesOnCookie();
  inline void setVariesOnCookie(bool value);

  inline bool getVariesOnAccept();
  inline void setVariesOnAccept(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::CachePolicy::Pipeline {
public:
  typedef CachePolicy Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::Options::Reader {
public:
  typedef Options Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool getDavClass1() const;

  inline bool getDavClass2() const;

  inline bool getDavClass3() const;

  inline bool hasDavExtensions() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getDavExtensions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::Options::Builder {
public:
  typedef Options Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getDavClass1();
  inline void setDavClass1(bool value);

  inline bool getDavClass2();
  inline void setDavClass2(bool value);

  inline bool getDavClass3();
  inline void setDavClass3(bool value);

  inline bool hasDavExtensions();
  inline  ::capnp::List< ::capnp::Text>::Builder getDavExtensions();
  inline void setDavExtensions( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setDavExtensions(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initDavExtensions(unsigned int size);
  inline void adoptDavExtensions(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownDavExtensions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::Options::Pipeline {
public:
  typedef Options Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::GetParams::Reader {
public:
  typedef GetParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

  inline bool getIgnoreBody() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::GetParams::Builder {
public:
  typedef GetParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

  inline bool getIgnoreBody();
  inline void setIgnoreBody(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::GetParams::Pipeline {
public:
  typedef GetParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::PostParams::Reader {
public:
  typedef PostParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasContent() const;
  inline  ::sandstorm::WebSession::PostContent::Reader getContent() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::PostParams::Builder {
public:
  typedef PostParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasContent();
  inline  ::sandstorm::WebSession::PostContent::Builder getContent();
  inline void setContent( ::sandstorm::WebSession::PostContent::Reader value);
  inline  ::sandstorm::WebSession::PostContent::Builder initContent();
  inline void adoptContent(::capnp::Orphan< ::sandstorm::WebSession::PostContent>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::PostContent> disownContent();

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::PostParams::Pipeline {
public:
  typedef PostParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::PostContent::Pipeline getContent();
  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::OpenWebSocketParams::Reader {
public:
  typedef OpenWebSocketParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

  inline bool hasProtocol() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getProtocol() const;

  inline bool hasClientStream() const;
#if !CAPNP_LITE
  inline  ::sandstorm::WebSession::WebSocketStream::Client getClientStream() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::OpenWebSocketParams::Builder {
public:
  typedef OpenWebSocketParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

  inline bool hasProtocol();
  inline  ::capnp::List< ::capnp::Text>::Builder getProtocol();
  inline void setProtocol( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setProtocol(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initProtocol(unsigned int size);
  inline void adoptProtocol(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownProtocol();

  inline bool hasClientStream();
#if !CAPNP_LITE
  inline  ::sandstorm::WebSession::WebSocketStream::Client getClientStream();
  inline void setClientStream( ::sandstorm::WebSession::WebSocketStream::Client&& value);
  inline void setClientStream( ::sandstorm::WebSession::WebSocketStream::Client& value);
  inline void adoptClientStream(::capnp::Orphan< ::sandstorm::WebSession::WebSocketStream>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::WebSocketStream> disownClientStream();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::OpenWebSocketParams::Pipeline {
public:
  typedef OpenWebSocketParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
  inline  ::sandstorm::WebSession::WebSocketStream::Client getClientStream();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::OpenWebSocketResults::Reader {
public:
  typedef OpenWebSocketResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasProtocol() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getProtocol() const;

  inline bool hasServerStream() const;
#if !CAPNP_LITE
  inline  ::sandstorm::WebSession::WebSocketStream::Client getServerStream() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::OpenWebSocketResults::Builder {
public:
  typedef OpenWebSocketResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasProtocol();
  inline  ::capnp::List< ::capnp::Text>::Builder getProtocol();
  inline void setProtocol( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setProtocol(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initProtocol(unsigned int size);
  inline void adoptProtocol(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownProtocol();

  inline bool hasServerStream();
#if !CAPNP_LITE
  inline  ::sandstorm::WebSession::WebSocketStream::Client getServerStream();
  inline void setServerStream( ::sandstorm::WebSession::WebSocketStream::Client&& value);
  inline void setServerStream( ::sandstorm::WebSession::WebSocketStream::Client& value);
  inline void adoptServerStream(::capnp::Orphan< ::sandstorm::WebSession::WebSocketStream>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::WebSocketStream> disownServerStream();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::OpenWebSocketResults::Pipeline {
public:
  typedef OpenWebSocketResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::WebSocketStream::Client getServerStream();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::PutParams::Reader {
public:
  typedef PutParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasContent() const;
  inline  ::sandstorm::WebSession::PutContent::Reader getContent() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::PutParams::Builder {
public:
  typedef PutParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasContent();
  inline  ::sandstorm::WebSession::PutContent::Builder getContent();
  inline void setContent( ::sandstorm::WebSession::PutContent::Reader value);
  inline  ::sandstorm::WebSession::PutContent::Builder initContent();
  inline void adoptContent(::capnp::Orphan< ::sandstorm::WebSession::PutContent>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::PutContent> disownContent();

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::PutParams::Pipeline {
public:
  typedef PutParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::PutContent::Pipeline getContent();
  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::DeleteParams::Reader {
public:
  typedef DeleteParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::DeleteParams::Builder {
public:
  typedef DeleteParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::DeleteParams::Pipeline {
public:
  typedef DeleteParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::PostStreamingParams::Reader {
public:
  typedef PostStreamingParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasMimeType() const;
  inline  ::capnp::Text::Reader getMimeType() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

  inline bool hasEncoding() const;
  inline  ::capnp::Text::Reader getEncoding() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::PostStreamingParams::Builder {
public:
  typedef PostStreamingParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasMimeType();
  inline  ::capnp::Text::Builder getMimeType();
  inline void setMimeType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMimeType(unsigned int size);
  inline void adoptMimeType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMimeType();

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

  inline bool hasEncoding();
  inline  ::capnp::Text::Builder getEncoding();
  inline void setEncoding( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEncoding(unsigned int size);
  inline void adoptEncoding(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEncoding();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::PostStreamingParams::Pipeline {
public:
  typedef PostStreamingParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::PostStreamingResults::Reader {
public:
  typedef PostStreamingResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasStream() const;
#if !CAPNP_LITE
  inline  ::sandstorm::WebSession::RequestStream::Client getStream() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::PostStreamingResults::Builder {
public:
  typedef PostStreamingResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStream();
#if !CAPNP_LITE
  inline  ::sandstorm::WebSession::RequestStream::Client getStream();
  inline void setStream( ::sandstorm::WebSession::RequestStream::Client&& value);
  inline void setStream( ::sandstorm::WebSession::RequestStream::Client& value);
  inline void adoptStream(::capnp::Orphan< ::sandstorm::WebSession::RequestStream>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::RequestStream> disownStream();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::PostStreamingResults::Pipeline {
public:
  typedef PostStreamingResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::RequestStream::Client getStream();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::PutStreamingParams::Reader {
public:
  typedef PutStreamingParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasMimeType() const;
  inline  ::capnp::Text::Reader getMimeType() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

  inline bool hasEncoding() const;
  inline  ::capnp::Text::Reader getEncoding() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::PutStreamingParams::Builder {
public:
  typedef PutStreamingParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasMimeType();
  inline  ::capnp::Text::Builder getMimeType();
  inline void setMimeType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMimeType(unsigned int size);
  inline void adoptMimeType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMimeType();

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

  inline bool hasEncoding();
  inline  ::capnp::Text::Builder getEncoding();
  inline void setEncoding( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEncoding(unsigned int size);
  inline void adoptEncoding(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEncoding();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::PutStreamingParams::Pipeline {
public:
  typedef PutStreamingParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::PutStreamingResults::Reader {
public:
  typedef PutStreamingResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasStream() const;
#if !CAPNP_LITE
  inline  ::sandstorm::WebSession::RequestStream::Client getStream() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::PutStreamingResults::Builder {
public:
  typedef PutStreamingResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStream();
#if !CAPNP_LITE
  inline  ::sandstorm::WebSession::RequestStream::Client getStream();
  inline void setStream( ::sandstorm::WebSession::RequestStream::Client&& value);
  inline void setStream( ::sandstorm::WebSession::RequestStream::Client& value);
  inline void adoptStream(::capnp::Orphan< ::sandstorm::WebSession::RequestStream>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::RequestStream> disownStream();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::PutStreamingResults::Pipeline {
public:
  typedef PutStreamingResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::RequestStream::Client getStream();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::PropfindParams::Reader {
public:
  typedef PropfindParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasXmlContent() const;
  inline  ::capnp::Text::Reader getXmlContent() const;

  inline  ::sandstorm::WebSession::PropfindDepth getDepth() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::PropfindParams::Builder {
public:
  typedef PropfindParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasXmlContent();
  inline  ::capnp::Text::Builder getXmlContent();
  inline void setXmlContent( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initXmlContent(unsigned int size);
  inline void adoptXmlContent(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownXmlContent();

  inline  ::sandstorm::WebSession::PropfindDepth getDepth();
  inline void setDepth( ::sandstorm::WebSession::PropfindDepth value);

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::PropfindParams::Pipeline {
public:
  typedef PropfindParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::ProppatchParams::Reader {
public:
  typedef ProppatchParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasXmlContent() const;
  inline  ::capnp::Text::Reader getXmlContent() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::ProppatchParams::Builder {
public:
  typedef ProppatchParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasXmlContent();
  inline  ::capnp::Text::Builder getXmlContent();
  inline void setXmlContent( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initXmlContent(unsigned int size);
  inline void adoptXmlContent(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownXmlContent();

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::ProppatchParams::Pipeline {
public:
  typedef ProppatchParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::MkcolParams::Reader {
public:
  typedef MkcolParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasContent() const;
  inline  ::sandstorm::WebSession::PostContent::Reader getContent() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::MkcolParams::Builder {
public:
  typedef MkcolParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasContent();
  inline  ::sandstorm::WebSession::PostContent::Builder getContent();
  inline void setContent( ::sandstorm::WebSession::PostContent::Reader value);
  inline  ::sandstorm::WebSession::PostContent::Builder initContent();
  inline void adoptContent(::capnp::Orphan< ::sandstorm::WebSession::PostContent>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::PostContent> disownContent();

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::MkcolParams::Pipeline {
public:
  typedef MkcolParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::PostContent::Pipeline getContent();
  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::CopyParams::Reader {
public:
  typedef CopyParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasDestination() const;
  inline  ::capnp::Text::Reader getDestination() const;

  inline bool getNoOverwrite() const;

  inline bool getShallow() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::CopyParams::Builder {
public:
  typedef CopyParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasDestination();
  inline  ::capnp::Text::Builder getDestination();
  inline void setDestination( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDestination(unsigned int size);
  inline void adoptDestination(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDestination();

  inline bool getNoOverwrite();
  inline void setNoOverwrite(bool value);

  inline bool getShallow();
  inline void setShallow(bool value);

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::CopyParams::Pipeline {
public:
  typedef CopyParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::MoveParams::Reader {
public:
  typedef MoveParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasDestination() const;
  inline  ::capnp::Text::Reader getDestination() const;

  inline bool getNoOverwrite() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::MoveParams::Builder {
public:
  typedef MoveParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasDestination();
  inline  ::capnp::Text::Builder getDestination();
  inline void setDestination( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDestination(unsigned int size);
  inline void adoptDestination(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDestination();

  inline bool getNoOverwrite();
  inline void setNoOverwrite(bool value);

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::MoveParams::Pipeline {
public:
  typedef MoveParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::LockParams::Reader {
public:
  typedef LockParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasXmlContent() const;
  inline  ::capnp::Text::Reader getXmlContent() const;

  inline bool getShallow() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::LockParams::Builder {
public:
  typedef LockParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasXmlContent();
  inline  ::capnp::Text::Builder getXmlContent();
  inline void setXmlContent( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initXmlContent(unsigned int size);
  inline void adoptXmlContent(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownXmlContent();

  inline bool getShallow();
  inline void setShallow(bool value);

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::LockParams::Pipeline {
public:
  typedef LockParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::UnlockParams::Reader {
public:
  typedef UnlockParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasLockToken() const;
  inline  ::capnp::Text::Reader getLockToken() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::UnlockParams::Builder {
public:
  typedef UnlockParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasLockToken();
  inline  ::capnp::Text::Builder getLockToken();
  inline void setLockToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLockToken(unsigned int size);
  inline void adoptLockToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLockToken();

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::UnlockParams::Pipeline {
public:
  typedef UnlockParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::AclParams::Reader {
public:
  typedef AclParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasXmlContent() const;
  inline  ::capnp::Text::Reader getXmlContent() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::AclParams::Builder {
public:
  typedef AclParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasXmlContent();
  inline  ::capnp::Text::Builder getXmlContent();
  inline void setXmlContent( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initXmlContent(unsigned int size);
  inline void adoptXmlContent(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownXmlContent();

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::AclParams::Pipeline {
public:
  typedef AclParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::ReportParams::Reader {
public:
  typedef ReportParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasContent() const;
  inline  ::sandstorm::WebSession::PostContent::Reader getContent() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::ReportParams::Builder {
public:
  typedef ReportParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasContent();
  inline  ::sandstorm::WebSession::PostContent::Builder getContent();
  inline void setContent( ::sandstorm::WebSession::PostContent::Reader value);
  inline  ::sandstorm::WebSession::PostContent::Builder initContent();
  inline void adoptContent(::capnp::Orphan< ::sandstorm::WebSession::PostContent>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::PostContent> disownContent();

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::ReportParams::Pipeline {
public:
  typedef ReportParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::PostContent::Pipeline getContent();
  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::OptionsParams::Reader {
public:
  typedef OptionsParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::OptionsParams::Builder {
public:
  typedef OptionsParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::OptionsParams::Pipeline {
public:
  typedef OptionsParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSession::PatchParams::Reader {
public:
  typedef PatchParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasContent() const;
  inline  ::sandstorm::WebSession::PostContent::Reader getContent() const;

  inline bool hasContext() const;
  inline  ::sandstorm::WebSession::Context::Reader getContext() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSession::PatchParams::Builder {
public:
  typedef PatchParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasContent();
  inline  ::sandstorm::WebSession::PostContent::Builder getContent();
  inline void setContent( ::sandstorm::WebSession::PostContent::Reader value);
  inline  ::sandstorm::WebSession::PostContent::Builder initContent();
  inline void adoptContent(::capnp::Orphan< ::sandstorm::WebSession::PostContent>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::PostContent> disownContent();

  inline bool hasContext();
  inline  ::sandstorm::WebSession::Context::Builder getContext();
  inline void setContext( ::sandstorm::WebSession::Context::Reader value);
  inline  ::sandstorm::WebSession::Context::Builder initContext();
  inline void adoptContext(::capnp::Orphan< ::sandstorm::WebSession::Context>&& value);
  inline ::capnp::Orphan< ::sandstorm::WebSession::Context> disownContext();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSession::PatchParams::Pipeline {
public:
  typedef PatchParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::WebSession::PostContent::Pipeline getContent();
  inline  ::sandstorm::WebSession::Context::Pipeline getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint16_t HttpStatusDescriptor::Reader::getId() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t HttpStatusDescriptor::Builder::getId() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void HttpStatusDescriptor::Builder::setId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool HttpStatusDescriptor::Reader::hasTitle() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool HttpStatusDescriptor::Builder::hasTitle() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HttpStatusDescriptor::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HttpStatusDescriptor::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void HttpStatusDescriptor::Builder::setTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HttpStatusDescriptor::Builder::initTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void HttpStatusDescriptor::Builder::adoptTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HttpStatusDescriptor::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

#if !CAPNP_LITE
inline WebSession::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline WebSession::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline WebSession::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline WebSession::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline WebSession::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::WebSession::Client& WebSession::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::WebSession::Client& WebSession::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool WebSession::Params::Reader::hasBasePath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Params::Builder::hasBasePath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::Params::Reader::getBasePath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::Params::Builder::getBasePath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::Params::Builder::setBasePath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::Params::Builder::initBasePath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::Params::Builder::adoptBasePath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::Params::Builder::disownBasePath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::Params::Reader::hasUserAgent() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Params::Builder::hasUserAgent() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::Params::Reader::getUserAgent() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::Params::Builder::getUserAgent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::Params::Builder::setUserAgent( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::Params::Builder::initUserAgent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::Params::Builder::adoptUserAgent(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::Params::Builder::disownUserAgent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::Params::Reader::hasAcceptableLanguages() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Params::Builder::hasAcceptableLanguages() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader WebSession::Params::Reader::getAcceptableLanguages() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder WebSession::Params::Builder::getAcceptableLanguages() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::Params::Builder::setAcceptableLanguages( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void WebSession::Params::Builder::setAcceptableLanguages(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder WebSession::Params::Builder::initAcceptableLanguages(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void WebSession::Params::Builder::adoptAcceptableLanguages(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> WebSession::Params::Builder::disownAcceptableLanguages() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::Context::Reader::hasCookies() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Context::Builder::hasCookies() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::KeyValue>::Reader WebSession::Context::Reader::getCookies() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::KeyValue>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::KeyValue>::Builder WebSession::Context::Builder::getCookies() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::KeyValue>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::Context::Builder::setCookies( ::capnp::List< ::sandstorm::KeyValue>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::KeyValue>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::KeyValue>::Builder WebSession::Context::Builder::initCookies(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::KeyValue>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::Context::Builder::adoptCookies(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::KeyValue>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::KeyValue>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::KeyValue>> WebSession::Context::Builder::disownCookies() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::KeyValue>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::Context::Reader::hasResponseStream() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Context::Builder::hasResponseStream() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::ByteStream::Client WebSession::Context::Reader::getResponseStream() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::ByteStream::Client WebSession::Context::Builder::getResponseStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::ByteStream::Client WebSession::Context::Pipeline::getResponseStream() {
  return  ::sandstorm::ByteStream::Client(_typeless.getPointerField(1).asCap());
}
inline void WebSession::Context::Builder::setResponseStream( ::sandstorm::ByteStream::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(cap));
}
inline void WebSession::Context::Builder::setResponseStream( ::sandstorm::ByteStream::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), cap);
}
inline void WebSession::Context::Builder::adoptResponseStream(
    ::capnp::Orphan< ::sandstorm::ByteStream>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::ByteStream> WebSession::Context::Builder::disownResponseStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::ByteStream>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool WebSession::Context::Reader::hasAccept() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Context::Builder::hasAccept() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::WebSession::AcceptedType>::Reader WebSession::Context::Reader::getAccept() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::AcceptedType>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::WebSession::AcceptedType>::Builder WebSession::Context::Builder::getAccept() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::AcceptedType>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::Context::Builder::setAccept( ::capnp::List< ::sandstorm::WebSession::AcceptedType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::AcceptedType>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::WebSession::AcceptedType>::Builder WebSession::Context::Builder::initAccept(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::AcceptedType>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void WebSession::Context::Builder::adoptAccept(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::AcceptedType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::AcceptedType>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::AcceptedType>> WebSession::Context::Builder::disownAccept() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::AcceptedType>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::Context::Reader::hasAdditionalHeaders() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Context::Builder::hasAdditionalHeaders() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::WebSession::Context::Header>::Reader WebSession::Context::Reader::getAdditionalHeaders() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Context::Header>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::WebSession::Context::Header>::Builder WebSession::Context::Builder::getAdditionalHeaders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Context::Header>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void WebSession::Context::Builder::setAdditionalHeaders( ::capnp::List< ::sandstorm::WebSession::Context::Header>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Context::Header>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::WebSession::Context::Header>::Builder WebSession::Context::Builder::initAdditionalHeaders(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Context::Header>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void WebSession::Context::Builder::adoptAdditionalHeaders(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::Context::Header>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Context::Header>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::Context::Header>> WebSession::Context::Builder::disownAdditionalHeaders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Context::Header>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline typename WebSession::Context::ETagPrecondition::Reader WebSession::Context::Reader::getETagPrecondition() const {
  return typename WebSession::Context::ETagPrecondition::Reader(_reader);
}
inline typename WebSession::Context::ETagPrecondition::Builder WebSession::Context::Builder::getETagPrecondition() {
  return typename WebSession::Context::ETagPrecondition::Builder(_builder);
}
#if !CAPNP_LITE
inline typename WebSession::Context::ETagPrecondition::Pipeline WebSession::Context::Pipeline::getETagPrecondition() {
  return typename WebSession::Context::ETagPrecondition::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename WebSession::Context::ETagPrecondition::Builder WebSession::Context::Builder::initETagPrecondition() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(4 * ::capnp::POINTERS).clear();
  return typename WebSession::Context::ETagPrecondition::Builder(_builder);
}
inline bool WebSession::Context::Header::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Context::Header::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::Context::Header::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::Context::Header::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::Context::Header::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::Context::Header::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::Context::Header::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::Context::Header::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::Context::Header::Reader::hasValue() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Context::Header::Builder::hasValue() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::Context::Header::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::Context::Header::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::Context::Header::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::Context::Header::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::Context::Header::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::Context::Header::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::sandstorm::WebSession::Context::ETagPrecondition::Which WebSession::Context::ETagPrecondition::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::WebSession::Context::ETagPrecondition::Which WebSession::Context::ETagPrecondition::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool WebSession::Context::ETagPrecondition::Reader::isNone() const {
  return which() == WebSession::Context::ETagPrecondition::NONE;
}
inline bool WebSession::Context::ETagPrecondition::Builder::isNone() {
  return which() == WebSession::Context::ETagPrecondition::NONE;
}
inline  ::capnp::Void WebSession::Context::ETagPrecondition::Reader::getNone() const {
  KJ_IREQUIRE((which() == WebSession::Context::ETagPrecondition::NONE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void WebSession::Context::ETagPrecondition::Builder::getNone() {
  KJ_IREQUIRE((which() == WebSession::Context::ETagPrecondition::NONE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSession::Context::ETagPrecondition::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<WebSession::Context::ETagPrecondition::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Context::ETagPrecondition::NONE);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::Context::ETagPrecondition::Reader::isExists() const {
  return which() == WebSession::Context::ETagPrecondition::EXISTS;
}
inline bool WebSession::Context::ETagPrecondition::Builder::isExists() {
  return which() == WebSession::Context::ETagPrecondition::EXISTS;
}
inline  ::capnp::Void WebSession::Context::ETagPrecondition::Reader::getExists() const {
  KJ_IREQUIRE((which() == WebSession::Context::ETagPrecondition::EXISTS),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void WebSession::Context::ETagPrecondition::Builder::getExists() {
  KJ_IREQUIRE((which() == WebSession::Context::ETagPrecondition::EXISTS),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSession::Context::ETagPrecondition::Builder::setExists( ::capnp::Void value) {
  _builder.setDataField<WebSession::Context::ETagPrecondition::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Context::ETagPrecondition::EXISTS);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::Context::ETagPrecondition::Reader::isMatchesOneOf() const {
  return which() == WebSession::Context::ETagPrecondition::MATCHES_ONE_OF;
}
inline bool WebSession::Context::ETagPrecondition::Builder::isMatchesOneOf() {
  return which() == WebSession::Context::ETagPrecondition::MATCHES_ONE_OF;
}
inline bool WebSession::Context::ETagPrecondition::Reader::hasMatchesOneOf() const {
  if (which() != WebSession::Context::ETagPrecondition::MATCHES_ONE_OF) return false;
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Context::ETagPrecondition::Builder::hasMatchesOneOf() {
  if (which() != WebSession::Context::ETagPrecondition::MATCHES_ONE_OF) return false;
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::WebSession::ETag>::Reader WebSession::Context::ETagPrecondition::Reader::getMatchesOneOf() const {
  KJ_IREQUIRE((which() == WebSession::Context::ETagPrecondition::MATCHES_ONE_OF),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::ETag>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::WebSession::ETag>::Builder WebSession::Context::ETagPrecondition::Builder::getMatchesOneOf() {
  KJ_IREQUIRE((which() == WebSession::Context::ETagPrecondition::MATCHES_ONE_OF),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::ETag>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void WebSession::Context::ETagPrecondition::Builder::setMatchesOneOf( ::capnp::List< ::sandstorm::WebSession::ETag>::Reader value) {
  _builder.setDataField<WebSession::Context::ETagPrecondition::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Context::ETagPrecondition::MATCHES_ONE_OF);
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::ETag>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::WebSession::ETag>::Builder WebSession::Context::ETagPrecondition::Builder::initMatchesOneOf(unsigned int size) {
  _builder.setDataField<WebSession::Context::ETagPrecondition::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Context::ETagPrecondition::MATCHES_ONE_OF);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::ETag>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void WebSession::Context::ETagPrecondition::Builder::adoptMatchesOneOf(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::ETag>>&& value) {
  _builder.setDataField<WebSession::Context::ETagPrecondition::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Context::ETagPrecondition::MATCHES_ONE_OF);
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::ETag>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::ETag>> WebSession::Context::ETagPrecondition::Builder::disownMatchesOneOf() {
  KJ_IREQUIRE((which() == WebSession::Context::ETagPrecondition::MATCHES_ONE_OF),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::ETag>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool WebSession::Context::ETagPrecondition::Reader::isMatchesNoneOf() const {
  return which() == WebSession::Context::ETagPrecondition::MATCHES_NONE_OF;
}
inline bool WebSession::Context::ETagPrecondition::Builder::isMatchesNoneOf() {
  return which() == WebSession::Context::ETagPrecondition::MATCHES_NONE_OF;
}
inline bool WebSession::Context::ETagPrecondition::Reader::hasMatchesNoneOf() const {
  if (which() != WebSession::Context::ETagPrecondition::MATCHES_NONE_OF) return false;
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Context::ETagPrecondition::Builder::hasMatchesNoneOf() {
  if (which() != WebSession::Context::ETagPrecondition::MATCHES_NONE_OF) return false;
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::WebSession::ETag>::Reader WebSession::Context::ETagPrecondition::Reader::getMatchesNoneOf() const {
  KJ_IREQUIRE((which() == WebSession::Context::ETagPrecondition::MATCHES_NONE_OF),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::ETag>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::WebSession::ETag>::Builder WebSession::Context::ETagPrecondition::Builder::getMatchesNoneOf() {
  KJ_IREQUIRE((which() == WebSession::Context::ETagPrecondition::MATCHES_NONE_OF),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::ETag>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void WebSession::Context::ETagPrecondition::Builder::setMatchesNoneOf( ::capnp::List< ::sandstorm::WebSession::ETag>::Reader value) {
  _builder.setDataField<WebSession::Context::ETagPrecondition::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Context::ETagPrecondition::MATCHES_NONE_OF);
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::ETag>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::WebSession::ETag>::Builder WebSession::Context::ETagPrecondition::Builder::initMatchesNoneOf(unsigned int size) {
  _builder.setDataField<WebSession::Context::ETagPrecondition::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Context::ETagPrecondition::MATCHES_NONE_OF);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::ETag>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void WebSession::Context::ETagPrecondition::Builder::adoptMatchesNoneOf(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::ETag>>&& value) {
  _builder.setDataField<WebSession::Context::ETagPrecondition::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Context::ETagPrecondition::MATCHES_NONE_OF);
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::ETag>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::ETag>> WebSession::Context::ETagPrecondition::Builder::disownMatchesNoneOf() {
  KJ_IREQUIRE((which() == WebSession::Context::ETagPrecondition::MATCHES_NONE_OF),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::ETag>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool WebSession::Context::ETagPrecondition::Reader::isDoesntExist() const {
  return which() == WebSession::Context::ETagPrecondition::DOESNT_EXIST;
}
inline bool WebSession::Context::ETagPrecondition::Builder::isDoesntExist() {
  return which() == WebSession::Context::ETagPrecondition::DOESNT_EXIST;
}
inline  ::capnp::Void WebSession::Context::ETagPrecondition::Reader::getDoesntExist() const {
  KJ_IREQUIRE((which() == WebSession::Context::ETagPrecondition::DOESNT_EXIST),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void WebSession::Context::ETagPrecondition::Builder::getDoesntExist() {
  KJ_IREQUIRE((which() == WebSession::Context::ETagPrecondition::DOESNT_EXIST),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSession::Context::ETagPrecondition::Builder::setDoesntExist( ::capnp::Void value) {
  _builder.setDataField<WebSession::Context::ETagPrecondition::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Context::ETagPrecondition::DOESNT_EXIST);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::PostContent::Reader::hasMimeType() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PostContent::Builder::hasMimeType() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::PostContent::Reader::getMimeType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::PostContent::Builder::getMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::PostContent::Builder::setMimeType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::PostContent::Builder::initMimeType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::PostContent::Builder::adoptMimeType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::PostContent::Builder::disownMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::PostContent::Reader::hasContent() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PostContent::Builder::hasContent() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader WebSession::PostContent::Reader::getContent() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder WebSession::PostContent::Builder::getContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::PostContent::Builder::setContent( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder WebSession::PostContent::Builder::initContent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::PostContent::Builder::adoptContent(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> WebSession::PostContent::Builder::disownContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::PostContent::Reader::hasEncoding() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PostContent::Builder::hasEncoding() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::PostContent::Reader::getEncoding() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::PostContent::Builder::getEncoding() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::PostContent::Builder::setEncoding( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::PostContent::Builder::initEncoding(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void WebSession::PostContent::Builder::adoptEncoding(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::PostContent::Builder::disownEncoding() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::PutContent::Reader::hasMimeType() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PutContent::Builder::hasMimeType() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::PutContent::Reader::getMimeType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::PutContent::Builder::getMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::PutContent::Builder::setMimeType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::PutContent::Builder::initMimeType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::PutContent::Builder::adoptMimeType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::PutContent::Builder::disownMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::PutContent::Reader::hasContent() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PutContent::Builder::hasContent() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader WebSession::PutContent::Reader::getContent() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder WebSession::PutContent::Builder::getContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::PutContent::Builder::setContent( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder WebSession::PutContent::Builder::initContent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::PutContent::Builder::adoptContent(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> WebSession::PutContent::Builder::disownContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::PutContent::Reader::hasEncoding() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PutContent::Builder::hasEncoding() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::PutContent::Reader::getEncoding() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::PutContent::Builder::getEncoding() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::PutContent::Builder::setEncoding( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::PutContent::Builder::initEncoding(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void WebSession::PutContent::Builder::adoptEncoding(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::PutContent::Builder::disownEncoding() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::ETag::Reader::hasValue() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::ETag::Builder::hasValue() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::ETag::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::ETag::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::ETag::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::ETag::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::ETag::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::ETag::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::ETag::Reader::getWeak() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool WebSession::ETag::Builder::getWeak() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSession::ETag::Builder::setWeak(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::Cookie::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Cookie::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::Cookie::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::Cookie::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::Cookie::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::Cookie::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::Cookie::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::Cookie::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::Cookie::Reader::hasValue() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Cookie::Builder::hasValue() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::Cookie::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::Cookie::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::Cookie::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::Cookie::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::Cookie::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::Cookie::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline typename WebSession::Cookie::Expires::Reader WebSession::Cookie::Reader::getExpires() const {
  return typename WebSession::Cookie::Expires::Reader(_reader);
}
inline typename WebSession::Cookie::Expires::Builder WebSession::Cookie::Builder::getExpires() {
  return typename WebSession::Cookie::Expires::Builder(_builder);
}
#if !CAPNP_LITE
inline typename WebSession::Cookie::Expires::Pipeline WebSession::Cookie::Pipeline::getExpires() {
  return typename WebSession::Cookie::Expires::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename WebSession::Cookie::Expires::Builder WebSession::Cookie::Builder::initExpires() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(1 * ::capnp::ELEMENTS, 0);
  return typename WebSession::Cookie::Expires::Builder(_builder);
}
inline bool WebSession::Cookie::Reader::getHttpOnly() const {
  return _reader.getDataField<bool>(
      16 * ::capnp::ELEMENTS);
}

inline bool WebSession::Cookie::Builder::getHttpOnly() {
  return _builder.getDataField<bool>(
      16 * ::capnp::ELEMENTS);
}
inline void WebSession::Cookie::Builder::setHttpOnly(bool value) {
  _builder.setDataField<bool>(
      16 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::Cookie::Reader::hasPath() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Cookie::Builder::hasPath() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::Cookie::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::Cookie::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::Cookie::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::Cookie::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void WebSession::Cookie::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::Cookie::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::sandstorm::WebSession::Cookie::Expires::Which WebSession::Cookie::Expires::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::WebSession::Cookie::Expires::Which WebSession::Cookie::Expires::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool WebSession::Cookie::Expires::Reader::isNone() const {
  return which() == WebSession::Cookie::Expires::NONE;
}
inline bool WebSession::Cookie::Expires::Builder::isNone() {
  return which() == WebSession::Cookie::Expires::NONE;
}
inline  ::capnp::Void WebSession::Cookie::Expires::Reader::getNone() const {
  KJ_IREQUIRE((which() == WebSession::Cookie::Expires::NONE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void WebSession::Cookie::Expires::Builder::getNone() {
  KJ_IREQUIRE((which() == WebSession::Cookie::Expires::NONE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSession::Cookie::Expires::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<WebSession::Cookie::Expires::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Cookie::Expires::NONE);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::Cookie::Expires::Reader::isAbsolute() const {
  return which() == WebSession::Cookie::Expires::ABSOLUTE;
}
inline bool WebSession::Cookie::Expires::Builder::isAbsolute() {
  return which() == WebSession::Cookie::Expires::ABSOLUTE;
}
inline  ::int64_t WebSession::Cookie::Expires::Reader::getAbsolute() const {
  KJ_IREQUIRE((which() == WebSession::Cookie::Expires::ABSOLUTE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int64_t WebSession::Cookie::Expires::Builder::getAbsolute() {
  KJ_IREQUIRE((which() == WebSession::Cookie::Expires::ABSOLUTE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void WebSession::Cookie::Expires::Builder::setAbsolute( ::int64_t value) {
  _builder.setDataField<WebSession::Cookie::Expires::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Cookie::Expires::ABSOLUTE);
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::Cookie::Expires::Reader::isRelative() const {
  return which() == WebSession::Cookie::Expires::RELATIVE;
}
inline bool WebSession::Cookie::Expires::Builder::isRelative() {
  return which() == WebSession::Cookie::Expires::RELATIVE;
}
inline  ::uint64_t WebSession::Cookie::Expires::Reader::getRelative() const {
  KJ_IREQUIRE((which() == WebSession::Cookie::Expires::RELATIVE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t WebSession::Cookie::Expires::Builder::getRelative() {
  KJ_IREQUIRE((which() == WebSession::Cookie::Expires::RELATIVE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void WebSession::Cookie::Expires::Builder::setRelative( ::uint64_t value) {
  _builder.setDataField<WebSession::Cookie::Expires::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Cookie::Expires::RELATIVE);
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::AcceptedType::Reader::hasMimeType() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::AcceptedType::Builder::hasMimeType() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::AcceptedType::Reader::getMimeType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::AcceptedType::Builder::getMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::AcceptedType::Builder::setMimeType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::AcceptedType::Builder::initMimeType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::AcceptedType::Builder::adoptMimeType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::AcceptedType::Builder::disownMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline float WebSession::AcceptedType::Reader::getQValue() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS, 1065353216u);
}

inline float WebSession::AcceptedType::Builder::getQValue() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS, 1065353216u);
}
inline void WebSession::AcceptedType::Builder::setQValue(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value, 1065353216u);
}

inline  ::sandstorm::WebSession::Response::Which WebSession::Response::Reader::which() const {
  return _reader.getDataField<Which>(1 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::WebSession::Response::Which WebSession::Response::Builder::which() {
  return _builder.getDataField<Which>(1 * ::capnp::ELEMENTS);
}

inline bool WebSession::Response::Reader::hasSetCookies() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::Builder::hasSetCookies() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::WebSession::Cookie>::Reader WebSession::Response::Reader::getSetCookies() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Cookie>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::WebSession::Cookie>::Builder WebSession::Response::Builder::getSetCookies() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Cookie>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::Response::Builder::setSetCookies( ::capnp::List< ::sandstorm::WebSession::Cookie>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Cookie>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::WebSession::Cookie>::Builder WebSession::Response::Builder::initSetCookies(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Cookie>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::Response::Builder::adoptSetCookies(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::Cookie>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Cookie>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::Cookie>> WebSession::Response::Builder::disownSetCookies() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Cookie>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::Response::Reader::isRedirect() const {
  return which() == WebSession::Response::REDIRECT;
}
inline bool WebSession::Response::Builder::isRedirect() {
  return which() == WebSession::Response::REDIRECT;
}
inline typename WebSession::Response::Redirect::Reader WebSession::Response::Reader::getRedirect() const {
  KJ_IREQUIRE((which() == WebSession::Response::REDIRECT),
              "Must check which() before get()ing a union member.");
  return typename WebSession::Response::Redirect::Reader(_reader);
}
inline typename WebSession::Response::Redirect::Builder WebSession::Response::Builder::getRedirect() {
  KJ_IREQUIRE((which() == WebSession::Response::REDIRECT),
              "Must check which() before get()ing a union member.");
  return typename WebSession::Response::Redirect::Builder(_builder);
}
inline typename WebSession::Response::Redirect::Builder WebSession::Response::Builder::initRedirect() {
  _builder.setDataField<WebSession::Response::Which>(
      1 * ::capnp::ELEMENTS, WebSession::Response::REDIRECT);
  _builder.setDataField<bool>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(1 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  return typename WebSession::Response::Redirect::Builder(_builder);
}
inline bool WebSession::Response::Reader::isContent() const {
  return which() == WebSession::Response::CONTENT;
}
inline bool WebSession::Response::Builder::isContent() {
  return which() == WebSession::Response::CONTENT;
}
inline typename WebSession::Response::Content::Reader WebSession::Response::Reader::getContent() const {
  KJ_IREQUIRE((which() == WebSession::Response::CONTENT),
              "Must check which() before get()ing a union member.");
  return typename WebSession::Response::Content::Reader(_reader);
}
inline typename WebSession::Response::Content::Builder WebSession::Response::Builder::getContent() {
  KJ_IREQUIRE((which() == WebSession::Response::CONTENT),
              "Must check which() before get()ing a union member.");
  return typename WebSession::Response::Content::Builder(_builder);
}
inline typename WebSession::Response::Content::Builder WebSession::Response::Builder::initContent() {
  _builder.setDataField<WebSession::Response::Which>(
      1 * ::capnp::ELEMENTS, WebSession::Response::CONTENT);
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(2 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(3 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  _builder.getPointerField(2 * ::capnp::POINTERS).clear();
  _builder.getPointerField(3 * ::capnp::POINTERS).clear();
  _builder.getPointerField(4 * ::capnp::POINTERS).clear();
  _builder.getPointerField(5 * ::capnp::POINTERS).clear();
  _builder.getPointerField(7 * ::capnp::POINTERS).clear();
  return typename WebSession::Response::Content::Builder(_builder);
}
inline bool WebSession::Response::Reader::isClientError() const {
  return which() == WebSession::Response::CLIENT_ERROR;
}
inline bool WebSession::Response::Builder::isClientError() {
  return which() == WebSession::Response::CLIENT_ERROR;
}
inline typename WebSession::Response::ClientError::Reader WebSession::Response::Reader::getClientError() const {
  KJ_IREQUIRE((which() == WebSession::Response::CLIENT_ERROR),
              "Must check which() before get()ing a union member.");
  return typename WebSession::Response::ClientError::Reader(_reader);
}
inline typename WebSession::Response::ClientError::Builder WebSession::Response::Builder::getClientError() {
  KJ_IREQUIRE((which() == WebSession::Response::CLIENT_ERROR),
              "Must check which() before get()ing a union member.");
  return typename WebSession::Response::ClientError::Builder(_builder);
}
inline typename WebSession::Response::ClientError::Builder WebSession::Response::Builder::initClientError() {
  _builder.setDataField<WebSession::Response::Which>(
      1 * ::capnp::ELEMENTS, WebSession::Response::CLIENT_ERROR);
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  return typename WebSession::Response::ClientError::Builder(_builder);
}
inline bool WebSession::Response::Reader::isServerError() const {
  return which() == WebSession::Response::SERVER_ERROR;
}
inline bool WebSession::Response::Builder::isServerError() {
  return which() == WebSession::Response::SERVER_ERROR;
}
inline typename WebSession::Response::ServerError::Reader WebSession::Response::Reader::getServerError() const {
  KJ_IREQUIRE((which() == WebSession::Response::SERVER_ERROR),
              "Must check which() before get()ing a union member.");
  return typename WebSession::Response::ServerError::Reader(_reader);
}
inline typename WebSession::Response::ServerError::Builder WebSession::Response::Builder::getServerError() {
  KJ_IREQUIRE((which() == WebSession::Response::SERVER_ERROR),
              "Must check which() before get()ing a union member.");
  return typename WebSession::Response::ServerError::Builder(_builder);
}
inline typename WebSession::Response::ServerError::Builder WebSession::Response::Builder::initServerError() {
  _builder.setDataField<WebSession::Response::Which>(
      1 * ::capnp::ELEMENTS, WebSession::Response::SERVER_ERROR);
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  return typename WebSession::Response::ServerError::Builder(_builder);
}
inline bool WebSession::Response::Reader::isNoContent() const {
  return which() == WebSession::Response::NO_CONTENT;
}
inline bool WebSession::Response::Builder::isNoContent() {
  return which() == WebSession::Response::NO_CONTENT;
}
inline typename WebSession::Response::NoContent::Reader WebSession::Response::Reader::getNoContent() const {
  KJ_IREQUIRE((which() == WebSession::Response::NO_CONTENT),
              "Must check which() before get()ing a union member.");
  return typename WebSession::Response::NoContent::Reader(_reader);
}
inline typename WebSession::Response::NoContent::Builder WebSession::Response::Builder::getNoContent() {
  KJ_IREQUIRE((which() == WebSession::Response::NO_CONTENT),
              "Must check which() before get()ing a union member.");
  return typename WebSession::Response::NoContent::Builder(_builder);
}
inline typename WebSession::Response::NoContent::Builder WebSession::Response::Builder::initNoContent() {
  _builder.setDataField<WebSession::Response::Which>(
      1 * ::capnp::ELEMENTS, WebSession::Response::NO_CONTENT);
  _builder.setDataField<bool>(0 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  return typename WebSession::Response::NoContent::Builder(_builder);
}
inline bool WebSession::Response::Reader::hasCachePolicy() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::Builder::hasCachePolicy() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::CachePolicy::Reader WebSession::Response::Reader::getCachePolicy() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::CachePolicy>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::CachePolicy::Builder WebSession::Response::Builder::getCachePolicy() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::CachePolicy>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::CachePolicy::Pipeline WebSession::Response::Pipeline::getCachePolicy() {
  return  ::sandstorm::WebSession::CachePolicy::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void WebSession::Response::Builder::setCachePolicy( ::sandstorm::WebSession::CachePolicy::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::CachePolicy>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::CachePolicy::Builder WebSession::Response::Builder::initCachePolicy() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::CachePolicy>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void WebSession::Response::Builder::adoptCachePolicy(
    ::capnp::Orphan< ::sandstorm::WebSession::CachePolicy>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::CachePolicy>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::CachePolicy> WebSession::Response::Builder::disownCachePolicy() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::CachePolicy>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool WebSession::Response::Reader::isPreconditionFailed() const {
  return which() == WebSession::Response::PRECONDITION_FAILED;
}
inline bool WebSession::Response::Builder::isPreconditionFailed() {
  return which() == WebSession::Response::PRECONDITION_FAILED;
}
inline typename WebSession::Response::PreconditionFailed::Reader WebSession::Response::Reader::getPreconditionFailed() const {
  KJ_IREQUIRE((which() == WebSession::Response::PRECONDITION_FAILED),
              "Must check which() before get()ing a union member.");
  return typename WebSession::Response::PreconditionFailed::Reader(_reader);
}
inline typename WebSession::Response::PreconditionFailed::Builder WebSession::Response::Builder::getPreconditionFailed() {
  KJ_IREQUIRE((which() == WebSession::Response::PRECONDITION_FAILED),
              "Must check which() before get()ing a union member.");
  return typename WebSession::Response::PreconditionFailed::Builder(_builder);
}
inline typename WebSession::Response::PreconditionFailed::Builder WebSession::Response::Builder::initPreconditionFailed() {
  _builder.setDataField<WebSession::Response::Which>(
      1 * ::capnp::ELEMENTS, WebSession::Response::PRECONDITION_FAILED);
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  return typename WebSession::Response::PreconditionFailed::Builder(_builder);
}
inline bool WebSession::Response::Reader::hasAdditionalHeaders() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::Builder::hasAdditionalHeaders() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::WebSession::Response::Header>::Reader WebSession::Response::Reader::getAdditionalHeaders() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Response::Header>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::WebSession::Response::Header>::Builder WebSession::Response::Builder::getAdditionalHeaders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Response::Header>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void WebSession::Response::Builder::setAdditionalHeaders( ::capnp::List< ::sandstorm::WebSession::Response::Header>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Response::Header>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::WebSession::Response::Header>::Builder WebSession::Response::Builder::initAdditionalHeaders(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Response::Header>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void WebSession::Response::Builder::adoptAdditionalHeaders(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::Response::Header>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Response::Header>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::WebSession::Response::Header>> WebSession::Response::Builder::disownAdditionalHeaders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::WebSession::Response::Header>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool WebSession::Response::Header::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::Header::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::Response::Header::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::Response::Header::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::Response::Header::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::Response::Header::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::Response::Header::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::Response::Header::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::Response::Header::Reader::hasValue() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::Header::Builder::hasValue() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::Response::Header::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::Response::Header::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::Response::Header::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::Response::Header::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::Response::Header::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::Response::Header::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::Response::Redirect::Reader::getIsPermanent() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool WebSession::Response::Redirect::Builder::getIsPermanent() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSession::Response::Redirect::Builder::setIsPermanent(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::Response::Redirect::Reader::hasLocation() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::Redirect::Builder::hasLocation() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::Response::Redirect::Reader::getLocation() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::Response::Redirect::Builder::getLocation() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::Response::Redirect::Builder::setLocation( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::Response::Redirect::Builder::initLocation(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::Response::Redirect::Builder::adoptLocation(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::Response::Redirect::Builder::disownLocation() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::Response::Redirect::Reader::getSwitchToGet() const {
  return _reader.getDataField<bool>(
      1 * ::capnp::ELEMENTS);
}

inline bool WebSession::Response::Redirect::Builder::getSwitchToGet() {
  return _builder.getDataField<bool>(
      1 * ::capnp::ELEMENTS);
}
inline void WebSession::Response::Redirect::Builder::setSwitchToGet(bool value) {
  _builder.setDataField<bool>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::Response::Content::Reader::hasEncoding() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::Content::Builder::hasEncoding() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::Response::Content::Reader::getEncoding() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::Response::Content::Builder::getEncoding() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::Response::Content::Builder::setEncoding( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::Response::Content::Builder::initEncoding(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::Response::Content::Builder::adoptEncoding(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::Response::Content::Builder::disownEncoding() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::Response::Content::Reader::hasLanguage() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::Content::Builder::hasLanguage() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::Response::Content::Reader::getLanguage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::Response::Content::Builder::getLanguage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::Response::Content::Builder::setLanguage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::Response::Content::Builder::initLanguage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void WebSession::Response::Content::Builder::adoptLanguage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::Response::Content::Builder::disownLanguage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::Response::Content::Reader::hasMimeType() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::Content::Builder::hasMimeType() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::Response::Content::Reader::getMimeType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::Response::Content::Builder::getMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void WebSession::Response::Content::Builder::setMimeType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::Response::Content::Builder::initMimeType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void WebSession::Response::Content::Builder::adoptMimeType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::Response::Content::Builder::disownMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline typename WebSession::Response::Content::Body::Reader WebSession::Response::Content::Reader::getBody() const {
  return typename WebSession::Response::Content::Body::Reader(_reader);
}
inline typename WebSession::Response::Content::Body::Builder WebSession::Response::Content::Builder::getBody() {
  return typename WebSession::Response::Content::Body::Builder(_builder);
}
#if !CAPNP_LITE
inline typename WebSession::Response::Content::Body::Pipeline WebSession::Response::Content::Pipeline::getBody() {
  return typename WebSession::Response::Content::Body::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename WebSession::Response::Content::Body::Builder WebSession::Response::Content::Builder::initBody() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(4 * ::capnp::POINTERS).clear();
  return typename WebSession::Response::Content::Body::Builder(_builder);
}
inline  ::sandstorm::WebSession::Response::SuccessCode WebSession::Response::Content::Reader::getStatusCode() const {
  return _reader.getDataField< ::sandstorm::WebSession::Response::SuccessCode>(
      2 * ::capnp::ELEMENTS);
}

inline  ::sandstorm::WebSession::Response::SuccessCode WebSession::Response::Content::Builder::getStatusCode() {
  return _builder.getDataField< ::sandstorm::WebSession::Response::SuccessCode>(
      2 * ::capnp::ELEMENTS);
}
inline void WebSession::Response::Content::Builder::setStatusCode( ::sandstorm::WebSession::Response::SuccessCode value) {
  _builder.setDataField< ::sandstorm::WebSession::Response::SuccessCode>(
      2 * ::capnp::ELEMENTS, value);
}

inline typename WebSession::Response::Content::Disposition::Reader WebSession::Response::Content::Reader::getDisposition() const {
  return typename WebSession::Response::Content::Disposition::Reader(_reader);
}
inline typename WebSession::Response::Content::Disposition::Builder WebSession::Response::Content::Builder::getDisposition() {
  return typename WebSession::Response::Content::Disposition::Builder(_builder);
}
#if !CAPNP_LITE
inline typename WebSession::Response::Content::Disposition::Pipeline WebSession::Response::Content::Pipeline::getDisposition() {
  return typename WebSession::Response::Content::Disposition::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename WebSession::Response::Content::Disposition::Builder WebSession::Response::Content::Builder::initDisposition() {
  _builder.setDataField< ::uint16_t>(3 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(5 * ::capnp::POINTERS).clear();
  return typename WebSession::Response::Content::Disposition::Builder(_builder);
}
inline bool WebSession::Response::Content::Reader::hasETag() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::Content::Builder::hasETag() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::ETag::Reader WebSession::Response::Content::Reader::getETag() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::ETag::Builder WebSession::Response::Content::Builder::getETag() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::ETag::Pipeline WebSession::Response::Content::Pipeline::getETag() {
  return  ::sandstorm::WebSession::ETag::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void WebSession::Response::Content::Builder::setETag( ::sandstorm::WebSession::ETag::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::ETag::Builder WebSession::Response::Content::Builder::initETag() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void WebSession::Response::Content::Builder::adoptETag(
    ::capnp::Orphan< ::sandstorm::WebSession::ETag>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::ETag> WebSession::Response::Content::Builder::disownETag() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline  ::sandstorm::WebSession::Response::Content::Body::Which WebSession::Response::Content::Body::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::WebSession::Response::Content::Body::Which WebSession::Response::Content::Body::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool WebSession::Response::Content::Body::Reader::isBytes() const {
  return which() == WebSession::Response::Content::Body::BYTES;
}
inline bool WebSession::Response::Content::Body::Builder::isBytes() {
  return which() == WebSession::Response::Content::Body::BYTES;
}
inline bool WebSession::Response::Content::Body::Reader::hasBytes() const {
  if (which() != WebSession::Response::Content::Body::BYTES) return false;
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::Content::Body::Builder::hasBytes() {
  if (which() != WebSession::Response::Content::Body::BYTES) return false;
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader WebSession::Response::Content::Body::Reader::getBytes() const {
  KJ_IREQUIRE((which() == WebSession::Response::Content::Body::BYTES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder WebSession::Response::Content::Body::Builder::getBytes() {
  KJ_IREQUIRE((which() == WebSession::Response::Content::Body::BYTES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void WebSession::Response::Content::Body::Builder::setBytes( ::capnp::Data::Reader value) {
  _builder.setDataField<WebSession::Response::Content::Body::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Response::Content::Body::BYTES);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder WebSession::Response::Content::Body::Builder::initBytes(unsigned int size) {
  _builder.setDataField<WebSession::Response::Content::Body::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Response::Content::Body::BYTES);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void WebSession::Response::Content::Body::Builder::adoptBytes(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<WebSession::Response::Content::Body::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Response::Content::Body::BYTES);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> WebSession::Response::Content::Body::Builder::disownBytes() {
  KJ_IREQUIRE((which() == WebSession::Response::Content::Body::BYTES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool WebSession::Response::Content::Body::Reader::isStream() const {
  return which() == WebSession::Response::Content::Body::STREAM;
}
inline bool WebSession::Response::Content::Body::Builder::isStream() {
  return which() == WebSession::Response::Content::Body::STREAM;
}
inline bool WebSession::Response::Content::Body::Reader::hasStream() const {
  if (which() != WebSession::Response::Content::Body::STREAM) return false;
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::Content::Body::Builder::hasStream() {
  if (which() != WebSession::Response::Content::Body::STREAM) return false;
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::Handle::Client WebSession::Response::Content::Body::Reader::getStream() const {
  KJ_IREQUIRE((which() == WebSession::Response::Content::Body::STREAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::sandstorm::Handle::Client WebSession::Response::Content::Body::Builder::getStream() {
  KJ_IREQUIRE((which() == WebSession::Response::Content::Body::STREAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void WebSession::Response::Content::Body::Builder::setStream( ::sandstorm::Handle::Client&& cap) {
  _builder.setDataField<WebSession::Response::Content::Body::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Response::Content::Body::STREAM);
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(cap));
}
inline void WebSession::Response::Content::Body::Builder::setStream( ::sandstorm::Handle::Client& cap) {
  _builder.setDataField<WebSession::Response::Content::Body::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Response::Content::Body::STREAM);
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), cap);
}
inline void WebSession::Response::Content::Body::Builder::adoptStream(
    ::capnp::Orphan< ::sandstorm::Handle>&& value) {
  _builder.setDataField<WebSession::Response::Content::Body::Which>(
      0 * ::capnp::ELEMENTS, WebSession::Response::Content::Body::STREAM);
  ::capnp::_::PointerHelpers< ::sandstorm::Handle>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::Handle> WebSession::Response::Content::Body::Builder::disownStream() {
  KJ_IREQUIRE((which() == WebSession::Response::Content::Body::STREAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::sandstorm::Handle>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline  ::sandstorm::WebSession::Response::Content::Disposition::Which WebSession::Response::Content::Disposition::Reader::which() const {
  return _reader.getDataField<Which>(3 * ::capnp::ELEMENTS);
}
inline  ::sandstorm::WebSession::Response::Content::Disposition::Which WebSession::Response::Content::Disposition::Builder::which() {
  return _builder.getDataField<Which>(3 * ::capnp::ELEMENTS);
}

inline bool WebSession::Response::Content::Disposition::Reader::isNormal() const {
  return which() == WebSession::Response::Content::Disposition::NORMAL;
}
inline bool WebSession::Response::Content::Disposition::Builder::isNormal() {
  return which() == WebSession::Response::Content::Disposition::NORMAL;
}
inline  ::capnp::Void WebSession::Response::Content::Disposition::Reader::getNormal() const {
  KJ_IREQUIRE((which() == WebSession::Response::Content::Disposition::NORMAL),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void WebSession::Response::Content::Disposition::Builder::getNormal() {
  KJ_IREQUIRE((which() == WebSession::Response::Content::Disposition::NORMAL),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSession::Response::Content::Disposition::Builder::setNormal( ::capnp::Void value) {
  _builder.setDataField<WebSession::Response::Content::Disposition::Which>(
      3 * ::capnp::ELEMENTS, WebSession::Response::Content::Disposition::NORMAL);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::Response::Content::Disposition::Reader::isDownload() const {
  return which() == WebSession::Response::Content::Disposition::DOWNLOAD;
}
inline bool WebSession::Response::Content::Disposition::Builder::isDownload() {
  return which() == WebSession::Response::Content::Disposition::DOWNLOAD;
}
inline bool WebSession::Response::Content::Disposition::Reader::hasDownload() const {
  if (which() != WebSession::Response::Content::Disposition::DOWNLOAD) return false;
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::Content::Disposition::Builder::hasDownload() {
  if (which() != WebSession::Response::Content::Disposition::DOWNLOAD) return false;
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::Response::Content::Disposition::Reader::getDownload() const {
  KJ_IREQUIRE((which() == WebSession::Response::Content::Disposition::DOWNLOAD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::Response::Content::Disposition::Builder::getDownload() {
  KJ_IREQUIRE((which() == WebSession::Response::Content::Disposition::DOWNLOAD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void WebSession::Response::Content::Disposition::Builder::setDownload( ::capnp::Text::Reader value) {
  _builder.setDataField<WebSession::Response::Content::Disposition::Which>(
      3 * ::capnp::ELEMENTS, WebSession::Response::Content::Disposition::DOWNLOAD);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::Response::Content::Disposition::Builder::initDownload(unsigned int size) {
  _builder.setDataField<WebSession::Response::Content::Disposition::Which>(
      3 * ::capnp::ELEMENTS, WebSession::Response::Content::Disposition::DOWNLOAD);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void WebSession::Response::Content::Disposition::Builder::adoptDownload(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<WebSession::Response::Content::Disposition::Which>(
      3 * ::capnp::ELEMENTS, WebSession::Response::Content::Disposition::DOWNLOAD);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::Response::Content::Disposition::Builder::disownDownload() {
  KJ_IREQUIRE((which() == WebSession::Response::Content::Disposition::DOWNLOAD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline  ::sandstorm::WebSession::Response::ClientErrorCode WebSession::Response::ClientError::Reader::getStatusCode() const {
  return _reader.getDataField< ::sandstorm::WebSession::Response::ClientErrorCode>(
      0 * ::capnp::ELEMENTS);
}

inline  ::sandstorm::WebSession::Response::ClientErrorCode WebSession::Response::ClientError::Builder::getStatusCode() {
  return _builder.getDataField< ::sandstorm::WebSession::Response::ClientErrorCode>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSession::Response::ClientError::Builder::setStatusCode( ::sandstorm::WebSession::Response::ClientErrorCode value) {
  _builder.setDataField< ::sandstorm::WebSession::Response::ClientErrorCode>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::Response::ClientError::Reader::hasDescriptionHtml() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::ClientError::Builder::hasDescriptionHtml() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::Response::ClientError::Reader::getDescriptionHtml() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::Response::ClientError::Builder::getDescriptionHtml() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::Response::ClientError::Builder::setDescriptionHtml( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::Response::ClientError::Builder::initDescriptionHtml(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::Response::ClientError::Builder::adoptDescriptionHtml(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::Response::ClientError::Builder::disownDescriptionHtml() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::Response::ServerError::Reader::hasDescriptionHtml() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::ServerError::Builder::hasDescriptionHtml() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::Response::ServerError::Reader::getDescriptionHtml() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::Response::ServerError::Builder::getDescriptionHtml() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::Response::ServerError::Builder::setDescriptionHtml( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::Response::ServerError::Builder::initDescriptionHtml(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::Response::ServerError::Builder::adoptDescriptionHtml(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::Response::ServerError::Builder::disownDescriptionHtml() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::Response::NoContent::Reader::getShouldResetForm() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool WebSession::Response::NoContent::Builder::getShouldResetForm() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSession::Response::NoContent::Builder::setShouldResetForm(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::Response::NoContent::Reader::hasETag() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::NoContent::Builder::hasETag() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::ETag::Reader WebSession::Response::NoContent::Reader::getETag() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::ETag::Builder WebSession::Response::NoContent::Builder::getETag() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::ETag::Pipeline WebSession::Response::NoContent::Pipeline::getETag() {
  return  ::sandstorm::WebSession::ETag::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void WebSession::Response::NoContent::Builder::setETag( ::sandstorm::WebSession::ETag::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::ETag::Builder WebSession::Response::NoContent::Builder::initETag() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::Response::NoContent::Builder::adoptETag(
    ::capnp::Orphan< ::sandstorm::WebSession::ETag>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::ETag> WebSession::Response::NoContent::Builder::disownETag() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::Response::PreconditionFailed::Reader::hasMatchingETag() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Response::PreconditionFailed::Builder::hasMatchingETag() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::ETag::Reader WebSession::Response::PreconditionFailed::Reader::getMatchingETag() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::ETag::Builder WebSession::Response::PreconditionFailed::Builder::getMatchingETag() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::ETag::Pipeline WebSession::Response::PreconditionFailed::Pipeline::getMatchingETag() {
  return  ::sandstorm::WebSession::ETag::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void WebSession::Response::PreconditionFailed::Builder::setMatchingETag( ::sandstorm::WebSession::ETag::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::ETag::Builder WebSession::Response::PreconditionFailed::Builder::initMatchingETag() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::Response::PreconditionFailed::Builder::adoptMatchingETag(
    ::capnp::Orphan< ::sandstorm::WebSession::ETag>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::ETag> WebSession::Response::PreconditionFailed::Builder::disownMatchingETag() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::ETag>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

#if !CAPNP_LITE
inline WebSession::RequestStream::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline WebSession::RequestStream::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline WebSession::RequestStream::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline WebSession::RequestStream::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline WebSession::RequestStream::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::WebSession::RequestStream::Client& WebSession::RequestStream::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::WebSession::RequestStream::Client& WebSession::RequestStream::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
#if !CAPNP_LITE
inline WebSession::WebSocketStream::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline WebSession::WebSocketStream::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline WebSession::WebSocketStream::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline WebSession::WebSocketStream::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline WebSession::WebSocketStream::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::WebSession::WebSocketStream::Client& WebSession::WebSocketStream::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::WebSession::WebSocketStream::Client& WebSession::WebSocketStream::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool WebSession::WebSocketStream::SendBytesParams::Reader::hasMessage() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::WebSocketStream::SendBytesParams::Builder::hasMessage() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader WebSession::WebSocketStream::SendBytesParams::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder WebSession::WebSocketStream::SendBytesParams::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::WebSocketStream::SendBytesParams::Builder::setMessage( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder WebSession::WebSocketStream::SendBytesParams::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::WebSocketStream::SendBytesParams::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> WebSession::WebSocketStream::SendBytesParams::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::sandstorm::WebSession::CachePolicy::Scope WebSession::CachePolicy::Reader::getWithCheck() const {
  return _reader.getDataField< ::sandstorm::WebSession::CachePolicy::Scope>(
      0 * ::capnp::ELEMENTS);
}

inline  ::sandstorm::WebSession::CachePolicy::Scope WebSession::CachePolicy::Builder::getWithCheck() {
  return _builder.getDataField< ::sandstorm::WebSession::CachePolicy::Scope>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSession::CachePolicy::Builder::setWithCheck( ::sandstorm::WebSession::CachePolicy::Scope value) {
  _builder.setDataField< ::sandstorm::WebSession::CachePolicy::Scope>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::sandstorm::WebSession::CachePolicy::Scope WebSession::CachePolicy::Reader::getPermanent() const {
  return _reader.getDataField< ::sandstorm::WebSession::CachePolicy::Scope>(
      1 * ::capnp::ELEMENTS);
}

inline  ::sandstorm::WebSession::CachePolicy::Scope WebSession::CachePolicy::Builder::getPermanent() {
  return _builder.getDataField< ::sandstorm::WebSession::CachePolicy::Scope>(
      1 * ::capnp::ELEMENTS);
}
inline void WebSession::CachePolicy::Builder::setPermanent( ::sandstorm::WebSession::CachePolicy::Scope value) {
  _builder.setDataField< ::sandstorm::WebSession::CachePolicy::Scope>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::CachePolicy::Reader::getVariesOnCookie() const {
  return _reader.getDataField<bool>(
      32 * ::capnp::ELEMENTS);
}

inline bool WebSession::CachePolicy::Builder::getVariesOnCookie() {
  return _builder.getDataField<bool>(
      32 * ::capnp::ELEMENTS);
}
inline void WebSession::CachePolicy::Builder::setVariesOnCookie(bool value) {
  _builder.setDataField<bool>(
      32 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::CachePolicy::Reader::getVariesOnAccept() const {
  return _reader.getDataField<bool>(
      33 * ::capnp::ELEMENTS);
}

inline bool WebSession::CachePolicy::Builder::getVariesOnAccept() {
  return _builder.getDataField<bool>(
      33 * ::capnp::ELEMENTS);
}
inline void WebSession::CachePolicy::Builder::setVariesOnAccept(bool value) {
  _builder.setDataField<bool>(
      33 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::Options::Reader::getDavClass1() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool WebSession::Options::Builder::getDavClass1() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSession::Options::Builder::setDavClass1(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::Options::Reader::getDavClass2() const {
  return _reader.getDataField<bool>(
      1 * ::capnp::ELEMENTS);
}

inline bool WebSession::Options::Builder::getDavClass2() {
  return _builder.getDataField<bool>(
      1 * ::capnp::ELEMENTS);
}
inline void WebSession::Options::Builder::setDavClass2(bool value) {
  _builder.setDataField<bool>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::Options::Reader::getDavClass3() const {
  return _reader.getDataField<bool>(
      2 * ::capnp::ELEMENTS);
}

inline bool WebSession::Options::Builder::getDavClass3() {
  return _builder.getDataField<bool>(
      2 * ::capnp::ELEMENTS);
}
inline void WebSession::Options::Builder::setDavClass3(bool value) {
  _builder.setDataField<bool>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::Options::Reader::hasDavExtensions() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::Options::Builder::hasDavExtensions() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader WebSession::Options::Reader::getDavExtensions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder WebSession::Options::Builder::getDavExtensions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::Options::Builder::setDavExtensions( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void WebSession::Options::Builder::setDavExtensions(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder WebSession::Options::Builder::initDavExtensions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::Options::Builder::adoptDavExtensions(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> WebSession::Options::Builder::disownDavExtensions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::GetParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::GetParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::GetParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::GetParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::GetParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::GetParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::GetParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::GetParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::GetParams::Reader::hasContext() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::GetParams::Builder::hasContext() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::GetParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::GetParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::GetParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void WebSession::GetParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::GetParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::GetParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::GetParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::GetParams::Reader::getIgnoreBody() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool WebSession::GetParams::Builder::getIgnoreBody() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSession::GetParams::Builder::setIgnoreBody(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::PostParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PostParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::PostParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::PostParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::PostParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::PostParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::PostParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::PostParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::PostParams::Reader::hasContent() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PostParams::Builder::hasContent() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::PostContent::Reader WebSession::PostParams::Reader::getContent() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::PostContent::Builder WebSession::PostParams::Builder::getContent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::PostContent::Pipeline WebSession::PostParams::Pipeline::getContent() {
  return  ::sandstorm::WebSession::PostContent::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void WebSession::PostParams::Builder::setContent( ::sandstorm::WebSession::PostContent::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::PostContent::Builder WebSession::PostParams::Builder::initContent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::PostParams::Builder::adoptContent(
    ::capnp::Orphan< ::sandstorm::WebSession::PostContent>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::PostContent> WebSession::PostParams::Builder::disownContent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::PostParams::Reader::hasContext() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PostParams::Builder::hasContext() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::PostParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::PostParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::PostParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void WebSession::PostParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::PostParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::PostParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::PostParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::OpenWebSocketParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::OpenWebSocketParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::OpenWebSocketParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::OpenWebSocketParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::OpenWebSocketParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::OpenWebSocketParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::OpenWebSocketParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::OpenWebSocketParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::OpenWebSocketParams::Reader::hasContext() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::OpenWebSocketParams::Builder::hasContext() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::OpenWebSocketParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::OpenWebSocketParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::OpenWebSocketParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void WebSession::OpenWebSocketParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::OpenWebSocketParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::OpenWebSocketParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::OpenWebSocketParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::OpenWebSocketParams::Reader::hasProtocol() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::OpenWebSocketParams::Builder::hasProtocol() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader WebSession::OpenWebSocketParams::Reader::getProtocol() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder WebSession::OpenWebSocketParams::Builder::getProtocol() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::OpenWebSocketParams::Builder::setProtocol( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void WebSession::OpenWebSocketParams::Builder::setProtocol(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder WebSession::OpenWebSocketParams::Builder::initProtocol(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void WebSession::OpenWebSocketParams::Builder::adoptProtocol(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> WebSession::OpenWebSocketParams::Builder::disownProtocol() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::OpenWebSocketParams::Reader::hasClientStream() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::OpenWebSocketParams::Builder::hasClientStream() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::WebSocketStream::Client WebSession::OpenWebSocketParams::Reader::getClientStream() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::WebSocketStream>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::WebSocketStream::Client WebSession::OpenWebSocketParams::Builder::getClientStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::WebSocketStream>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::WebSocketStream::Client WebSession::OpenWebSocketParams::Pipeline::getClientStream() {
  return  ::sandstorm::WebSession::WebSocketStream::Client(_typeless.getPointerField(3).asCap());
}
inline void WebSession::OpenWebSocketParams::Builder::setClientStream( ::sandstorm::WebSession::WebSocketStream::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::WebSocketStream>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(cap));
}
inline void WebSession::OpenWebSocketParams::Builder::setClientStream( ::sandstorm::WebSession::WebSocketStream::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::WebSocketStream>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), cap);
}
inline void WebSession::OpenWebSocketParams::Builder::adoptClientStream(
    ::capnp::Orphan< ::sandstorm::WebSession::WebSocketStream>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::WebSocketStream>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::WebSocketStream> WebSession::OpenWebSocketParams::Builder::disownClientStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::WebSocketStream>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool WebSession::OpenWebSocketResults::Reader::hasProtocol() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::OpenWebSocketResults::Builder::hasProtocol() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader WebSession::OpenWebSocketResults::Reader::getProtocol() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder WebSession::OpenWebSocketResults::Builder::getProtocol() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::OpenWebSocketResults::Builder::setProtocol( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void WebSession::OpenWebSocketResults::Builder::setProtocol(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder WebSession::OpenWebSocketResults::Builder::initProtocol(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::OpenWebSocketResults::Builder::adoptProtocol(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> WebSession::OpenWebSocketResults::Builder::disownProtocol() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::OpenWebSocketResults::Reader::hasServerStream() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::OpenWebSocketResults::Builder::hasServerStream() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::WebSocketStream::Client WebSession::OpenWebSocketResults::Reader::getServerStream() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::WebSocketStream>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::WebSocketStream::Client WebSession::OpenWebSocketResults::Builder::getServerStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::WebSocketStream>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::WebSocketStream::Client WebSession::OpenWebSocketResults::Pipeline::getServerStream() {
  return  ::sandstorm::WebSession::WebSocketStream::Client(_typeless.getPointerField(1).asCap());
}
inline void WebSession::OpenWebSocketResults::Builder::setServerStream( ::sandstorm::WebSession::WebSocketStream::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::WebSocketStream>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(cap));
}
inline void WebSession::OpenWebSocketResults::Builder::setServerStream( ::sandstorm::WebSession::WebSocketStream::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::WebSocketStream>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), cap);
}
inline void WebSession::OpenWebSocketResults::Builder::adoptServerStream(
    ::capnp::Orphan< ::sandstorm::WebSession::WebSocketStream>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::WebSocketStream>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::WebSocketStream> WebSession::OpenWebSocketResults::Builder::disownServerStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::WebSocketStream>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool WebSession::PutParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PutParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::PutParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::PutParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::PutParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::PutParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::PutParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::PutParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::PutParams::Reader::hasContent() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PutParams::Builder::hasContent() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::PutContent::Reader WebSession::PutParams::Reader::getContent() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PutContent>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::PutContent::Builder WebSession::PutParams::Builder::getContent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PutContent>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::PutContent::Pipeline WebSession::PutParams::Pipeline::getContent() {
  return  ::sandstorm::WebSession::PutContent::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void WebSession::PutParams::Builder::setContent( ::sandstorm::WebSession::PutContent::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PutContent>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::PutContent::Builder WebSession::PutParams::Builder::initContent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PutContent>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::PutParams::Builder::adoptContent(
    ::capnp::Orphan< ::sandstorm::WebSession::PutContent>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PutContent>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::PutContent> WebSession::PutParams::Builder::disownContent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PutContent>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::PutParams::Reader::hasContext() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PutParams::Builder::hasContext() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::PutParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::PutParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::PutParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void WebSession::PutParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::PutParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::PutParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::PutParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::DeleteParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::DeleteParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::DeleteParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::DeleteParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::DeleteParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::DeleteParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::DeleteParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::DeleteParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::DeleteParams::Reader::hasContext() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::DeleteParams::Builder::hasContext() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::DeleteParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::DeleteParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::DeleteParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void WebSession::DeleteParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::DeleteParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::DeleteParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::DeleteParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::PostStreamingParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PostStreamingParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::PostStreamingParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::PostStreamingParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::PostStreamingParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::PostStreamingParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::PostStreamingParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::PostStreamingParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::PostStreamingParams::Reader::hasMimeType() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PostStreamingParams::Builder::hasMimeType() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::PostStreamingParams::Reader::getMimeType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::PostStreamingParams::Builder::getMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::PostStreamingParams::Builder::setMimeType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::PostStreamingParams::Builder::initMimeType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::PostStreamingParams::Builder::adoptMimeType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::PostStreamingParams::Builder::disownMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::PostStreamingParams::Reader::hasContext() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PostStreamingParams::Builder::hasContext() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::PostStreamingParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::PostStreamingParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::PostStreamingParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void WebSession::PostStreamingParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::PostStreamingParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::PostStreamingParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::PostStreamingParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::PostStreamingParams::Reader::hasEncoding() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PostStreamingParams::Builder::hasEncoding() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::PostStreamingParams::Reader::getEncoding() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::PostStreamingParams::Builder::getEncoding() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void WebSession::PostStreamingParams::Builder::setEncoding( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::PostStreamingParams::Builder::initEncoding(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void WebSession::PostStreamingParams::Builder::adoptEncoding(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::PostStreamingParams::Builder::disownEncoding() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool WebSession::PostStreamingResults::Reader::hasStream() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PostStreamingResults::Builder::hasStream() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::RequestStream::Client WebSession::PostStreamingResults::Reader::getStream() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::RequestStream>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::RequestStream::Client WebSession::PostStreamingResults::Builder::getStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::RequestStream>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::RequestStream::Client WebSession::PostStreamingResults::Pipeline::getStream() {
  return  ::sandstorm::WebSession::RequestStream::Client(_typeless.getPointerField(0).asCap());
}
inline void WebSession::PostStreamingResults::Builder::setStream( ::sandstorm::WebSession::RequestStream::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::RequestStream>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void WebSession::PostStreamingResults::Builder::setStream( ::sandstorm::WebSession::RequestStream::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::RequestStream>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void WebSession::PostStreamingResults::Builder::adoptStream(
    ::capnp::Orphan< ::sandstorm::WebSession::RequestStream>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::RequestStream>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::RequestStream> WebSession::PostStreamingResults::Builder::disownStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::RequestStream>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool WebSession::PutStreamingParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PutStreamingParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::PutStreamingParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::PutStreamingParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::PutStreamingParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::PutStreamingParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::PutStreamingParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::PutStreamingParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::PutStreamingParams::Reader::hasMimeType() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PutStreamingParams::Builder::hasMimeType() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::PutStreamingParams::Reader::getMimeType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::PutStreamingParams::Builder::getMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::PutStreamingParams::Builder::setMimeType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::PutStreamingParams::Builder::initMimeType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::PutStreamingParams::Builder::adoptMimeType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::PutStreamingParams::Builder::disownMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::PutStreamingParams::Reader::hasContext() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PutStreamingParams::Builder::hasContext() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::PutStreamingParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::PutStreamingParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::PutStreamingParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void WebSession::PutStreamingParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::PutStreamingParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::PutStreamingParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::PutStreamingParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::PutStreamingParams::Reader::hasEncoding() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PutStreamingParams::Builder::hasEncoding() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::PutStreamingParams::Reader::getEncoding() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::PutStreamingParams::Builder::getEncoding() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void WebSession::PutStreamingParams::Builder::setEncoding( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::PutStreamingParams::Builder::initEncoding(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void WebSession::PutStreamingParams::Builder::adoptEncoding(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::PutStreamingParams::Builder::disownEncoding() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool WebSession::PutStreamingResults::Reader::hasStream() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PutStreamingResults::Builder::hasStream() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::RequestStream::Client WebSession::PutStreamingResults::Reader::getStream() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::RequestStream>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::RequestStream::Client WebSession::PutStreamingResults::Builder::getStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::RequestStream>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::RequestStream::Client WebSession::PutStreamingResults::Pipeline::getStream() {
  return  ::sandstorm::WebSession::RequestStream::Client(_typeless.getPointerField(0).asCap());
}
inline void WebSession::PutStreamingResults::Builder::setStream( ::sandstorm::WebSession::RequestStream::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::RequestStream>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void WebSession::PutStreamingResults::Builder::setStream( ::sandstorm::WebSession::RequestStream::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::RequestStream>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void WebSession::PutStreamingResults::Builder::adoptStream(
    ::capnp::Orphan< ::sandstorm::WebSession::RequestStream>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::RequestStream>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::RequestStream> WebSession::PutStreamingResults::Builder::disownStream() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::RequestStream>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool WebSession::PropfindParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PropfindParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::PropfindParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::PropfindParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::PropfindParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::PropfindParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::PropfindParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::PropfindParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::PropfindParams::Reader::hasXmlContent() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PropfindParams::Builder::hasXmlContent() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::PropfindParams::Reader::getXmlContent() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::PropfindParams::Builder::getXmlContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::PropfindParams::Builder::setXmlContent( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::PropfindParams::Builder::initXmlContent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::PropfindParams::Builder::adoptXmlContent(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::PropfindParams::Builder::disownXmlContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::sandstorm::WebSession::PropfindDepth WebSession::PropfindParams::Reader::getDepth() const {
  return _reader.getDataField< ::sandstorm::WebSession::PropfindDepth>(
      0 * ::capnp::ELEMENTS);
}

inline  ::sandstorm::WebSession::PropfindDepth WebSession::PropfindParams::Builder::getDepth() {
  return _builder.getDataField< ::sandstorm::WebSession::PropfindDepth>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSession::PropfindParams::Builder::setDepth( ::sandstorm::WebSession::PropfindDepth value) {
  _builder.setDataField< ::sandstorm::WebSession::PropfindDepth>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::PropfindParams::Reader::hasContext() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PropfindParams::Builder::hasContext() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::PropfindParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::PropfindParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::PropfindParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void WebSession::PropfindParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::PropfindParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::PropfindParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::PropfindParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::ProppatchParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::ProppatchParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::ProppatchParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::ProppatchParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::ProppatchParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::ProppatchParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::ProppatchParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::ProppatchParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::ProppatchParams::Reader::hasXmlContent() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::ProppatchParams::Builder::hasXmlContent() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::ProppatchParams::Reader::getXmlContent() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::ProppatchParams::Builder::getXmlContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::ProppatchParams::Builder::setXmlContent( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::ProppatchParams::Builder::initXmlContent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::ProppatchParams::Builder::adoptXmlContent(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::ProppatchParams::Builder::disownXmlContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::ProppatchParams::Reader::hasContext() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::ProppatchParams::Builder::hasContext() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::ProppatchParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::ProppatchParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::ProppatchParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void WebSession::ProppatchParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::ProppatchParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::ProppatchParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::ProppatchParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::MkcolParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::MkcolParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::MkcolParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::MkcolParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::MkcolParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::MkcolParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::MkcolParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::MkcolParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::MkcolParams::Reader::hasContent() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::MkcolParams::Builder::hasContent() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::PostContent::Reader WebSession::MkcolParams::Reader::getContent() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::PostContent::Builder WebSession::MkcolParams::Builder::getContent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::PostContent::Pipeline WebSession::MkcolParams::Pipeline::getContent() {
  return  ::sandstorm::WebSession::PostContent::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void WebSession::MkcolParams::Builder::setContent( ::sandstorm::WebSession::PostContent::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::PostContent::Builder WebSession::MkcolParams::Builder::initContent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::MkcolParams::Builder::adoptContent(
    ::capnp::Orphan< ::sandstorm::WebSession::PostContent>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::PostContent> WebSession::MkcolParams::Builder::disownContent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::MkcolParams::Reader::hasContext() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::MkcolParams::Builder::hasContext() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::MkcolParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::MkcolParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::MkcolParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void WebSession::MkcolParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::MkcolParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::MkcolParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::MkcolParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::CopyParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::CopyParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::CopyParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::CopyParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::CopyParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::CopyParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::CopyParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::CopyParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::CopyParams::Reader::hasDestination() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::CopyParams::Builder::hasDestination() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::CopyParams::Reader::getDestination() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::CopyParams::Builder::getDestination() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::CopyParams::Builder::setDestination( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::CopyParams::Builder::initDestination(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::CopyParams::Builder::adoptDestination(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::CopyParams::Builder::disownDestination() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::CopyParams::Reader::getNoOverwrite() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool WebSession::CopyParams::Builder::getNoOverwrite() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSession::CopyParams::Builder::setNoOverwrite(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::CopyParams::Reader::getShallow() const {
  return _reader.getDataField<bool>(
      1 * ::capnp::ELEMENTS);
}

inline bool WebSession::CopyParams::Builder::getShallow() {
  return _builder.getDataField<bool>(
      1 * ::capnp::ELEMENTS);
}
inline void WebSession::CopyParams::Builder::setShallow(bool value) {
  _builder.setDataField<bool>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::CopyParams::Reader::hasContext() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::CopyParams::Builder::hasContext() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::CopyParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::CopyParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::CopyParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void WebSession::CopyParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::CopyParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::CopyParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::CopyParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::MoveParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::MoveParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::MoveParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::MoveParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::MoveParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::MoveParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::MoveParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::MoveParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::MoveParams::Reader::hasDestination() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::MoveParams::Builder::hasDestination() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::MoveParams::Reader::getDestination() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::MoveParams::Builder::getDestination() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::MoveParams::Builder::setDestination( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::MoveParams::Builder::initDestination(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::MoveParams::Builder::adoptDestination(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::MoveParams::Builder::disownDestination() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::MoveParams::Reader::getNoOverwrite() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool WebSession::MoveParams::Builder::getNoOverwrite() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSession::MoveParams::Builder::setNoOverwrite(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::MoveParams::Reader::hasContext() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::MoveParams::Builder::hasContext() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::MoveParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::MoveParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::MoveParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void WebSession::MoveParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::MoveParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::MoveParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::MoveParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::LockParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::LockParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::LockParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::LockParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::LockParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::LockParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::LockParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::LockParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::LockParams::Reader::hasXmlContent() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::LockParams::Builder::hasXmlContent() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::LockParams::Reader::getXmlContent() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::LockParams::Builder::getXmlContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::LockParams::Builder::setXmlContent( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::LockParams::Builder::initXmlContent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::LockParams::Builder::adoptXmlContent(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::LockParams::Builder::disownXmlContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::LockParams::Reader::getShallow() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool WebSession::LockParams::Builder::getShallow() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void WebSession::LockParams::Builder::setShallow(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool WebSession::LockParams::Reader::hasContext() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::LockParams::Builder::hasContext() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::LockParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::LockParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::LockParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void WebSession::LockParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::LockParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::LockParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::LockParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::UnlockParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::UnlockParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::UnlockParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::UnlockParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::UnlockParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::UnlockParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::UnlockParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::UnlockParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::UnlockParams::Reader::hasLockToken() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::UnlockParams::Builder::hasLockToken() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::UnlockParams::Reader::getLockToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::UnlockParams::Builder::getLockToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::UnlockParams::Builder::setLockToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::UnlockParams::Builder::initLockToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::UnlockParams::Builder::adoptLockToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::UnlockParams::Builder::disownLockToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::UnlockParams::Reader::hasContext() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::UnlockParams::Builder::hasContext() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::UnlockParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::UnlockParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::UnlockParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void WebSession::UnlockParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::UnlockParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::UnlockParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::UnlockParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::AclParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::AclParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::AclParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::AclParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::AclParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::AclParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::AclParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::AclParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::AclParams::Reader::hasXmlContent() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::AclParams::Builder::hasXmlContent() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::AclParams::Reader::getXmlContent() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::AclParams::Builder::getXmlContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::AclParams::Builder::setXmlContent( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::AclParams::Builder::initXmlContent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void WebSession::AclParams::Builder::adoptXmlContent(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::AclParams::Builder::disownXmlContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::AclParams::Reader::hasContext() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::AclParams::Builder::hasContext() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::AclParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::AclParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::AclParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void WebSession::AclParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::AclParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::AclParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::AclParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::ReportParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::ReportParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::ReportParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::ReportParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::ReportParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::ReportParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::ReportParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::ReportParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::ReportParams::Reader::hasContent() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::ReportParams::Builder::hasContent() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::PostContent::Reader WebSession::ReportParams::Reader::getContent() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::PostContent::Builder WebSession::ReportParams::Builder::getContent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::PostContent::Pipeline WebSession::ReportParams::Pipeline::getContent() {
  return  ::sandstorm::WebSession::PostContent::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void WebSession::ReportParams::Builder::setContent( ::sandstorm::WebSession::PostContent::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::PostContent::Builder WebSession::ReportParams::Builder::initContent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::ReportParams::Builder::adoptContent(
    ::capnp::Orphan< ::sandstorm::WebSession::PostContent>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::PostContent> WebSession::ReportParams::Builder::disownContent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::ReportParams::Reader::hasContext() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::ReportParams::Builder::hasContext() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::ReportParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::ReportParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::ReportParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void WebSession::ReportParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::ReportParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::ReportParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::ReportParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool WebSession::OptionsParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::OptionsParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::OptionsParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::OptionsParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::OptionsParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::OptionsParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::OptionsParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::OptionsParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::OptionsParams::Reader::hasContext() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::OptionsParams::Builder::hasContext() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::OptionsParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::OptionsParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::OptionsParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void WebSession::OptionsParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::OptionsParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::OptionsParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::OptionsParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::PatchParams::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PatchParams::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSession::PatchParams::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSession::PatchParams::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void WebSession::PatchParams::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSession::PatchParams::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void WebSession::PatchParams::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSession::PatchParams::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool WebSession::PatchParams::Reader::hasContent() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PatchParams::Builder::hasContent() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::PostContent::Reader WebSession::PatchParams::Reader::getContent() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::PostContent::Builder WebSession::PatchParams::Builder::getContent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::PostContent::Pipeline WebSession::PatchParams::Pipeline::getContent() {
  return  ::sandstorm::WebSession::PostContent::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void WebSession::PatchParams::Builder::setContent( ::sandstorm::WebSession::PostContent::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::PostContent::Builder WebSession::PatchParams::Builder::initContent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void WebSession::PatchParams::Builder::adoptContent(
    ::capnp::Orphan< ::sandstorm::WebSession::PostContent>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::PostContent> WebSession::PatchParams::Builder::disownContent() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::PostContent>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool WebSession::PatchParams::Reader::hasContext() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool WebSession::PatchParams::Builder::hasContext() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::WebSession::Context::Reader WebSession::PatchParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::PatchParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::WebSession::Context::Pipeline WebSession::PatchParams::Pipeline::getContext() {
  return  ::sandstorm::WebSession::Context::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void WebSession::PatchParams::Builder::setContext( ::sandstorm::WebSession::Context::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::WebSession::Context::Builder WebSession::PatchParams::Builder::initContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void WebSession::PatchParams::Builder::adoptContext(
    ::capnp::Orphan< ::sandstorm::WebSession::Context>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::WebSession::Context> WebSession::PatchParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::sandstorm::WebSession::Context>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

}  // namespace

#endif  // CAPNP_INCLUDED_a8cb0f2f1a756b32_
