// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: activity.capnp

#include "activity.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<106> b_a7c0b6eaa98c6c4b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     75, 108, 140, 169, 234, 182, 192, 167,
     25,   0,   0,   0,   1,   0,   1,   0,
    250,  51, 207, 203, 212,   1, 224, 164,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
     37,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  97,  99, 116, 105, 118, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  65,  99, 116, 105, 118, 105, 116,
    121,  69, 118, 101, 110, 116,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
     68, 186, 255, 134,  90,  43, 144, 243,
      9,   0,   0,   0,  90,   0,   0,   0,
    119, 150, 216, 188, 155,  17,  77, 187,
      9,   0,   0,   0,  42,   0,   0,   0,
     84, 104, 114, 101,  97, 100,  73, 110,
    102, 111,   0,   0,   0,   0,   0,   0,
     85, 115, 101, 114,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    164,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    156,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 116, 104,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 111, 116, 105, 102, 105,  99,  97,
    116, 105, 111, 110,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    131, 247, 212,  66, 202, 242, 185, 211,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 115, 101, 114, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    119, 150, 216, 188, 155,  17,  77, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 104, 114, 101,  97, 100,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     68, 186, 255, 134,  90,  43, 144, 243,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a7c0b6eaa98c6c4b = b_a7c0b6eaa98c6c4b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a7c0b6eaa98c6c4b[] = {
  &s_bb4d119bbcd89677,
  &s_d3b9f2ca42d4f783,
  &s_f3902b5a86ffba44,
};
static const uint16_t m_a7c0b6eaa98c6c4b[] = {1, 0, 4, 2, 3};
static const uint16_t i_a7c0b6eaa98c6c4b[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_a7c0b6eaa98c6c4b = {
  0xa7c0b6eaa98c6c4b, b_a7c0b6eaa98c6c4b.words, 106, d_a7c0b6eaa98c6c4b, m_a7c0b6eaa98c6c4b,
  3, 5, i_a7c0b6eaa98c6c4b, nullptr, nullptr, { &s_a7c0b6eaa98c6c4b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_f3902b5a86ffba44 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     68, 186, 255, 134,  90,  43, 144, 243,
     39,   0,   0,   0,   1,   0,   0,   0,
     75, 108, 140, 169, 234, 182, 192, 167,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  97,  99, 116, 105, 118, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  65,  99, 116, 105, 118, 105, 116,
    121,  69, 118, 101, 110, 116,  46,  84,
    104, 114, 101,  97, 100,  73, 110, 102,
    111,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 116, 104,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 116, 108, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     73, 226, 123,  55, 114, 183,  93, 139,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f3902b5a86ffba44 = b_f3902b5a86ffba44.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f3902b5a86ffba44[] = {
  &s_8b5db772377be249,
};
static const uint16_t m_f3902b5a86ffba44[] = {0, 1};
static const uint16_t i_f3902b5a86ffba44[] = {0, 1};
const ::capnp::_::RawSchema s_f3902b5a86ffba44 = {
  0xf3902b5a86ffba44, b_f3902b5a86ffba44.words, 51, d_f3902b5a86ffba44, m_f3902b5a86ffba44,
  1, 2, i_f3902b5a86ffba44, nullptr, nullptr, { &s_f3902b5a86ffba44, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<83> b_bb4d119bbcd89677 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    119, 150, 216, 188, 155,  17,  77, 187,
     39,   0,   0,   0,   1,   0,   1,   0,
     75, 108, 140, 169, 234, 182, 192, 167,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  97,  99, 116, 105, 118, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  65,  99, 116, 105, 118, 105, 116,
    121,  69, 118, 101, 110, 116,  46,  85,
    115, 101, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
    105, 100, 101, 110, 116, 105, 116, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     24, 221,  81, 169, 122, 152, 132, 192,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 110, 116, 105, 111, 110, 101,
    100,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 110,  86, 105, 101, 119,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 117,  98, 115,  99, 114, 105,  98,
    101, 100,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bb4d119bbcd89677 = b_bb4d119bbcd89677.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bb4d119bbcd89677[] = {
  &s_c084987aa951dd18,
};
static const uint16_t m_bb4d119bbcd89677[] = {2, 0, 1, 3};
static const uint16_t i_bb4d119bbcd89677[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_bb4d119bbcd89677 = {
  0xbb4d119bbcd89677, b_bb4d119bbcd89677.words, 83, d_bb4d119bbcd89677, m_bb4d119bbcd89677,
  1, 4, i_bb4d119bbcd89677, nullptr, nullptr, { &s_bb4d119bbcd89677, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<160> b_e638de0ad7c89a2b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     43, 154, 200, 215,  10, 222,  56, 230,
     25,   0,   0,   0,   1,   0,   1,   0,
    250,  51, 207, 203, 212,   1, 224, 164,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 255,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  97,  99, 116, 105, 118, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  65,  99, 116, 105, 118, 105, 116,
    121,  84, 121, 112, 101,  68, 101, 102,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     36,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    237,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    232,   0,   0,   0,   3,   0,   1,   0,
    244,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    241,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    240,   0,   0,   0,   3,   0,   1,   0,
    252,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    249,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    248,   0,   0,   0,   3,   0,   1,   0,
      4,   1,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    207,  96, 243,  93,  69, 110, 149, 153,
      1,   1,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,  32,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    241,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    240,   0,   0,   0,   3,   0,   1,   0,
    252,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,  33,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    249,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    252,   0,   0,   0,   3,   0,   1,   0,
      8,   1,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   1,   0,   0, 178,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   1,   0,   0,   3,   0,   1,   0,
     20,   1,   0,   0,   2,   0,   1,   0,
      7,   0,   0,   0,  35,   0,   0,   0,
      0,   0,   1,   0,   9,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   1,   0,   0, 170,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     20,   1,   0,   0,   3,   0,   1,   0,
     32,   1,   0,   0,   2,   0,   1,   0,
      8,   0,   0,   0,  36,   0,   0,   0,
      0,   0,   1,   0,  10,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   1,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     28,   1,   0,   0,   3,   0,   1,   0,
     40,   1,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 101, 114,  98,  80, 104, 114,  97,
    115, 101,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     73, 226, 123,  55, 114, 183,  93, 139,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 115,  99, 114, 105, 112, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     73, 226, 123,  55, 114, 183,  93, 139,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 113, 117, 105, 114, 101, 100,
     80, 101, 114, 109, 105, 115, 115, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
    111,  98, 115, 111, 108, 101, 116, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 111, 116, 105, 102, 121,  83, 117,
     98, 115,  99, 114, 105,  98, 101, 114,
    115,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 117, 116, 111,  83, 117,  98, 115,
     99, 114, 105,  98, 101,  84, 111,  84,
    104, 114, 101,  97, 100,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 117, 116, 111,  83, 117,  98, 115,
     99, 114, 105,  98, 101,  84, 111,  71,
    114,  97, 105, 110,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 117, 112, 112, 114, 101, 115, 115,
     85, 110, 114, 101,  97, 100,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e638de0ad7c89a2b = b_e638de0ad7c89a2b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e638de0ad7c89a2b[] = {
  &s_8b5db772377be249,
  &s_99956e455df360cf,
};
static const uint16_t m_e638de0ad7c89a2b[] = {7, 6, 2, 0, 5, 4, 3, 8, 1};
static const uint16_t i_e638de0ad7c89a2b[] = {0, 1, 2, 3, 4, 5, 6, 7, 8};
const ::capnp::_::RawSchema s_e638de0ad7c89a2b = {
  0xe638de0ad7c89a2b, b_e638de0ad7c89a2b.words, 160, d_e638de0ad7c89a2b, m_e638de0ad7c89a2b,
  2, 9, i_e638de0ad7c89a2b, nullptr, nullptr, { &s_e638de0ad7c89a2b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<69> b_99956e455df360cf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    207,  96, 243,  93,  69, 110, 149, 153,
     41,   0,   0,   0,   1,   0,   1,   0,
     43, 154, 200, 215,  10, 222,  56, 230,
      3,   0,   7,   0,   1,   0,   3,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  97,  99, 116, 105, 118, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  65,  99, 116, 105, 118, 105, 116,
    121,  84, 121, 112, 101,  68, 101, 102,
     46, 114, 101, 113, 117, 105, 114, 101,
    100,  80, 101, 114, 109, 105, 115, 115,
    105, 111, 110,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
    101, 118, 101, 114, 121, 111, 110, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 101, 114, 109, 105, 115, 115, 105,
    111, 110,  73, 110, 100, 101, 120,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 120, 112, 108, 105,  99, 105, 116,
     76, 105, 115, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_99956e455df360cf = b_99956e455df360cf.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_99956e455df360cf[] = {
  &s_e638de0ad7c89a2b,
};
static const uint16_t m_99956e455df360cf[] = {0, 2, 1};
static const uint16_t i_99956e455df360cf[] = {0, 1, 2};
const ::capnp::_::RawSchema s_99956e455df360cf = {
  0x99956e455df360cf, b_99956e455df360cf.words, 69, d_99956e455df360cf, m_99956e455df360cf,
  1, 3, i_99956e455df360cf, nullptr, nullptr, { &s_99956e455df360cf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_d3b9f2ca42d4f783 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    131, 247, 212,  66, 202, 242, 185, 211,
     25,   0,   0,   0,   1,   0,   0,   0,
    250,  51, 207, 203, 212,   1, 224, 164,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  97,  99, 116, 105, 118, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  78, 111, 116, 105, 102, 105,  99,
     97, 116, 105, 111, 110,  68, 105, 115,
    112, 108,  97, 121,  73, 110, 102, 111,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 112, 116, 105, 111, 110,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     73, 226, 123,  55, 114, 183,  93, 139,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d3b9f2ca42d4f783 = b_d3b9f2ca42d4f783.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d3b9f2ca42d4f783[] = {
  &s_8b5db772377be249,
};
static const uint16_t m_d3b9f2ca42d4f783[] = {0};
static const uint16_t i_d3b9f2ca42d4f783[] = {0};
const ::capnp::_::RawSchema s_d3b9f2ca42d4f783 = {
  0xd3b9f2ca42d4f783, b_d3b9f2ca42d4f783.words, 36, d_d3b9f2ca42d4f783, m_d3b9f2ca42d4f783,
  1, 1, i_d3b9f2ca42d4f783, nullptr, nullptr, { &s_d3b9f2ca42d4f783, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_f0f87337d73020f0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    240,  32,  48, 215,  55, 115, 248, 240,
     25,   0,   0,   0,   3,   0,   0,   0,
    250,  51, 207, 203, 212,   1, 224, 164,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  71,   0,   0,   0,
     81,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  97,  99, 116, 105, 118, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  78, 111, 116, 105, 102, 105,  99,
     97, 116, 105, 111, 110,  84,  97, 114,
    103, 101, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     58,   3, 201, 118,  67, 166, 172, 218,
    194, 211,  40,  64, 254, 186,  76, 238,
     17,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
     97, 100, 100,  79, 110, 103, 111, 105,
    110, 103,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_f0f87337d73020f0 = b_f0f87337d73020f0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f0f87337d73020f0[] = {
  &s_daaca64376c9033a,
  &s_ee4cbafe4028d3c2,
};
static const uint16_t m_f0f87337d73020f0[] = {0};
const ::capnp::_::RawSchema s_f0f87337d73020f0 = {
  0xf0f87337d73020f0, b_f0f87337d73020f0.words, 32, d_f0f87337d73020f0, m_f0f87337d73020f0,
  2, 1, nullptr, nullptr, nullptr, { &s_f0f87337d73020f0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<53> b_daaca64376c9033a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     58,   3, 201, 118,  67, 166, 172, 218,
     44,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  97,  99, 116, 105, 118, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  78, 111, 116, 105, 102, 105,  99,
     97, 116, 105, 111, 110,  84,  97, 114,
    103, 101, 116,  46,  97, 100, 100,  79,
    110, 103, 111, 105, 110, 103,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
    100, 105, 115, 112, 108,  97, 121,  73,
    110, 102, 111,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    131, 247, 212,  66, 202, 242, 185, 211,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 111, 116, 105, 102, 105,  99,  97,
    116, 105, 111, 110,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    205,  64, 137, 184, 219,  29, 133, 254,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_daaca64376c9033a = b_daaca64376c9033a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_daaca64376c9033a[] = {
  &s_d3b9f2ca42d4f783,
  &s_fe851ddbb88940cd,
};
static const uint16_t m_daaca64376c9033a[] = {0, 1};
static const uint16_t i_daaca64376c9033a[] = {0, 1};
const ::capnp::_::RawSchema s_daaca64376c9033a = {
  0xdaaca64376c9033a, b_daaca64376c9033a.words, 53, d_daaca64376c9033a, m_daaca64376c9033a,
  2, 2, i_daaca64376c9033a, nullptr, nullptr, { &s_daaca64376c9033a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_ee4cbafe4028d3c2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    194, 211,  40,  64, 254, 186,  76, 238,
     44,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  97,  99, 116, 105, 118, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  78, 111, 116, 105, 102, 105,  99,
     97, 116, 105, 111, 110,  84,  97, 114,
    103, 101, 116,  46,  97, 100, 100,  79,
    110, 103, 111, 105, 110, 103,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    224,  66,  96,  96, 172,  36, 244, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ee4cbafe4028d3c2 = b_ee4cbafe4028d3c2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ee4cbafe4028d3c2[] = {
  &s_98f424ac606042e0,
};
static const uint16_t m_ee4cbafe4028d3c2[] = {0};
static const uint16_t i_ee4cbafe4028d3c2[] = {0};
const ::capnp::_::RawSchema s_ee4cbafe4028d3c2 = {
  0xee4cbafe4028d3c2, b_ee4cbafe4028d3c2.words, 36, d_ee4cbafe4028d3c2, m_ee4cbafe4028d3c2,
  1, 1, i_ee4cbafe4028d3c2, nullptr, nullptr, { &s_ee4cbafe4028d3c2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_fe851ddbb88940cd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    205,  64, 137, 184, 219,  29, 133, 254,
     25,   0,   0,   0,   3,   0,   0,   0,
    250,  51, 207, 203, 212,   1, 224, 164,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  71,   0,   0,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  97,  99, 116, 105, 118, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  79, 110, 103, 111, 105, 110, 103,
     78, 111, 116, 105, 102, 105,  99,  97,
    116, 105, 111, 110,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    139, 148,  48, 168, 130, 203, 209, 241,
      9, 226,  25, 184, 212,  83,  20, 248,
     17,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
     99,  97, 110,  99, 101, 108,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_fe851ddbb88940cd = b_fe851ddbb88940cd.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fe851ddbb88940cd[] = {
  &s_f1d1cb82a830948b,
  &s_f81453d4b819e209,
};
static const uint16_t m_fe851ddbb88940cd[] = {0};
const ::capnp::_::RawSchema s_fe851ddbb88940cd = {
  0xfe851ddbb88940cd, b_fe851ddbb88940cd.words, 31, d_fe851ddbb88940cd, m_fe851ddbb88940cd,
  2, 1, nullptr, nullptr, nullptr, { &s_fe851ddbb88940cd, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_f1d1cb82a830948b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    139, 148,  48, 168, 130, 203, 209, 241,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  97,  99, 116, 105, 118, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  79, 110, 103, 111, 105, 110, 103,
     78, 111, 116, 105, 102, 105,  99,  97,
    116, 105, 111, 110,  46,  99,  97, 110,
     99, 101, 108,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f1d1cb82a830948b = b_f1d1cb82a830948b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f1d1cb82a830948b = {
  0xf1d1cb82a830948b, b_f1d1cb82a830948b.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f1d1cb82a830948b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_f81453d4b819e209 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      9, 226,  25, 184, 212,  83,  20, 248,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  97,  99, 116, 105, 118, 105,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  79, 110, 103, 111, 105, 110, 103,
     78, 111, 116, 105, 102, 105,  99,  97,
    116, 105, 111, 110,  46,  99,  97, 110,
     99, 101, 108,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f81453d4b819e209 = b_f81453d4b819e209.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f81453d4b819e209 = {
  0xf81453d4b819e209, b_f81453d4b819e209.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f81453d4b819e209, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace sandstorm {

// ActivityEvent
constexpr uint16_t ActivityEvent::_capnpPrivate::dataWordSize;
constexpr uint16_t ActivityEvent::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ActivityEvent::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ActivityEvent::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ActivityEvent::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ActivityEvent::ThreadInfo
constexpr uint16_t ActivityEvent::ThreadInfo::_capnpPrivate::dataWordSize;
constexpr uint16_t ActivityEvent::ThreadInfo::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ActivityEvent::ThreadInfo::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ActivityEvent::ThreadInfo::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ActivityEvent::ThreadInfo::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ActivityEvent::User
constexpr uint16_t ActivityEvent::User::_capnpPrivate::dataWordSize;
constexpr uint16_t ActivityEvent::User::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ActivityEvent::User::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ActivityEvent::User::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ActivityEvent::User::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ActivityTypeDef
constexpr uint16_t ActivityTypeDef::_capnpPrivate::dataWordSize;
constexpr uint16_t ActivityTypeDef::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ActivityTypeDef::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ActivityTypeDef::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ActivityTypeDef::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ActivityTypeDef::RequiredPermission
constexpr uint16_t ActivityTypeDef::RequiredPermission::_capnpPrivate::dataWordSize;
constexpr uint16_t ActivityTypeDef::RequiredPermission::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ActivityTypeDef::RequiredPermission::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ActivityTypeDef::RequiredPermission::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ActivityTypeDef::RequiredPermission::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// NotificationDisplayInfo
constexpr uint16_t NotificationDisplayInfo::_capnpPrivate::dataWordSize;
constexpr uint16_t NotificationDisplayInfo::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind NotificationDisplayInfo::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* NotificationDisplayInfo::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* NotificationDisplayInfo::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::NotificationTarget::AddOngoingParams,  ::sandstorm::NotificationTarget::AddOngoingResults>
NotificationTarget::Client::addOngoingRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::NotificationTarget::AddOngoingParams,  ::sandstorm::NotificationTarget::AddOngoingResults>(
      0xf0f87337d73020f0ull, 0, sizeHint);
}
::kj::Promise<void> NotificationTarget::Server::addOngoing(AddOngoingContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/activity.capnp:NotificationTarget", "addOngoing",
      0xf0f87337d73020f0ull, 0);
}
::kj::Promise<void> NotificationTarget::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xf0f87337d73020f0ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/activity.capnp:NotificationTarget", interfaceId);
  }
}
::kj::Promise<void> NotificationTarget::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return addOngoing(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::NotificationTarget::AddOngoingParams,  ::sandstorm::NotificationTarget::AddOngoingResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/activity.capnp:NotificationTarget",
          0xf0f87337d73020f0ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// NotificationTarget
#if !CAPNP_LITE
constexpr ::capnp::Kind NotificationTarget::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* NotificationTarget::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* NotificationTarget::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// NotificationTarget::AddOngoingParams
constexpr uint16_t NotificationTarget::AddOngoingParams::_capnpPrivate::dataWordSize;
constexpr uint16_t NotificationTarget::AddOngoingParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind NotificationTarget::AddOngoingParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* NotificationTarget::AddOngoingParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* NotificationTarget::AddOngoingParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// NotificationTarget::AddOngoingResults
constexpr uint16_t NotificationTarget::AddOngoingResults::_capnpPrivate::dataWordSize;
constexpr uint16_t NotificationTarget::AddOngoingResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind NotificationTarget::AddOngoingResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* NotificationTarget::AddOngoingResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* NotificationTarget::AddOngoingResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::OngoingNotification::CancelParams,  ::sandstorm::OngoingNotification::CancelResults>
OngoingNotification::Client::cancelRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::OngoingNotification::CancelParams,  ::sandstorm::OngoingNotification::CancelResults>(
      0xfe851ddbb88940cdull, 0, sizeHint);
}
::kj::Promise<void> OngoingNotification::Server::cancel(CancelContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/activity.capnp:OngoingNotification", "cancel",
      0xfe851ddbb88940cdull, 0);
}
::kj::Promise<void> OngoingNotification::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xfe851ddbb88940cdull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/activity.capnp:OngoingNotification", interfaceId);
  }
}
::kj::Promise<void> OngoingNotification::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return cancel(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::OngoingNotification::CancelParams,  ::sandstorm::OngoingNotification::CancelResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/activity.capnp:OngoingNotification",
          0xfe851ddbb88940cdull, methodId);
  }
}
#endif  // !CAPNP_LITE

// OngoingNotification
#if !CAPNP_LITE
constexpr ::capnp::Kind OngoingNotification::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OngoingNotification::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* OngoingNotification::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// OngoingNotification::CancelParams
constexpr uint16_t OngoingNotification::CancelParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OngoingNotification::CancelParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OngoingNotification::CancelParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OngoingNotification::CancelParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* OngoingNotification::CancelParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// OngoingNotification::CancelResults
constexpr uint16_t OngoingNotification::CancelResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OngoingNotification::CancelResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OngoingNotification::CancelResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OngoingNotification::CancelResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* OngoingNotification::CancelResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE


}  // namespace

