// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: powerbox.capnp

#include "powerbox.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<61> b_edcf0fa3bfc71c58 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     88,  28, 199, 191, 163,  15, 207, 237,
     25,   0,   0,   0,   1,   0,   1,   0,
    228,  83, 205,  20, 171,   0, 194, 246,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
     41,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 112, 111, 119, 101, 114,  98,
    111, 120,  46,  99,  97, 112, 110, 112,
     58,  80, 111, 119, 101, 114,  98, 111,
    120,  68, 101, 115,  99, 114, 105, 112,
    116, 111, 114,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
     24, 196,   3, 223, 168,  22,  61, 190,
      9,   0,   0,   0,  34,   0,   0,   0,
    222, 232,  92, 210,  69, 250,  26, 187,
      5,   0,   0,   0, 106,   0,   0,   0,
     84,  97, 103,   0,   0,   0,   0,   0,
     77,  97, 116,  99, 104,  81, 117,  97,
    108, 105, 116, 121,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     56,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
    116,  97, 103, 115,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     24, 196,   3, 223, 168,  22,  61, 190,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113, 117,  97, 108, 105, 116, 121,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    222, 232,  92, 210,  69, 250,  26, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_edcf0fa3bfc71c58 = b_edcf0fa3bfc71c58.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_edcf0fa3bfc71c58[] = {
  &s_bb1afa45d25ce8de,
  &s_be3d16a8df03c418,
};
static const uint16_t m_edcf0fa3bfc71c58[] = {1, 0};
static const uint16_t i_edcf0fa3bfc71c58[] = {0, 1};
const ::capnp::_::RawSchema s_edcf0fa3bfc71c58 = {
  0xedcf0fa3bfc71c58, b_edcf0fa3bfc71c58.words, 61, d_edcf0fa3bfc71c58, m_edcf0fa3bfc71c58,
  2, 2, i_edcf0fa3bfc71c58, nullptr, nullptr, { &s_edcf0fa3bfc71c58, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_be3d16a8df03c418 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     24, 196,   3, 223, 168,  22,  61, 190,
     44,   0,   0,   0,   1,   0,   1,   0,
     88,  28, 199, 191, 163,  15, 207, 237,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 112, 111, 119, 101, 114,  98,
    111, 120,  46,  99,  97, 112, 110, 112,
     58,  80, 111, 119, 101, 114,  98, 111,
    120,  68, 101, 115,  99, 114, 105, 112,
    116, 111, 114,  46,  84,  97, 103,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_be3d16a8df03c418 = b_be3d16a8df03c418.words;
#if !CAPNP_LITE
static const uint16_t m_be3d16a8df03c418[] = {0, 1};
static const uint16_t i_be3d16a8df03c418[] = {0, 1};
const ::capnp::_::RawSchema s_be3d16a8df03c418 = {
  0xbe3d16a8df03c418, b_be3d16a8df03c418.words, 50, nullptr, m_be3d16a8df03c418,
  0, 2, i_be3d16a8df03c418, nullptr, nullptr, { &s_be3d16a8df03c418, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_bb1afa45d25ce8de = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    222, 232,  92, 210,  69, 250,  26, 187,
     44,   0,   0,   0,   2,   0,   0,   0,
     88,  28, 199, 191, 163,  15, 207, 237,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  79,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 112, 111, 119, 101, 114,  98,
    111, 120,  46,  99,  97, 112, 110, 112,
     58,  80, 111, 119, 101, 114,  98, 111,
    120,  68, 101, 115,  99, 114, 105, 112,
    116, 111, 114,  46,  77,  97, 116,  99,
    104,  81, 117,  97, 108, 105, 116, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   1,   0,   2,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  99,  99, 101, 112, 116,  97,  98,
    108, 101,   0,   0,   0,   0,   0,   0,
    112, 114, 101, 102, 101, 114, 114, 101,
    100,   0,   0,   0,   0,   0,   0,   0,
    117, 110,  97,  99,  99, 101, 112, 116,
     97,  98, 108, 101,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bb1afa45d25ce8de = b_bb1afa45d25ce8de.words;
#if !CAPNP_LITE
static const uint16_t m_bb1afa45d25ce8de[] = {0, 1, 2};
const ::capnp::_::RawSchema s_bb1afa45d25ce8de = {
  0xbb1afa45d25ce8de, b_bb1afa45d25ce8de.words, 37, nullptr, m_bb1afa45d25ce8de,
  0, 3, nullptr, nullptr, nullptr, { &s_bb1afa45d25ce8de, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(MatchQuality_bb1afa45d25ce8de, bb1afa45d25ce8de);
static const ::capnp::_::AlignedData<67> b_a553a209bee32bec = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    236,  43, 227, 190,   9, 162,  83, 165,
     25,   0,   0,   0,   1,   0,   0,   0,
    228,  83, 205,  20, 171,   0, 194, 246,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 112, 111, 119, 101, 114,  98,
    111, 120,  46,  99,  97, 112, 110, 112,
     58,  80, 111, 119, 101, 114,  98, 111,
    120,  68, 105, 115, 112, 108,  97, 121,
     73, 110, 102, 111,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     80,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 116, 108, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     73, 226, 123,  55, 114, 183,  93, 139,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 101, 114,  98,  80, 104, 114,  97,
    115, 101,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     73, 226, 123,  55, 114, 183,  93, 139,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 115,  99, 114, 105, 112, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     73, 226, 123,  55, 114, 183,  93, 139,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a553a209bee32bec = b_a553a209bee32bec.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a553a209bee32bec[] = {
  &s_8b5db772377be249,
};
static const uint16_t m_a553a209bee32bec[] = {2, 0, 1};
static const uint16_t i_a553a209bee32bec[] = {0, 1, 2};
const ::capnp::_::RawSchema s_a553a209bee32bec = {
  0xa553a209bee32bec, b_a553a209bee32bec.words, 67, d_a553a209bee32bec, m_a553a209bee32bec,
  1, 3, i_a553a209bee32bec, nullptr, nullptr, { &s_a553a209bee32bec, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace sandstorm {

// PowerboxDescriptor
constexpr uint16_t PowerboxDescriptor::_capnpPrivate::dataWordSize;
constexpr uint16_t PowerboxDescriptor::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind PowerboxDescriptor::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PowerboxDescriptor::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* PowerboxDescriptor::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// PowerboxDescriptor::Tag
constexpr uint16_t PowerboxDescriptor::Tag::_capnpPrivate::dataWordSize;
constexpr uint16_t PowerboxDescriptor::Tag::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind PowerboxDescriptor::Tag::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PowerboxDescriptor::Tag::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* PowerboxDescriptor::Tag::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// PowerboxDisplayInfo
constexpr uint16_t PowerboxDisplayInfo::_capnpPrivate::dataWordSize;
constexpr uint16_t PowerboxDisplayInfo::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind PowerboxDisplayInfo::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PowerboxDisplayInfo::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* PowerboxDisplayInfo::_capnpPrivate::brand;
#endif  // !CAPNP_LITE


}  // namespace

