// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: util.capnp

#include "util.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<48> b_94a081e4abb13424 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     36,  52, 177, 171, 228, 129, 160, 148,
     21,   0,   0,   0,   1,   0,   0,   0,
    146, 153,  61,  44, 121,  13, 213, 236,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  75, 101, 121,
     86,  97, 108, 117, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    107, 101, 121,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_94a081e4abb13424 = b_94a081e4abb13424.words;
#if !CAPNP_LITE
static const uint16_t m_94a081e4abb13424[] = {0, 1};
static const uint16_t i_94a081e4abb13424[] = {0, 1};
const ::capnp::_::RawSchema s_94a081e4abb13424 = {
  0x94a081e4abb13424, b_94a081e4abb13424.words, 48, nullptr, m_94a081e4abb13424,
  0, 2, i_94a081e4abb13424, nullptr, nullptr, { &s_94a081e4abb13424, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<59> b_8b5db772377be249 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     73, 226, 123,  55, 114, 183,  93, 139,
     21,   0,   0,   0,   1,   0,   0,   0,
    146, 153,  61,  44, 121,  13, 213, 236,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  76, 111,  99,
     97, 108, 105, 122, 101, 100,  84, 101,
    120, 116,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    145, 119,  27, 221,   6, 174, 245, 164,
      1,   0,   0,   0, 106,   0,   0,   0,
     76, 111,  99,  97, 108, 105, 122,  97,
    116, 105, 111, 110,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
    100, 101, 102,  97, 117, 108, 116,  84,
    101, 120, 116,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 111,  99,  97, 108, 105, 122,  97,
    116, 105, 111, 110, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    145, 119,  27, 221,   6, 174, 245, 164,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8b5db772377be249 = b_8b5db772377be249.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8b5db772377be249[] = {
  &s_a4f5ae06dd1b7791,
};
static const uint16_t m_8b5db772377be249[] = {0, 1};
static const uint16_t i_8b5db772377be249[] = {0, 1};
const ::capnp::_::RawSchema s_8b5db772377be249 = {
  0x8b5db772377be249, b_8b5db772377be249.words, 59, d_8b5db772377be249, m_8b5db772377be249,
  1, 2, i_8b5db772377be249, nullptr, nullptr, { &s_8b5db772377be249, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_a4f5ae06dd1b7791 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    145, 119,  27, 221,   6, 174, 245, 164,
     35,   0,   0,   0,   1,   0,   0,   0,
     73, 226, 123,  55, 114, 183,  93, 139,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  76, 111,  99,
     97, 108, 105, 122, 101, 100,  84, 101,
    120, 116,  46,  76, 111,  99,  97, 108,
    105, 122,  97, 116, 105, 111, 110,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    108, 111,  99,  97, 108, 101,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 120, 116,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a4f5ae06dd1b7791 = b_a4f5ae06dd1b7791.words;
#if !CAPNP_LITE
static const uint16_t m_a4f5ae06dd1b7791[] = {0, 1};
static const uint16_t i_a4f5ae06dd1b7791[] = {0, 1};
const ::capnp::_::RawSchema s_a4f5ae06dd1b7791 = {
  0xa4f5ae06dd1b7791, b_a4f5ae06dd1b7791.words, 50, nullptr, m_a4f5ae06dd1b7791,
  0, 2, i_a4f5ae06dd1b7791, nullptr, nullptr, { &s_a4f5ae06dd1b7791, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_98f424ac606042e0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    224,  66,  96,  96, 172,  36, 244, 152,
     21,   0,   0,   0,   3,   0,   0,   0,
    146, 153,  61,  44, 121,  13, 213, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  72,  97, 110,
    100, 108, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_98f424ac606042e0 = b_98f424ac606042e0.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_98f424ac606042e0 = {
  0x98f424ac606042e0, b_98f424ac606042e0.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_98f424ac606042e0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_cd57387729cfe35f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     95, 227, 207,  41, 119,  56,  87, 205,
     21,   0,   0,   0,   3,   0,   0,   0,
    146, 153,  61,  44, 121,  13, 213, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 199,   0,   0,   0,
    153,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  66, 121, 116,
    101,  83, 116, 114, 101,  97, 109,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    242, 111,  18,  33,  33,  18, 237, 151,
    201, 132,  63, 111, 156,  42, 222, 236,
     81,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    110, 183,  88,  54,  73,  38,  20, 188,
     25, 178,  48, 238,  53, 217, 216, 208,
     57,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    211,  97, 199, 116, 118,  60, 154, 140,
    155,  71,  81,  42, 216,  73,  87, 243,
     33,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
    119, 114, 105, 116, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 111, 110, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    101, 120, 112, 101,  99, 116,  83, 105,
    122, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_cd57387729cfe35f = b_cd57387729cfe35f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cd57387729cfe35f[] = {
  &s_8c9a3c7674c761d3,
  &s_97ed122121126ff2,
  &s_bc1426493658b76e,
  &s_d0d8d935ee30b219,
  &s_ecde2a9c6f3f84c9,
  &s_f35749d82a51479b,
};
static const uint16_t m_cd57387729cfe35f[] = {1, 2, 0};
const ::capnp::_::RawSchema s_cd57387729cfe35f = {
  0xcd57387729cfe35f, b_cd57387729cfe35f.words, 50, d_cd57387729cfe35f, m_cd57387729cfe35f,
  6, 3, nullptr, nullptr, nullptr, { &s_cd57387729cfe35f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_97ed122121126ff2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    242, 111,  18,  33,  33,  18, 237, 151,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  66, 121, 116,
    101,  83, 116, 114, 101,  97, 109,  46,
    119, 114, 105, 116, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_97ed122121126ff2 = b_97ed122121126ff2.words;
#if !CAPNP_LITE
static const uint16_t m_97ed122121126ff2[] = {0};
static const uint16_t i_97ed122121126ff2[] = {0};
const ::capnp::_::RawSchema s_97ed122121126ff2 = {
  0x97ed122121126ff2, b_97ed122121126ff2.words, 34, nullptr, m_97ed122121126ff2,
  0, 1, i_97ed122121126ff2, nullptr, nullptr, { &s_97ed122121126ff2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_ecde2a9c6f3f84c9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    201, 132,  63, 111, 156,  42, 222, 236,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  66, 121, 116,
    101,  83, 116, 114, 101,  97, 109,  46,
    119, 114, 105, 116, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_ecde2a9c6f3f84c9 = b_ecde2a9c6f3f84c9.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ecde2a9c6f3f84c9 = {
  0xecde2a9c6f3f84c9, b_ecde2a9c6f3f84c9.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ecde2a9c6f3f84c9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_bc1426493658b76e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    110, 183,  88,  54,  73,  38,  20, 188,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  66, 121, 116,
    101,  83, 116, 114, 101,  97, 109,  46,
    100, 111, 110, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bc1426493658b76e = b_bc1426493658b76e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_bc1426493658b76e = {
  0xbc1426493658b76e, b_bc1426493658b76e.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_bc1426493658b76e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_d0d8d935ee30b219 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     25, 178,  48, 238,  53, 217, 216, 208,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  66, 121, 116,
    101,  83, 116, 114, 101,  97, 109,  46,
    100, 111, 110, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d0d8d935ee30b219 = b_d0d8d935ee30b219.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d0d8d935ee30b219 = {
  0xd0d8d935ee30b219, b_d0d8d935ee30b219.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d0d8d935ee30b219, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8c9a3c7674c761d3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    211,  97, 199, 116, 118,  60, 154, 140,
     32,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  66, 121, 116,
    101,  83, 116, 114, 101,  97, 109,  46,
    101, 120, 112, 101,  99, 116,  83, 105,
    122, 101,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8c9a3c7674c761d3 = b_8c9a3c7674c761d3.words;
#if !CAPNP_LITE
static const uint16_t m_8c9a3c7674c761d3[] = {0};
static const uint16_t i_8c9a3c7674c761d3[] = {0};
const ::capnp::_::RawSchema s_8c9a3c7674c761d3 = {
  0x8c9a3c7674c761d3, b_8c9a3c7674c761d3.words, 35, nullptr, m_8c9a3c7674c761d3,
  0, 1, i_8c9a3c7674c761d3, nullptr, nullptr, { &s_8c9a3c7674c761d3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_f35749d82a51479b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    155,  71,  81,  42, 216,  73,  87, 243,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  66, 121, 116,
    101,  83, 116, 114, 101,  97, 109,  46,
    101, 120, 112, 101,  99, 116,  83, 105,
    122, 101,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f35749d82a51479b = b_f35749d82a51479b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f35749d82a51479b = {
  0xf35749d82a51479b, b_f35749d82a51479b.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f35749d82a51479b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_e53527a75d90198f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    143,  25, 144,  93, 167,  39,  53, 229,
     21,   0,   0,   0,   3,   0,   0,   0,
    146, 153,  61,  44, 121,  13, 213, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 199,   0,   0,   0,
    153,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  66, 108, 111,
     98,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93, 145, 171,  31,  46, 246, 229, 142,
    244, 214, 243, 151,  20, 203,  72, 142,
     81,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     75, 204, 220, 169, 233,  25,   7, 159,
     64, 170, 194,  59, 189,  82,  49, 219,
     57,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    138, 107, 217,  55,  57,  95, 219, 142,
    120, 144,  56,  45, 154, 175,  92, 198,
     33,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  83, 105, 122, 101,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    119, 114, 105, 116, 101,  84, 111,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  83, 108, 105,  99, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_e53527a75d90198f = b_e53527a75d90198f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e53527a75d90198f[] = {
  &s_8e48cb1497f3d6f4,
  &s_8edb5f3937d96b8a,
  &s_8ee5f62e1fab915d,
  &s_9f0719e9a9dccc4b,
  &s_c65caf9a2d389078,
  &s_db3152bd3bc2aa40,
};
static const uint16_t m_e53527a75d90198f[] = {0, 2, 1};
const ::capnp::_::RawSchema s_e53527a75d90198f = {
  0xe53527a75d90198f, b_e53527a75d90198f.words, 50, d_e53527a75d90198f, m_e53527a75d90198f,
  6, 3, nullptr, nullptr, nullptr, { &s_e53527a75d90198f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_8ee5f62e1fab915d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     93, 145, 171,  31,  46, 246, 229, 142,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  66, 108, 111,
     98,  46, 103, 101, 116,  83, 105, 122,
    101,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8ee5f62e1fab915d = b_8ee5f62e1fab915d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_8ee5f62e1fab915d = {
  0x8ee5f62e1fab915d, b_8ee5f62e1fab915d.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_8ee5f62e1fab915d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_8e48cb1497f3d6f4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    244, 214, 243, 151,  20, 203,  72, 142,
     26,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  66, 108, 111,
     98,  46, 103, 101, 116,  83, 105, 122,
    101,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8e48cb1497f3d6f4 = b_8e48cb1497f3d6f4.words;
#if !CAPNP_LITE
static const uint16_t m_8e48cb1497f3d6f4[] = {0};
static const uint16_t i_8e48cb1497f3d6f4[] = {0};
const ::capnp::_::RawSchema s_8e48cb1497f3d6f4 = {
  0x8e48cb1497f3d6f4, b_8e48cb1497f3d6f4.words, 34, nullptr, m_8e48cb1497f3d6f4,
  0, 1, i_8e48cb1497f3d6f4, nullptr, nullptr, { &s_8e48cb1497f3d6f4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_9f0719e9a9dccc4b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     75, 204, 220, 169, 233,  25,   7, 159,
     26,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  66, 108, 111,
     98,  46, 119, 114, 105, 116, 101,  84,
    111,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    115, 116, 114, 101,  97, 109,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     95, 227, 207,  41, 119,  56,  87, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116,  97, 114, 116,  65, 116,  79,
    102, 102, 115, 101, 116,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9f0719e9a9dccc4b = b_9f0719e9a9dccc4b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9f0719e9a9dccc4b[] = {
  &s_cd57387729cfe35f,
};
static const uint16_t m_9f0719e9a9dccc4b[] = {1, 0};
static const uint16_t i_9f0719e9a9dccc4b[] = {0, 1};
const ::capnp::_::RawSchema s_9f0719e9a9dccc4b = {
  0x9f0719e9a9dccc4b, b_9f0719e9a9dccc4b.words, 50, d_9f0719e9a9dccc4b, m_9f0719e9a9dccc4b,
  1, 2, i_9f0719e9a9dccc4b, nullptr, nullptr, { &s_9f0719e9a9dccc4b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_db3152bd3bc2aa40 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     64, 170, 194,  59, 189,  82,  49, 219,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  66, 108, 111,
     98,  46, 119, 114, 105, 116, 101,  84,
    111,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    224,  66,  96,  96, 172,  36, 244, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_db3152bd3bc2aa40 = b_db3152bd3bc2aa40.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_db3152bd3bc2aa40[] = {
  &s_98f424ac606042e0,
};
static const uint16_t m_db3152bd3bc2aa40[] = {0};
static const uint16_t i_db3152bd3bc2aa40[] = {0};
const ::capnp::_::RawSchema s_db3152bd3bc2aa40 = {
  0xdb3152bd3bc2aa40, b_db3152bd3bc2aa40.words, 34, d_db3152bd3bc2aa40, m_db3152bd3bc2aa40,
  1, 1, i_db3152bd3bc2aa40, nullptr, nullptr, { &s_db3152bd3bc2aa40, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_8edb5f3937d96b8a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    138, 107, 217,  55,  57,  95, 219, 142,
     26,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  66, 108, 111,
     98,  46, 103, 101, 116,  83, 108, 105,
     99, 101,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    111, 102, 102, 115, 101, 116,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8edb5f3937d96b8a = b_8edb5f3937d96b8a.words;
#if !CAPNP_LITE
static const uint16_t m_8edb5f3937d96b8a[] = {0, 1};
static const uint16_t i_8edb5f3937d96b8a[] = {0, 1};
const ::capnp::_::RawSchema s_8edb5f3937d96b8a = {
  0x8edb5f3937d96b8a, b_8edb5f3937d96b8a.words, 49, nullptr, m_8edb5f3937d96b8a,
  0, 2, i_8edb5f3937d96b8a, nullptr, nullptr, { &s_8edb5f3937d96b8a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_c65caf9a2d389078 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    120, 144,  56,  45, 154, 175,  92, 198,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  66, 108, 111,
     98,  46, 103, 101, 116,  83, 108, 105,
     99, 101,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c65caf9a2d389078 = b_c65caf9a2d389078.words;
#if !CAPNP_LITE
static const uint16_t m_c65caf9a2d389078[] = {0};
static const uint16_t i_c65caf9a2d389078[] = {0};
const ::capnp::_::RawSchema s_c65caf9a2d389078 = {
  0xc65caf9a2d389078, b_c65caf9a2d389078.words, 34, nullptr, m_c65caf9a2d389078,
  0, 1, i_c65caf9a2d389078, nullptr, nullptr, { &s_c65caf9a2d389078, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<90> b_eaf255b498229199 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
     21,   0,   0,   0,   3,   0,   0,   0,
    146, 153,  61,  44, 121,  13, 213, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0, 199,   0,   0,   0,
     45,   1,   0,   0,   7,   0,   0,   0,
     45,   1,   0,   0,  15,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110,  97,  98, 108, 101,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
     36,  66, 214,  96,  83, 246, 242, 128,
      9,   0,   0,   0,  58,   0,   0,   0,
     47, 157,  88, 147,  63, 106,  37, 213,
      5,   0,   0,   0,  58,   0,   0,   0,
     71, 101, 116, 116, 101, 114,   0,   0,
     83, 101, 116, 116, 101, 114,   0,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,  86,  81, 210, 181,  39, 253, 187,
     79, 106,  66, 205,  55, 180,  81, 179,
     81,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   0,   0,   1,   0,
     92,   0,   0,   0,   0,   0,   1,   0,
    109,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    207,  38,  43, 135,  91, 148,   7, 249,
    150,  14, 147, 242, 126,  84,  61, 140,
     97,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   0,   0,   1,   0,
    112,   0,   0,   0,   0,   0,   1,   0,
    129,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     73, 179, 243,  87,  51,  96,  31, 160,
    151, 243, 196, 129,   1, 193, 203, 198,
    117,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   0,   0,   0,   0,   0,   1,   0,
    132,   0,   0,   0,   0,   0,   1,   0,
    149,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97, 115,  71, 101, 116, 116, 101, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97, 115,  83, 101, 116, 116, 101, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  18,   0,   0,   0,
     84,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eaf255b498229199 = b_eaf255b498229199.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_eaf255b498229199[] = {
  &s_8c3d547ef2930e96,
  &s_a01f603357f3b349,
  &s_b351b437cd426a4f,
  &s_bbfd27b5d2515662,
  &s_c6cbc10181c4f397,
  &s_f907945b872b26cf,
};
static const uint16_t m_eaf255b498229199[] = {1, 2, 0};
const ::capnp::_::RawBrandedSchema::Dependency bd_eaf255b498229199[] = {
  { 33554432,  ::sandstorm::Assignable< ::capnp::AnyPointer>::GetParams::_capnpPrivate::brand },
  { 33554433,  ::sandstorm::Assignable< ::capnp::AnyPointer>::AsGetterParams::_capnpPrivate::brand },
  { 33554434,  ::sandstorm::Assignable< ::capnp::AnyPointer>::AsSetterParams::_capnpPrivate::brand },
  { 50331648,  ::sandstorm::Assignable< ::capnp::AnyPointer>::GetResults::_capnpPrivate::brand },
  { 50331649,  ::sandstorm::Assignable< ::capnp::AnyPointer>::AsGetterResults::_capnpPrivate::brand },
  { 50331650,  ::sandstorm::Assignable< ::capnp::AnyPointer>::AsSetterResults::_capnpPrivate::brand },
};
const ::capnp::_::RawSchema s_eaf255b498229199 = {
  0xeaf255b498229199, b_eaf255b498229199.words, 90, d_eaf255b498229199, m_eaf255b498229199,
  6, 3, nullptr, nullptr, nullptr, { &s_eaf255b498229199, nullptr, bd_eaf255b498229199, 0, sizeof(bd_eaf255b498229199) / sizeof(bd_eaf255b498229199[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<61> b_80f2f65360d64224 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     36,  66, 214,  96,  83, 246, 242, 128,
     32,   0,   0,   0,   3,   0,   0,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 135,   0,   0,   0,
    197,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110,  97,  98, 108, 101,  46,
     71, 101, 116, 116, 101, 114,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,  65, 132,  86, 211, 219, 159, 177,
    146,  52,  18,  38, 162,  45, 239, 151,
     49,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   0,   0,   1,   0,
     60,   0,   0,   0,   0,   0,   1,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    169, 206,  46, 152, 239, 131,  39, 240,
     91,  96, 175, 201,   2, 248, 224, 132,
     65,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   0,   0,   1,   0,
     80,   0,   0,   0,   0,   0,   1,   0,
     97,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 117,  98, 115,  99, 114, 105,  98,
    101,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_80f2f65360d64224 = b_80f2f65360d64224.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_80f2f65360d64224[] = {
  &s_84e0f802c9af605b,
  &s_97ef2da226123492,
  &s_b19fdbd356844119,
  &s_f02783ef982ecea9,
};
static const uint16_t m_80f2f65360d64224[] = {0, 1};
const ::capnp::_::RawBrandedSchema::Dependency bd_80f2f65360d64224[] = {
  { 33554432,  ::sandstorm::Assignable< ::capnp::AnyPointer>::Getter::GetParams::_capnpPrivate::brand },
  { 33554433,  ::sandstorm::Assignable< ::capnp::AnyPointer>::Getter::SubscribeParams::_capnpPrivate::brand },
  { 50331648,  ::sandstorm::Assignable< ::capnp::AnyPointer>::Getter::GetResults::_capnpPrivate::brand },
  { 50331649,  ::sandstorm::Assignable< ::capnp::AnyPointer>::Getter::SubscribeResults::_capnpPrivate::brand },
};
const ::capnp::_::RawSchema s_80f2f65360d64224 = {
  0x80f2f65360d64224, b_80f2f65360d64224.words, 61, d_80f2f65360d64224, m_80f2f65360d64224,
  4, 2, nullptr, nullptr, nullptr, { &s_80f2f65360d64224, nullptr, bd_80f2f65360d64224, 0, sizeof(bd_80f2f65360d64224) / sizeof(bd_80f2f65360d64224[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_b19fdbd356844119 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     25,  65, 132,  86, 211, 219, 159, 177,
     39,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110,  97,  98, 108, 101,  46,
     71, 101, 116, 116, 101, 114,  46, 103,
    101, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b19fdbd356844119 = b_b19fdbd356844119.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b19fdbd356844119 = {
  0xb19fdbd356844119, b_b19fdbd356844119.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b19fdbd356844119, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_97ef2da226123492 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    146,  52,  18,  38, 162,  45, 239, 151,
     39,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110,  97,  98, 108, 101,  46,
     71, 101, 116, 116, 101, 114,  46, 103,
    101, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_97ef2da226123492 = b_97ef2da226123492.words;
#if !CAPNP_LITE
static const uint16_t m_97ef2da226123492[] = {0};
static const uint16_t i_97ef2da226123492[] = {0};
const ::capnp::_::RawSchema s_97ef2da226123492 = {
  0x97ef2da226123492, b_97ef2da226123492.words, 35, nullptr, m_97ef2da226123492,
  0, 1, i_97ef2da226123492, nullptr, nullptr, { &s_97ef2da226123492, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_f02783ef982ecea9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    169, 206,  46, 152, 239, 131,  39, 240,
     39,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110,  97,  98, 108, 101,  46,
     71, 101, 116, 116, 101, 114,  46, 115,
    117,  98, 115,  99, 114, 105,  98, 101,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    115, 101, 116, 116, 101, 114,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     47, 157,  88, 147,  63, 106,  37, 213,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f02783ef982ecea9 = b_f02783ef982ecea9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f02783ef982ecea9[] = {
  &s_d5256a3f93589d2f,
};
static const uint16_t m_f02783ef982ecea9[] = {0};
static const uint16_t i_f02783ef982ecea9[] = {0};
const ::capnp::_::RawBrandedSchema::Dependency bd_f02783ef982ecea9[] = {
  { 16777216,  ::sandstorm::Assignable< ::capnp::AnyPointer>::Setter::_capnpPrivate::brand },
};
const ::capnp::_::RawSchema s_f02783ef982ecea9 = {
  0xf02783ef982ecea9, b_f02783ef982ecea9.words, 40, d_f02783ef982ecea9, m_f02783ef982ecea9,
  1, 1, i_f02783ef982ecea9, nullptr, nullptr, { &s_f02783ef982ecea9, nullptr, bd_f02783ef982ecea9, 0, sizeof(bd_f02783ef982ecea9) / sizeof(bd_f02783ef982ecea9[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_84e0f802c9af605b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     91,  96, 175, 201,   2, 248, 224, 132,
     39,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110,  97,  98, 108, 101,  46,
     71, 101, 116, 116, 101, 114,  46, 115,
    117,  98, 115,  99, 114, 105,  98, 101,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    224,  66,  96,  96, 172,  36, 244, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_84e0f802c9af605b = b_84e0f802c9af605b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_84e0f802c9af605b[] = {
  &s_98f424ac606042e0,
};
static const uint16_t m_84e0f802c9af605b[] = {0};
static const uint16_t i_84e0f802c9af605b[] = {0};
const ::capnp::_::RawSchema s_84e0f802c9af605b = {
  0x84e0f802c9af605b, b_84e0f802c9af605b.words, 36, d_84e0f802c9af605b, m_84e0f802c9af605b,
  1, 1, i_84e0f802c9af605b, nullptr, nullptr, { &s_84e0f802c9af605b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_d5256a3f93589d2f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     47, 157,  88, 147,  63, 106,  37, 213,
     32,   0,   0,   0,   3,   0,   0,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  71,   0,   0,   0,
    113,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110,  97,  98, 108, 101,  46,
     83, 101, 116, 116, 101, 114,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209, 135, 183, 135,  39,  55, 208, 152,
    171, 171, 230, 211,  53, 182, 251, 219,
     17,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   1,   0,
     28,   0,   0,   0,   0,   0,   1,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
    115, 101, 116,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_d5256a3f93589d2f = b_d5256a3f93589d2f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d5256a3f93589d2f[] = {
  &s_98d0372787b787d1,
  &s_dbfbb635d3e6abab,
};
static const uint16_t m_d5256a3f93589d2f[] = {0};
const ::capnp::_::RawBrandedSchema::Dependency bd_d5256a3f93589d2f[] = {
  { 33554432,  ::sandstorm::Assignable< ::capnp::AnyPointer>::Setter::SetParams::_capnpPrivate::brand },
  { 50331648,  ::sandstorm::Assignable< ::capnp::AnyPointer>::Setter::SetResults::_capnpPrivate::brand },
};
const ::capnp::_::RawSchema s_d5256a3f93589d2f = {
  0xd5256a3f93589d2f, b_d5256a3f93589d2f.words, 40, d_d5256a3f93589d2f, m_d5256a3f93589d2f,
  2, 1, nullptr, nullptr, nullptr, { &s_d5256a3f93589d2f, nullptr, bd_d5256a3f93589d2f, 0, sizeof(bd_d5256a3f93589d2f) / sizeof(bd_d5256a3f93589d2f[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_98d0372787b787d1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    209, 135, 183, 135,  39,  55, 208, 152,
     39,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110,  97,  98, 108, 101,  46,
     83, 101, 116, 116, 101, 114,  46, 115,
    101, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_98d0372787b787d1 = b_98d0372787b787d1.words;
#if !CAPNP_LITE
static const uint16_t m_98d0372787b787d1[] = {0};
static const uint16_t i_98d0372787b787d1[] = {0};
const ::capnp::_::RawSchema s_98d0372787b787d1 = {
  0x98d0372787b787d1, b_98d0372787b787d1.words, 35, nullptr, m_98d0372787b787d1,
  0, 1, i_98d0372787b787d1, nullptr, nullptr, { &s_98d0372787b787d1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_dbfbb635d3e6abab = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    171, 171, 230, 211,  53, 182, 251, 219,
     39,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110,  97,  98, 108, 101,  46,
     83, 101, 116, 116, 101, 114,  46, 115,
    101, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dbfbb635d3e6abab = b_dbfbb635d3e6abab.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_dbfbb635d3e6abab = {
  0xdbfbb635d3e6abab, b_dbfbb635d3e6abab.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_dbfbb635d3e6abab, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_bbfd27b5d2515662 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     98,  86,  81, 210, 181,  39, 253, 187,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110,  97,  98, 108, 101,  46,
    103, 101, 116,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bbfd27b5d2515662 = b_bbfd27b5d2515662.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_bbfd27b5d2515662 = {
  0xbbfd27b5d2515662, b_bbfd27b5d2515662.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_bbfd27b5d2515662, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<54> b_b351b437cd426a4f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     79, 106,  66, 205,  55, 180,  81, 179,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110,  97,  98, 108, 101,  46,
    103, 101, 116,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     72,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 116, 116, 101, 114,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     47, 157,  88, 147,  63, 106,  37, 213,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b351b437cd426a4f = b_b351b437cd426a4f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b351b437cd426a4f[] = {
  &s_d5256a3f93589d2f,
};
static const uint16_t m_b351b437cd426a4f[] = {1, 0};
static const uint16_t i_b351b437cd426a4f[] = {0, 1};
const ::capnp::_::RawBrandedSchema::Dependency bd_b351b437cd426a4f[] = {
  { 16777217,  ::sandstorm::Assignable< ::capnp::AnyPointer>::Setter::_capnpPrivate::brand },
};
const ::capnp::_::RawSchema s_b351b437cd426a4f = {
  0xb351b437cd426a4f, b_b351b437cd426a4f.words, 54, d_b351b437cd426a4f, m_b351b437cd426a4f,
  1, 2, i_b351b437cd426a4f, nullptr, nullptr, { &s_b351b437cd426a4f, nullptr, bd_b351b437cd426a4f, 0, sizeof(bd_b351b437cd426a4f) / sizeof(bd_b351b437cd426a4f[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_f907945b872b26cf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    207,  38,  43, 135,  91, 148,   7, 249,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110,  97,  98, 108, 101,  46,
     97, 115,  71, 101, 116, 116, 101, 114,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_f907945b872b26cf = b_f907945b872b26cf.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f907945b872b26cf = {
  0xf907945b872b26cf, b_f907945b872b26cf.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f907945b872b26cf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_8c3d547ef2930e96 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    150,  14, 147, 242, 126,  84,  61, 140,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110,  97,  98, 108, 101,  46,
     97, 115,  71, 101, 116, 116, 101, 114,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    103, 101, 116, 116, 101, 114,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     36,  66, 214,  96,  83, 246, 242, 128,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8c3d547ef2930e96 = b_8c3d547ef2930e96.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8c3d547ef2930e96[] = {
  &s_80f2f65360d64224,
};
static const uint16_t m_8c3d547ef2930e96[] = {0};
static const uint16_t i_8c3d547ef2930e96[] = {0};
const ::capnp::_::RawBrandedSchema::Dependency bd_8c3d547ef2930e96[] = {
  { 16777216,  ::sandstorm::Assignable< ::capnp::AnyPointer>::Getter::_capnpPrivate::brand },
};
const ::capnp::_::RawSchema s_8c3d547ef2930e96 = {
  0x8c3d547ef2930e96, b_8c3d547ef2930e96.words, 40, d_8c3d547ef2930e96, m_8c3d547ef2930e96,
  1, 1, i_8c3d547ef2930e96, nullptr, nullptr, { &s_8c3d547ef2930e96, nullptr, bd_8c3d547ef2930e96, 0, sizeof(bd_8c3d547ef2930e96) / sizeof(bd_8c3d547ef2930e96[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_a01f603357f3b349 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     73, 179, 243,  87,  51,  96,  31, 160,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110,  97,  98, 108, 101,  46,
     97, 115,  83, 101, 116, 116, 101, 114,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_a01f603357f3b349 = b_a01f603357f3b349.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a01f603357f3b349 = {
  0xa01f603357f3b349, b_a01f603357f3b349.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a01f603357f3b349, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_c6cbc10181c4f397 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    151, 243, 196, 129,   1, 193, 203, 198,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110,  97,  98, 108, 101,  46,
     97, 115,  83, 101, 116, 116, 101, 114,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    115, 101, 116, 116, 101, 114,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     47, 157,  88, 147,  63, 106,  37, 213,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    153, 145,  34, 152, 180,  85, 242, 234,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c6cbc10181c4f397 = b_c6cbc10181c4f397.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c6cbc10181c4f397[] = {
  &s_d5256a3f93589d2f,
};
static const uint16_t m_c6cbc10181c4f397[] = {0};
static const uint16_t i_c6cbc10181c4f397[] = {0};
const ::capnp::_::RawBrandedSchema::Dependency bd_c6cbc10181c4f397[] = {
  { 16777216,  ::sandstorm::Assignable< ::capnp::AnyPointer>::Setter::_capnpPrivate::brand },
};
const ::capnp::_::RawSchema s_c6cbc10181c4f397 = {
  0xc6cbc10181c4f397, b_c6cbc10181c4f397.words, 40, d_c6cbc10181c4f397, m_c6cbc10181c4f397,
  1, 1, i_c6cbc10181c4f397, nullptr, nullptr, { &s_c6cbc10181c4f397, nullptr, bd_c6cbc10181c4f397, 0, sizeof(bd_c6cbc10181c4f397) / sizeof(bd_c6cbc10181c4f397[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_fabb5e621fa9a23f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     63, 162, 169,  31,  98,  94, 187, 250,
     21,   0,   0,   0,   3,   0,   0,   0,
    146, 153,  61,  44, 121,  13, 213, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  71,   0,   0,   0,
     89,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  83, 116,  97,
    116, 105,  99,  65, 115, 115, 101, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     57,  12, 216,  70, 117,  67,  20, 151,
      1,   0,   0,   0,  74,   0,   0,   0,
     80, 114, 111, 116, 111,  99, 111, 108,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  41,  11,  87,  18, 207,  94, 167,
    226,  72, 182, 214, 117, 170, 195, 165,
     17,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  85, 114, 108,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_fabb5e621fa9a23f = b_fabb5e621fa9a23f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fabb5e621fa9a23f[] = {
  &s_a5c3aa75d6b648e2,
  &s_a75ecf12570b2966,
};
static const uint16_t m_fabb5e621fa9a23f[] = {0};
const ::capnp::_::RawSchema s_fabb5e621fa9a23f = {
  0xfabb5e621fa9a23f, b_fabb5e621fa9a23f.words, 34, d_fabb5e621fa9a23f, m_fabb5e621fa9a23f,
  2, 1, nullptr, nullptr, nullptr, { &s_fabb5e621fa9a23f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<28> b_9714437546d80c39 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     57,  12, 216,  70, 117,  67,  20, 151,
     33,   0,   0,   0,   2,   0,   0,   0,
     63, 162, 169,  31,  98,  94, 187, 250,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  83, 116,  97,
    116, 105,  99,  65, 115, 115, 101, 116,
     46,  80, 114, 111, 116, 111,  99, 111,
    108,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112, 115,   0,   0,   0,
    104, 116, 116, 112,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9714437546d80c39 = b_9714437546d80c39.words;
#if !CAPNP_LITE
static const uint16_t m_9714437546d80c39[] = {1, 0};
const ::capnp::_::RawSchema s_9714437546d80c39 = {
  0x9714437546d80c39, b_9714437546d80c39.words, 28, nullptr, m_9714437546d80c39,
  0, 2, nullptr, nullptr, nullptr, { &s_9714437546d80c39, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Protocol_9714437546d80c39, 9714437546d80c39);
static const ::capnp::_::AlignedData<18> b_a75ecf12570b2966 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    102,  41,  11,  87,  18, 207,  94, 167,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  83, 116,  97,
    116, 105,  99,  65, 115, 115, 101, 116,
     46, 103, 101, 116,  85, 114, 108,  36,
     80,  97, 114,  97, 109, 115,   0,   0, }
};
::capnp::word const* const bp_a75ecf12570b2966 = b_a75ecf12570b2966.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a75ecf12570b2966 = {
  0xa75ecf12570b2966, b_a75ecf12570b2966.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a75ecf12570b2966, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_a5c3aa75d6b648e2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    226,  72, 182, 214, 117, 170, 195, 165,
     33,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 117, 116, 105, 108,  46,  99,
     97, 112, 110, 112,  58,  83, 116,  97,
    116, 105,  99,  65, 115, 115, 101, 116,
     46, 103, 101, 116,  85, 114, 108,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
    112, 114, 111, 116, 111,  99, 111, 108,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     57,  12, 216,  70, 117,  67,  20, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 115, 116,  80,  97, 116, 104,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a5c3aa75d6b648e2 = b_a5c3aa75d6b648e2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a5c3aa75d6b648e2[] = {
  &s_9714437546d80c39,
};
static const uint16_t m_a5c3aa75d6b648e2[] = {1, 0};
static const uint16_t i_a5c3aa75d6b648e2[] = {0, 1};
const ::capnp::_::RawSchema s_a5c3aa75d6b648e2 = {
  0xa5c3aa75d6b648e2, b_a5c3aa75d6b648e2.words, 51, d_a5c3aa75d6b648e2, m_a5c3aa75d6b648e2,
  1, 2, i_a5c3aa75d6b648e2, nullptr, nullptr, { &s_a5c3aa75d6b648e2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace sandstorm {

// KeyValue
constexpr uint16_t KeyValue::_capnpPrivate::dataWordSize;
constexpr uint16_t KeyValue::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind KeyValue::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* KeyValue::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* KeyValue::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// LocalizedText
constexpr uint16_t LocalizedText::_capnpPrivate::dataWordSize;
constexpr uint16_t LocalizedText::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind LocalizedText::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LocalizedText::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* LocalizedText::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// LocalizedText::Localization
constexpr uint16_t LocalizedText::Localization::_capnpPrivate::dataWordSize;
constexpr uint16_t LocalizedText::Localization::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind LocalizedText::Localization::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LocalizedText::Localization::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* LocalizedText::Localization::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::kj::Promise<void> Handle::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x98f424ac606042e0ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/util.capnp:Handle", interfaceId);
  }
}
::kj::Promise<void> Handle::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/util.capnp:Handle",
          0x98f424ac606042e0ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Handle
#if !CAPNP_LITE
constexpr ::capnp::Kind Handle::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Handle::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Handle::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::ByteStream::WriteParams,  ::sandstorm::ByteStream::WriteResults>
ByteStream::Client::writeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::ByteStream::WriteParams,  ::sandstorm::ByteStream::WriteResults>(
      0xcd57387729cfe35full, 0, sizeHint);
}
::kj::Promise<void> ByteStream::Server::write(WriteContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/util.capnp:ByteStream", "write",
      0xcd57387729cfe35full, 0);
}
::capnp::Request< ::sandstorm::ByteStream::DoneParams,  ::sandstorm::ByteStream::DoneResults>
ByteStream::Client::doneRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::ByteStream::DoneParams,  ::sandstorm::ByteStream::DoneResults>(
      0xcd57387729cfe35full, 1, sizeHint);
}
::kj::Promise<void> ByteStream::Server::done(DoneContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/util.capnp:ByteStream", "done",
      0xcd57387729cfe35full, 1);
}
::capnp::Request< ::sandstorm::ByteStream::ExpectSizeParams,  ::sandstorm::ByteStream::ExpectSizeResults>
ByteStream::Client::expectSizeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::ByteStream::ExpectSizeParams,  ::sandstorm::ByteStream::ExpectSizeResults>(
      0xcd57387729cfe35full, 2, sizeHint);
}
::kj::Promise<void> ByteStream::Server::expectSize(ExpectSizeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/util.capnp:ByteStream", "expectSize",
      0xcd57387729cfe35full, 2);
}
::kj::Promise<void> ByteStream::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xcd57387729cfe35full:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/util.capnp:ByteStream", interfaceId);
  }
}
::kj::Promise<void> ByteStream::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return write(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::ByteStream::WriteParams,  ::sandstorm::ByteStream::WriteResults>(context));
    case 1:
      return done(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::ByteStream::DoneParams,  ::sandstorm::ByteStream::DoneResults>(context));
    case 2:
      return expectSize(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::ByteStream::ExpectSizeParams,  ::sandstorm::ByteStream::ExpectSizeResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/util.capnp:ByteStream",
          0xcd57387729cfe35full, methodId);
  }
}
#endif  // !CAPNP_LITE

// ByteStream
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ByteStream::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ByteStream::WriteParams
constexpr uint16_t ByteStream::WriteParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ByteStream::WriteParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::WriteParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::WriteParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ByteStream::WriteParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ByteStream::WriteResults
constexpr uint16_t ByteStream::WriteResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ByteStream::WriteResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::WriteResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::WriteResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ByteStream::WriteResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ByteStream::DoneParams
constexpr uint16_t ByteStream::DoneParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ByteStream::DoneParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::DoneParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::DoneParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ByteStream::DoneParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ByteStream::DoneResults
constexpr uint16_t ByteStream::DoneResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ByteStream::DoneResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::DoneResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::DoneResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ByteStream::DoneResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ByteStream::ExpectSizeParams
constexpr uint16_t ByteStream::ExpectSizeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ByteStream::ExpectSizeParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::ExpectSizeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::ExpectSizeParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ByteStream::ExpectSizeParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ByteStream::ExpectSizeResults
constexpr uint16_t ByteStream::ExpectSizeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ByteStream::ExpectSizeResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::ExpectSizeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::ExpectSizeResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ByteStream::ExpectSizeResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::Blob::GetSizeParams,  ::sandstorm::Blob::GetSizeResults>
Blob::Client::getSizeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Blob::GetSizeParams,  ::sandstorm::Blob::GetSizeResults>(
      0xe53527a75d90198full, 0, sizeHint);
}
::kj::Promise<void> Blob::Server::getSize(GetSizeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/util.capnp:Blob", "getSize",
      0xe53527a75d90198full, 0);
}
::capnp::Request< ::sandstorm::Blob::WriteToParams,  ::sandstorm::Blob::WriteToResults>
Blob::Client::writeToRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Blob::WriteToParams,  ::sandstorm::Blob::WriteToResults>(
      0xe53527a75d90198full, 1, sizeHint);
}
::kj::Promise<void> Blob::Server::writeTo(WriteToContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/util.capnp:Blob", "writeTo",
      0xe53527a75d90198full, 1);
}
::capnp::Request< ::sandstorm::Blob::GetSliceParams,  ::sandstorm::Blob::GetSliceResults>
Blob::Client::getSliceRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Blob::GetSliceParams,  ::sandstorm::Blob::GetSliceResults>(
      0xe53527a75d90198full, 2, sizeHint);
}
::kj::Promise<void> Blob::Server::getSlice(GetSliceContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/util.capnp:Blob", "getSlice",
      0xe53527a75d90198full, 2);
}
::kj::Promise<void> Blob::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe53527a75d90198full:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/util.capnp:Blob", interfaceId);
  }
}
::kj::Promise<void> Blob::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return getSize(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Blob::GetSizeParams,  ::sandstorm::Blob::GetSizeResults>(context));
    case 1:
      return writeTo(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Blob::WriteToParams,  ::sandstorm::Blob::WriteToResults>(context));
    case 2:
      return getSlice(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Blob::GetSliceParams,  ::sandstorm::Blob::GetSliceResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/util.capnp:Blob",
          0xe53527a75d90198full, methodId);
  }
}
#endif  // !CAPNP_LITE

// Blob
#if !CAPNP_LITE
constexpr ::capnp::Kind Blob::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Blob::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Blob::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Blob::GetSizeParams
constexpr uint16_t Blob::GetSizeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Blob::GetSizeParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Blob::GetSizeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Blob::GetSizeParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Blob::GetSizeParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Blob::GetSizeResults
constexpr uint16_t Blob::GetSizeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Blob::GetSizeResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Blob::GetSizeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Blob::GetSizeResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Blob::GetSizeResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Blob::WriteToParams
constexpr uint16_t Blob::WriteToParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Blob::WriteToParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Blob::WriteToParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Blob::WriteToParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Blob::WriteToParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Blob::WriteToResults
constexpr uint16_t Blob::WriteToResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Blob::WriteToResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Blob::WriteToResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Blob::WriteToResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Blob::WriteToResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Blob::GetSliceParams
constexpr uint16_t Blob::GetSliceParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Blob::GetSliceParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Blob::GetSliceParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Blob::GetSliceParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Blob::GetSliceParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Blob::GetSliceResults
constexpr uint16_t Blob::GetSliceResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Blob::GetSliceResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Blob::GetSliceResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Blob::GetSliceResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Blob::GetSliceResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::StaticAsset::GetUrlParams,  ::sandstorm::StaticAsset::GetUrlResults>
StaticAsset::Client::getUrlRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::StaticAsset::GetUrlParams,  ::sandstorm::StaticAsset::GetUrlResults>(
      0xfabb5e621fa9a23full, 0, sizeHint);
}
::kj::Promise<void> StaticAsset::Server::getUrl(GetUrlContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/util.capnp:StaticAsset", "getUrl",
      0xfabb5e621fa9a23full, 0);
}
::kj::Promise<void> StaticAsset::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xfabb5e621fa9a23full:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/util.capnp:StaticAsset", interfaceId);
  }
}
::kj::Promise<void> StaticAsset::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return getUrl(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::StaticAsset::GetUrlParams,  ::sandstorm::StaticAsset::GetUrlResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/util.capnp:StaticAsset",
          0xfabb5e621fa9a23full, methodId);
  }
}
#endif  // !CAPNP_LITE

// StaticAsset
#if !CAPNP_LITE
constexpr ::capnp::Kind StaticAsset::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StaticAsset::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* StaticAsset::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// StaticAsset::GetUrlParams
constexpr uint16_t StaticAsset::GetUrlParams::_capnpPrivate::dataWordSize;
constexpr uint16_t StaticAsset::GetUrlParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind StaticAsset::GetUrlParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StaticAsset::GetUrlParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* StaticAsset::GetUrlParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// StaticAsset::GetUrlResults
constexpr uint16_t StaticAsset::GetUrlResults::_capnpPrivate::dataWordSize;
constexpr uint16_t StaticAsset::GetUrlResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind StaticAsset::GetUrlResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StaticAsset::GetUrlResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* StaticAsset::GetUrlResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE


}  // namespace

