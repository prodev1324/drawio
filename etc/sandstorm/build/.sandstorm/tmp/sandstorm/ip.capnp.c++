// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ip.capnp

#include "ip.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<42> b_a982576b7a2a2040 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     64,  32,  42, 122, 107,  87, 130, 169,
     19,   0,   0,   0,   3,   0,   0,   0,
    134,  95,  48,  53, 212,  50,  71, 244,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 135,   0,   0,   0,
    121,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  78, 101, 116,
    119, 111, 114, 107,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    180,  94, 114, 235, 193,   0,  23, 221,
     97,  75,  12, 243, 174, 213, 123, 181,
     49,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    196, 187, 247, 252, 110,  31,  95, 157,
    105,  95, 212, 186, 194,  46,  74, 209,
     29,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  82, 101, 109, 111, 116,
    101,  72, 111, 115, 116,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  82, 101, 109, 111, 116,
    101,  72, 111, 115, 116,  66, 121,  78,
     97, 109, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_a982576b7a2a2040 = b_a982576b7a2a2040.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a982576b7a2a2040[] = {
  &s_9d5f1f6efcf7bbc4,
  &s_b57bd5aef30c4b61,
  &s_d14a2ec2bad45f69,
  &s_dd1700c1eb725eb4,
};
static const uint16_t m_a982576b7a2a2040[] = {0, 1};
const ::capnp::_::RawSchema s_a982576b7a2a2040 = {
  0xa982576b7a2a2040, b_a982576b7a2a2040.words, 42, d_a982576b7a2a2040, m_a982576b7a2a2040,
  4, 2, nullptr, nullptr, nullptr, { &s_a982576b7a2a2040, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_dd1700c1eb725eb4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    180,  94, 114, 235, 193,   0,  23, 221,
     29,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  78, 101, 116,
    119, 111, 114, 107,  46, 103, 101, 116,
     82, 101, 109, 111, 116, 101,  72, 111,
    115, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97, 100, 100, 114, 101, 115, 115,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     11,  44, 211,  55, 153, 143, 185, 238,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dd1700c1eb725eb4 = b_dd1700c1eb725eb4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dd1700c1eb725eb4[] = {
  &s_eeb98f9937d32c0b,
};
static const uint16_t m_dd1700c1eb725eb4[] = {0};
static const uint16_t i_dd1700c1eb725eb4[] = {0};
const ::capnp::_::RawSchema s_dd1700c1eb725eb4 = {
  0xdd1700c1eb725eb4, b_dd1700c1eb725eb4.words, 35, d_dd1700c1eb725eb4, m_dd1700c1eb725eb4,
  1, 1, i_dd1700c1eb725eb4, nullptr, nullptr, { &s_dd1700c1eb725eb4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_b57bd5aef30c4b61 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     97,  75,  12, 243, 174, 213, 123, 181,
     29,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  78, 101, 116,
    119, 111, 114, 107,  46, 103, 101, 116,
     82, 101, 109, 111, 116, 101,  72, 111,
    115, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104, 111, 115, 116,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     48,  49, 139,  41, 107, 215,  93, 144,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b57bd5aef30c4b61 = b_b57bd5aef30c4b61.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b57bd5aef30c4b61[] = {
  &s_905dd76b298b3130,
};
static const uint16_t m_b57bd5aef30c4b61[] = {0};
static const uint16_t i_b57bd5aef30c4b61[] = {0};
const ::capnp::_::RawSchema s_b57bd5aef30c4b61 = {
  0xb57bd5aef30c4b61, b_b57bd5aef30c4b61.words, 35, d_b57bd5aef30c4b61, m_b57bd5aef30c4b61,
  1, 1, i_b57bd5aef30c4b61, nullptr, nullptr, { &s_b57bd5aef30c4b61, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_9d5f1f6efcf7bbc4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    196, 187, 247, 252, 110,  31,  95, 157,
     29,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  78, 101, 116,
    119, 111, 114, 107,  46, 103, 101, 116,
     82, 101, 109, 111, 116, 101,  72, 111,
    115, 116,  66, 121,  78,  97, 109, 101,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97, 100, 100, 114, 101, 115, 115,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9d5f1f6efcf7bbc4 = b_9d5f1f6efcf7bbc4.words;
#if !CAPNP_LITE
static const uint16_t m_9d5f1f6efcf7bbc4[] = {0};
static const uint16_t i_9d5f1f6efcf7bbc4[] = {0};
const ::capnp::_::RawSchema s_9d5f1f6efcf7bbc4 = {
  0x9d5f1f6efcf7bbc4, b_9d5f1f6efcf7bbc4.words, 35, nullptr, m_9d5f1f6efcf7bbc4,
  0, 1, i_9d5f1f6efcf7bbc4, nullptr, nullptr, { &s_9d5f1f6efcf7bbc4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_d14a2ec2bad45f69 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    105,  95, 212, 186, 194,  46,  74, 209,
     29,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  78, 101, 116,
    119, 111, 114, 107,  46, 103, 101, 116,
     82, 101, 109, 111, 116, 101,  72, 111,
    115, 116,  66, 121,  78,  97, 109, 101,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104, 111, 115, 116,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     48,  49, 139,  41, 107, 215,  93, 144,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d14a2ec2bad45f69 = b_d14a2ec2bad45f69.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d14a2ec2bad45f69[] = {
  &s_905dd76b298b3130,
};
static const uint16_t m_d14a2ec2bad45f69[] = {0};
static const uint16_t i_d14a2ec2bad45f69[] = {0};
const ::capnp::_::RawSchema s_d14a2ec2bad45f69 = {
  0xd14a2ec2bad45f69, b_d14a2ec2bad45f69.words, 36, d_d14a2ec2bad45f69, m_d14a2ec2bad45f69,
  1, 1, i_d14a2ec2bad45f69, nullptr, nullptr, { &s_d14a2ec2bad45f69, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_eeb98f9937d32c0b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     11,  44, 211,  55, 153, 143, 185, 238,
     19,   0,   0,   0,   1,   0,   2,   0,
    134,  95,  48,  53, 212,  50,  71, 244,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  65, 100, 100,
    114, 101, 115, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    108, 111, 119, 101, 114,  54,  52,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 112, 112, 101, 114,  54,  52,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eeb98f9937d32c0b = b_eeb98f9937d32c0b.words;
#if !CAPNP_LITE
static const uint16_t m_eeb98f9937d32c0b[] = {0, 1};
static const uint16_t i_eeb98f9937d32c0b[] = {0, 1};
const ::capnp::_::RawSchema s_eeb98f9937d32c0b = {
  0xeeb98f9937d32c0b, b_eeb98f9937d32c0b.words, 48, nullptr, m_eeb98f9937d32c0b,
  0, 2, i_eeb98f9937d32c0b, nullptr, nullptr, { &s_eeb98f9937d32c0b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<41> b_e32c506ee93ed6fa = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    250, 214,  62, 233, 110,  80,  44, 227,
     19,   0,   0,   0,   3,   0,   0,   0,
    134,  95,  48,  53, 212,  50,  71, 244,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 135,   0,   0,   0,
    117,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  73, 110, 116,
    101, 114, 102,  97,  99, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     30,  43, 189, 198, 228, 106,  34, 253,
    207, 126,  98, 134,  55,  37, 129, 147,
     49,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     73, 188,  42,  38,  90, 129, 216, 161,
    144, 194,  27, 152, 128, 164, 131, 203,
     29,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   7,   0,   0,   0,
    108, 105, 115, 116, 101, 110,  84,  99,
    112,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    108, 105, 115, 116, 101, 110,  85, 100,
    112,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_e32c506ee93ed6fa = b_e32c506ee93ed6fa.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e32c506ee93ed6fa[] = {
  &s_9381253786627ecf,
  &s_a1d8815a262abc49,
  &s_cb83a480981bc290,
  &s_fd226ae4c6bd2b1e,
};
static const uint16_t m_e32c506ee93ed6fa[] = {0, 1};
const ::capnp::_::RawSchema s_e32c506ee93ed6fa = {
  0xe32c506ee93ed6fa, b_e32c506ee93ed6fa.words, 41, d_e32c506ee93ed6fa, m_e32c506ee93ed6fa,
  4, 2, nullptr, nullptr, nullptr, { &s_e32c506ee93ed6fa, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_fd226ae4c6bd2b1e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     30,  43, 189, 198, 228, 106,  34, 253,
     31,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  73, 110, 116,
    101, 114, 102,  97,  99, 101,  46, 108,
    105, 115, 116, 101, 110,  84,  99, 112,
     36,  80,  97, 114,  97, 109, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 114, 116,  78, 117, 109,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 114, 116,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    180,   6, 120, 240,  26,  14, 178, 234,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fd226ae4c6bd2b1e = b_fd226ae4c6bd2b1e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fd226ae4c6bd2b1e[] = {
  &s_eab20e1af07806b4,
};
static const uint16_t m_fd226ae4c6bd2b1e[] = {1, 0};
static const uint16_t i_fd226ae4c6bd2b1e[] = {0, 1};
const ::capnp::_::RawSchema s_fd226ae4c6bd2b1e = {
  0xfd226ae4c6bd2b1e, b_fd226ae4c6bd2b1e.words, 49, d_fd226ae4c6bd2b1e, m_fd226ae4c6bd2b1e,
  1, 2, i_fd226ae4c6bd2b1e, nullptr, nullptr, { &s_fd226ae4c6bd2b1e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_9381253786627ecf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    207, 126,  98, 134,  55,  37, 129, 147,
     31,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  73, 110, 116,
    101, 114, 102,  97,  99, 101,  46, 108,
    105, 115, 116, 101, 110,  84,  99, 112,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    224,  66,  96,  96, 172,  36, 244, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9381253786627ecf = b_9381253786627ecf.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9381253786627ecf[] = {
  &s_98f424ac606042e0,
};
static const uint16_t m_9381253786627ecf[] = {0};
static const uint16_t i_9381253786627ecf[] = {0};
const ::capnp::_::RawSchema s_9381253786627ecf = {
  0x9381253786627ecf, b_9381253786627ecf.words, 35, d_9381253786627ecf, m_9381253786627ecf,
  1, 1, i_9381253786627ecf, nullptr, nullptr, { &s_9381253786627ecf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_a1d8815a262abc49 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     73, 188,  42,  38,  90, 129, 216, 161,
     31,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  73, 110, 116,
    101, 114, 102,  97,  99, 101,  46, 108,
    105, 115, 116, 101, 110,  85, 100, 112,
     36,  80,  97, 114,  97, 109, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 114, 116,  78, 117, 109,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 114, 116,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    206,   1, 208,  23,  18,  46,  33, 198,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a1d8815a262abc49 = b_a1d8815a262abc49.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a1d8815a262abc49[] = {
  &s_c6212e1217d001ce,
};
static const uint16_t m_a1d8815a262abc49[] = {1, 0};
static const uint16_t i_a1d8815a262abc49[] = {0, 1};
const ::capnp::_::RawSchema s_a1d8815a262abc49 = {
  0xa1d8815a262abc49, b_a1d8815a262abc49.words, 49, d_a1d8815a262abc49, m_a1d8815a262abc49,
  1, 2, i_a1d8815a262abc49, nullptr, nullptr, { &s_a1d8815a262abc49, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_cb83a480981bc290 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    144, 194,  27, 152, 128, 164, 131, 203,
     31,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  73, 110, 116,
    101, 114, 102,  97,  99, 101,  46, 108,
    105, 115, 116, 101, 110,  85, 100, 112,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    224,  66,  96,  96, 172,  36, 244, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cb83a480981bc290 = b_cb83a480981bc290.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cb83a480981bc290[] = {
  &s_98f424ac606042e0,
};
static const uint16_t m_cb83a480981bc290[] = {0};
static const uint16_t i_cb83a480981bc290[] = {0};
const ::capnp::_::RawSchema s_cb83a480981bc290 = {
  0xcb83a480981bc290, b_cb83a480981bc290.words, 35, d_cb83a480981bc290, m_cb83a480981bc290,
  1, 1, i_cb83a480981bc290, nullptr, nullptr, { &s_cb83a480981bc290, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<41> b_905dd76b298b3130 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     48,  49, 139,  41, 107, 215,  93, 144,
     19,   0,   0,   0,   3,   0,   0,   0,
    134,  95,  48,  53, 212,  50,  71, 244,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 135,   0,   0,   0,
    117,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  82, 101, 109,
    111, 116, 101,  72, 111, 115, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    233, 131, 115,  30, 177, 190,  16, 237,
     51, 222, 252,  76, 244, 249, 125, 215,
     49,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    237,  38, 190, 110,  72,   2,  43, 182,
     59,   0,  73,  62, 169, 163,  58, 245,
     29,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  84,  99, 112,  80, 111,
    114, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  85, 100, 112,  80, 111,
    114, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_905dd76b298b3130 = b_905dd76b298b3130.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_905dd76b298b3130[] = {
  &s_b62b02486ebe26ed,
  &s_d77df9f44cfcde33,
  &s_ed10beb11e7383e9,
  &s_f53aa3a93e49003b,
};
static const uint16_t m_905dd76b298b3130[] = {0, 1};
const ::capnp::_::RawSchema s_905dd76b298b3130 = {
  0x905dd76b298b3130, b_905dd76b298b3130.words, 41, d_905dd76b298b3130, m_905dd76b298b3130,
  4, 2, nullptr, nullptr, nullptr, { &s_905dd76b298b3130, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_ed10beb11e7383e9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    233, 131, 115,  30, 177, 190,  16, 237,
     32,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  82, 101, 109,
    111, 116, 101,  72, 111, 115, 116,  46,
    103, 101, 116,  84,  99, 112,  80, 111,
    114, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 114, 116,  78, 117, 109,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ed10beb11e7383e9 = b_ed10beb11e7383e9.words;
#if !CAPNP_LITE
static const uint16_t m_ed10beb11e7383e9[] = {0};
static const uint16_t i_ed10beb11e7383e9[] = {0};
const ::capnp::_::RawSchema s_ed10beb11e7383e9 = {
  0xed10beb11e7383e9, b_ed10beb11e7383e9.words, 35, nullptr, m_ed10beb11e7383e9,
  0, 1, i_ed10beb11e7383e9, nullptr, nullptr, { &s_ed10beb11e7383e9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_d77df9f44cfcde33 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     51, 222, 252,  76, 244, 249, 125, 215,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  82, 101, 109,
    111, 116, 101,  72, 111, 115, 116,  46,
    103, 101, 116,  84,  99, 112,  80, 111,
    114, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 114, 116,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    180,   6, 120, 240,  26,  14, 178, 234,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d77df9f44cfcde33 = b_d77df9f44cfcde33.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d77df9f44cfcde33[] = {
  &s_eab20e1af07806b4,
};
static const uint16_t m_d77df9f44cfcde33[] = {0};
static const uint16_t i_d77df9f44cfcde33[] = {0};
const ::capnp::_::RawSchema s_d77df9f44cfcde33 = {
  0xd77df9f44cfcde33, b_d77df9f44cfcde33.words, 35, d_d77df9f44cfcde33, m_d77df9f44cfcde33,
  1, 1, i_d77df9f44cfcde33, nullptr, nullptr, { &s_d77df9f44cfcde33, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_b62b02486ebe26ed = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    237,  38, 190, 110,  72,   2,  43, 182,
     32,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  82, 101, 109,
    111, 116, 101,  72, 111, 115, 116,  46,
    103, 101, 116,  85, 100, 112,  80, 111,
    114, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 114, 116,  78, 117, 109,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b62b02486ebe26ed = b_b62b02486ebe26ed.words;
#if !CAPNP_LITE
static const uint16_t m_b62b02486ebe26ed[] = {0};
static const uint16_t i_b62b02486ebe26ed[] = {0};
const ::capnp::_::RawSchema s_b62b02486ebe26ed = {
  0xb62b02486ebe26ed, b_b62b02486ebe26ed.words, 35, nullptr, m_b62b02486ebe26ed,
  0, 1, i_b62b02486ebe26ed, nullptr, nullptr, { &s_b62b02486ebe26ed, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_f53aa3a93e49003b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     59,   0,  73,  62, 169, 163,  58, 245,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  82, 101, 109,
    111, 116, 101,  72, 111, 115, 116,  46,
    103, 101, 116,  85, 100, 112,  80, 111,
    114, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 114, 116,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    206,   1, 208,  23,  18,  46,  33, 198,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f53aa3a93e49003b = b_f53aa3a93e49003b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f53aa3a93e49003b[] = {
  &s_c6212e1217d001ce,
};
static const uint16_t m_f53aa3a93e49003b[] = {0};
static const uint16_t i_f53aa3a93e49003b[] = {0};
const ::capnp::_::RawSchema s_f53aa3a93e49003b = {
  0xf53aa3a93e49003b, b_f53aa3a93e49003b.words, 35, d_f53aa3a93e49003b, m_f53aa3a93e49003b,
  1, 1, i_f53aa3a93e49003b, nullptr, nullptr, { &s_f53aa3a93e49003b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_eab20e1af07806b4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    180,   6, 120, 240,  26,  14, 178, 234,
     19,   0,   0,   0,   3,   0,   0,   0,
    134,  95,  48,  53, 212,  50,  71, 244,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  84,  99, 112,  80, 111,
    114, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,  35, 163,  80,  50, 229,  96, 138,
     69,  54,   7,  20,  45,  34, 209, 205,
     17,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
     99, 111, 110, 110, 101,  99, 116,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_eab20e1af07806b4 = b_eab20e1af07806b4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_eab20e1af07806b4[] = {
  &s_8a60e53250a32321,
  &s_cdd1222d14073645,
};
static const uint16_t m_eab20e1af07806b4[] = {0};
const ::capnp::_::RawSchema s_eab20e1af07806b4 = {
  0xeab20e1af07806b4, b_eab20e1af07806b4.words, 29, d_eab20e1af07806b4, m_eab20e1af07806b4,
  2, 1, nullptr, nullptr, nullptr, { &s_eab20e1af07806b4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8a60e53250a32321 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     33,  35, 163,  80,  50, 229,  96, 138,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  84,  99, 112,  80, 111,
    114, 116,  46,  99, 111, 110, 110, 101,
     99, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    100, 111, 119, 110, 115, 116, 114, 101,
     97, 109,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     95, 227, 207,  41, 119,  56,  87, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8a60e53250a32321 = b_8a60e53250a32321.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8a60e53250a32321[] = {
  &s_cd57387729cfe35f,
};
static const uint16_t m_8a60e53250a32321[] = {0};
static const uint16_t i_8a60e53250a32321[] = {0};
const ::capnp::_::RawSchema s_8a60e53250a32321 = {
  0x8a60e53250a32321, b_8a60e53250a32321.words, 35, d_8a60e53250a32321, m_8a60e53250a32321,
  1, 1, i_8a60e53250a32321, nullptr, nullptr, { &s_8a60e53250a32321, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_cdd1222d14073645 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     69,  54,   7,  20,  45,  34, 209, 205,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  84,  99, 112,  80, 111,
    114, 116,  46,  99, 111, 110, 110, 101,
     99, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    117, 112, 115, 116, 114, 101,  97, 109,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     95, 227, 207,  41, 119,  56,  87, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cdd1222d14073645 = b_cdd1222d14073645.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cdd1222d14073645[] = {
  &s_cd57387729cfe35f,
};
static const uint16_t m_cdd1222d14073645[] = {0};
static const uint16_t i_cdd1222d14073645[] = {0};
const ::capnp::_::RawSchema s_cdd1222d14073645 = {
  0xcdd1222d14073645, b_cdd1222d14073645.words, 35, d_cdd1222d14073645, m_cdd1222d14073645,
  1, 1, i_cdd1222d14073645, nullptr, nullptr, { &s_cdd1222d14073645, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_c6212e1217d001ce = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    206,   1, 208,  23,  18,  46,  33, 198,
     19,   0,   0,   0,   3,   0,   0,   0,
    134,  95,  48,  53, 212,  50,  71, 244,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  85, 100, 112,  80, 111,
    114, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2, 209, 219, 200, 247,  19, 202, 198,
     17,  24,  59,  33, 142, 253,  67, 142,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    115, 101, 110, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_c6212e1217d001ce = b_c6212e1217d001ce.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c6212e1217d001ce[] = {
  &s_8e43fd8e213b1811,
  &s_c6ca13f7c8dbd102,
};
static const uint16_t m_c6212e1217d001ce[] = {0};
const ::capnp::_::RawSchema s_c6212e1217d001ce = {
  0xc6212e1217d001ce, b_c6212e1217d001ce.words, 29, d_c6212e1217d001ce, m_c6212e1217d001ce,
  2, 1, nullptr, nullptr, nullptr, { &s_c6212e1217d001ce, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_c6ca13f7c8dbd102 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      2, 209, 219, 200, 247,  19, 202, 198,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  85, 100, 112,  80, 111,
    114, 116,  46, 115, 101, 110, 100,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    109, 101, 115, 115,  97, 103, 101,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 116, 117, 114, 110,  80, 111,
    114, 116,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    206,   1, 208,  23,  18,  46,  33, 198,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c6ca13f7c8dbd102 = b_c6ca13f7c8dbd102.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c6ca13f7c8dbd102[] = {
  &s_c6212e1217d001ce,
};
static const uint16_t m_c6ca13f7c8dbd102[] = {0, 1};
static const uint16_t i_c6ca13f7c8dbd102[] = {0, 1};
const ::capnp::_::RawSchema s_c6ca13f7c8dbd102 = {
  0xc6ca13f7c8dbd102, b_c6ca13f7c8dbd102.words, 49, d_c6ca13f7c8dbd102, m_c6ca13f7c8dbd102,
  1, 2, i_c6ca13f7c8dbd102, nullptr, nullptr, { &s_c6ca13f7c8dbd102, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_8e43fd8e213b1811 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     17,  24,  59,  33, 142, 253,  67, 142,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  85, 100, 112,  80, 111,
    114, 116,  46, 115, 101, 110, 100,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_8e43fd8e213b1811 = b_8e43fd8e213b1811.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_8e43fd8e213b1811 = {
  0x8e43fd8e213b1811, b_8e43fd8e213b1811.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_8e43fd8e213b1811, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<53> b_856e71a6a4f22bba = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    186,  43, 242, 164, 166, 113, 110, 133,
     19,   0,   0,   0,   1,   0,   1,   0,
    134,  95,  48,  53, 212,  50,  71, 244,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  73, 112,  80, 111, 114,
    116,  80, 111, 119, 101, 114,  98, 111,
    120,  77, 101, 116,  97, 100,  97, 116,
     97,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     52,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
    112, 114, 101, 102, 101, 114, 114, 101,
    100,  80, 111, 114, 116,  78, 117, 109,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 101, 102, 101, 114, 114, 101,
    100,  72, 111, 115, 116,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_856e71a6a4f22bba = b_856e71a6a4f22bba.words;
#if !CAPNP_LITE
static const uint16_t m_856e71a6a4f22bba[] = {1, 0};
static const uint16_t i_856e71a6a4f22bba[] = {0, 1};
const ::capnp::_::RawSchema s_856e71a6a4f22bba = {
  0x856e71a6a4f22bba, b_856e71a6a4f22bba.words, 53, nullptr, m_856e71a6a4f22bba,
  0, 2, i_856e71a6a4f22bba, nullptr, nullptr, { &s_856e71a6a4f22bba, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<24> b_a5b3215660e038f2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    242,  56, 224,  96,  86,  33, 179, 165,
     19,   0,   0,   0,   3,   0,   0,   0,
    134,  95,  48,  53, 212,  50,  71, 244,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
     33,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  80, 101, 114, 115, 105,
    115, 116, 101, 110, 116,  73, 112,  78,
    101, 116, 119, 111, 114, 107,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   3,   0,   5,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
     64,  32,  42, 122, 107,  87, 130, 169,
      0,   0,   0,   0,   0,   0,   0,   0,
    180, 213, 190, 124, 215, 237, 140, 195,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a5b3215660e038f2 = b_a5b3215660e038f2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a5b3215660e038f2[] = {
  &s_a982576b7a2a2040,
  &s_c38cedd77cbed5b4,
};
const ::capnp::_::RawSchema s_a5b3215660e038f2 = {
  0xa5b3215660e038f2, b_a5b3215660e038f2.words, 24, d_a5b3215660e038f2, nullptr,
  2, 0, nullptr, nullptr, nullptr, { &s_a5b3215660e038f2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<25> b_cf43ebe6a5a6f1b4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    180, 241, 166, 165, 230, 235,  67, 207,
     19,   0,   0,   0,   3,   0,   0,   0,
    134,  95,  48,  53, 212,  50,  71, 244,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
     37,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 105, 112,  46,  99,  97, 112,
    110, 112,  58,  80, 101, 114, 115, 105,
    115, 116, 101, 110, 116,  73, 112,  73,
    110, 116, 101, 114, 102,  97,  99, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   3,   0,   5,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    250, 214,  62, 233, 110,  80,  44, 227,
      0,   0,   0,   0,   0,   0,   0,   0,
    180, 213, 190, 124, 215, 237, 140, 195,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cf43ebe6a5a6f1b4 = b_cf43ebe6a5a6f1b4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cf43ebe6a5a6f1b4[] = {
  &s_c38cedd77cbed5b4,
  &s_e32c506ee93ed6fa,
};
const ::capnp::_::RawSchema s_cf43ebe6a5a6f1b4 = {
  0xcf43ebe6a5a6f1b4, b_cf43ebe6a5a6f1b4.words, 25, d_cf43ebe6a5a6f1b4, nullptr,
  2, 0, nullptr, nullptr, nullptr, { &s_cf43ebe6a5a6f1b4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace sandstorm {

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::IpNetwork::GetRemoteHostParams,  ::sandstorm::IpNetwork::GetRemoteHostResults>
IpNetwork::Client::getRemoteHostRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::IpNetwork::GetRemoteHostParams,  ::sandstorm::IpNetwork::GetRemoteHostResults>(
      0xa982576b7a2a2040ull, 0, sizeHint);
}
::kj::Promise<void> IpNetwork::Server::getRemoteHost(GetRemoteHostContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/ip.capnp:IpNetwork", "getRemoteHost",
      0xa982576b7a2a2040ull, 0);
}
::capnp::Request< ::sandstorm::IpNetwork::GetRemoteHostByNameParams,  ::sandstorm::IpNetwork::GetRemoteHostByNameResults>
IpNetwork::Client::getRemoteHostByNameRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::IpNetwork::GetRemoteHostByNameParams,  ::sandstorm::IpNetwork::GetRemoteHostByNameResults>(
      0xa982576b7a2a2040ull, 1, sizeHint);
}
::kj::Promise<void> IpNetwork::Server::getRemoteHostByName(GetRemoteHostByNameContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/ip.capnp:IpNetwork", "getRemoteHostByName",
      0xa982576b7a2a2040ull, 1);
}
::kj::Promise<void> IpNetwork::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xa982576b7a2a2040ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/ip.capnp:IpNetwork", interfaceId);
  }
}
::kj::Promise<void> IpNetwork::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return getRemoteHost(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::IpNetwork::GetRemoteHostParams,  ::sandstorm::IpNetwork::GetRemoteHostResults>(context));
    case 1:
      return getRemoteHostByName(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::IpNetwork::GetRemoteHostByNameParams,  ::sandstorm::IpNetwork::GetRemoteHostByNameResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/ip.capnp:IpNetwork",
          0xa982576b7a2a2040ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// IpNetwork
#if !CAPNP_LITE
constexpr ::capnp::Kind IpNetwork::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpNetwork::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpNetwork::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// IpNetwork::GetRemoteHostParams
constexpr uint16_t IpNetwork::GetRemoteHostParams::_capnpPrivate::dataWordSize;
constexpr uint16_t IpNetwork::GetRemoteHostParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IpNetwork::GetRemoteHostParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpNetwork::GetRemoteHostParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpNetwork::GetRemoteHostParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// IpNetwork::GetRemoteHostResults
constexpr uint16_t IpNetwork::GetRemoteHostResults::_capnpPrivate::dataWordSize;
constexpr uint16_t IpNetwork::GetRemoteHostResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IpNetwork::GetRemoteHostResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpNetwork::GetRemoteHostResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpNetwork::GetRemoteHostResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// IpNetwork::GetRemoteHostByNameParams
constexpr uint16_t IpNetwork::GetRemoteHostByNameParams::_capnpPrivate::dataWordSize;
constexpr uint16_t IpNetwork::GetRemoteHostByNameParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IpNetwork::GetRemoteHostByNameParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpNetwork::GetRemoteHostByNameParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpNetwork::GetRemoteHostByNameParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// IpNetwork::GetRemoteHostByNameResults
constexpr uint16_t IpNetwork::GetRemoteHostByNameResults::_capnpPrivate::dataWordSize;
constexpr uint16_t IpNetwork::GetRemoteHostByNameResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IpNetwork::GetRemoteHostByNameResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpNetwork::GetRemoteHostByNameResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpNetwork::GetRemoteHostByNameResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// IpAddress
constexpr uint16_t IpAddress::_capnpPrivate::dataWordSize;
constexpr uint16_t IpAddress::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IpAddress::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpAddress::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpAddress::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::IpInterface::ListenTcpParams,  ::sandstorm::IpInterface::ListenTcpResults>
IpInterface::Client::listenTcpRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::IpInterface::ListenTcpParams,  ::sandstorm::IpInterface::ListenTcpResults>(
      0xe32c506ee93ed6faull, 0, sizeHint);
}
::kj::Promise<void> IpInterface::Server::listenTcp(ListenTcpContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/ip.capnp:IpInterface", "listenTcp",
      0xe32c506ee93ed6faull, 0);
}
::capnp::Request< ::sandstorm::IpInterface::ListenUdpParams,  ::sandstorm::IpInterface::ListenUdpResults>
IpInterface::Client::listenUdpRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::IpInterface::ListenUdpParams,  ::sandstorm::IpInterface::ListenUdpResults>(
      0xe32c506ee93ed6faull, 1, sizeHint);
}
::kj::Promise<void> IpInterface::Server::listenUdp(ListenUdpContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/ip.capnp:IpInterface", "listenUdp",
      0xe32c506ee93ed6faull, 1);
}
::kj::Promise<void> IpInterface::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe32c506ee93ed6faull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/ip.capnp:IpInterface", interfaceId);
  }
}
::kj::Promise<void> IpInterface::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return listenTcp(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::IpInterface::ListenTcpParams,  ::sandstorm::IpInterface::ListenTcpResults>(context));
    case 1:
      return listenUdp(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::IpInterface::ListenUdpParams,  ::sandstorm::IpInterface::ListenUdpResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/ip.capnp:IpInterface",
          0xe32c506ee93ed6faull, methodId);
  }
}
#endif  // !CAPNP_LITE

// IpInterface
#if !CAPNP_LITE
constexpr ::capnp::Kind IpInterface::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpInterface::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpInterface::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// IpInterface::ListenTcpParams
constexpr uint16_t IpInterface::ListenTcpParams::_capnpPrivate::dataWordSize;
constexpr uint16_t IpInterface::ListenTcpParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IpInterface::ListenTcpParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpInterface::ListenTcpParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpInterface::ListenTcpParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// IpInterface::ListenTcpResults
constexpr uint16_t IpInterface::ListenTcpResults::_capnpPrivate::dataWordSize;
constexpr uint16_t IpInterface::ListenTcpResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IpInterface::ListenTcpResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpInterface::ListenTcpResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpInterface::ListenTcpResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// IpInterface::ListenUdpParams
constexpr uint16_t IpInterface::ListenUdpParams::_capnpPrivate::dataWordSize;
constexpr uint16_t IpInterface::ListenUdpParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IpInterface::ListenUdpParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpInterface::ListenUdpParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpInterface::ListenUdpParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// IpInterface::ListenUdpResults
constexpr uint16_t IpInterface::ListenUdpResults::_capnpPrivate::dataWordSize;
constexpr uint16_t IpInterface::ListenUdpResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IpInterface::ListenUdpResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpInterface::ListenUdpResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpInterface::ListenUdpResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::IpRemoteHost::GetTcpPortParams,  ::sandstorm::IpRemoteHost::GetTcpPortResults>
IpRemoteHost::Client::getTcpPortRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::IpRemoteHost::GetTcpPortParams,  ::sandstorm::IpRemoteHost::GetTcpPortResults>(
      0x905dd76b298b3130ull, 0, sizeHint);
}
::kj::Promise<void> IpRemoteHost::Server::getTcpPort(GetTcpPortContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/ip.capnp:IpRemoteHost", "getTcpPort",
      0x905dd76b298b3130ull, 0);
}
::capnp::Request< ::sandstorm::IpRemoteHost::GetUdpPortParams,  ::sandstorm::IpRemoteHost::GetUdpPortResults>
IpRemoteHost::Client::getUdpPortRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::IpRemoteHost::GetUdpPortParams,  ::sandstorm::IpRemoteHost::GetUdpPortResults>(
      0x905dd76b298b3130ull, 1, sizeHint);
}
::kj::Promise<void> IpRemoteHost::Server::getUdpPort(GetUdpPortContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/ip.capnp:IpRemoteHost", "getUdpPort",
      0x905dd76b298b3130ull, 1);
}
::kj::Promise<void> IpRemoteHost::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x905dd76b298b3130ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/ip.capnp:IpRemoteHost", interfaceId);
  }
}
::kj::Promise<void> IpRemoteHost::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return getTcpPort(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::IpRemoteHost::GetTcpPortParams,  ::sandstorm::IpRemoteHost::GetTcpPortResults>(context));
    case 1:
      return getUdpPort(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::IpRemoteHost::GetUdpPortParams,  ::sandstorm::IpRemoteHost::GetUdpPortResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/ip.capnp:IpRemoteHost",
          0x905dd76b298b3130ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// IpRemoteHost
#if !CAPNP_LITE
constexpr ::capnp::Kind IpRemoteHost::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpRemoteHost::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpRemoteHost::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// IpRemoteHost::GetTcpPortParams
constexpr uint16_t IpRemoteHost::GetTcpPortParams::_capnpPrivate::dataWordSize;
constexpr uint16_t IpRemoteHost::GetTcpPortParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IpRemoteHost::GetTcpPortParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpRemoteHost::GetTcpPortParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpRemoteHost::GetTcpPortParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// IpRemoteHost::GetTcpPortResults
constexpr uint16_t IpRemoteHost::GetTcpPortResults::_capnpPrivate::dataWordSize;
constexpr uint16_t IpRemoteHost::GetTcpPortResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IpRemoteHost::GetTcpPortResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpRemoteHost::GetTcpPortResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpRemoteHost::GetTcpPortResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// IpRemoteHost::GetUdpPortParams
constexpr uint16_t IpRemoteHost::GetUdpPortParams::_capnpPrivate::dataWordSize;
constexpr uint16_t IpRemoteHost::GetUdpPortParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IpRemoteHost::GetUdpPortParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpRemoteHost::GetUdpPortParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpRemoteHost::GetUdpPortParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// IpRemoteHost::GetUdpPortResults
constexpr uint16_t IpRemoteHost::GetUdpPortResults::_capnpPrivate::dataWordSize;
constexpr uint16_t IpRemoteHost::GetUdpPortResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IpRemoteHost::GetUdpPortResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpRemoteHost::GetUdpPortResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpRemoteHost::GetUdpPortResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::TcpPort::ConnectParams,  ::sandstorm::TcpPort::ConnectResults>
TcpPort::Client::connectRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::TcpPort::ConnectParams,  ::sandstorm::TcpPort::ConnectResults>(
      0xeab20e1af07806b4ull, 0, sizeHint);
}
::kj::Promise<void> TcpPort::Server::connect(ConnectContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/ip.capnp:TcpPort", "connect",
      0xeab20e1af07806b4ull, 0);
}
::kj::Promise<void> TcpPort::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xeab20e1af07806b4ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/ip.capnp:TcpPort", interfaceId);
  }
}
::kj::Promise<void> TcpPort::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return connect(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::TcpPort::ConnectParams,  ::sandstorm::TcpPort::ConnectResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/ip.capnp:TcpPort",
          0xeab20e1af07806b4ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// TcpPort
#if !CAPNP_LITE
constexpr ::capnp::Kind TcpPort::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TcpPort::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* TcpPort::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// TcpPort::ConnectParams
constexpr uint16_t TcpPort::ConnectParams::_capnpPrivate::dataWordSize;
constexpr uint16_t TcpPort::ConnectParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TcpPort::ConnectParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TcpPort::ConnectParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* TcpPort::ConnectParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// TcpPort::ConnectResults
constexpr uint16_t TcpPort::ConnectResults::_capnpPrivate::dataWordSize;
constexpr uint16_t TcpPort::ConnectResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TcpPort::ConnectResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TcpPort::ConnectResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* TcpPort::ConnectResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::UdpPort::SendParams,  ::sandstorm::UdpPort::SendResults>
UdpPort::Client::sendRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::UdpPort::SendParams,  ::sandstorm::UdpPort::SendResults>(
      0xc6212e1217d001ceull, 0, sizeHint);
}
::kj::Promise<void> UdpPort::Server::send(SendContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/ip.capnp:UdpPort", "send",
      0xc6212e1217d001ceull, 0);
}
::kj::Promise<void> UdpPort::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xc6212e1217d001ceull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/ip.capnp:UdpPort", interfaceId);
  }
}
::kj::Promise<void> UdpPort::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return send(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::UdpPort::SendParams,  ::sandstorm::UdpPort::SendResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/ip.capnp:UdpPort",
          0xc6212e1217d001ceull, methodId);
  }
}
#endif  // !CAPNP_LITE

// UdpPort
#if !CAPNP_LITE
constexpr ::capnp::Kind UdpPort::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UdpPort::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* UdpPort::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// UdpPort::SendParams
constexpr uint16_t UdpPort::SendParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UdpPort::SendParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind UdpPort::SendParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UdpPort::SendParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* UdpPort::SendParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// UdpPort::SendResults
constexpr uint16_t UdpPort::SendResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UdpPort::SendResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind UdpPort::SendResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UdpPort::SendResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* UdpPort::SendResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// IpPortPowerboxMetadata
constexpr uint16_t IpPortPowerboxMetadata::_capnpPrivate::dataWordSize;
constexpr uint16_t IpPortPowerboxMetadata::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IpPortPowerboxMetadata::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IpPortPowerboxMetadata::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* IpPortPowerboxMetadata::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::kj::Promise<void> PersistentIpNetwork::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xa5b3215660e038f2ull:
      return dispatchCallInternal(methodId, context);
    case 0xa982576b7a2a2040ull:
      return  ::sandstorm::IpNetwork::Server::dispatchCallInternal(methodId, context);
    case 0xc38cedd77cbed5b4ull:
      return  ::sandstorm::SystemPersistent::Server::dispatchCallInternal(methodId, context);
    case 0xc8cb212fcd9f5691ull:
      return  ::capnp::Persistent< ::capnp::Data,  ::sandstorm::ApiTokenOwner>::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/ip.capnp:PersistentIpNetwork", interfaceId);
  }
}
::kj::Promise<void> PersistentIpNetwork::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/ip.capnp:PersistentIpNetwork",
          0xa5b3215660e038f2ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// PersistentIpNetwork
#if !CAPNP_LITE
constexpr ::capnp::Kind PersistentIpNetwork::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PersistentIpNetwork::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* PersistentIpNetwork::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::kj::Promise<void> PersistentIpInterface::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xcf43ebe6a5a6f1b4ull:
      return dispatchCallInternal(methodId, context);
    case 0xc38cedd77cbed5b4ull:
      return  ::sandstorm::SystemPersistent::Server::dispatchCallInternal(methodId, context);
    case 0xc8cb212fcd9f5691ull:
      return  ::capnp::Persistent< ::capnp::Data,  ::sandstorm::ApiTokenOwner>::Server::dispatchCallInternal(methodId, context);
    case 0xe32c506ee93ed6faull:
      return  ::sandstorm::IpInterface::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/ip.capnp:PersistentIpInterface", interfaceId);
  }
}
::kj::Promise<void> PersistentIpInterface::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/ip.capnp:PersistentIpInterface",
          0xcf43ebe6a5a6f1b4ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// PersistentIpInterface
#if !CAPNP_LITE
constexpr ::capnp::Kind PersistentIpInterface::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PersistentIpInterface::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* PersistentIpInterface::_capnpPrivate::brand;
#endif  // !CAPNP_LITE


}  // namespace

