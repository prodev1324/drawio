// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: backend.capnp

#include "backend.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<205> b_c1b0e9713ac1ad4f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     79, 173, 193,  58, 113, 233, 176, 193,
     24,   0,   0,   0,   3,   0,   0,   0,
    165,  71,  27,  43, 112,  13, 188, 220,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,   7,   4,   0,   0,
      5,   3,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
     33,  65, 130,  69,  48,  97,  92, 131,
      9,   0,   0,   0,  90,   0,   0,   0,
     60, 113, 162,  13,  93, 211, 129, 180,
      9,   0,   0,   0, 162,   0,   0,   0,
    115, 111,  99, 107, 101, 116,  80,  97,
    116, 104,   0,   0,   0,   0,   0,   0,
     80,  97,  99, 107,  97, 103, 101,  85,
    112, 108, 111,  97, 100,  83, 116, 114,
    101,  97, 109,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   5,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    154,  28, 192, 249,  14, 249, 251, 173,
    207, 120,  79,  60, 129,  87, 149, 172,
    241,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    233,   1,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    207,  26, 254, 201, 175, 175, 211, 228,
    233, 174,  82, 251,  54,  40,  11, 234,
    221,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    213,   1,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     51, 213,  30,  72, 117, 150, 102, 208,
    255,  97,  17, 221,   8, 158, 169, 154,
    201,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   1,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    107, 210,  61, 217,  45, 208, 143, 169,
    241,  37, 131, 109, 231, 178,  41, 136,
    181,   1,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   1,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
     76,  16,  66, 111, 145, 217,  76, 251,
    207,  48, 128,   5, 214,  31,  36, 239,
    161,   1,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   1,   0,   0,   7,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
     79, 153, 202, 116, 134, 193,  31, 182,
    215, 182,  17, 126, 160, 130, 159, 234,
    141,   1,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   1,   0,   0,   7,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
     33, 221,  78,  10, 107, 169, 166, 135,
     39, 120,  99,  95, 171, 159, 156, 205,
    121,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   1,   0,   0,   7,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
    187, 212,  24,   3, 159, 242, 136, 157,
    255, 167,  62,  25,   7,   7, 121, 139,
    101,   1,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   1,   0,   0,   7,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
    123,  34, 120,   1, 255, 236, 204, 242,
    207, 143,  90, 134, 188, 214,  81, 188,
     81,   1,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   1,   0,   0,   7,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
     53,  16, 151,  64, 241,  50, 109, 145,
    125, 184, 186, 132, 132,  73, 144, 158,
     61,   1,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   1,   0,   0,   7,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
     98,  14, 215,  94, 106, 237, 214, 208,
     13, 176,   1, 200,   0, 173, 136, 175,
     41,   1,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   1,   0,   0,   7,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
     93, 134,  27,  48, 140,  31, 239, 170,
     75, 171,  56, 188, 132,  51, 199, 161,
     21,   1,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   1,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    129, 211,   5,  96, 238,  10, 228, 204,
    151,  41, 196, 245, 105,  44,  54, 134,
      5,   1,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    253,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     20,  89,  52, 169, 224,  56, 114, 250,
    217,  67, 131,  48, 234, 199,  69, 145,
    241,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    233,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,  24,  49, 209,  68, 244,  86, 203,
     96, 125,  23, 233, 189, 206, 169, 227,
    221,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0,   7,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    120,  49, 233, 212, 224, 228, 111, 224,
    125, 195, 196,  69, 109,  61, 157, 128,
    197,   0,   0,   0, 170,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0,   7,   0,   0,   0,
    115, 116,  97, 114, 116,  71, 114,  97,
    105, 110,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  71, 114,  97, 105, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 101, 108, 101, 116, 101,  71, 114,
     97, 105, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    105, 110, 115, 116,  97, 108, 108,  80,
     97,  99, 107,  97, 103, 101,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    116, 114, 121,  71, 101, 116,  80,  97,
     99, 107,  97, 103, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 101, 108, 101, 116, 101,  80,  97,
     99, 107,  97, 103, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     98,  97,  99, 107, 117, 112,  71, 114,
     97, 105, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 115, 116, 111, 114, 101,  71,
    114,  97, 105, 110,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    117, 112, 108, 111,  97, 100,  66,  97,
     99, 107, 117, 112,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 111, 119, 110, 108, 111,  97, 100,
     66,  97,  99, 107, 117, 112,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 101, 108, 101, 116, 101,  66,  97,
     99, 107, 117, 112,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  85, 115, 101, 114,  83,
    116, 111, 114,  97, 103, 101,  85, 115,
     97, 103, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    116, 114,  97, 110, 115, 102, 101, 114,
     71, 114,  97, 105, 110,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 101, 108, 101, 116, 101,  85, 115,
    101, 114,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    112, 105, 110, 103,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  71, 114,  97, 105, 110,
     83, 116, 111, 114,  97, 103, 101,  85,
    115,  97, 103, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_c1b0e9713ac1ad4f = b_c1b0e9713ac1ad4f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c1b0e9713ac1ad4f[] = {
  &s_809d3d6d45c4c37d,
  &s_86362c69f5c42997,
  &s_87a6a96b0a4edd21,
  &s_8829b2e76d8325f1,
  &s_8b790707193ea7ff,
  &s_9145c7ea308343d9,
  &s_916d32f140971035,
  &s_9aa99e08dd1161ff,
  &s_9d88f29f0318d4bb,
  &s_9e90498484bab87d,
  &s_a1c73384bc38ab4b,
  &s_a98fd02dd93dd26b,
  &s_aaef1f8c301b865d,
  &s_ac9557813c4f78cf,
  &s_adfbf90ef9c01c9a,
  &s_af88ad00c801b00d,
  &s_b61fc18674ca994f,
  &s_bc51d6bc865a8fcf,
  &s_cb56f444d1311800,
  &s_cce40aee6005d381,
  &s_cd9c9fab5f637827,
  &s_d0669675481ed533,
  &s_d0d6ed6a5ed70e62,
  &s_e06fe4e0d4e93178,
  &s_e3a9cebde9177d60,
  &s_e4d3afafc9fe1acf,
  &s_ea0b2836fb52aee9,
  &s_ea9f82a07e11b6d7,
  &s_ef241fd6058030cf,
  &s_f2ccecff0178227b,
  &s_fa7238e0a9345914,
  &s_fb4cd9916f42104c,
};
static const uint16_t m_c1b0e9713ac1ad4f[] = {6, 10, 2, 5, 13, 9, 1, 15, 11, 3, 14, 7, 0, 12, 4, 8};
const ::capnp::_::RawSchema s_c1b0e9713ac1ad4f = {
  0xc1b0e9713ac1ad4f, b_c1b0e9713ac1ad4f.words, 205, d_c1b0e9713ac1ad4f, m_c1b0e9713ac1ad4f,
  32, 16, nullptr, nullptr, nullptr, { &s_c1b0e9713ac1ad4f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<30> b_835c613045824121 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     33,  65, 130,  69,  48,  97,  92, 131,
     32,   0,   0,   0,   4,   0,   0,   0,
     79, 173, 193,  58, 113, 233, 176, 193,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    115, 111,  99, 107, 101, 116,  80,  97,
    116, 104,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 242,   0,   0,   0,
     47, 118,  97, 114,  47, 115,  97, 110,
    100, 115, 116, 111, 114, 109,  47, 115,
    111,  99, 107, 101, 116,  47,  98,  97,
     99, 107, 101, 110, 100,   0,   0,   0, }
};
::capnp::word const* const bp_835c613045824121 = b_835c613045824121.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_835c613045824121 = {
  0x835c613045824121, b_835c613045824121.words, 30, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_835c613045824121, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b481d35d0da2713c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     60, 113, 162,  13,  93, 211, 129, 180,
     32,   0,   0,   0,   3,   0,   0,   0,
     79, 173, 193,  58, 113, 233, 176, 193,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  71,   0,   0,   0,
     81,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
     80,  97,  99, 107,  97, 103, 101,  85,
    112, 108, 111,  97, 100,  83, 116, 114,
    101,  97, 109,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     43,  45, 215, 151, 211,  23, 202, 134,
     93, 232,  56,  74, 230, 219,  25, 160,
     17,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    115,  97, 118, 101,  65, 115,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     95, 227, 207,  41, 119,  56,  87, 205,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b481d35d0da2713c = b_b481d35d0da2713c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b481d35d0da2713c[] = {
  &s_86ca17d397d72d2b,
  &s_a019dbe64a38e85d,
  &s_cd57387729cfe35f,
};
static const uint16_t m_b481d35d0da2713c[] = {0};
const ::capnp::_::RawSchema s_b481d35d0da2713c = {
  0xb481d35d0da2713c, b_b481d35d0da2713c.words, 34, d_b481d35d0da2713c, m_b481d35d0da2713c,
  3, 1, nullptr, nullptr, nullptr, { &s_b481d35d0da2713c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_86ca17d397d72d2b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     43,  45, 215, 151, 211,  23, 202, 134,
     52,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
     80,  97,  99, 107,  97, 103, 101,  85,
    112, 108, 111,  97, 100,  83, 116, 114,
    101,  97, 109,  46, 115,  97, 118, 101,
     65, 115,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    112,  97,  99, 107,  97, 103, 101,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_86ca17d397d72d2b = b_86ca17d397d72d2b.words;
#if !CAPNP_LITE
static const uint16_t m_86ca17d397d72d2b[] = {0};
static const uint16_t i_86ca17d397d72d2b[] = {0};
const ::capnp::_::RawSchema s_86ca17d397d72d2b = {
  0x86ca17d397d72d2b, b_86ca17d397d72d2b.words, 38, nullptr, m_86ca17d397d72d2b,
  0, 1, i_86ca17d397d72d2b, nullptr, nullptr, { &s_86ca17d397d72d2b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<70> b_a019dbe64a38e85d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     93, 232,  56,  74, 230, 219,  25, 160,
     52,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
     80,  97,  99, 107,  97, 103, 101,  85,
    112, 108, 111,  97, 100,  83, 116, 114,
    101,  97, 109,  46, 115,  97, 118, 101,
     65, 115,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0, 194,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
     97, 112, 112,  73, 100,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 110, 105, 102, 101, 115, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    202, 225, 230, 105, 106,  41,  95, 133,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 117, 116, 104, 111, 114,  80, 103,
    112,  75, 101, 121,  70, 105, 110, 103,
    101, 114, 112, 114, 105, 110, 116,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a019dbe64a38e85d = b_a019dbe64a38e85d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a019dbe64a38e85d[] = {
  &s_855f296a69e6e1ca,
};
static const uint16_t m_a019dbe64a38e85d[] = {0, 2, 1};
static const uint16_t i_a019dbe64a38e85d[] = {0, 1, 2};
const ::capnp::_::RawSchema s_a019dbe64a38e85d = {
  0xa019dbe64a38e85d, b_a019dbe64a38e85d.words, 70, d_a019dbe64a38e85d, m_a019dbe64a38e85d,
  1, 3, i_a019dbe64a38e85d, nullptr, nullptr, { &s_a019dbe64a38e85d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<127> b_adfbf90ef9c01c9a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    154,  28, 192, 249,  14, 249, 251, 173,
     32,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 143,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    115, 116,  97, 114, 116,  71, 114,  97,
    105, 110,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
     28,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    176,   0,   0,   0,   3,   0,   1,   0,
    188,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    185,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    180,   0,   0,   0,   3,   0,   1,   0,
    192,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    189,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    188,   0,   0,   0,   3,   0,   1,   0,
    200,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    197,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    192,   0,   0,   0,   3,   0,   1,   0,
    204,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    196,   0,   0,   0,   3,   0,   1,   0,
    208,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    205,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    200,   0,   0,   0,   3,   0,   1,   0,
    212,   0,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    208,   0,   0,   0,   3,   0,   1,   0,
    220,   0,   0,   0,   2,   0,   1,   0,
    111, 119, 110, 101, 114,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114,  97, 105, 110,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109,  97, 110, 100,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    207, 134,  40, 160, 178,  81,  73, 198,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 115,  78, 101, 119,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 118,  77, 111, 100, 101,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 111, 117, 110, 116,  80, 114, 111,
     99,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_adfbf90ef9c01c9a = b_adfbf90ef9c01c9a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_adfbf90ef9c01c9a[] = {
  &s_c64951b2a02886cf,
};
static const uint16_t m_adfbf90ef9c01c9a[] = {3, 5, 1, 4, 6, 0, 2};
static const uint16_t i_adfbf90ef9c01c9a[] = {0, 1, 2, 3, 4, 5, 6};
const ::capnp::_::RawSchema s_adfbf90ef9c01c9a = {
  0xadfbf90ef9c01c9a, b_adfbf90ef9c01c9a.words, 127, d_adfbf90ef9c01c9a, m_adfbf90ef9c01c9a,
  1, 7, i_adfbf90ef9c01c9a, nullptr, nullptr, { &s_adfbf90ef9c01c9a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_ac9557813c4f78cf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    207, 120,  79,  60, 129,  87, 149, 172,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    115, 116,  97, 114, 116,  71, 114,  97,
    105, 110,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    115, 117, 112, 101, 114, 118, 105, 115,
    111, 114,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     48,  85,  56,  99,  33, 193,  81, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ac9557813c4f78cf = b_ac9557813c4f78cf.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ac9557813c4f78cf[] = {
  &s_9951c12163385530,
};
static const uint16_t m_ac9557813c4f78cf[] = {0};
static const uint16_t i_ac9557813c4f78cf[] = {0};
const ::capnp::_::RawSchema s_ac9557813c4f78cf = {
  0xac9557813c4f78cf, b_ac9557813c4f78cf.words, 36, d_ac9557813c4f78cf, m_ac9557813c4f78cf,
  1, 1, i_ac9557813c4f78cf, nullptr, nullptr, { &s_ac9557813c4f78cf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_e4d3afafc9fe1acf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    207,  26, 254, 201, 175, 175, 211, 228,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    103, 101, 116,  71, 114,  97, 105, 110,
     36,  80,  97, 114,  97, 109, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    111, 119, 110, 101, 114,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114,  97, 105, 110,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e4d3afafc9fe1acf = b_e4d3afafc9fe1acf.words;
#if !CAPNP_LITE
static const uint16_t m_e4d3afafc9fe1acf[] = {1, 0};
static const uint16_t i_e4d3afafc9fe1acf[] = {0, 1};
const ::capnp::_::RawSchema s_e4d3afafc9fe1acf = {
  0xe4d3afafc9fe1acf, b_e4d3afafc9fe1acf.words, 49, nullptr, m_e4d3afafc9fe1acf,
  0, 2, i_e4d3afafc9fe1acf, nullptr, nullptr, { &s_e4d3afafc9fe1acf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_ea0b2836fb52aee9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    233, 174,  82, 251,  54,  40,  11, 234,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    103, 101, 116,  71, 114,  97, 105, 110,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    115, 117, 112, 101, 114, 118, 105, 115,
    111, 114,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     48,  85,  56,  99,  33, 193,  81, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ea0b2836fb52aee9 = b_ea0b2836fb52aee9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ea0b2836fb52aee9[] = {
  &s_9951c12163385530,
};
static const uint16_t m_ea0b2836fb52aee9[] = {0};
static const uint16_t i_ea0b2836fb52aee9[] = {0};
const ::capnp::_::RawSchema s_ea0b2836fb52aee9 = {
  0xea0b2836fb52aee9, b_ea0b2836fb52aee9.words, 36, d_ea0b2836fb52aee9, m_ea0b2836fb52aee9,
  1, 1, i_ea0b2836fb52aee9, nullptr, nullptr, { &s_ea0b2836fb52aee9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_d0669675481ed533 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     51, 213,  30,  72, 117, 150, 102, 208,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    100, 101, 108, 101, 116, 101,  71, 114,
     97, 105, 110,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    111, 119, 110, 101, 114,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114,  97, 105, 110,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d0669675481ed533 = b_d0669675481ed533.words;
#if !CAPNP_LITE
static const uint16_t m_d0669675481ed533[] = {1, 0};
static const uint16_t i_d0669675481ed533[] = {0, 1};
const ::capnp::_::RawSchema s_d0669675481ed533 = {
  0xd0669675481ed533, b_d0669675481ed533.words, 50, nullptr, m_d0669675481ed533,
  0, 2, i_d0669675481ed533, nullptr, nullptr, { &s_d0669675481ed533, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_9aa99e08dd1161ff = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    255,  97,  17, 221,   8, 158, 169, 154,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    100, 101, 108, 101, 116, 101,  71, 114,
     97, 105, 110,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9aa99e08dd1161ff = b_9aa99e08dd1161ff.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9aa99e08dd1161ff = {
  0x9aa99e08dd1161ff, b_9aa99e08dd1161ff.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9aa99e08dd1161ff, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_a98fd02dd93dd26b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    107, 210,  61, 217,  45, 208, 143, 169,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    105, 110, 115, 116,  97, 108, 108,  80,
     97,  99, 107,  97, 103, 101,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_a98fd02dd93dd26b = b_a98fd02dd93dd26b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a98fd02dd93dd26b = {
  0xa98fd02dd93dd26b, b_a98fd02dd93dd26b.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a98fd02dd93dd26b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8829b2e76d8325f1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    241,  37, 131, 109, 231, 178,  41, 136,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    105, 110, 115, 116,  97, 108, 108,  80,
     97,  99, 107,  97, 103, 101,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 116, 114, 101,  97, 109,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     60, 113, 162,  13,  93, 211, 129, 180,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8829b2e76d8325f1 = b_8829b2e76d8325f1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8829b2e76d8325f1[] = {
  &s_b481d35d0da2713c,
};
static const uint16_t m_8829b2e76d8325f1[] = {0};
static const uint16_t i_8829b2e76d8325f1[] = {0};
const ::capnp::_::RawSchema s_8829b2e76d8325f1 = {
  0x8829b2e76d8325f1, b_8829b2e76d8325f1.words, 35, d_8829b2e76d8325f1, m_8829b2e76d8325f1,
  1, 1, i_8829b2e76d8325f1, nullptr, nullptr, { &s_8829b2e76d8325f1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_fb4cd9916f42104c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     76,  16,  66, 111, 145, 217,  76, 251,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    116, 114, 121,  71, 101, 116,  80,  97,
     99, 107,  97, 103, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    112,  97,  99, 107,  97, 103, 101,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fb4cd9916f42104c = b_fb4cd9916f42104c.words;
#if !CAPNP_LITE
static const uint16_t m_fb4cd9916f42104c[] = {0};
static const uint16_t i_fb4cd9916f42104c[] = {0};
const ::capnp::_::RawSchema s_fb4cd9916f42104c = {
  0xfb4cd9916f42104c, b_fb4cd9916f42104c.words, 36, nullptr, m_fb4cd9916f42104c,
  0, 1, i_fb4cd9916f42104c, nullptr, nullptr, { &s_fb4cd9916f42104c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<68> b_ef241fd6058030cf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    207,  48, 128,   5, 214,  31,  36, 239,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    116, 114, 121,  71, 101, 116,  80,  97,
     99, 107,  97, 103, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0, 194,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
     97, 112, 112,  73, 100,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 110, 105, 102, 101, 115, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    202, 225, 230, 105, 106,  41,  95, 133,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 117, 116, 104, 111, 114,  80, 103,
    112,  75, 101, 121,  70, 105, 110, 103,
    101, 114, 112, 114, 105, 110, 116,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ef241fd6058030cf = b_ef241fd6058030cf.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ef241fd6058030cf[] = {
  &s_855f296a69e6e1ca,
};
static const uint16_t m_ef241fd6058030cf[] = {0, 2, 1};
static const uint16_t i_ef241fd6058030cf[] = {0, 1, 2};
const ::capnp::_::RawSchema s_ef241fd6058030cf = {
  0xef241fd6058030cf, b_ef241fd6058030cf.words, 68, d_ef241fd6058030cf, m_ef241fd6058030cf,
  1, 3, i_ef241fd6058030cf, nullptr, nullptr, { &s_ef241fd6058030cf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_b61fc18674ca994f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     79, 153, 202, 116, 134, 193,  31, 182,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    100, 101, 108, 101, 116, 101,  80,  97,
     99, 107,  97, 103, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    112,  97,  99, 107,  97, 103, 101,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b61fc18674ca994f = b_b61fc18674ca994f.words;
#if !CAPNP_LITE
static const uint16_t m_b61fc18674ca994f[] = {0};
static const uint16_t i_b61fc18674ca994f[] = {0};
const ::capnp::_::RawSchema s_b61fc18674ca994f = {
  0xb61fc18674ca994f, b_b61fc18674ca994f.words, 36, nullptr, m_b61fc18674ca994f,
  0, 1, i_b61fc18674ca994f, nullptr, nullptr, { &s_b61fc18674ca994f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_ea9f82a07e11b6d7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    215, 182,  17, 126, 160, 130, 159, 234,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    100, 101, 108, 101, 116, 101,  80,  97,
     99, 107,  97, 103, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_ea9f82a07e11b6d7 = b_ea9f82a07e11b6d7.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ea9f82a07e11b6d7 = {
  0xea9f82a07e11b6d7, b_ea9f82a07e11b6d7.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ea9f82a07e11b6d7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<81> b_87a6a96b0a4edd21 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     33, 221,  78,  10, 107, 169, 166, 135,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
     98,  97,  99, 107, 117, 112,  71, 114,
     97, 105, 110,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
     98,  97,  99, 107, 117, 112,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 119, 110, 101, 114,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114,  97, 105, 110,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    104,  29, 103,  83, 225, 192, 252, 181,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_87a6a96b0a4edd21 = b_87a6a96b0a4edd21.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_87a6a96b0a4edd21[] = {
  &s_b5fcc0e153671d68,
};
static const uint16_t m_87a6a96b0a4edd21[] = {0, 2, 3, 1};
static const uint16_t i_87a6a96b0a4edd21[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_87a6a96b0a4edd21 = {
  0x87a6a96b0a4edd21, b_87a6a96b0a4edd21.words, 81, d_87a6a96b0a4edd21, m_87a6a96b0a4edd21,
  1, 4, i_87a6a96b0a4edd21, nullptr, nullptr, { &s_87a6a96b0a4edd21, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_cd9c9fab5f637827 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     39, 120,  99,  95, 171, 159, 156, 205,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
     98,  97,  99, 107, 117, 112,  71, 114,
     97, 105, 110,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cd9c9fab5f637827 = b_cd9c9fab5f637827.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_cd9c9fab5f637827 = {
  0xcd9c9fab5f637827, b_cd9c9fab5f637827.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_cd9c9fab5f637827, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<66> b_9d88f29f0318d4bb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    187, 212,  24,   3, 159, 242, 136, 157,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    114, 101, 115, 116, 111, 114, 101,  71,
    114,  97, 105, 110,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
     98,  97,  99, 107, 117, 112,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 119, 110, 101, 114,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114,  97, 105, 110,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9d88f29f0318d4bb = b_9d88f29f0318d4bb.words;
#if !CAPNP_LITE
static const uint16_t m_9d88f29f0318d4bb[] = {0, 2, 1};
static const uint16_t i_9d88f29f0318d4bb[] = {0, 1, 2};
const ::capnp::_::RawSchema s_9d88f29f0318d4bb = {
  0x9d88f29f0318d4bb, b_9d88f29f0318d4bb.words, 66, nullptr, m_9d88f29f0318d4bb,
  0, 3, i_9d88f29f0318d4bb, nullptr, nullptr, { &s_9d88f29f0318d4bb, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8b790707193ea7ff = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    255, 167,  62,  25,   7,   7, 121, 139,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    114, 101, 115, 116, 111, 114, 101,  71,
    114,  97, 105, 110,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    104,  29, 103,  83, 225, 192, 252, 181,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8b790707193ea7ff = b_8b790707193ea7ff.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8b790707193ea7ff[] = {
  &s_b5fcc0e153671d68,
};
static const uint16_t m_8b790707193ea7ff[] = {0};
static const uint16_t i_8b790707193ea7ff[] = {0};
const ::capnp::_::RawSchema s_8b790707193ea7ff = {
  0x8b790707193ea7ff, b_8b790707193ea7ff.words, 35, d_8b790707193ea7ff, m_8b790707193ea7ff,
  1, 1, i_8b790707193ea7ff, nullptr, nullptr, { &s_8b790707193ea7ff, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_f2ccecff0178227b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    123,  34, 120,   1, 255, 236, 204, 242,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    117, 112, 108, 111,  97, 100,  66,  97,
     99, 107, 117, 112,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
     98,  97,  99, 107, 117, 112,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f2ccecff0178227b = b_f2ccecff0178227b.words;
#if !CAPNP_LITE
static const uint16_t m_f2ccecff0178227b[] = {0};
static const uint16_t i_f2ccecff0178227b[] = {0};
const ::capnp::_::RawSchema s_f2ccecff0178227b = {
  0xf2ccecff0178227b, b_f2ccecff0178227b.words, 36, nullptr, m_f2ccecff0178227b,
  0, 1, i_f2ccecff0178227b, nullptr, nullptr, { &s_f2ccecff0178227b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_bc51d6bc865a8fcf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    207, 143,  90, 134, 188, 214,  81, 188,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    117, 112, 108, 111,  97, 100,  66,  97,
     99, 107, 117, 112,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 116, 114, 101,  97, 109,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     95, 227, 207,  41, 119,  56,  87, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bc51d6bc865a8fcf = b_bc51d6bc865a8fcf.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bc51d6bc865a8fcf[] = {
  &s_cd57387729cfe35f,
};
static const uint16_t m_bc51d6bc865a8fcf[] = {0};
static const uint16_t i_bc51d6bc865a8fcf[] = {0};
const ::capnp::_::RawSchema s_bc51d6bc865a8fcf = {
  0xbc51d6bc865a8fcf, b_bc51d6bc865a8fcf.words, 35, d_bc51d6bc865a8fcf, m_bc51d6bc865a8fcf,
  1, 1, i_bc51d6bc865a8fcf, nullptr, nullptr, { &s_bc51d6bc865a8fcf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_916d32f140971035 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     53,  16, 151,  64, 241,  50, 109, 145,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    100, 111, 119, 110, 108, 111,  97, 100,
     66,  97,  99, 107, 117, 112,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
     98,  97,  99, 107, 117, 112,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 101,  97, 109,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     95, 227, 207,  41, 119,  56,  87, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_916d32f140971035 = b_916d32f140971035.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_916d32f140971035[] = {
  &s_cd57387729cfe35f,
};
static const uint16_t m_916d32f140971035[] = {0, 1};
static const uint16_t i_916d32f140971035[] = {0, 1};
const ::capnp::_::RawSchema s_916d32f140971035 = {
  0x916d32f140971035, b_916d32f140971035.words, 51, d_916d32f140971035, m_916d32f140971035,
  1, 2, i_916d32f140971035, nullptr, nullptr, { &s_916d32f140971035, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_9e90498484bab87d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    125, 184, 186, 132, 132,  73, 144, 158,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    100, 111, 119, 110, 108, 111,  97, 100,
     66,  97,  99, 107, 117, 112,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_9e90498484bab87d = b_9e90498484bab87d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9e90498484bab87d = {
  0x9e90498484bab87d, b_9e90498484bab87d.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9e90498484bab87d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_d0d6ed6a5ed70e62 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     98,  14, 215,  94, 106, 237, 214, 208,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    100, 101, 108, 101, 116, 101,  66,  97,
     99, 107, 117, 112,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
     98,  97,  99, 107, 117, 112,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d0d6ed6a5ed70e62 = b_d0d6ed6a5ed70e62.words;
#if !CAPNP_LITE
static const uint16_t m_d0d6ed6a5ed70e62[] = {0};
static const uint16_t i_d0d6ed6a5ed70e62[] = {0};
const ::capnp::_::RawSchema s_d0d6ed6a5ed70e62 = {
  0xd0d6ed6a5ed70e62, b_d0d6ed6a5ed70e62.words, 36, nullptr, m_d0d6ed6a5ed70e62,
  0, 1, i_d0d6ed6a5ed70e62, nullptr, nullptr, { &s_d0d6ed6a5ed70e62, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_af88ad00c801b00d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     13, 176,   1, 200,   0, 173, 136, 175,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    100, 101, 108, 101, 116, 101,  66,  97,
     99, 107, 117, 112,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_af88ad00c801b00d = b_af88ad00c801b00d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_af88ad00c801b00d = {
  0xaf88ad00c801b00d, b_af88ad00c801b00d.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_af88ad00c801b00d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_aaef1f8c301b865d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     93, 134,  27,  48, 140,  31, 239, 170,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    103, 101, 116,  85, 115, 101, 114,  83,
    116, 111, 114,  97, 103, 101,  85, 115,
     97, 103, 101,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    117, 115, 101, 114,  73, 100,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_aaef1f8c301b865d = b_aaef1f8c301b865d.words;
#if !CAPNP_LITE
static const uint16_t m_aaef1f8c301b865d[] = {0};
static const uint16_t i_aaef1f8c301b865d[] = {0};
const ::capnp::_::RawSchema s_aaef1f8c301b865d = {
  0xaaef1f8c301b865d, b_aaef1f8c301b865d.words, 36, nullptr, m_aaef1f8c301b865d,
  0, 1, i_aaef1f8c301b865d, nullptr, nullptr, { &s_aaef1f8c301b865d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_a1c73384bc38ab4b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     75, 171,  56, 188, 132,  51, 199, 161,
     32,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    103, 101, 116,  85, 115, 101, 114,  83,
    116, 111, 114,  97, 103, 101,  85, 115,
     97, 103, 101,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a1c73384bc38ab4b = b_a1c73384bc38ab4b.words;
#if !CAPNP_LITE
static const uint16_t m_a1c73384bc38ab4b[] = {0};
static const uint16_t i_a1c73384bc38ab4b[] = {0};
const ::capnp::_::RawSchema s_a1c73384bc38ab4b = {
  0xa1c73384bc38ab4b, b_a1c73384bc38ab4b.words, 36, nullptr, m_a1c73384bc38ab4b,
  0, 1, i_a1c73384bc38ab4b, nullptr, nullptr, { &s_a1c73384bc38ab4b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<66> b_cce40aee6005d381 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    129, 211,   5,  96, 238,  10, 228, 204,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    116, 114,  97, 110, 115, 102, 101, 114,
     71, 114,  97, 105, 110,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    111, 119, 110, 101, 114,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114,  97, 105, 110,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 119,  79, 119, 110, 101, 114,
     73, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cce40aee6005d381 = b_cce40aee6005d381.words;
#if !CAPNP_LITE
static const uint16_t m_cce40aee6005d381[] = {1, 2, 0};
static const uint16_t i_cce40aee6005d381[] = {0, 1, 2};
const ::capnp::_::RawSchema s_cce40aee6005d381 = {
  0xcce40aee6005d381, b_cce40aee6005d381.words, 66, nullptr, m_cce40aee6005d381,
  0, 3, i_cce40aee6005d381, nullptr, nullptr, { &s_cce40aee6005d381, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_86362c69f5c42997 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    151,  41, 196, 245, 105,  44,  54, 134,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    116, 114,  97, 110, 115, 102, 101, 114,
     71, 114,  97, 105, 110,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_86362c69f5c42997 = b_86362c69f5c42997.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_86362c69f5c42997 = {
  0x86362c69f5c42997, b_86362c69f5c42997.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_86362c69f5c42997, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_fa7238e0a9345914 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     20,  89,  52, 169, 224,  56, 114, 250,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    100, 101, 108, 101, 116, 101,  85, 115,
    101, 114,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    117, 115, 101, 114,  73, 100,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fa7238e0a9345914 = b_fa7238e0a9345914.words;
#if !CAPNP_LITE
static const uint16_t m_fa7238e0a9345914[] = {0};
static const uint16_t i_fa7238e0a9345914[] = {0};
const ::capnp::_::RawSchema s_fa7238e0a9345914 = {
  0xfa7238e0a9345914, b_fa7238e0a9345914.words, 35, nullptr, m_fa7238e0a9345914,
  0, 1, i_fa7238e0a9345914, nullptr, nullptr, { &s_fa7238e0a9345914, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_9145c7ea308343d9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    217,  67, 131,  48, 234, 199,  69, 145,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    100, 101, 108, 101, 116, 101,  85, 115,
    101, 114,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9145c7ea308343d9 = b_9145c7ea308343d9.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9145c7ea308343d9 = {
  0x9145c7ea308343d9, b_9145c7ea308343d9.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9145c7ea308343d9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_cb56f444d1311800 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      0,  24,  49, 209,  68, 244,  86, 203,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    112, 105, 110, 103,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cb56f444d1311800 = b_cb56f444d1311800.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_cb56f444d1311800 = {
  0xcb56f444d1311800, b_cb56f444d1311800.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_cb56f444d1311800, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_e3a9cebde9177d60 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     96, 125,  23, 233, 189, 206, 169, 227,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    112, 105, 110, 103,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e3a9cebde9177d60 = b_e3a9cebde9177d60.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e3a9cebde9177d60 = {
  0xe3a9cebde9177d60, b_e3a9cebde9177d60.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e3a9cebde9177d60, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_e06fe4e0d4e93178 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    120,  49, 233, 212, 224, 228, 111, 224,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    103, 101, 116,  71, 114,  97, 105, 110,
     83, 116, 111, 114,  97, 103, 101,  85,
    115,  97, 103, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    111, 119, 110, 101, 114,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114,  97, 105, 110,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e06fe4e0d4e93178 = b_e06fe4e0d4e93178.words;
#if !CAPNP_LITE
static const uint16_t m_e06fe4e0d4e93178[] = {1, 0};
static const uint16_t i_e06fe4e0d4e93178[] = {0, 1};
const ::capnp::_::RawSchema s_e06fe4e0d4e93178 = {
  0xe06fe4e0d4e93178, b_e06fe4e0d4e93178.words, 51, nullptr, m_e06fe4e0d4e93178,
  0, 2, i_e06fe4e0d4e93178, nullptr, nullptr, { &s_e06fe4e0d4e93178, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_809d3d6d45c4c37d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    125, 195, 196,  69, 109,  61, 157, 128,
     32,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     66,  97,  99, 107, 101, 110, 100,  46,
    103, 101, 116,  71, 114,  97, 105, 110,
     83, 116, 111, 114,  97, 103, 101,  85,
    115,  97, 103, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_809d3d6d45c4c37d = b_809d3d6d45c4c37d.words;
#if !CAPNP_LITE
static const uint16_t m_809d3d6d45c4c37d[] = {0};
static const uint16_t i_809d3d6d45c4c37d[] = {0};
const ::capnp::_::RawSchema s_809d3d6d45c4c37d = {
  0x809d3d6d45c4c37d, b_809d3d6d45c4c37d.words, 36, nullptr, m_809d3d6d45c4c37d,
  0, 1, i_809d3d6d45c4c37d, nullptr, nullptr, { &s_809d3d6d45c4c37d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_f0832c3f66256d2b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     43, 109,  37, 102,  63,  44, 131, 240,
     24,   0,   0,   0,   3,   0,   0,   0,
    165,  71,  27,  43, 112,  13, 188, 220,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  71,   0,   0,   0,
     85,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     83,  97, 110, 100, 115, 116, 111, 114,
    109,  67, 111, 114, 101,  70,  97,  99,
    116, 111, 114, 121,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     52, 114, 116,  96, 101, 140, 172, 232,
     42, 193, 230, 227,  32, 176, 117, 234,
     17,   0,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  83,  97, 110, 100, 115,
    116, 111, 114, 109,  67, 111, 114, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_f0832c3f66256d2b = b_f0832c3f66256d2b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f0832c3f66256d2b[] = {
  &s_e8ac8c6560747234,
  &s_ea75b020e3e6c12a,
};
static const uint16_t m_f0832c3f66256d2b[] = {0};
const ::capnp::_::RawSchema s_f0832c3f66256d2b = {
  0xf0832c3f66256d2b, b_f0832c3f66256d2b.words, 33, d_f0832c3f66256d2b, m_f0832c3f66256d2b,
  2, 1, nullptr, nullptr, nullptr, { &s_f0832c3f66256d2b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_e8ac8c6560747234 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     52, 114, 116,  96, 101, 140, 172, 232,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     83,  97, 110, 100, 115, 116, 111, 114,
    109,  67, 111, 114, 101,  70,  97,  99,
    116, 111, 114, 121,  46, 103, 101, 116,
     83,  97, 110, 100, 115, 116, 111, 114,
    109,  67, 111, 114, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    103, 114,  97, 105, 110,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8ac8c6560747234 = b_e8ac8c6560747234.words;
#if !CAPNP_LITE
static const uint16_t m_e8ac8c6560747234[] = {0};
static const uint16_t i_e8ac8c6560747234[] = {0};
const ::capnp::_::RawSchema s_e8ac8c6560747234 = {
  0xe8ac8c6560747234, b_e8ac8c6560747234.words, 37, nullptr, m_e8ac8c6560747234,
  0, 1, i_e8ac8c6560747234, nullptr, nullptr, { &s_e8ac8c6560747234, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_ea75b020e3e6c12a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     42, 193, 230, 227,  32, 176, 117, 234,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47,  98,  97,  99, 107, 101, 110,
    100,  46,  99,  97, 112, 110, 112,  58,
     83,  97, 110, 100, 115, 116, 111, 114,
    109,  67, 111, 114, 101,  70,  97,  99,
    116, 111, 114, 121,  46, 103, 101, 116,
     83,  97, 110, 100, 115, 116, 111, 114,
    109,  67, 111, 114, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 114, 101,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     12, 182, 148, 162, 120,  87, 164, 155,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ea75b020e3e6c12a = b_ea75b020e3e6c12a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ea75b020e3e6c12a[] = {
  &s_9ba45778a294b60c,
};
static const uint16_t m_ea75b020e3e6c12a[] = {0};
static const uint16_t i_ea75b020e3e6c12a[] = {0};
const ::capnp::_::RawSchema s_ea75b020e3e6c12a = {
  0xea75b020e3e6c12a, b_ea75b020e3e6c12a.words, 37, d_ea75b020e3e6c12a, m_ea75b020e3e6c12a,
  1, 1, i_ea75b020e3e6c12a, nullptr, nullptr, { &s_ea75b020e3e6c12a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace sandstorm {

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::Backend::StartGrainParams,  ::sandstorm::Backend::StartGrainResults>
Backend::Client::startGrainRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::StartGrainParams,  ::sandstorm::Backend::StartGrainResults>(
      0xc1b0e9713ac1ad4full, 0, sizeHint);
}
::kj::Promise<void> Backend::Server::startGrain(StartGrainContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend", "startGrain",
      0xc1b0e9713ac1ad4full, 0);
}
::capnp::Request< ::sandstorm::Backend::GetGrainParams,  ::sandstorm::Backend::GetGrainResults>
Backend::Client::getGrainRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::GetGrainParams,  ::sandstorm::Backend::GetGrainResults>(
      0xc1b0e9713ac1ad4full, 1, sizeHint);
}
::kj::Promise<void> Backend::Server::getGrain(GetGrainContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend", "getGrain",
      0xc1b0e9713ac1ad4full, 1);
}
::capnp::Request< ::sandstorm::Backend::DeleteGrainParams,  ::sandstorm::Backend::DeleteGrainResults>
Backend::Client::deleteGrainRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::DeleteGrainParams,  ::sandstorm::Backend::DeleteGrainResults>(
      0xc1b0e9713ac1ad4full, 2, sizeHint);
}
::kj::Promise<void> Backend::Server::deleteGrain(DeleteGrainContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend", "deleteGrain",
      0xc1b0e9713ac1ad4full, 2);
}
::capnp::Request< ::sandstorm::Backend::InstallPackageParams,  ::sandstorm::Backend::InstallPackageResults>
Backend::Client::installPackageRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::InstallPackageParams,  ::sandstorm::Backend::InstallPackageResults>(
      0xc1b0e9713ac1ad4full, 3, sizeHint);
}
::kj::Promise<void> Backend::Server::installPackage(InstallPackageContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend", "installPackage",
      0xc1b0e9713ac1ad4full, 3);
}
::capnp::Request< ::sandstorm::Backend::TryGetPackageParams,  ::sandstorm::Backend::TryGetPackageResults>
Backend::Client::tryGetPackageRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::TryGetPackageParams,  ::sandstorm::Backend::TryGetPackageResults>(
      0xc1b0e9713ac1ad4full, 4, sizeHint);
}
::kj::Promise<void> Backend::Server::tryGetPackage(TryGetPackageContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend", "tryGetPackage",
      0xc1b0e9713ac1ad4full, 4);
}
::capnp::Request< ::sandstorm::Backend::DeletePackageParams,  ::sandstorm::Backend::DeletePackageResults>
Backend::Client::deletePackageRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::DeletePackageParams,  ::sandstorm::Backend::DeletePackageResults>(
      0xc1b0e9713ac1ad4full, 5, sizeHint);
}
::kj::Promise<void> Backend::Server::deletePackage(DeletePackageContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend", "deletePackage",
      0xc1b0e9713ac1ad4full, 5);
}
::capnp::Request< ::sandstorm::Backend::BackupGrainParams,  ::sandstorm::Backend::BackupGrainResults>
Backend::Client::backupGrainRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::BackupGrainParams,  ::sandstorm::Backend::BackupGrainResults>(
      0xc1b0e9713ac1ad4full, 6, sizeHint);
}
::kj::Promise<void> Backend::Server::backupGrain(BackupGrainContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend", "backupGrain",
      0xc1b0e9713ac1ad4full, 6);
}
::capnp::Request< ::sandstorm::Backend::RestoreGrainParams,  ::sandstorm::Backend::RestoreGrainResults>
Backend::Client::restoreGrainRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::RestoreGrainParams,  ::sandstorm::Backend::RestoreGrainResults>(
      0xc1b0e9713ac1ad4full, 7, sizeHint);
}
::kj::Promise<void> Backend::Server::restoreGrain(RestoreGrainContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend", "restoreGrain",
      0xc1b0e9713ac1ad4full, 7);
}
::capnp::Request< ::sandstorm::Backend::UploadBackupParams,  ::sandstorm::Backend::UploadBackupResults>
Backend::Client::uploadBackupRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::UploadBackupParams,  ::sandstorm::Backend::UploadBackupResults>(
      0xc1b0e9713ac1ad4full, 8, sizeHint);
}
::kj::Promise<void> Backend::Server::uploadBackup(UploadBackupContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend", "uploadBackup",
      0xc1b0e9713ac1ad4full, 8);
}
::capnp::Request< ::sandstorm::Backend::DownloadBackupParams,  ::sandstorm::Backend::DownloadBackupResults>
Backend::Client::downloadBackupRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::DownloadBackupParams,  ::sandstorm::Backend::DownloadBackupResults>(
      0xc1b0e9713ac1ad4full, 9, sizeHint);
}
::kj::Promise<void> Backend::Server::downloadBackup(DownloadBackupContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend", "downloadBackup",
      0xc1b0e9713ac1ad4full, 9);
}
::capnp::Request< ::sandstorm::Backend::DeleteBackupParams,  ::sandstorm::Backend::DeleteBackupResults>
Backend::Client::deleteBackupRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::DeleteBackupParams,  ::sandstorm::Backend::DeleteBackupResults>(
      0xc1b0e9713ac1ad4full, 10, sizeHint);
}
::kj::Promise<void> Backend::Server::deleteBackup(DeleteBackupContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend", "deleteBackup",
      0xc1b0e9713ac1ad4full, 10);
}
::capnp::Request< ::sandstorm::Backend::GetUserStorageUsageParams,  ::sandstorm::Backend::GetUserStorageUsageResults>
Backend::Client::getUserStorageUsageRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::GetUserStorageUsageParams,  ::sandstorm::Backend::GetUserStorageUsageResults>(
      0xc1b0e9713ac1ad4full, 11, sizeHint);
}
::kj::Promise<void> Backend::Server::getUserStorageUsage(GetUserStorageUsageContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend", "getUserStorageUsage",
      0xc1b0e9713ac1ad4full, 11);
}
::capnp::Request< ::sandstorm::Backend::TransferGrainParams,  ::sandstorm::Backend::TransferGrainResults>
Backend::Client::transferGrainRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::TransferGrainParams,  ::sandstorm::Backend::TransferGrainResults>(
      0xc1b0e9713ac1ad4full, 12, sizeHint);
}
::kj::Promise<void> Backend::Server::transferGrain(TransferGrainContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend", "transferGrain",
      0xc1b0e9713ac1ad4full, 12);
}
::capnp::Request< ::sandstorm::Backend::DeleteUserParams,  ::sandstorm::Backend::DeleteUserResults>
Backend::Client::deleteUserRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::DeleteUserParams,  ::sandstorm::Backend::DeleteUserResults>(
      0xc1b0e9713ac1ad4full, 13, sizeHint);
}
::kj::Promise<void> Backend::Server::deleteUser(DeleteUserContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend", "deleteUser",
      0xc1b0e9713ac1ad4full, 13);
}
::capnp::Request< ::sandstorm::Backend::PingParams,  ::sandstorm::Backend::PingResults>
Backend::Client::pingRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::PingParams,  ::sandstorm::Backend::PingResults>(
      0xc1b0e9713ac1ad4full, 14, sizeHint);
}
::kj::Promise<void> Backend::Server::ping(PingContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend", "ping",
      0xc1b0e9713ac1ad4full, 14);
}
::capnp::Request< ::sandstorm::Backend::GetGrainStorageUsageParams,  ::sandstorm::Backend::GetGrainStorageUsageResults>
Backend::Client::getGrainStorageUsageRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::GetGrainStorageUsageParams,  ::sandstorm::Backend::GetGrainStorageUsageResults>(
      0xc1b0e9713ac1ad4full, 15, sizeHint);
}
::kj::Promise<void> Backend::Server::getGrainStorageUsage(GetGrainStorageUsageContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend", "getGrainStorageUsage",
      0xc1b0e9713ac1ad4full, 15);
}
::kj::Promise<void> Backend::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xc1b0e9713ac1ad4full:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/backend.capnp:Backend", interfaceId);
  }
}
::kj::Promise<void> Backend::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return startGrain(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::StartGrainParams,  ::sandstorm::Backend::StartGrainResults>(context));
    case 1:
      return getGrain(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::GetGrainParams,  ::sandstorm::Backend::GetGrainResults>(context));
    case 2:
      return deleteGrain(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::DeleteGrainParams,  ::sandstorm::Backend::DeleteGrainResults>(context));
    case 3:
      return installPackage(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::InstallPackageParams,  ::sandstorm::Backend::InstallPackageResults>(context));
    case 4:
      return tryGetPackage(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::TryGetPackageParams,  ::sandstorm::Backend::TryGetPackageResults>(context));
    case 5:
      return deletePackage(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::DeletePackageParams,  ::sandstorm::Backend::DeletePackageResults>(context));
    case 6:
      return backupGrain(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::BackupGrainParams,  ::sandstorm::Backend::BackupGrainResults>(context));
    case 7:
      return restoreGrain(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::RestoreGrainParams,  ::sandstorm::Backend::RestoreGrainResults>(context));
    case 8:
      return uploadBackup(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::UploadBackupParams,  ::sandstorm::Backend::UploadBackupResults>(context));
    case 9:
      return downloadBackup(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::DownloadBackupParams,  ::sandstorm::Backend::DownloadBackupResults>(context));
    case 10:
      return deleteBackup(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::DeleteBackupParams,  ::sandstorm::Backend::DeleteBackupResults>(context));
    case 11:
      return getUserStorageUsage(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::GetUserStorageUsageParams,  ::sandstorm::Backend::GetUserStorageUsageResults>(context));
    case 12:
      return transferGrain(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::TransferGrainParams,  ::sandstorm::Backend::TransferGrainResults>(context));
    case 13:
      return deleteUser(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::DeleteUserParams,  ::sandstorm::Backend::DeleteUserResults>(context));
    case 14:
      return ping(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::PingParams,  ::sandstorm::Backend::PingResults>(context));
    case 15:
      return getGrainStorageUsage(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::GetGrainStorageUsageParams,  ::sandstorm::Backend::GetGrainStorageUsageResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/backend.capnp:Backend",
          0xc1b0e9713ac1ad4full, methodId);
  }
}
#endif  // !CAPNP_LITE

// Backend
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

const ::capnp::_::ConstText<29> Backend::SOCKET_PATH(::capnp::schemas::b_835c613045824121.words + 26);
#if !CAPNP_LITE
::capnp::Request< ::sandstorm::Backend::PackageUploadStream::SaveAsParams,  ::sandstorm::Backend::PackageUploadStream::SaveAsResults>
Backend::PackageUploadStream::Client::saveAsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::Backend::PackageUploadStream::SaveAsParams,  ::sandstorm::Backend::PackageUploadStream::SaveAsResults>(
      0xb481d35d0da2713cull, 0, sizeHint);
}
::kj::Promise<void> Backend::PackageUploadStream::Server::saveAs(SaveAsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:Backend.PackageUploadStream", "saveAs",
      0xb481d35d0da2713cull, 0);
}
::kj::Promise<void> Backend::PackageUploadStream::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb481d35d0da2713cull:
      return dispatchCallInternal(methodId, context);
    case 0xcd57387729cfe35full:
      return  ::sandstorm::ByteStream::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/backend.capnp:Backend.PackageUploadStream", interfaceId);
  }
}
::kj::Promise<void> Backend::PackageUploadStream::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return saveAs(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::Backend::PackageUploadStream::SaveAsParams,  ::sandstorm::Backend::PackageUploadStream::SaveAsResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/backend.capnp:Backend.PackageUploadStream",
          0xb481d35d0da2713cull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Backend::PackageUploadStream
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::PackageUploadStream::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::PackageUploadStream::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::PackageUploadStream::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::PackageUploadStream::SaveAsParams
constexpr uint16_t Backend::PackageUploadStream::SaveAsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::PackageUploadStream::SaveAsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::PackageUploadStream::SaveAsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::PackageUploadStream::SaveAsParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::PackageUploadStream::SaveAsParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::PackageUploadStream::SaveAsResults
constexpr uint16_t Backend::PackageUploadStream::SaveAsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::PackageUploadStream::SaveAsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::PackageUploadStream::SaveAsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::PackageUploadStream::SaveAsResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::PackageUploadStream::SaveAsResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::StartGrainParams
constexpr uint16_t Backend::StartGrainParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::StartGrainParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::StartGrainParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::StartGrainParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::StartGrainParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::StartGrainResults
constexpr uint16_t Backend::StartGrainResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::StartGrainResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::StartGrainResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::StartGrainResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::StartGrainResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::GetGrainParams
constexpr uint16_t Backend::GetGrainParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::GetGrainParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::GetGrainParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::GetGrainParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::GetGrainParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::GetGrainResults
constexpr uint16_t Backend::GetGrainResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::GetGrainResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::GetGrainResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::GetGrainResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::GetGrainResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::DeleteGrainParams
constexpr uint16_t Backend::DeleteGrainParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::DeleteGrainParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::DeleteGrainParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::DeleteGrainParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::DeleteGrainParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::DeleteGrainResults
constexpr uint16_t Backend::DeleteGrainResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::DeleteGrainResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::DeleteGrainResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::DeleteGrainResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::DeleteGrainResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::InstallPackageParams
constexpr uint16_t Backend::InstallPackageParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::InstallPackageParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::InstallPackageParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::InstallPackageParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::InstallPackageParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::InstallPackageResults
constexpr uint16_t Backend::InstallPackageResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::InstallPackageResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::InstallPackageResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::InstallPackageResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::InstallPackageResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::TryGetPackageParams
constexpr uint16_t Backend::TryGetPackageParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::TryGetPackageParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::TryGetPackageParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::TryGetPackageParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::TryGetPackageParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::TryGetPackageResults
constexpr uint16_t Backend::TryGetPackageResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::TryGetPackageResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::TryGetPackageResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::TryGetPackageResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::TryGetPackageResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::DeletePackageParams
constexpr uint16_t Backend::DeletePackageParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::DeletePackageParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::DeletePackageParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::DeletePackageParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::DeletePackageParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::DeletePackageResults
constexpr uint16_t Backend::DeletePackageResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::DeletePackageResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::DeletePackageResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::DeletePackageResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::DeletePackageResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::BackupGrainParams
constexpr uint16_t Backend::BackupGrainParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::BackupGrainParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::BackupGrainParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::BackupGrainParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::BackupGrainParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::BackupGrainResults
constexpr uint16_t Backend::BackupGrainResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::BackupGrainResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::BackupGrainResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::BackupGrainResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::BackupGrainResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::RestoreGrainParams
constexpr uint16_t Backend::RestoreGrainParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::RestoreGrainParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::RestoreGrainParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::RestoreGrainParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::RestoreGrainParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::RestoreGrainResults
constexpr uint16_t Backend::RestoreGrainResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::RestoreGrainResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::RestoreGrainResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::RestoreGrainResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::RestoreGrainResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::UploadBackupParams
constexpr uint16_t Backend::UploadBackupParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::UploadBackupParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::UploadBackupParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::UploadBackupParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::UploadBackupParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::UploadBackupResults
constexpr uint16_t Backend::UploadBackupResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::UploadBackupResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::UploadBackupResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::UploadBackupResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::UploadBackupResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::DownloadBackupParams
constexpr uint16_t Backend::DownloadBackupParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::DownloadBackupParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::DownloadBackupParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::DownloadBackupParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::DownloadBackupParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::DownloadBackupResults
constexpr uint16_t Backend::DownloadBackupResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::DownloadBackupResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::DownloadBackupResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::DownloadBackupResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::DownloadBackupResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::DeleteBackupParams
constexpr uint16_t Backend::DeleteBackupParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::DeleteBackupParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::DeleteBackupParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::DeleteBackupParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::DeleteBackupParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::DeleteBackupResults
constexpr uint16_t Backend::DeleteBackupResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::DeleteBackupResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::DeleteBackupResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::DeleteBackupResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::DeleteBackupResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::GetUserStorageUsageParams
constexpr uint16_t Backend::GetUserStorageUsageParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::GetUserStorageUsageParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::GetUserStorageUsageParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::GetUserStorageUsageParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::GetUserStorageUsageParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::GetUserStorageUsageResults
constexpr uint16_t Backend::GetUserStorageUsageResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::GetUserStorageUsageResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::GetUserStorageUsageResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::GetUserStorageUsageResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::GetUserStorageUsageResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::TransferGrainParams
constexpr uint16_t Backend::TransferGrainParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::TransferGrainParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::TransferGrainParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::TransferGrainParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::TransferGrainParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::TransferGrainResults
constexpr uint16_t Backend::TransferGrainResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::TransferGrainResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::TransferGrainResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::TransferGrainResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::TransferGrainResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::DeleteUserParams
constexpr uint16_t Backend::DeleteUserParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::DeleteUserParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::DeleteUserParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::DeleteUserParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::DeleteUserParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::DeleteUserResults
constexpr uint16_t Backend::DeleteUserResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::DeleteUserResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::DeleteUserResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::DeleteUserResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::DeleteUserResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::PingParams
constexpr uint16_t Backend::PingParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::PingParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::PingParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::PingParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::PingParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::PingResults
constexpr uint16_t Backend::PingResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::PingResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::PingResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::PingResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::PingResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::GetGrainStorageUsageParams
constexpr uint16_t Backend::GetGrainStorageUsageParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::GetGrainStorageUsageParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::GetGrainStorageUsageParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::GetGrainStorageUsageParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::GetGrainStorageUsageParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Backend::GetGrainStorageUsageResults
constexpr uint16_t Backend::GetGrainStorageUsageResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Backend::GetGrainStorageUsageResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Backend::GetGrainStorageUsageResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Backend::GetGrainStorageUsageResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Backend::GetGrainStorageUsageResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::SandstormCoreFactory::GetSandstormCoreParams,  ::sandstorm::SandstormCoreFactory::GetSandstormCoreResults>
SandstormCoreFactory::Client::getSandstormCoreRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::SandstormCoreFactory::GetSandstormCoreParams,  ::sandstorm::SandstormCoreFactory::GetSandstormCoreResults>(
      0xf0832c3f66256d2bull, 0, sizeHint);
}
::kj::Promise<void> SandstormCoreFactory::Server::getSandstormCore(GetSandstormCoreContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/backend.capnp:SandstormCoreFactory", "getSandstormCore",
      0xf0832c3f66256d2bull, 0);
}
::kj::Promise<void> SandstormCoreFactory::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xf0832c3f66256d2bull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/backend.capnp:SandstormCoreFactory", interfaceId);
  }
}
::kj::Promise<void> SandstormCoreFactory::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return getSandstormCore(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::SandstormCoreFactory::GetSandstormCoreParams,  ::sandstorm::SandstormCoreFactory::GetSandstormCoreResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/backend.capnp:SandstormCoreFactory",
          0xf0832c3f66256d2bull, methodId);
  }
}
#endif  // !CAPNP_LITE

// SandstormCoreFactory
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCoreFactory::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCoreFactory::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCoreFactory::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCoreFactory::GetSandstormCoreParams
constexpr uint16_t SandstormCoreFactory::GetSandstormCoreParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCoreFactory::GetSandstormCoreParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCoreFactory::GetSandstormCoreParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCoreFactory::GetSandstormCoreParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCoreFactory::GetSandstormCoreParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SandstormCoreFactory::GetSandstormCoreResults
constexpr uint16_t SandstormCoreFactory::GetSandstormCoreResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SandstormCoreFactory::GetSandstormCoreResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SandstormCoreFactory::GetSandstormCoreResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SandstormCoreFactory::GetSandstormCoreResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SandstormCoreFactory::GetSandstormCoreResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE


}  // namespace

