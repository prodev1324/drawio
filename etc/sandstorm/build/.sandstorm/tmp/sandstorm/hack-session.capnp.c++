// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: hack-session.capnp

#include "hack-session.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<134> b_e14c1f5321159b8f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    143, 155,  21,  33,  83,  31,  76, 225,
     29,   0,   0,   0,   3,   0,   0,   0,
    224, 209,  55,  88, 121, 137, 104, 191,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
     41,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  71,   2,   0,   0,
    217,   1,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     77, 103, 198, 232, 138, 101,  16, 249,
      1,   0,   0,   0,  82,   0,   0,   0,
     84, 111, 107, 101, 110,  73, 110, 102,
    111,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    175, 100, 205, 233,  53, 216,   6, 231,
     93, 192, 246,  34, 197, 147,  97, 233,
     17,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   1,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     67,  40, 245, 184, 167,  55,  68, 229,
    244,  68,  74, 137,  16, 248,  77, 180,
    253,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    241,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     76, 131, 209,  55,  80,  68,  94, 161,
    225,  62,  86, 134, 238, 220, 173, 172,
    229,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    221,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    182, 190, 128, 216,  97, 250, 122, 131,
    249, 135,   8, 169,  49,  63, 151, 201,
    209,   0,   0,   0, 202,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     19, 244, 113, 248, 113, 124, 119, 254,
     60, 176,  32, 174,  13, 137, 228, 233,
    197,   0,   0,   0, 178,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     15, 138, 109, 104, 129, 128,  94, 132,
    230, 156,  71, 220, 152, 112, 166, 174,
    181,   0,   0,   0, 186,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    177,   0,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
     65,   7, 254,  31, 165, 215, 249, 151,
      7, 139, 187, 218,  95,  46,  80, 169,
    165,   0,   0,   0, 170,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0,   7,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
    161,  16, 186,  98,  22, 255, 235, 236,
    125, 128,  44, 193,  72, 122,  20, 185,
    149,   0,   0,   0, 186,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    230,  79, 105,   6, 210, 178,  91, 180,
    223, 150, 146, 155, 153,  68, 201, 253,
    133,   0,   0,   0, 170,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  80, 117,  98, 108, 105,
     99,  73, 100,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    104, 116, 116, 112,  71, 101, 116,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  85, 115, 101, 114,  65,
    100, 100, 114, 101, 115, 115,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    111,  98, 115, 111, 108, 101, 116, 101,
     71, 101, 110, 101, 114,  97, 116, 101,
     65, 112, 105,  84, 111, 107, 101, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    111,  98, 115, 111, 108, 101, 116, 101,
     76, 105, 115, 116,  65, 112, 105,  84,
    111, 107, 101, 110, 115,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    111,  98, 115, 111, 108, 101, 116, 101,
     82, 101, 118, 111, 107, 101,  65, 112,
    105,  84, 111, 107, 101, 110,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    111,  98, 115, 111, 108, 101, 116, 101,
     71, 101, 116,  73, 112,  78, 101, 116,
    119, 111, 114, 107,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    111,  98, 115, 111, 108, 101, 116, 101,
     71, 101, 116,  73, 112,  73, 110, 116,
    101, 114, 102,  97,  99, 101,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  85, 105,  86, 105, 101,
    119,  70, 111, 114,  69, 110, 100, 112,
    111, 105, 110, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
     54, 243,  99,  90,  29,  64,  62, 191,
      0,   0,   0,   0,   0,   0,   0,   0,
    202, 188, 201,  76, 191,  29, 131, 236,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e14c1f5321159b8f = b_e14c1f5321159b8f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e14c1f5321159b8f[] = {
  &s_837afa61d880beb6,
  &s_845e8081686d8a0f,
  &s_97f9d7a51ffe0741,
  &s_a15e445037d1834c,
  &s_a9502e5fdabb8b07,
  &s_acaddcee86563ee1,
  &s_aea67098dc479ce6,
  &s_b44df810894a44f4,
  &s_b45bb2d206694fe6,
  &s_b9147a48c12c807d,
  &s_bf3e401d5a63f336,
  &s_c9973f31a90887f9,
  &s_e54437a7b8f52843,
  &s_e706d835e9cd64af,
  &s_e96193c522f6c05d,
  &s_e9e4890dae20b03c,
  &s_ec831dbf4cc9bcca,
  &s_ecebff1662ba10a1,
  &s_fdc944999b9296df,
  &s_fe777c71f871f413,
};
static const uint16_t m_e14c1f5321159b8f[] = {0, 8, 2, 1, 3, 7, 6, 4, 5};
const ::capnp::_::RawSchema s_e14c1f5321159b8f = {
  0xe14c1f5321159b8f, b_e14c1f5321159b8f.words, 134, d_e14c1f5321159b8f, m_e14c1f5321159b8f,
  20, 9, nullptr, nullptr, nullptr, { &s_e14c1f5321159b8f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<68> b_f910658ae8c6674d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     77, 103, 198, 232, 138, 101,  16, 249,
     48,   0,   0,   0,   1,   0,   0,   0,
    143, 155,  21,  33,  83,  31,  76, 225,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
     84, 111, 107, 101, 110,  73, 110, 102,
    111,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    116, 111, 107, 101, 110,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 101, 116, 110,  97, 109, 101,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 115, 101, 114,  73, 110, 102, 111,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    211,  17,  93, 179, 239, 209, 185, 148,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f910658ae8c6674d = b_f910658ae8c6674d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f910658ae8c6674d[] = {
  &s_94b9d1efb35d11d3,
};
static const uint16_t m_f910658ae8c6674d[] = {1, 0, 2};
static const uint16_t i_f910658ae8c6674d[] = {0, 1, 2};
const ::capnp::_::RawSchema s_f910658ae8c6674d = {
  0xf910658ae8c6674d, b_f910658ae8c6674d.words, 68, d_f910658ae8c6674d, m_f910658ae8c6674d,
  1, 3, i_f910658ae8c6674d, nullptr, nullptr, { &s_f910658ae8c6674d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_e706d835e9cd64af = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    175, 100, 205, 233,  53, 216,   6, 231,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    103, 101, 116,  80, 117,  98, 108, 105,
     99,  73, 100,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e706d835e9cd64af = b_e706d835e9cd64af.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e706d835e9cd64af = {
  0xe706d835e9cd64af, b_e706d835e9cd64af.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e706d835e9cd64af, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<85> b_e96193c522f6c05d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     93, 192, 246,  34, 197, 147,  97, 233,
     48,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    103, 101, 116,  80, 117,  98, 108, 105,
     99,  73, 100,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
    112, 117,  98, 108, 105,  99,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 115, 116, 110,  97, 109, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 117, 116, 111,  85, 114, 108,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 115,  68, 101, 109, 111,  85, 115,
    101, 114,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e96193c522f6c05d = b_e96193c522f6c05d.words;
#if !CAPNP_LITE
static const uint16_t m_e96193c522f6c05d[] = {2, 1, 3, 0};
static const uint16_t i_e96193c522f6c05d[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_e96193c522f6c05d = {
  0xe96193c522f6c05d, b_e96193c522f6c05d.words, 85, nullptr, m_e96193c522f6c05d,
  0, 4, i_e96193c522f6c05d, nullptr, nullptr, { &s_e96193c522f6c05d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_e54437a7b8f52843 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     67,  40, 245, 184, 167,  55,  68, 229,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    104, 116, 116, 112,  71, 101, 116,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    117, 114, 108,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e54437a7b8f52843 = b_e54437a7b8f52843.words;
#if !CAPNP_LITE
static const uint16_t m_e54437a7b8f52843[] = {0};
static const uint16_t i_e54437a7b8f52843[] = {0};
const ::capnp::_::RawSchema s_e54437a7b8f52843 = {
  0xe54437a7b8f52843, b_e54437a7b8f52843.words, 36, nullptr, m_e54437a7b8f52843,
  0, 1, i_e54437a7b8f52843, nullptr, nullptr, { &s_e54437a7b8f52843, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_b44df810894a44f4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    244,  68,  74, 137,  16, 248,  77, 180,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    104, 116, 116, 112,  71, 101, 116,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    109, 105, 109, 101,  84, 121, 112, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 101, 110, 116,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b44df810894a44f4 = b_b44df810894a44f4.words;
#if !CAPNP_LITE
static const uint16_t m_b44df810894a44f4[] = {1, 0};
static const uint16_t i_b44df810894a44f4[] = {0, 1};
const ::capnp::_::RawSchema s_b44df810894a44f4 = {
  0xb44df810894a44f4, b_b44df810894a44f4.words, 52, nullptr, m_b44df810894a44f4,
  0, 2, i_b44df810894a44f4, nullptr, nullptr, { &s_b44df810894a44f4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_a15e445037d1834c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     76, 131, 209,  55,  80,  68,  94, 161,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    103, 101, 116,  85, 115, 101, 114,  65,
    100, 100, 114, 101, 115, 115,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_a15e445037d1834c = b_a15e445037d1834c.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a15e445037d1834c = {
  0xa15e445037d1834c, b_a15e445037d1834c.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a15e445037d1834c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<69> b_837afa61d880beb6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    182, 190, 128, 216,  97, 250, 122, 131,
     48,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    111,  98, 115, 111, 108, 101, 116, 101,
     71, 101, 110, 101, 114,  97, 116, 101,
     65, 112, 105,  84, 111, 107, 101, 110,
     36,  80,  97, 114,  97, 109, 115,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    112, 101, 116, 110,  97, 109, 101,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 115, 101, 114,  73, 110, 102, 111,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    211,  17,  93, 179, 239, 209, 185, 148,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 120, 112, 105, 114, 101, 115,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_837afa61d880beb6 = b_837afa61d880beb6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_837afa61d880beb6[] = {
  &s_94b9d1efb35d11d3,
};
static const uint16_t m_837afa61d880beb6[] = {2, 0, 1};
static const uint16_t i_837afa61d880beb6[] = {0, 1, 2};
const ::capnp::_::RawSchema s_837afa61d880beb6 = {
  0x837afa61d880beb6, b_837afa61d880beb6.words, 69, d_837afa61d880beb6, m_837afa61d880beb6,
  1, 3, i_837afa61d880beb6, nullptr, nullptr, { &s_837afa61d880beb6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<70> b_c9973f31a90887f9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    249, 135,   8, 169,  49,  63, 151, 201,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    111,  98, 115, 111, 108, 101, 116, 101,
     71, 101, 110, 101, 114,  97, 116, 101,
     65, 112, 105,  84, 111, 107, 101, 110,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    116, 111, 107, 101, 110,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 110, 100, 112, 111, 105, 110, 116,
     85, 114, 108,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 111, 107, 101, 110,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c9973f31a90887f9 = b_c9973f31a90887f9.words;
#if !CAPNP_LITE
static const uint16_t m_c9973f31a90887f9[] = {1, 0, 2};
static const uint16_t i_c9973f31a90887f9[] = {0, 1, 2};
const ::capnp::_::RawSchema s_c9973f31a90887f9 = {
  0xc9973f31a90887f9, b_c9973f31a90887f9.words, 70, nullptr, m_c9973f31a90887f9,
  0, 3, i_c9973f31a90887f9, nullptr, nullptr, { &s_c9973f31a90887f9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_fe777c71f871f413 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     19, 244, 113, 248, 113, 124, 119, 254,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    111,  98, 115, 111, 108, 101, 116, 101,
     76, 105, 115, 116,  65, 112, 105,  84,
    111, 107, 101, 110, 115,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fe777c71f871f413 = b_fe777c71f871f413.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_fe777c71f871f413 = {
  0xfe777c71f871f413, b_fe777c71f871f413.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_fe777c71f871f413, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_e9e4890dae20b03c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     60, 176,  32, 174,  13, 137, 228, 233,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    111,  98, 115, 111, 108, 101, 116, 101,
     76, 105, 115, 116,  65, 112, 105,  84,
    111, 107, 101, 110, 115,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    116, 111, 107, 101, 110, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     77, 103, 198, 232, 138, 101,  16, 249,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e9e4890dae20b03c = b_e9e4890dae20b03c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e9e4890dae20b03c[] = {
  &s_f910658ae8c6674d,
};
static const uint16_t m_e9e4890dae20b03c[] = {0};
static const uint16_t i_e9e4890dae20b03c[] = {0};
const ::capnp::_::RawSchema s_e9e4890dae20b03c = {
  0xe9e4890dae20b03c, b_e9e4890dae20b03c.words, 42, d_e9e4890dae20b03c, m_e9e4890dae20b03c,
  1, 1, i_e9e4890dae20b03c, nullptr, nullptr, { &s_e9e4890dae20b03c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_845e8081686d8a0f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     15, 138, 109, 104, 129, 128,  94, 132,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    111,  98, 115, 111, 108, 101, 116, 101,
     82, 101, 118, 111, 107, 101,  65, 112,
    105,  84, 111, 107, 101, 110,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    116, 111, 107, 101, 110,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_845e8081686d8a0f = b_845e8081686d8a0f.words;
#if !CAPNP_LITE
static const uint16_t m_845e8081686d8a0f[] = {0};
static const uint16_t i_845e8081686d8a0f[] = {0};
const ::capnp::_::RawSchema s_845e8081686d8a0f = {
  0x845e8081686d8a0f, b_845e8081686d8a0f.words, 38, nullptr, m_845e8081686d8a0f,
  0, 1, i_845e8081686d8a0f, nullptr, nullptr, { &s_845e8081686d8a0f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_aea67098dc479ce6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    230, 156,  71, 220, 152, 112, 166, 174,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    111,  98, 115, 111, 108, 101, 116, 101,
     82, 101, 118, 111, 107, 101,  65, 112,
    105,  84, 111, 107, 101, 110,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_aea67098dc479ce6 = b_aea67098dc479ce6.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_aea67098dc479ce6 = {
  0xaea67098dc479ce6, b_aea67098dc479ce6.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_aea67098dc479ce6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_97f9d7a51ffe0741 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     65,   7, 254,  31, 165, 215, 249, 151,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    111,  98, 115, 111, 108, 101, 116, 101,
     71, 101, 116,  73, 112,  78, 101, 116,
    119, 111, 114, 107,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_97f9d7a51ffe0741 = b_97f9d7a51ffe0741.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_97f9d7a51ffe0741 = {
  0x97f9d7a51ffe0741, b_97f9d7a51ffe0741.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_97f9d7a51ffe0741, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_a9502e5fdabb8b07 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      7, 139, 187, 218,  95,  46,  80, 169,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    111,  98, 115, 111, 108, 101, 116, 101,
     71, 101, 116,  73, 112,  78, 101, 116,
    119, 111, 114, 107,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    110, 101, 116, 119, 111, 114, 107,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     64,  32,  42, 122, 107,  87, 130, 169,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a9502e5fdabb8b07 = b_a9502e5fdabb8b07.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a9502e5fdabb8b07[] = {
  &s_a982576b7a2a2040,
};
static const uint16_t m_a9502e5fdabb8b07[] = {0};
static const uint16_t i_a9502e5fdabb8b07[] = {0};
const ::capnp::_::RawSchema s_a9502e5fdabb8b07 = {
  0xa9502e5fdabb8b07, b_a9502e5fdabb8b07.words, 38, d_a9502e5fdabb8b07, m_a9502e5fdabb8b07,
  1, 1, i_a9502e5fdabb8b07, nullptr, nullptr, { &s_a9502e5fdabb8b07, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_ecebff1662ba10a1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    161,  16, 186,  98,  22, 255, 235, 236,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    111,  98, 115, 111, 108, 101, 116, 101,
     71, 101, 116,  73, 112,  73, 110, 116,
    101, 114, 102,  97,  99, 101,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_ecebff1662ba10a1 = b_ecebff1662ba10a1.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ecebff1662ba10a1 = {
  0xecebff1662ba10a1, b_ecebff1662ba10a1.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ecebff1662ba10a1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_b9147a48c12c807d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    125, 128,  44, 193,  72, 122,  20, 185,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    111,  98, 115, 111, 108, 101, 116, 101,
     71, 101, 116,  73, 112,  73, 110, 116,
    101, 114, 102,  97,  99, 101,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    250, 214,  62, 233, 110,  80,  44, 227,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b9147a48c12c807d = b_b9147a48c12c807d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b9147a48c12c807d[] = {
  &s_e32c506ee93ed6fa,
};
static const uint16_t m_b9147a48c12c807d[] = {0};
static const uint16_t i_b9147a48c12c807d[] = {0};
const ::capnp::_::RawSchema s_b9147a48c12c807d = {
  0xb9147a48c12c807d, b_b9147a48c12c807d.words, 39, d_b9147a48c12c807d, m_b9147a48c12c807d,
  1, 1, i_b9147a48c12c807d, nullptr, nullptr, { &s_b9147a48c12c807d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_b45bb2d206694fe6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    230,  79, 105,   6, 210, 178,  91, 180,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    103, 101, 116,  85, 105,  86, 105, 101,
    119,  70, 111, 114,  69, 110, 100, 112,
    111, 105, 110, 116,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    117, 114, 108,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b45bb2d206694fe6 = b_b45bb2d206694fe6.words;
#if !CAPNP_LITE
static const uint16_t m_b45bb2d206694fe6[] = {0};
static const uint16_t i_b45bb2d206694fe6[] = {0};
const ::capnp::_::RawSchema s_b45bb2d206694fe6 = {
  0xb45bb2d206694fe6, b_b45bb2d206694fe6.words, 38, nullptr, m_b45bb2d206694fe6,
  0, 1, i_b45bb2d206694fe6, nullptr, nullptr, { &s_b45bb2d206694fe6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_fdc944999b9296df = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    223, 150, 146, 155, 153,  68, 201, 253,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  83, 101, 115, 115, 105, 111, 110,
     67, 111, 110, 116, 101, 120, 116,  46,
    103, 101, 116,  85, 105,  86, 105, 101,
    119,  70, 111, 114,  69, 110, 100, 112,
    111, 105, 110, 116,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118, 105, 101, 119,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    231, 226, 103, 234, 152, 215, 180, 219,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fdc944999b9296df = b_fdc944999b9296df.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fdc944999b9296df[] = {
  &s_dbb4d798ea67e2e7,
};
static const uint16_t m_fdc944999b9296df[] = {0};
static const uint16_t i_fdc944999b9296df[] = {0};
const ::capnp::_::RawSchema s_fdc944999b9296df = {
  0xfdc944999b9296df, b_fdc944999b9296df.words, 38, d_fdc944999b9296df, m_fdc944999b9296df,
  1, 1, i_fdc944999b9296df, nullptr, nullptr, { &s_fdc944999b9296df, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<25> b_c3b5ced7344b04a6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    166,   4,  75,  52, 215, 206, 181, 195,
     29,   0,   0,   0,   3,   0,   0,   0,
    224, 209,  55,  88, 121, 137, 104, 191,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
     37,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 110, 100, 115, 116, 111, 114,
    109,  47, 104,  97,  99, 107,  45, 115,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  72,  97,  99,
    107,  69, 109,  97, 105, 108,  83, 101,
    115, 115, 105, 111, 110,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   3,   0,   5,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    111,  22, 181,  88, 238,  65,  50, 246,
      0,   0,   0,   0,   0,   0,   0,   0,
    202, 188, 201,  76, 191,  29, 131, 236,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c3b5ced7344b04a6 = b_c3b5ced7344b04a6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c3b5ced7344b04a6[] = {
  &s_ec831dbf4cc9bcca,
  &s_f63241ee58b5166f,
};
const ::capnp::_::RawSchema s_c3b5ced7344b04a6 = {
  0xc3b5ced7344b04a6, b_c3b5ced7344b04a6.words, 25, d_c3b5ced7344b04a6, nullptr,
  2, 0, nullptr, nullptr, nullptr, { &s_c3b5ced7344b04a6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace sandstorm {

#if !CAPNP_LITE
::capnp::Request< ::sandstorm::HackSessionContext::GetPublicIdParams,  ::sandstorm::HackSessionContext::GetPublicIdResults>
HackSessionContext::Client::getPublicIdRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::HackSessionContext::GetPublicIdParams,  ::sandstorm::HackSessionContext::GetPublicIdResults>(
      0xe14c1f5321159b8full, 0, sizeHint);
}
::kj::Promise<void> HackSessionContext::Server::getPublicId(GetPublicIdContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/hack-session.capnp:HackSessionContext", "getPublicId",
      0xe14c1f5321159b8full, 0);
}
::capnp::Request< ::sandstorm::HackSessionContext::HttpGetParams,  ::sandstorm::HackSessionContext::HttpGetResults>
HackSessionContext::Client::httpGetRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::HackSessionContext::HttpGetParams,  ::sandstorm::HackSessionContext::HttpGetResults>(
      0xe14c1f5321159b8full, 1, sizeHint);
}
::kj::Promise<void> HackSessionContext::Server::httpGet(HttpGetContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/hack-session.capnp:HackSessionContext", "httpGet",
      0xe14c1f5321159b8full, 1);
}
::capnp::Request< ::sandstorm::HackSessionContext::GetUserAddressParams,  ::sandstorm::EmailAddress>
HackSessionContext::Client::getUserAddressRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::HackSessionContext::GetUserAddressParams,  ::sandstorm::EmailAddress>(
      0xe14c1f5321159b8full, 2, sizeHint);
}
::kj::Promise<void> HackSessionContext::Server::getUserAddress(GetUserAddressContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/hack-session.capnp:HackSessionContext", "getUserAddress",
      0xe14c1f5321159b8full, 2);
}
::capnp::Request< ::sandstorm::HackSessionContext::ObsoleteGenerateApiTokenParams,  ::sandstorm::HackSessionContext::ObsoleteGenerateApiTokenResults>
HackSessionContext::Client::obsoleteGenerateApiTokenRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::HackSessionContext::ObsoleteGenerateApiTokenParams,  ::sandstorm::HackSessionContext::ObsoleteGenerateApiTokenResults>(
      0xe14c1f5321159b8full, 3, sizeHint);
}
::kj::Promise<void> HackSessionContext::Server::obsoleteGenerateApiToken(ObsoleteGenerateApiTokenContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/hack-session.capnp:HackSessionContext", "obsoleteGenerateApiToken",
      0xe14c1f5321159b8full, 3);
}
::capnp::Request< ::sandstorm::HackSessionContext::ObsoleteListApiTokensParams,  ::sandstorm::HackSessionContext::ObsoleteListApiTokensResults>
HackSessionContext::Client::obsoleteListApiTokensRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::HackSessionContext::ObsoleteListApiTokensParams,  ::sandstorm::HackSessionContext::ObsoleteListApiTokensResults>(
      0xe14c1f5321159b8full, 4, sizeHint);
}
::kj::Promise<void> HackSessionContext::Server::obsoleteListApiTokens(ObsoleteListApiTokensContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/hack-session.capnp:HackSessionContext", "obsoleteListApiTokens",
      0xe14c1f5321159b8full, 4);
}
::capnp::Request< ::sandstorm::HackSessionContext::ObsoleteRevokeApiTokenParams,  ::sandstorm::HackSessionContext::ObsoleteRevokeApiTokenResults>
HackSessionContext::Client::obsoleteRevokeApiTokenRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::HackSessionContext::ObsoleteRevokeApiTokenParams,  ::sandstorm::HackSessionContext::ObsoleteRevokeApiTokenResults>(
      0xe14c1f5321159b8full, 5, sizeHint);
}
::kj::Promise<void> HackSessionContext::Server::obsoleteRevokeApiToken(ObsoleteRevokeApiTokenContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/hack-session.capnp:HackSessionContext", "obsoleteRevokeApiToken",
      0xe14c1f5321159b8full, 5);
}
::capnp::Request< ::sandstorm::HackSessionContext::ObsoleteGetIpNetworkParams,  ::sandstorm::HackSessionContext::ObsoleteGetIpNetworkResults>
HackSessionContext::Client::obsoleteGetIpNetworkRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::HackSessionContext::ObsoleteGetIpNetworkParams,  ::sandstorm::HackSessionContext::ObsoleteGetIpNetworkResults>(
      0xe14c1f5321159b8full, 6, sizeHint);
}
::kj::Promise<void> HackSessionContext::Server::obsoleteGetIpNetwork(ObsoleteGetIpNetworkContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/hack-session.capnp:HackSessionContext", "obsoleteGetIpNetwork",
      0xe14c1f5321159b8full, 6);
}
::capnp::Request< ::sandstorm::HackSessionContext::ObsoleteGetIpInterfaceParams,  ::sandstorm::HackSessionContext::ObsoleteGetIpInterfaceResults>
HackSessionContext::Client::obsoleteGetIpInterfaceRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::HackSessionContext::ObsoleteGetIpInterfaceParams,  ::sandstorm::HackSessionContext::ObsoleteGetIpInterfaceResults>(
      0xe14c1f5321159b8full, 7, sizeHint);
}
::kj::Promise<void> HackSessionContext::Server::obsoleteGetIpInterface(ObsoleteGetIpInterfaceContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/hack-session.capnp:HackSessionContext", "obsoleteGetIpInterface",
      0xe14c1f5321159b8full, 7);
}
::capnp::Request< ::sandstorm::HackSessionContext::GetUiViewForEndpointParams,  ::sandstorm::HackSessionContext::GetUiViewForEndpointResults>
HackSessionContext::Client::getUiViewForEndpointRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::sandstorm::HackSessionContext::GetUiViewForEndpointParams,  ::sandstorm::HackSessionContext::GetUiViewForEndpointResults>(
      0xe14c1f5321159b8full, 8, sizeHint);
}
::kj::Promise<void> HackSessionContext::Server::getUiViewForEndpoint(GetUiViewForEndpointContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "sandstorm/hack-session.capnp:HackSessionContext", "getUiViewForEndpoint",
      0xe14c1f5321159b8full, 8);
}
::kj::Promise<void> HackSessionContext::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe14c1f5321159b8full:
      return dispatchCallInternal(methodId, context);
    case 0xbf3e401d5a63f336ull:
      return  ::sandstorm::SessionContext::Server::dispatchCallInternal(methodId, context);
    case 0xec831dbf4cc9bccaull:
      return  ::sandstorm::EmailSendPort::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/hack-session.capnp:HackSessionContext", interfaceId);
  }
}
::kj::Promise<void> HackSessionContext::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return getPublicId(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::HackSessionContext::GetPublicIdParams,  ::sandstorm::HackSessionContext::GetPublicIdResults>(context));
    case 1:
      return httpGet(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::HackSessionContext::HttpGetParams,  ::sandstorm::HackSessionContext::HttpGetResults>(context));
    case 2:
      return getUserAddress(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::HackSessionContext::GetUserAddressParams,  ::sandstorm::EmailAddress>(context));
    case 3:
      return obsoleteGenerateApiToken(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::HackSessionContext::ObsoleteGenerateApiTokenParams,  ::sandstorm::HackSessionContext::ObsoleteGenerateApiTokenResults>(context));
    case 4:
      return obsoleteListApiTokens(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::HackSessionContext::ObsoleteListApiTokensParams,  ::sandstorm::HackSessionContext::ObsoleteListApiTokensResults>(context));
    case 5:
      return obsoleteRevokeApiToken(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::HackSessionContext::ObsoleteRevokeApiTokenParams,  ::sandstorm::HackSessionContext::ObsoleteRevokeApiTokenResults>(context));
    case 6:
      return obsoleteGetIpNetwork(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::HackSessionContext::ObsoleteGetIpNetworkParams,  ::sandstorm::HackSessionContext::ObsoleteGetIpNetworkResults>(context));
    case 7:
      return obsoleteGetIpInterface(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::HackSessionContext::ObsoleteGetIpInterfaceParams,  ::sandstorm::HackSessionContext::ObsoleteGetIpInterfaceResults>(context));
    case 8:
      return getUiViewForEndpoint(::capnp::Capability::Server::internalGetTypedContext<
           ::sandstorm::HackSessionContext::GetUiViewForEndpointParams,  ::sandstorm::HackSessionContext::GetUiViewForEndpointResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/hack-session.capnp:HackSessionContext",
          0xe14c1f5321159b8full, methodId);
  }
}
#endif  // !CAPNP_LITE

// HackSessionContext
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::TokenInfo
constexpr uint16_t HackSessionContext::TokenInfo::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::TokenInfo::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::TokenInfo::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::TokenInfo::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::TokenInfo::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::GetPublicIdParams
constexpr uint16_t HackSessionContext::GetPublicIdParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::GetPublicIdParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::GetPublicIdParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::GetPublicIdParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::GetPublicIdParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::GetPublicIdResults
constexpr uint16_t HackSessionContext::GetPublicIdResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::GetPublicIdResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::GetPublicIdResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::GetPublicIdResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::GetPublicIdResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::HttpGetParams
constexpr uint16_t HackSessionContext::HttpGetParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::HttpGetParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::HttpGetParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::HttpGetParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::HttpGetParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::HttpGetResults
constexpr uint16_t HackSessionContext::HttpGetResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::HttpGetResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::HttpGetResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::HttpGetResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::HttpGetResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::GetUserAddressParams
constexpr uint16_t HackSessionContext::GetUserAddressParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::GetUserAddressParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::GetUserAddressParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::GetUserAddressParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::GetUserAddressParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::ObsoleteGenerateApiTokenParams
constexpr uint16_t HackSessionContext::ObsoleteGenerateApiTokenParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::ObsoleteGenerateApiTokenParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::ObsoleteGenerateApiTokenParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::ObsoleteGenerateApiTokenParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::ObsoleteGenerateApiTokenParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::ObsoleteGenerateApiTokenResults
constexpr uint16_t HackSessionContext::ObsoleteGenerateApiTokenResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::ObsoleteGenerateApiTokenResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::ObsoleteGenerateApiTokenResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::ObsoleteGenerateApiTokenResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::ObsoleteGenerateApiTokenResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::ObsoleteListApiTokensParams
constexpr uint16_t HackSessionContext::ObsoleteListApiTokensParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::ObsoleteListApiTokensParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::ObsoleteListApiTokensParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::ObsoleteListApiTokensParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::ObsoleteListApiTokensParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::ObsoleteListApiTokensResults
constexpr uint16_t HackSessionContext::ObsoleteListApiTokensResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::ObsoleteListApiTokensResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::ObsoleteListApiTokensResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::ObsoleteListApiTokensResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::ObsoleteListApiTokensResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::ObsoleteRevokeApiTokenParams
constexpr uint16_t HackSessionContext::ObsoleteRevokeApiTokenParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::ObsoleteRevokeApiTokenParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::ObsoleteRevokeApiTokenParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::ObsoleteRevokeApiTokenParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::ObsoleteRevokeApiTokenParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::ObsoleteRevokeApiTokenResults
constexpr uint16_t HackSessionContext::ObsoleteRevokeApiTokenResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::ObsoleteRevokeApiTokenResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::ObsoleteRevokeApiTokenResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::ObsoleteRevokeApiTokenResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::ObsoleteRevokeApiTokenResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::ObsoleteGetIpNetworkParams
constexpr uint16_t HackSessionContext::ObsoleteGetIpNetworkParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::ObsoleteGetIpNetworkParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::ObsoleteGetIpNetworkParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::ObsoleteGetIpNetworkParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::ObsoleteGetIpNetworkParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::ObsoleteGetIpNetworkResults
constexpr uint16_t HackSessionContext::ObsoleteGetIpNetworkResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::ObsoleteGetIpNetworkResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::ObsoleteGetIpNetworkResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::ObsoleteGetIpNetworkResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::ObsoleteGetIpNetworkResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::ObsoleteGetIpInterfaceParams
constexpr uint16_t HackSessionContext::ObsoleteGetIpInterfaceParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::ObsoleteGetIpInterfaceParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::ObsoleteGetIpInterfaceParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::ObsoleteGetIpInterfaceParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::ObsoleteGetIpInterfaceParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::ObsoleteGetIpInterfaceResults
constexpr uint16_t HackSessionContext::ObsoleteGetIpInterfaceResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::ObsoleteGetIpInterfaceResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::ObsoleteGetIpInterfaceResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::ObsoleteGetIpInterfaceResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::ObsoleteGetIpInterfaceResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::GetUiViewForEndpointParams
constexpr uint16_t HackSessionContext::GetUiViewForEndpointParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::GetUiViewForEndpointParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::GetUiViewForEndpointParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::GetUiViewForEndpointParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::GetUiViewForEndpointParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HackSessionContext::GetUiViewForEndpointResults
constexpr uint16_t HackSessionContext::GetUiViewForEndpointResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HackSessionContext::GetUiViewForEndpointResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HackSessionContext::GetUiViewForEndpointResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackSessionContext::GetUiViewForEndpointResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackSessionContext::GetUiViewForEndpointResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::kj::Promise<void> HackEmailSession::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xc3b5ced7344b04a6ull:
      return dispatchCallInternal(methodId, context);
    case 0xec831dbf4cc9bccaull:
      return  ::sandstorm::EmailSendPort::Server::dispatchCallInternal(methodId, context);
    case 0xf63241ee58b5166full:
      return  ::sandstorm::UiSession::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("sandstorm/hack-session.capnp:HackEmailSession", interfaceId);
  }
}
::kj::Promise<void> HackEmailSession::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "sandstorm/hack-session.capnp:HackEmailSession",
          0xc3b5ced7344b04a6ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// HackEmailSession
#if !CAPNP_LITE
constexpr ::capnp::Kind HackEmailSession::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HackEmailSession::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HackEmailSession::_capnpPrivate::brand;
#endif  // !CAPNP_LITE


}  // namespace

