// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: hack-session.capnp

#ifndef CAPNP_INCLUDED_bf6889795837d1e0_
#define CAPNP_INCLUDED_bf6889795837d1e0_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "email.capnp.h"
#include "grain.capnp.h"
#include "identity.capnp.h"
#include "ip.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(e14c1f5321159b8f);
CAPNP_DECLARE_SCHEMA(f910658ae8c6674d);
CAPNP_DECLARE_SCHEMA(e706d835e9cd64af);
CAPNP_DECLARE_SCHEMA(e96193c522f6c05d);
CAPNP_DECLARE_SCHEMA(e54437a7b8f52843);
CAPNP_DECLARE_SCHEMA(b44df810894a44f4);
CAPNP_DECLARE_SCHEMA(a15e445037d1834c);
CAPNP_DECLARE_SCHEMA(837afa61d880beb6);
CAPNP_DECLARE_SCHEMA(c9973f31a90887f9);
CAPNP_DECLARE_SCHEMA(fe777c71f871f413);
CAPNP_DECLARE_SCHEMA(e9e4890dae20b03c);
CAPNP_DECLARE_SCHEMA(845e8081686d8a0f);
CAPNP_DECLARE_SCHEMA(aea67098dc479ce6);
CAPNP_DECLARE_SCHEMA(97f9d7a51ffe0741);
CAPNP_DECLARE_SCHEMA(a9502e5fdabb8b07);
CAPNP_DECLARE_SCHEMA(ecebff1662ba10a1);
CAPNP_DECLARE_SCHEMA(b9147a48c12c807d);
CAPNP_DECLARE_SCHEMA(b45bb2d206694fe6);
CAPNP_DECLARE_SCHEMA(fdc944999b9296df);
CAPNP_DECLARE_SCHEMA(c3b5ced7344b04a6);

}  // namespace schemas
}  // namespace capnp

namespace sandstorm {

struct HackSessionContext {
  HackSessionContext() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct TokenInfo;
  struct GetPublicIdParams;
  struct GetPublicIdResults;
  struct HttpGetParams;
  struct HttpGetResults;
  struct GetUserAddressParams;
  struct ObsoleteGenerateApiTokenParams;
  struct ObsoleteGenerateApiTokenResults;
  struct ObsoleteListApiTokensParams;
  struct ObsoleteListApiTokensResults;
  struct ObsoleteRevokeApiTokenParams;
  struct ObsoleteRevokeApiTokenResults;
  struct ObsoleteGetIpNetworkParams;
  struct ObsoleteGetIpNetworkResults;
  struct ObsoleteGetIpInterfaceParams;
  struct ObsoleteGetIpInterfaceResults;
  struct GetUiViewForEndpointParams;
  struct GetUiViewForEndpointResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(e14c1f5321159b8f)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

struct HackSessionContext::TokenInfo {
  TokenInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f910658ae8c6674d, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::GetPublicIdParams {
  GetPublicIdParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e706d835e9cd64af, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::GetPublicIdResults {
  GetPublicIdResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e96193c522f6c05d, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::HttpGetParams {
  HttpGetParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e54437a7b8f52843, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::HttpGetResults {
  HttpGetResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b44df810894a44f4, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::GetUserAddressParams {
  GetUserAddressParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a15e445037d1834c, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::ObsoleteGenerateApiTokenParams {
  ObsoleteGenerateApiTokenParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(837afa61d880beb6, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::ObsoleteGenerateApiTokenResults {
  ObsoleteGenerateApiTokenResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c9973f31a90887f9, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::ObsoleteListApiTokensParams {
  ObsoleteListApiTokensParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fe777c71f871f413, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::ObsoleteListApiTokensResults {
  ObsoleteListApiTokensResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e9e4890dae20b03c, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::ObsoleteRevokeApiTokenParams {
  ObsoleteRevokeApiTokenParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(845e8081686d8a0f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::ObsoleteRevokeApiTokenResults {
  ObsoleteRevokeApiTokenResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aea67098dc479ce6, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::ObsoleteGetIpNetworkParams {
  ObsoleteGetIpNetworkParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97f9d7a51ffe0741, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::ObsoleteGetIpNetworkResults {
  ObsoleteGetIpNetworkResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9502e5fdabb8b07, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::ObsoleteGetIpInterfaceParams {
  ObsoleteGetIpInterfaceParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ecebff1662ba10a1, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::ObsoleteGetIpInterfaceResults {
  ObsoleteGetIpInterfaceResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b9147a48c12c807d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::GetUiViewForEndpointParams {
  GetUiViewForEndpointParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b45bb2d206694fe6, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackSessionContext::GetUiViewForEndpointResults {
  GetUiViewForEndpointResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fdc944999b9296df, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HackEmailSession {
  HackEmailSession() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE


  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(c3b5ced7344b04a6)
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
  };
  #endif  // !CAPNP_LITE
};

// =======================================================================================

#if !CAPNP_LITE
class HackSessionContext::Client
    : public virtual ::capnp::Capability::Client,
      public virtual  ::sandstorm::SessionContext::Client,
      public virtual  ::sandstorm::EmailSendPort::Client {
public:
  typedef HackSessionContext Calls;
  typedef HackSessionContext Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::sandstorm::HackSessionContext::GetPublicIdParams,  ::sandstorm::HackSessionContext::GetPublicIdResults> getPublicIdRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::HackSessionContext::HttpGetParams,  ::sandstorm::HackSessionContext::HttpGetResults> httpGetRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::HackSessionContext::GetUserAddressParams,  ::sandstorm::EmailAddress> getUserAddressRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::HackSessionContext::ObsoleteGenerateApiTokenParams,  ::sandstorm::HackSessionContext::ObsoleteGenerateApiTokenResults> obsoleteGenerateApiTokenRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::HackSessionContext::ObsoleteListApiTokensParams,  ::sandstorm::HackSessionContext::ObsoleteListApiTokensResults> obsoleteListApiTokensRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::HackSessionContext::ObsoleteRevokeApiTokenParams,  ::sandstorm::HackSessionContext::ObsoleteRevokeApiTokenResults> obsoleteRevokeApiTokenRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::HackSessionContext::ObsoleteGetIpNetworkParams,  ::sandstorm::HackSessionContext::ObsoleteGetIpNetworkResults> obsoleteGetIpNetworkRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::HackSessionContext::ObsoleteGetIpInterfaceParams,  ::sandstorm::HackSessionContext::ObsoleteGetIpInterfaceResults> obsoleteGetIpInterfaceRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::sandstorm::HackSessionContext::GetUiViewForEndpointParams,  ::sandstorm::HackSessionContext::GetUiViewForEndpointResults> getUiViewForEndpointRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class HackSessionContext::Server
    : public virtual ::capnp::Capability::Server,
      public virtual  ::sandstorm::SessionContext::Server,
      public virtual  ::sandstorm::EmailSendPort::Server {
public:
  typedef HackSessionContext Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::sandstorm::HackSessionContext::GetPublicIdParams GetPublicIdParams;
  typedef  ::sandstorm::HackSessionContext::GetPublicIdResults GetPublicIdResults;
  typedef ::capnp::CallContext<GetPublicIdParams, GetPublicIdResults> GetPublicIdContext;
  virtual ::kj::Promise<void> getPublicId(GetPublicIdContext context);
  typedef  ::sandstorm::HackSessionContext::HttpGetParams HttpGetParams;
  typedef  ::sandstorm::HackSessionContext::HttpGetResults HttpGetResults;
  typedef ::capnp::CallContext<HttpGetParams, HttpGetResults> HttpGetContext;
  virtual ::kj::Promise<void> httpGet(HttpGetContext context);
  typedef  ::sandstorm::HackSessionContext::GetUserAddressParams GetUserAddressParams;
  typedef ::capnp::CallContext<GetUserAddressParams,  ::sandstorm::EmailAddress> GetUserAddressContext;
  virtual ::kj::Promise<void> getUserAddress(GetUserAddressContext context);
  typedef  ::sandstorm::HackSessionContext::ObsoleteGenerateApiTokenParams ObsoleteGenerateApiTokenParams;
  typedef  ::sandstorm::HackSessionContext::ObsoleteGenerateApiTokenResults ObsoleteGenerateApiTokenResults;
  typedef ::capnp::CallContext<ObsoleteGenerateApiTokenParams, ObsoleteGenerateApiTokenResults> ObsoleteGenerateApiTokenContext;
  virtual ::kj::Promise<void> obsoleteGenerateApiToken(ObsoleteGenerateApiTokenContext context);
  typedef  ::sandstorm::HackSessionContext::ObsoleteListApiTokensParams ObsoleteListApiTokensParams;
  typedef  ::sandstorm::HackSessionContext::ObsoleteListApiTokensResults ObsoleteListApiTokensResults;
  typedef ::capnp::CallContext<ObsoleteListApiTokensParams, ObsoleteListApiTokensResults> ObsoleteListApiTokensContext;
  virtual ::kj::Promise<void> obsoleteListApiTokens(ObsoleteListApiTokensContext context);
  typedef  ::sandstorm::HackSessionContext::ObsoleteRevokeApiTokenParams ObsoleteRevokeApiTokenParams;
  typedef  ::sandstorm::HackSessionContext::ObsoleteRevokeApiTokenResults ObsoleteRevokeApiTokenResults;
  typedef ::capnp::CallContext<ObsoleteRevokeApiTokenParams, ObsoleteRevokeApiTokenResults> ObsoleteRevokeApiTokenContext;
  virtual ::kj::Promise<void> obsoleteRevokeApiToken(ObsoleteRevokeApiTokenContext context);
  typedef  ::sandstorm::HackSessionContext::ObsoleteGetIpNetworkParams ObsoleteGetIpNetworkParams;
  typedef  ::sandstorm::HackSessionContext::ObsoleteGetIpNetworkResults ObsoleteGetIpNetworkResults;
  typedef ::capnp::CallContext<ObsoleteGetIpNetworkParams, ObsoleteGetIpNetworkResults> ObsoleteGetIpNetworkContext;
  virtual ::kj::Promise<void> obsoleteGetIpNetwork(ObsoleteGetIpNetworkContext context);
  typedef  ::sandstorm::HackSessionContext::ObsoleteGetIpInterfaceParams ObsoleteGetIpInterfaceParams;
  typedef  ::sandstorm::HackSessionContext::ObsoleteGetIpInterfaceResults ObsoleteGetIpInterfaceResults;
  typedef ::capnp::CallContext<ObsoleteGetIpInterfaceParams, ObsoleteGetIpInterfaceResults> ObsoleteGetIpInterfaceContext;
  virtual ::kj::Promise<void> obsoleteGetIpInterface(ObsoleteGetIpInterfaceContext context);
  typedef  ::sandstorm::HackSessionContext::GetUiViewForEndpointParams GetUiViewForEndpointParams;
  typedef  ::sandstorm::HackSessionContext::GetUiViewForEndpointResults GetUiViewForEndpointResults;
  typedef ::capnp::CallContext<GetUiViewForEndpointParams, GetUiViewForEndpointResults> GetUiViewForEndpointContext;
  virtual ::kj::Promise<void> getUiViewForEndpoint(GetUiViewForEndpointContext context);

  inline  ::sandstorm::HackSessionContext::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::HackSessionContext>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class HackSessionContext::TokenInfo::Reader {
public:
  typedef TokenInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasTokenId() const;
  inline  ::capnp::Text::Reader getTokenId() const;

  inline bool hasPetname() const;
  inline  ::capnp::Text::Reader getPetname() const;

  inline bool hasUserInfo() const;
  inline  ::sandstorm::UserInfo::Reader getUserInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::TokenInfo::Builder {
public:
  typedef TokenInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTokenId();
  inline  ::capnp::Text::Builder getTokenId();
  inline void setTokenId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTokenId(unsigned int size);
  inline void adoptTokenId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTokenId();

  inline bool hasPetname();
  inline  ::capnp::Text::Builder getPetname();
  inline void setPetname( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPetname(unsigned int size);
  inline void adoptPetname(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPetname();

  inline bool hasUserInfo();
  inline  ::sandstorm::UserInfo::Builder getUserInfo();
  inline void setUserInfo( ::sandstorm::UserInfo::Reader value);
  inline  ::sandstorm::UserInfo::Builder initUserInfo();
  inline void adoptUserInfo(::capnp::Orphan< ::sandstorm::UserInfo>&& value);
  inline ::capnp::Orphan< ::sandstorm::UserInfo> disownUserInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::TokenInfo::Pipeline {
public:
  typedef TokenInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::UserInfo::Pipeline getUserInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::GetPublicIdParams::Reader {
public:
  typedef GetPublicIdParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::GetPublicIdParams::Builder {
public:
  typedef GetPublicIdParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::GetPublicIdParams::Pipeline {
public:
  typedef GetPublicIdParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::GetPublicIdResults::Reader {
public:
  typedef GetPublicIdResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPublicId() const;
  inline  ::capnp::Text::Reader getPublicId() const;

  inline bool hasHostname() const;
  inline  ::capnp::Text::Reader getHostname() const;

  inline bool hasAutoUrl() const;
  inline  ::capnp::Text::Reader getAutoUrl() const;

  inline bool getIsDemoUser() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::GetPublicIdResults::Builder {
public:
  typedef GetPublicIdResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPublicId();
  inline  ::capnp::Text::Builder getPublicId();
  inline void setPublicId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPublicId(unsigned int size);
  inline void adoptPublicId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPublicId();

  inline bool hasHostname();
  inline  ::capnp::Text::Builder getHostname();
  inline void setHostname( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHostname(unsigned int size);
  inline void adoptHostname(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHostname();

  inline bool hasAutoUrl();
  inline  ::capnp::Text::Builder getAutoUrl();
  inline void setAutoUrl( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAutoUrl(unsigned int size);
  inline void adoptAutoUrl(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAutoUrl();

  inline bool getIsDemoUser();
  inline void setIsDemoUser(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::GetPublicIdResults::Pipeline {
public:
  typedef GetPublicIdResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::HttpGetParams::Reader {
public:
  typedef HttpGetParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasUrl() const;
  inline  ::capnp::Text::Reader getUrl() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::HttpGetParams::Builder {
public:
  typedef HttpGetParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUrl();
  inline  ::capnp::Text::Builder getUrl();
  inline void setUrl( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUrl(unsigned int size);
  inline void adoptUrl(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUrl();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::HttpGetParams::Pipeline {
public:
  typedef HttpGetParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::HttpGetResults::Reader {
public:
  typedef HttpGetResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMimeType() const;
  inline  ::capnp::Text::Reader getMimeType() const;

  inline bool hasContent() const;
  inline  ::capnp::Data::Reader getContent() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::HttpGetResults::Builder {
public:
  typedef HttpGetResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMimeType();
  inline  ::capnp::Text::Builder getMimeType();
  inline void setMimeType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMimeType(unsigned int size);
  inline void adoptMimeType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMimeType();

  inline bool hasContent();
  inline  ::capnp::Data::Builder getContent();
  inline void setContent( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initContent(unsigned int size);
  inline void adoptContent(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownContent();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::HttpGetResults::Pipeline {
public:
  typedef HttpGetResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::GetUserAddressParams::Reader {
public:
  typedef GetUserAddressParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::GetUserAddressParams::Builder {
public:
  typedef GetUserAddressParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::GetUserAddressParams::Pipeline {
public:
  typedef GetUserAddressParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::ObsoleteGenerateApiTokenParams::Reader {
public:
  typedef ObsoleteGenerateApiTokenParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPetname() const;
  inline  ::capnp::Text::Reader getPetname() const;

  inline bool hasUserInfo() const;
  inline  ::sandstorm::UserInfo::Reader getUserInfo() const;

  inline  ::uint64_t getExpires() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::ObsoleteGenerateApiTokenParams::Builder {
public:
  typedef ObsoleteGenerateApiTokenParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPetname();
  inline  ::capnp::Text::Builder getPetname();
  inline void setPetname( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPetname(unsigned int size);
  inline void adoptPetname(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPetname();

  inline bool hasUserInfo();
  inline  ::sandstorm::UserInfo::Builder getUserInfo();
  inline void setUserInfo( ::sandstorm::UserInfo::Reader value);
  inline  ::sandstorm::UserInfo::Builder initUserInfo();
  inline void adoptUserInfo(::capnp::Orphan< ::sandstorm::UserInfo>&& value);
  inline ::capnp::Orphan< ::sandstorm::UserInfo> disownUserInfo();

  inline  ::uint64_t getExpires();
  inline void setExpires( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::ObsoleteGenerateApiTokenParams::Pipeline {
public:
  typedef ObsoleteGenerateApiTokenParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::UserInfo::Pipeline getUserInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::ObsoleteGenerateApiTokenResults::Reader {
public:
  typedef ObsoleteGenerateApiTokenResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasToken() const;
  inline  ::capnp::Text::Reader getToken() const;

  inline bool hasEndpointUrl() const;
  inline  ::capnp::Text::Reader getEndpointUrl() const;

  inline bool hasTokenId() const;
  inline  ::capnp::Text::Reader getTokenId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::ObsoleteGenerateApiTokenResults::Builder {
public:
  typedef ObsoleteGenerateApiTokenResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasToken();
  inline  ::capnp::Text::Builder getToken();
  inline void setToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownToken();

  inline bool hasEndpointUrl();
  inline  ::capnp::Text::Builder getEndpointUrl();
  inline void setEndpointUrl( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEndpointUrl(unsigned int size);
  inline void adoptEndpointUrl(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEndpointUrl();

  inline bool hasTokenId();
  inline  ::capnp::Text::Builder getTokenId();
  inline void setTokenId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTokenId(unsigned int size);
  inline void adoptTokenId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTokenId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::ObsoleteGenerateApiTokenResults::Pipeline {
public:
  typedef ObsoleteGenerateApiTokenResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::ObsoleteListApiTokensParams::Reader {
public:
  typedef ObsoleteListApiTokensParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::ObsoleteListApiTokensParams::Builder {
public:
  typedef ObsoleteListApiTokensParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::ObsoleteListApiTokensParams::Pipeline {
public:
  typedef ObsoleteListApiTokensParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::ObsoleteListApiTokensResults::Reader {
public:
  typedef ObsoleteListApiTokensResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasTokens() const;
  inline  ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>::Reader getTokens() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::ObsoleteListApiTokensResults::Builder {
public:
  typedef ObsoleteListApiTokensResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTokens();
  inline  ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>::Builder getTokens();
  inline void setTokens( ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>::Reader value);
  inline  ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>::Builder initTokens(unsigned int size);
  inline void adoptTokens(::capnp::Orphan< ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>> disownTokens();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::ObsoleteListApiTokensResults::Pipeline {
public:
  typedef ObsoleteListApiTokensResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::ObsoleteRevokeApiTokenParams::Reader {
public:
  typedef ObsoleteRevokeApiTokenParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasTokenId() const;
  inline  ::capnp::Text::Reader getTokenId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::ObsoleteRevokeApiTokenParams::Builder {
public:
  typedef ObsoleteRevokeApiTokenParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTokenId();
  inline  ::capnp::Text::Builder getTokenId();
  inline void setTokenId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTokenId(unsigned int size);
  inline void adoptTokenId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTokenId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::ObsoleteRevokeApiTokenParams::Pipeline {
public:
  typedef ObsoleteRevokeApiTokenParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::ObsoleteRevokeApiTokenResults::Reader {
public:
  typedef ObsoleteRevokeApiTokenResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::ObsoleteRevokeApiTokenResults::Builder {
public:
  typedef ObsoleteRevokeApiTokenResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::ObsoleteRevokeApiTokenResults::Pipeline {
public:
  typedef ObsoleteRevokeApiTokenResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::ObsoleteGetIpNetworkParams::Reader {
public:
  typedef ObsoleteGetIpNetworkParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::ObsoleteGetIpNetworkParams::Builder {
public:
  typedef ObsoleteGetIpNetworkParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::ObsoleteGetIpNetworkParams::Pipeline {
public:
  typedef ObsoleteGetIpNetworkParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::ObsoleteGetIpNetworkResults::Reader {
public:
  typedef ObsoleteGetIpNetworkResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasNetwork() const;
#if !CAPNP_LITE
  inline  ::sandstorm::IpNetwork::Client getNetwork() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::ObsoleteGetIpNetworkResults::Builder {
public:
  typedef ObsoleteGetIpNetworkResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasNetwork();
#if !CAPNP_LITE
  inline  ::sandstorm::IpNetwork::Client getNetwork();
  inline void setNetwork( ::sandstorm::IpNetwork::Client&& value);
  inline void setNetwork( ::sandstorm::IpNetwork::Client& value);
  inline void adoptNetwork(::capnp::Orphan< ::sandstorm::IpNetwork>&& value);
  inline ::capnp::Orphan< ::sandstorm::IpNetwork> disownNetwork();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::ObsoleteGetIpNetworkResults::Pipeline {
public:
  typedef ObsoleteGetIpNetworkResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::IpNetwork::Client getNetwork();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::ObsoleteGetIpInterfaceParams::Reader {
public:
  typedef ObsoleteGetIpInterfaceParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::ObsoleteGetIpInterfaceParams::Builder {
public:
  typedef ObsoleteGetIpInterfaceParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::ObsoleteGetIpInterfaceParams::Pipeline {
public:
  typedef ObsoleteGetIpInterfaceParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::ObsoleteGetIpInterfaceResults::Reader {
public:
  typedef ObsoleteGetIpInterfaceResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasInterface() const;
#if !CAPNP_LITE
  inline  ::sandstorm::IpInterface::Client getInterface() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::ObsoleteGetIpInterfaceResults::Builder {
public:
  typedef ObsoleteGetIpInterfaceResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasInterface();
#if !CAPNP_LITE
  inline  ::sandstorm::IpInterface::Client getInterface();
  inline void setInterface( ::sandstorm::IpInterface::Client&& value);
  inline void setInterface( ::sandstorm::IpInterface::Client& value);
  inline void adoptInterface(::capnp::Orphan< ::sandstorm::IpInterface>&& value);
  inline ::capnp::Orphan< ::sandstorm::IpInterface> disownInterface();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::ObsoleteGetIpInterfaceResults::Pipeline {
public:
  typedef ObsoleteGetIpInterfaceResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::IpInterface::Client getInterface();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::GetUiViewForEndpointParams::Reader {
public:
  typedef GetUiViewForEndpointParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasUrl() const;
  inline  ::capnp::Text::Reader getUrl() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::GetUiViewForEndpointParams::Builder {
public:
  typedef GetUiViewForEndpointParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUrl();
  inline  ::capnp::Text::Builder getUrl();
  inline void setUrl( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUrl(unsigned int size);
  inline void adoptUrl(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUrl();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::GetUiViewForEndpointParams::Pipeline {
public:
  typedef GetUiViewForEndpointParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HackSessionContext::GetUiViewForEndpointResults::Reader {
public:
  typedef GetUiViewForEndpointResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasView() const;
#if !CAPNP_LITE
  inline  ::sandstorm::UiView::Client getView() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HackSessionContext::GetUiViewForEndpointResults::Builder {
public:
  typedef GetUiViewForEndpointResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasView();
#if !CAPNP_LITE
  inline  ::sandstorm::UiView::Client getView();
  inline void setView( ::sandstorm::UiView::Client&& value);
  inline void setView( ::sandstorm::UiView::Client& value);
  inline void adoptView(::capnp::Orphan< ::sandstorm::UiView>&& value);
  inline ::capnp::Orphan< ::sandstorm::UiView> disownView();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HackSessionContext::GetUiViewForEndpointResults::Pipeline {
public:
  typedef GetUiViewForEndpointResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::sandstorm::UiView::Client getView();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class HackEmailSession::Client
    : public virtual ::capnp::Capability::Client,
      public virtual  ::sandstorm::UiSession::Client,
      public virtual  ::sandstorm::EmailSendPort::Client {
public:
  typedef HackEmailSession Calls;
  typedef HackEmailSession Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);


protected:
  Client() = default;
};

class HackEmailSession::Server
    : public virtual ::capnp::Capability::Server,
      public virtual  ::sandstorm::UiSession::Server,
      public virtual  ::sandstorm::EmailSendPort::Server {
public:
  typedef HackEmailSession Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:

  inline  ::sandstorm::HackEmailSession::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::sandstorm::HackEmailSession>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
inline HackSessionContext::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline HackSessionContext::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline HackSessionContext::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline HackSessionContext::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline HackSessionContext::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::HackSessionContext::Client& HackSessionContext::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::HackSessionContext::Client& HackSessionContext::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool HackSessionContext::TokenInfo::Reader::hasTokenId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::TokenInfo::Builder::hasTokenId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HackSessionContext::TokenInfo::Reader::getTokenId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HackSessionContext::TokenInfo::Builder::getTokenId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void HackSessionContext::TokenInfo::Builder::setTokenId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HackSessionContext::TokenInfo::Builder::initTokenId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void HackSessionContext::TokenInfo::Builder::adoptTokenId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HackSessionContext::TokenInfo::Builder::disownTokenId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool HackSessionContext::TokenInfo::Reader::hasPetname() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::TokenInfo::Builder::hasPetname() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HackSessionContext::TokenInfo::Reader::getPetname() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HackSessionContext::TokenInfo::Builder::getPetname() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void HackSessionContext::TokenInfo::Builder::setPetname( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HackSessionContext::TokenInfo::Builder::initPetname(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void HackSessionContext::TokenInfo::Builder::adoptPetname(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HackSessionContext::TokenInfo::Builder::disownPetname() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool HackSessionContext::TokenInfo::Reader::hasUserInfo() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::TokenInfo::Builder::hasUserInfo() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::UserInfo::Reader HackSessionContext::TokenInfo::Reader::getUserInfo() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::sandstorm::UserInfo::Builder HackSessionContext::TokenInfo::Builder::getUserInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::UserInfo::Pipeline HackSessionContext::TokenInfo::Pipeline::getUserInfo() {
  return  ::sandstorm::UserInfo::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void HackSessionContext::TokenInfo::Builder::setUserInfo( ::sandstorm::UserInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::UserInfo::Builder HackSessionContext::TokenInfo::Builder::initUserInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void HackSessionContext::TokenInfo::Builder::adoptUserInfo(
    ::capnp::Orphan< ::sandstorm::UserInfo>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::UserInfo> HackSessionContext::TokenInfo::Builder::disownUserInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool HackSessionContext::GetPublicIdResults::Reader::hasPublicId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::GetPublicIdResults::Builder::hasPublicId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HackSessionContext::GetPublicIdResults::Reader::getPublicId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HackSessionContext::GetPublicIdResults::Builder::getPublicId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void HackSessionContext::GetPublicIdResults::Builder::setPublicId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HackSessionContext::GetPublicIdResults::Builder::initPublicId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void HackSessionContext::GetPublicIdResults::Builder::adoptPublicId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HackSessionContext::GetPublicIdResults::Builder::disownPublicId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool HackSessionContext::GetPublicIdResults::Reader::hasHostname() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::GetPublicIdResults::Builder::hasHostname() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HackSessionContext::GetPublicIdResults::Reader::getHostname() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HackSessionContext::GetPublicIdResults::Builder::getHostname() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void HackSessionContext::GetPublicIdResults::Builder::setHostname( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HackSessionContext::GetPublicIdResults::Builder::initHostname(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void HackSessionContext::GetPublicIdResults::Builder::adoptHostname(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HackSessionContext::GetPublicIdResults::Builder::disownHostname() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool HackSessionContext::GetPublicIdResults::Reader::hasAutoUrl() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::GetPublicIdResults::Builder::hasAutoUrl() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HackSessionContext::GetPublicIdResults::Reader::getAutoUrl() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HackSessionContext::GetPublicIdResults::Builder::getAutoUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void HackSessionContext::GetPublicIdResults::Builder::setAutoUrl( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HackSessionContext::GetPublicIdResults::Builder::initAutoUrl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void HackSessionContext::GetPublicIdResults::Builder::adoptAutoUrl(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HackSessionContext::GetPublicIdResults::Builder::disownAutoUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool HackSessionContext::GetPublicIdResults::Reader::getIsDemoUser() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool HackSessionContext::GetPublicIdResults::Builder::getIsDemoUser() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void HackSessionContext::GetPublicIdResults::Builder::setIsDemoUser(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool HackSessionContext::HttpGetParams::Reader::hasUrl() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::HttpGetParams::Builder::hasUrl() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HackSessionContext::HttpGetParams::Reader::getUrl() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HackSessionContext::HttpGetParams::Builder::getUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void HackSessionContext::HttpGetParams::Builder::setUrl( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HackSessionContext::HttpGetParams::Builder::initUrl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void HackSessionContext::HttpGetParams::Builder::adoptUrl(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HackSessionContext::HttpGetParams::Builder::disownUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool HackSessionContext::HttpGetResults::Reader::hasMimeType() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::HttpGetResults::Builder::hasMimeType() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HackSessionContext::HttpGetResults::Reader::getMimeType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HackSessionContext::HttpGetResults::Builder::getMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void HackSessionContext::HttpGetResults::Builder::setMimeType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HackSessionContext::HttpGetResults::Builder::initMimeType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void HackSessionContext::HttpGetResults::Builder::adoptMimeType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HackSessionContext::HttpGetResults::Builder::disownMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool HackSessionContext::HttpGetResults::Reader::hasContent() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::HttpGetResults::Builder::hasContent() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader HackSessionContext::HttpGetResults::Reader::getContent() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder HackSessionContext::HttpGetResults::Builder::getContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void HackSessionContext::HttpGetResults::Builder::setContent( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder HackSessionContext::HttpGetResults::Builder::initContent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void HackSessionContext::HttpGetResults::Builder::adoptContent(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> HackSessionContext::HttpGetResults::Builder::disownContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool HackSessionContext::ObsoleteGenerateApiTokenParams::Reader::hasPetname() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::ObsoleteGenerateApiTokenParams::Builder::hasPetname() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HackSessionContext::ObsoleteGenerateApiTokenParams::Reader::getPetname() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HackSessionContext::ObsoleteGenerateApiTokenParams::Builder::getPetname() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void HackSessionContext::ObsoleteGenerateApiTokenParams::Builder::setPetname( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HackSessionContext::ObsoleteGenerateApiTokenParams::Builder::initPetname(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void HackSessionContext::ObsoleteGenerateApiTokenParams::Builder::adoptPetname(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HackSessionContext::ObsoleteGenerateApiTokenParams::Builder::disownPetname() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool HackSessionContext::ObsoleteGenerateApiTokenParams::Reader::hasUserInfo() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::ObsoleteGenerateApiTokenParams::Builder::hasUserInfo() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::sandstorm::UserInfo::Reader HackSessionContext::ObsoleteGenerateApiTokenParams::Reader::getUserInfo() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::sandstorm::UserInfo::Builder HackSessionContext::ObsoleteGenerateApiTokenParams::Builder::getUserInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::sandstorm::UserInfo::Pipeline HackSessionContext::ObsoleteGenerateApiTokenParams::Pipeline::getUserInfo() {
  return  ::sandstorm::UserInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void HackSessionContext::ObsoleteGenerateApiTokenParams::Builder::setUserInfo( ::sandstorm::UserInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::sandstorm::UserInfo::Builder HackSessionContext::ObsoleteGenerateApiTokenParams::Builder::initUserInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void HackSessionContext::ObsoleteGenerateApiTokenParams::Builder::adoptUserInfo(
    ::capnp::Orphan< ::sandstorm::UserInfo>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::UserInfo> HackSessionContext::ObsoleteGenerateApiTokenParams::Builder::disownUserInfo() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UserInfo>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint64_t HackSessionContext::ObsoleteGenerateApiTokenParams::Reader::getExpires() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t HackSessionContext::ObsoleteGenerateApiTokenParams::Builder::getExpires() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void HackSessionContext::ObsoleteGenerateApiTokenParams::Builder::setExpires( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool HackSessionContext::ObsoleteGenerateApiTokenResults::Reader::hasToken() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::hasToken() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HackSessionContext::ObsoleteGenerateApiTokenResults::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::setToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool HackSessionContext::ObsoleteGenerateApiTokenResults::Reader::hasEndpointUrl() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::hasEndpointUrl() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HackSessionContext::ObsoleteGenerateApiTokenResults::Reader::getEndpointUrl() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::getEndpointUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::setEndpointUrl( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::initEndpointUrl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::adoptEndpointUrl(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::disownEndpointUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool HackSessionContext::ObsoleteGenerateApiTokenResults::Reader::hasTokenId() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::hasTokenId() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HackSessionContext::ObsoleteGenerateApiTokenResults::Reader::getTokenId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::getTokenId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::setTokenId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::initTokenId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::adoptTokenId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HackSessionContext::ObsoleteGenerateApiTokenResults::Builder::disownTokenId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool HackSessionContext::ObsoleteListApiTokensResults::Reader::hasTokens() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::ObsoleteListApiTokensResults::Builder::hasTokens() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>::Reader HackSessionContext::ObsoleteListApiTokensResults::Reader::getTokens() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>::Builder HackSessionContext::ObsoleteListApiTokensResults::Builder::getTokens() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void HackSessionContext::ObsoleteListApiTokensResults::Builder::setTokens( ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>::Builder HackSessionContext::ObsoleteListApiTokensResults::Builder::initTokens(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void HackSessionContext::ObsoleteListApiTokensResults::Builder::adoptTokens(
    ::capnp::Orphan< ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>> HackSessionContext::ObsoleteListApiTokensResults::Builder::disownTokens() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::sandstorm::HackSessionContext::TokenInfo>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool HackSessionContext::ObsoleteRevokeApiTokenParams::Reader::hasTokenId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::ObsoleteRevokeApiTokenParams::Builder::hasTokenId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HackSessionContext::ObsoleteRevokeApiTokenParams::Reader::getTokenId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HackSessionContext::ObsoleteRevokeApiTokenParams::Builder::getTokenId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void HackSessionContext::ObsoleteRevokeApiTokenParams::Builder::setTokenId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HackSessionContext::ObsoleteRevokeApiTokenParams::Builder::initTokenId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void HackSessionContext::ObsoleteRevokeApiTokenParams::Builder::adoptTokenId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HackSessionContext::ObsoleteRevokeApiTokenParams::Builder::disownTokenId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool HackSessionContext::ObsoleteGetIpNetworkResults::Reader::hasNetwork() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::ObsoleteGetIpNetworkResults::Builder::hasNetwork() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::IpNetwork::Client HackSessionContext::ObsoleteGetIpNetworkResults::Reader::getNetwork() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::IpNetwork>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::IpNetwork::Client HackSessionContext::ObsoleteGetIpNetworkResults::Builder::getNetwork() {
  return ::capnp::_::PointerHelpers< ::sandstorm::IpNetwork>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::IpNetwork::Client HackSessionContext::ObsoleteGetIpNetworkResults::Pipeline::getNetwork() {
  return  ::sandstorm::IpNetwork::Client(_typeless.getPointerField(0).asCap());
}
inline void HackSessionContext::ObsoleteGetIpNetworkResults::Builder::setNetwork( ::sandstorm::IpNetwork::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::IpNetwork>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void HackSessionContext::ObsoleteGetIpNetworkResults::Builder::setNetwork( ::sandstorm::IpNetwork::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::IpNetwork>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void HackSessionContext::ObsoleteGetIpNetworkResults::Builder::adoptNetwork(
    ::capnp::Orphan< ::sandstorm::IpNetwork>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::IpNetwork>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::IpNetwork> HackSessionContext::ObsoleteGetIpNetworkResults::Builder::disownNetwork() {
  return ::capnp::_::PointerHelpers< ::sandstorm::IpNetwork>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool HackSessionContext::ObsoleteGetIpInterfaceResults::Reader::hasInterface() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::ObsoleteGetIpInterfaceResults::Builder::hasInterface() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::IpInterface::Client HackSessionContext::ObsoleteGetIpInterfaceResults::Reader::getInterface() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::IpInterface>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::IpInterface::Client HackSessionContext::ObsoleteGetIpInterfaceResults::Builder::getInterface() {
  return ::capnp::_::PointerHelpers< ::sandstorm::IpInterface>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::IpInterface::Client HackSessionContext::ObsoleteGetIpInterfaceResults::Pipeline::getInterface() {
  return  ::sandstorm::IpInterface::Client(_typeless.getPointerField(0).asCap());
}
inline void HackSessionContext::ObsoleteGetIpInterfaceResults::Builder::setInterface( ::sandstorm::IpInterface::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::IpInterface>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void HackSessionContext::ObsoleteGetIpInterfaceResults::Builder::setInterface( ::sandstorm::IpInterface::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::IpInterface>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void HackSessionContext::ObsoleteGetIpInterfaceResults::Builder::adoptInterface(
    ::capnp::Orphan< ::sandstorm::IpInterface>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::IpInterface>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::IpInterface> HackSessionContext::ObsoleteGetIpInterfaceResults::Builder::disownInterface() {
  return ::capnp::_::PointerHelpers< ::sandstorm::IpInterface>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool HackSessionContext::GetUiViewForEndpointParams::Reader::hasUrl() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::GetUiViewForEndpointParams::Builder::hasUrl() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HackSessionContext::GetUiViewForEndpointParams::Reader::getUrl() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HackSessionContext::GetUiViewForEndpointParams::Builder::getUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void HackSessionContext::GetUiViewForEndpointParams::Builder::setUrl( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HackSessionContext::GetUiViewForEndpointParams::Builder::initUrl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void HackSessionContext::GetUiViewForEndpointParams::Builder::adoptUrl(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HackSessionContext::GetUiViewForEndpointParams::Builder::disownUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool HackSessionContext::GetUiViewForEndpointResults::Reader::hasView() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool HackSessionContext::GetUiViewForEndpointResults::Builder::hasView() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::sandstorm::UiView::Client HackSessionContext::GetUiViewForEndpointResults::Reader::getView() const {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::UiView::Client HackSessionContext::GetUiViewForEndpointResults::Builder::getView() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::sandstorm::UiView::Client HackSessionContext::GetUiViewForEndpointResults::Pipeline::getView() {
  return  ::sandstorm::UiView::Client(_typeless.getPointerField(0).asCap());
}
inline void HackSessionContext::GetUiViewForEndpointResults::Builder::setView( ::sandstorm::UiView::Client&& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(cap));
}
inline void HackSessionContext::GetUiViewForEndpointResults::Builder::setView( ::sandstorm::UiView::Client& cap) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), cap);
}
inline void HackSessionContext::GetUiViewForEndpointResults::Builder::adoptView(
    ::capnp::Orphan< ::sandstorm::UiView>&& value) {
  ::capnp::_::PointerHelpers< ::sandstorm::UiView>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::sandstorm::UiView> HackSessionContext::GetUiViewForEndpointResults::Builder::disownView() {
  return ::capnp::_::PointerHelpers< ::sandstorm::UiView>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
inline HackEmailSession::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline HackEmailSession::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline HackEmailSession::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline HackEmailSession::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline HackEmailSession::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::sandstorm::HackEmailSession::Client& HackEmailSession::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::sandstorm::HackEmailSession::Client& HackEmailSession::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
}  // namespace

#endif  // CAPNP_INCLUDED_bf6889795837d1e0_
